
HSS_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020a78  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004064  08020d18  08020d18  00030d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024d7c  08024d7c  00040098  2**0
                  CONTENTS
  4 .ARM          00000000  08024d7c  08024d7c  00040098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08024d7c  08024d7c  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08024d7c  08024d7c  00034d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08024d84  08024d84  00034d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  08024d8c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010008  24000098  08024e24  00040098  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  240100a0  08024e24  000400a0  2**0
                  ALLOC
 11 .lwip_sec     00024b83  30020000  30020000  00050000  2**2
                  ALLOC
 12 .openamp_section 00000000  38000000  38000000  00040098  2**0
                  CONTENTS
 13 .ARM.attributes 0000002e  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00059e2c  00000000  00000000  000400c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a8a6  00000000  00000000  00099ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002d78  00000000  00000000  000a4798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002b10  00000000  00000000  000a7510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0005a7dd  00000000  00000000  000aa020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b9a4  00000000  00000000  001047fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001dd749  00000000  00000000  001501a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0032d8ea  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d8c8  00000000  00000000  0032d93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08020d00 	.word	0x08020d00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08020d00 	.word	0x08020d00

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	; (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	; (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	; (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	; (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	; (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	; (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	; (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	; (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	; (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	; (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	; (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	; (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	; (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	; (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	; (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <_Z10DebugDrivev>:
/*NOTICE*/
/*We will use only USART1 for debugging*/

//for uart1 debug
void DebugDrive()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	int cmd = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
	int cmd1 = str;
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <_Z10DebugDrivev+0x8c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	603b      	str	r3, [r7, #0]

	if (cmd1 != 0) cmd = cmd1;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <_Z10DebugDrivev+0x1a>
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	607b      	str	r3, [r7, #4]

	switch(cmd)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b64      	cmp	r3, #100	; 0x64
 80004da:	d022      	beq.n	8000522 <_Z10DebugDrivev+0x66>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b64      	cmp	r3, #100	; 0x64
 80004e0:	dc29      	bgt.n	8000536 <_Z10DebugDrivev+0x7a>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b03      	cmp	r3, #3
 80004e6:	d010      	beq.n	800050a <_Z10DebugDrivev+0x4e>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	dc23      	bgt.n	8000536 <_Z10DebugDrivev+0x7a>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d003      	beq.n	80004fc <_Z10DebugDrivev+0x40>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d003      	beq.n	8000502 <_Z10DebugDrivev+0x46>

			  HAL_NVIC_SystemReset();

			break;

		default: break;
 80004fa:	e01c      	b.n	8000536 <_Z10DebugDrivev+0x7a>
		case 1: FatFsInit(); break;
 80004fc:	f000 f968 	bl	80007d0 <FatFsInit>
 8000500:	e01a      	b.n	8000538 <_Z10DebugDrivev+0x7c>
		case 2: FatFsTest("test.txt"); break;
 8000502:	4812      	ldr	r0, [pc, #72]	; (800054c <_Z10DebugDrivev+0x90>)
 8000504:	f000 f992 	bl	800082c <FatFsTest>
 8000508:	e016      	b.n	8000538 <_Z10DebugDrivev+0x7c>
		case 3: SDCard_Write("test.txt", eth_data_.c_str());
 800050a:	4811      	ldr	r0, [pc, #68]	; (8000550 <_Z10DebugDrivev+0x94>)
 800050c:	f01f f827 	bl	801f55e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000510:	4603      	mov	r3, r0
 8000512:	4619      	mov	r1, r3
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <_Z10DebugDrivev+0x90>)
 8000516:	f000 fadd 	bl	8000ad4 <SDCard_Write>
				eth_data_.clear();
 800051a:	480d      	ldr	r0, [pc, #52]	; (8000550 <_Z10DebugDrivev+0x94>)
 800051c:	f01f f81a 	bl	801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
			break;
 8000520:	e00a      	b.n	8000538 <_Z10DebugDrivev+0x7c>
			  printf("Firmware will be rebooted in 3 senconds.\r\n");
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <_Z10DebugDrivev+0x98>)
 8000524:	f01f fe76 	bl	8020214 <puts>
			  HAL_Delay(3000);
 8000528:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800052c:	f001 fb1c 	bl	8001b68 <HAL_Delay>
			  HAL_NVIC_SystemReset();
 8000530:	f001 fc55 	bl	8001dde <HAL_NVIC_SystemReset>
			break;
 8000534:	e000      	b.n	8000538 <_Z10DebugDrivev+0x7c>
		default: break;
 8000536:	bf00      	nop
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <_Z10DebugDrivev+0x8c>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
	memset(&str, '\0', sizeof(str));

	//memset(&str1_, '\0', sizeof(str1_));
	//memset(&str3_, '\0', sizeof(str3_));
	//memset(&char_ethernet, '\0', sizeof(char_ethernet));
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	240000b4 	.word	0x240000b4
 800054c:	08020d18 	.word	0x08020d18
 8000550:	240008d0 	.word	0x240008d0
 8000554:	08020d24 	.word	0x08020d24

08000558 <_ZL18StartTCPServerTaskPKv>:
/*-----------------------------------------------------------------------------------*/


/**** Send RESPONSE every time the client sends some data ******/
static void StartTCPServerTask(void const *arg)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
	err_t err, accept_err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	2010      	movs	r0, #16
 8000566:	f011 fbb9 	bl	8011cdc <netconn_new_with_proto_and_callback>
 800056a:	4603      	mov	r3, r0
 800056c:	4a45      	ldr	r2, [pc, #276]	; (8000684 <_ZL18StartTCPServerTaskPKv+0x12c>)
 800056e:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8000570:	4b44      	ldr	r3, [pc, #272]	; (8000684 <_ZL18StartTCPServerTaskPKv+0x12c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d07e      	beq.n	8000676 <_ZL18StartTCPServerTaskPKv+0x11e>
	{
		/* Bind connection to the server port. */
		err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 8000578:	4b42      	ldr	r3, [pc, #264]	; (8000684 <_ZL18StartTCPServerTaskPKv+0x12c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	220a      	movs	r2, #10
 800057e:	4942      	ldr	r1, [pc, #264]	; (8000688 <_ZL18StartTCPServerTaskPKv+0x130>)
 8000580:	4618      	mov	r0, r3
 8000582:	f011 fc65 	bl	8011e50 <netconn_bind>
 8000586:	4603      	mov	r3, r0
 8000588:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 800058a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d16c      	bne.n	800066c <_ZL18StartTCPServerTaskPKv+0x114>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8000592:	4b3c      	ldr	r3, [pc, #240]	; (8000684 <_ZL18StartTCPServerTaskPKv+0x12c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	21ff      	movs	r1, #255	; 0xff
 8000598:	4618      	mov	r0, r3
 800059a:	f011 fc91 	bl	8011ec0 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 800059e:	4b39      	ldr	r3, [pc, #228]	; (8000684 <_ZL18StartTCPServerTaskPKv+0x12c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	493a      	ldr	r1, [pc, #232]	; (800068c <_ZL18StartTCPServerTaskPKv+0x134>)
 80005a4:	4618      	mov	r0, r3
 80005a6:	f011 fcb7 	bl	8011f18 <netconn_accept>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 80005ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f3      	bne.n	800059e <_ZL18StartTCPServerTaskPKv+0x46>
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 80005b6:	4b35      	ldr	r3, [pc, #212]	; (800068c <_ZL18StartTCPServerTaskPKv+0x134>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4935      	ldr	r1, [pc, #212]	; (8000690 <_ZL18StartTCPServerTaskPKv+0x138>)
 80005bc:	4618      	mov	r0, r3
 80005be:	f011 feb3 	bl	8012328 <netconn_recv>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf0c      	ite	eq
 80005c8:	2301      	moveq	r3, #1
 80005ca:	2300      	movne	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d041      	beq.n	8000656 <_ZL18StartTCPServerTaskPKv+0xfe>
					{
						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <_ZL18StartTCPServerTaskPKv+0x138>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3308      	adds	r3, #8
 80005d8:	4a2e      	ldr	r2, [pc, #184]	; (8000694 <_ZL18StartTCPServerTaskPKv+0x13c>)
 80005da:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 80005dc:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <_ZL18StartTCPServerTaskPKv+0x138>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	899a      	ldrh	r2, [r3, #12]
 80005e2:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <_ZL18StartTCPServerTaskPKv+0x140>)
 80005e4:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{
							strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <_ZL18StartTCPServerTaskPKv+0x138>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6859      	ldr	r1, [r3, #4]
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <_ZL18StartTCPServerTaskPKv+0x138>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	895b      	ldrh	r3, [r3, #10]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <_ZL18StartTCPServerTaskPKv+0x144>)
 80005fa:	f01f ff7f 	bl	80204fc <strncpy>

							//for test debug
							//strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client


							TcpServerRecvBuffer(msg);
 80005fe:	4827      	ldr	r0, [pc, #156]	; (800069c <_ZL18StartTCPServerTaskPKv+0x144>)
 8000600:	f000 f852 	bl	80006a8 <TcpServerRecvBuffer>
							TcpServerParsingSeq();

							*/
							// Or modify the message received, so that we can send it back to the client
							//response
							int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <_ZL18StartTCPServerTaskPKv+0x144>)
 8000606:	4926      	ldr	r1, [pc, #152]	; (80006a0 <_ZL18StartTCPServerTaskPKv+0x148>)
 8000608:	4826      	ldr	r0, [pc, #152]	; (80006a4 <_ZL18StartTCPServerTaskPKv+0x14c>)
 800060a:	f01f ff07 	bl	802041c <siprintf>
 800060e:	60b8      	str	r0, [r7, #8]

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <_ZL18StartTCPServerTaskPKv+0x134>)
 8000612:	6818      	ldr	r0, [r3, #0]
 8000614:	68ba      	ldr	r2, [r7, #8]
 8000616:	2300      	movs	r3, #0
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	4921      	ldr	r1, [pc, #132]	; (80006a4 <_ZL18StartTCPServerTaskPKv+0x14c>)
 800061e:	f011 fefd 	bl	801241c <netconn_write_partly>

							memset (msg, '\0', sizeof(msg));  // clear the buffer
 8000622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000626:	2100      	movs	r1, #0
 8000628:	481c      	ldr	r0, [pc, #112]	; (800069c <_ZL18StartTCPServerTaskPKv+0x144>)
 800062a:	f01f f997 	bl	801f95c <memset>
						}
						while (netbuf_next(buf) >0);
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <_ZL18StartTCPServerTaskPKv+0x138>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f016 fd22 	bl	801707c <netbuf_next>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	bfcc      	ite	gt
 800063e:	2301      	movgt	r3, #1
 8000640:	2300      	movle	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d000      	beq.n	800064a <_ZL18StartTCPServerTaskPKv+0xf2>
						do
 8000648:	e7cd      	b.n	80005e6 <_ZL18StartTCPServerTaskPKv+0x8e>

						netbuf_delete(buf);
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <_ZL18StartTCPServerTaskPKv+0x138>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f016 fcf4 	bl	801703c <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000654:	e7af      	b.n	80005b6 <_ZL18StartTCPServerTaskPKv+0x5e>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <_ZL18StartTCPServerTaskPKv+0x134>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f011 ffe0 	bl	8012620 <netconn_close>
					netconn_delete(newconn);
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <_ZL18StartTCPServerTaskPKv+0x134>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f011 fbd7 	bl	8011e18 <netconn_delete>
				}
			}
 800066a:	e798      	b.n	800059e <_ZL18StartTCPServerTaskPKv+0x46>
		}
		else
		{
			netconn_delete(conn);
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <_ZL18StartTCPServerTaskPKv+0x12c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f011 fbd1 	bl	8011e18 <netconn_delete>
		}
	}
	vTaskDelete(NULL);
 8000676:	2000      	movs	r0, #0
 8000678:	f010 fb6a 	bl	8010d50 <vTaskDelete>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	240000b8 	.word	0x240000b8
 8000688:	08024ad4 	.word	0x08024ad4
 800068c:	240000bc 	.word	0x240000bc
 8000690:	240000c0 	.word	0x240000c0
 8000694:	240008c4 	.word	0x240008c4
 8000698:	240008c8 	.word	0x240008c8
 800069c:	240000c4 	.word	0x240000c4
 80006a0:	08020d60 	.word	0x08020d60
 80006a4:	240004c4 	.word	0x240004c4

080006a8 <TcpServerRecvBuffer>:

	  return;
}

void TcpServerRecvBuffer(const char *data)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	std::string sring_buf_(data);
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4618      	mov	r0, r3
 80006b6:	f01e fed3 	bl	801f460 <_ZNSaIcEC1Ev>
 80006ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f01e ff71 	bl	801f5ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f01e fec7 	bl	801f462 <_ZNSaIcED1Ev>

	eth_data_ = sring_buf_;
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <TcpServerRecvBuffer+0x4c>)
 80006dc:	f01e ff34 	bl	801f548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>

	return;
 80006e0:	bf00      	nop
	std::string sring_buf_(data);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4618      	mov	r0, r3
 80006e8:	f01e ff28 	bl	801f53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return;
 80006ec:	bf00      	nop
}
 80006ee:	3728      	adds	r7, #40	; 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240008d0 	.word	0x240008d0

080006f8 <TcpServerInit>:
	return;
}


void TcpServerInit(void)
{
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
	if(newconn == NULL)
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <TcpServerInit+0x38>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d110      	bne.n	8000728 <TcpServerInit+0x30>
	{
		/* definition and creation of TCPServerTask */
		osThreadDef(TCPServerTask, StartTCPServerTask, osPriorityNormal, 0, DEFAULT_THREAD_STACKSIZE);
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <TcpServerInit+0x3c>)
 8000708:	1d3c      	adds	r4, r7, #4
 800070a:	461d      	mov	r5, r3
 800070c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		TcpServerHandle = osThreadCreate(osThread(TCPServerTask), NULL);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f00e f9eb 	bl	800eaf8 <osThreadCreate>
 8000722:	4603      	mov	r3, r0
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <TcpServerInit+0x40>)
 8000726:	6013      	str	r3, [r2, #0]
	}
}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bdb0      	pop	{r4, r5, r7, pc}
 8000730:	240000bc 	.word	0x240000bc
 8000734:	08020d80 	.word	0x08020d80
 8000738:	240008cc 	.word	0x240008cc

0800073c <_Z41__static_initialization_and_destruction_0ii>:
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d107      	bne.n	800075c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000752:	4293      	cmp	r3, r2
 8000754:	d102      	bne.n	800075c <_Z41__static_initialization_and_destruction_0ii+0x20>
std::string eth_data_;
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000758:	f01e fee9 	bl	801f52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d107      	bne.n	8000772 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000768:	4293      	cmp	r3, r2
 800076a:	d102      	bne.n	8000772 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800076e:	f01e fee5 	bl	801f53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	240008d0 	.word	0x240008d0

08000780 <_GLOBAL__sub_I_TcpServerHandle>:
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
 8000784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff ffd7 	bl	800073c <_Z41__static_initialization_and_destruction_0ii>
 800078e:	bd80      	pop	{r7, pc}

08000790 <_GLOBAL__sub_D_TcpServerHandle>:
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
 8000794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff ffcf 	bl	800073c <_Z41__static_initialization_and_destruction_0ii>
 800079e:	bd80      	pop	{r7, pc}

080007a0 <BSPInit>:

static bool is_init_ = false;
char workBuffer[FF_MAX_SS];

static void BSPInit()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	if(!(is_init_)) BSP_SD_Init();
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <BSPInit+0x2c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <BSPInit+0x16>
 80007b2:	f00a f94f 	bl	800aa54 <BSP_SD_Init>

	if(BSP_SD_IsDetected()) is_init_ = true;
 80007b6:	f00a f9d9 	bl	800ab6c <BSP_SD_IsDetected>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <BSPInit+0x28>
 80007c0:	4b02      	ldr	r3, [pc, #8]	; (80007cc <BSPInit+0x2c>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]

	return;
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
}
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	24000d44 	.word	0x24000d44

080007d0 <FatFsInit>:



void FatFsInit()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80007d6:	4911      	ldr	r1, [pc, #68]	; (800081c <FatFsInit+0x4c>)
 80007d8:	4811      	ldr	r0, [pc, #68]	; (8000820 <FatFsInit+0x50>)
 80007da:	f00e f931 	bl	800ea40 <FATFS_LinkDriver>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d115      	bne.n	8000810 <FatFsInit+0x40>
	{
		BSPInit();
 80007e4:	f7ff ffdc 	bl	80007a0 <BSPInit>

		if(BSP_SD_IsDetected())
 80007e8:	f00a f9c0 	bl	800ab6c <BSP_SD_IsDetected>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d00e      	beq.n	8000810 <FatFsInit+0x40>
		{
			FRESULT res;

			res = f_mkfs(SDPath, 0, workBuffer, sizeof(workBuffer));
 80007f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <FatFsInit+0x54>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <FatFsInit+0x4c>)
 80007fc:	f00d fc98 	bl	800e130 <f_mkfs>
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]

			if(res != FR_OK) return; // Error_Handler();
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d104      	bne.n	8000814 <FatFsInit+0x44>

			printf("Successfully formatted\n");
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <FatFsInit+0x58>)
 800080c:	f01f fd02 	bl	8020214 <puts>
		}

	}

	return;
 8000810:	bf00      	nop
 8000812:	e000      	b.n	8000816 <FatFsInit+0x46>
			if(res != FR_OK) return; // Error_Handler();
 8000814:	bf00      	nop
}
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	24000d40 	.word	0x24000d40
 8000820:	08024a70 	.word	0x08024a70
 8000824:	24000d48 	.word	0x24000d48
 8000828:	08020d9c 	.word	0x08020d9c

0800082c <FatFsTest>:



void FatFsTest(const char *filename)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0c6      	sub	sp, #280	; 0x118
 8000830:	af00      	add	r7, sp, #0
 8000832:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000836:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800083a:	6018      	str	r0, [r3, #0]
  FRESULT res;
  uint32_t written_bytes=0 ,read_bytes= 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  char buf[50];
  char readbuf[200] =  {0.};
 8000848:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800084c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	3304      	adds	r3, #4
 8000856:	22c4      	movs	r2, #196	; 0xc4
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f01f f87e 	bl	801f95c <memset>

  int total_byte_ = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  const char *p = "FatFs example for STM32F747i-Dicovery!\r\n";
 8000866:	4b8a      	ldr	r3, [pc, #552]	; (8000a90 <FatFsTest+0x264>)
 8000868:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;
 800086c:	2201      	movs	r2, #1
 800086e:	4989      	ldr	r1, [pc, #548]	; (8000a94 <FatFsTest+0x268>)
 8000870:	4889      	ldr	r0, [pc, #548]	; (8000a98 <FatFsTest+0x26c>)
 8000872:	f00c fe2d 	bl	800d4d0 <f_mount>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	f040 8104 	bne.w	8000a86 <FatFsTest+0x25a>

  res = f_open(&SDFile, (const char*)filename, FA_CREATE_ALWAYS | FA_WRITE);
 800087e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000882:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000886:	220a      	movs	r2, #10
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	4884      	ldr	r0, [pc, #528]	; (8000a9c <FatFsTest+0x270>)
 800088c:	f00c fe6a 	bl	800d564 <f_open>
 8000890:	4603      	mov	r3, r0
 8000892:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  //res = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);

  if(res == FR_OK){
 8000896:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 80ec 	bne.w	8000a78 <FatFsTest+0x24c>
    sprintf(buf, "%s\r\n", p);
 80008a0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80008a4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80008a8:	497d      	ldr	r1, [pc, #500]	; (8000aa0 <FatFsTest+0x274>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f01f fdb6 	bl	802041c <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 80008b0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fd63 	bl	8000380 <strlen>
 80008ba:	4602      	mov	r2, r0
 80008bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008c0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80008c4:	4875      	ldr	r0, [pc, #468]	; (8000a9c <FatFsTest+0x270>)
 80008c6:	f00d f908 	bl	800dada <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80008ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008ce:	4619      	mov	r1, r3
 80008d0:	4874      	ldr	r0, [pc, #464]	; (8000aa4 <FatFsTest+0x278>)
 80008d2:	f01f fc19 	bl	8020108 <iprintf>

    total_byte_ += written_bytes;
 80008d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80008da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008de:	4413      	add	r3, r2
 80008e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "Filename : %s\r\n", filename);
 80008e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80008e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80008ec:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	496d      	ldr	r1, [pc, #436]	; (8000aa8 <FatFsTest+0x27c>)
 80008f4:	f01f fd92 	bl	802041c <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 80008f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fd3f 	bl	8000380 <strlen>
 8000902:	4602      	mov	r2, r0
 8000904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000908:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800090c:	4863      	ldr	r0, [pc, #396]	; (8000a9c <FatFsTest+0x270>)
 800090e:	f00d f8e4 	bl	800dada <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 8000912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000916:	4619      	mov	r1, r3
 8000918:	4862      	ldr	r0, [pc, #392]	; (8000aa4 <FatFsTest+0x278>)
 800091a:	f01f fbf5 	bl	8020108 <iprintf>

    total_byte_ += written_bytes;
 800091e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000922:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000926:	4413      	add	r3, r2
 8000928:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "Tick : %ld\r\n", HAL_GetTick());
 800092c:	f001 f910 	bl	8001b50 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000936:	495d      	ldr	r1, [pc, #372]	; (8000aac <FatFsTest+0x280>)
 8000938:	4618      	mov	r0, r3
 800093a:	f01f fd6f 	bl	802041c <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 800093e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fd1c 	bl	8000380 <strlen>
 8000948:	4602      	mov	r2, r0
 800094a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800094e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000952:	4852      	ldr	r0, [pc, #328]	; (8000a9c <FatFsTest+0x270>)
 8000954:	f00d f8c1 	bl	800dada <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 8000958:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800095c:	4619      	mov	r1, r3
 800095e:	4851      	ldr	r0, [pc, #324]	; (8000aa4 <FatFsTest+0x278>)
 8000960:	f01f fbd2 	bl	8020108 <iprintf>

    total_byte_ += written_bytes;
 8000964:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000968:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800096c:	4413      	add	r3, r2
 800096e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "parameter1 : 3\r\n");
 8000972:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000976:	494e      	ldr	r1, [pc, #312]	; (8000ab0 <FatFsTest+0x284>)
 8000978:	4618      	mov	r0, r3
 800097a:	f01f fd4f 	bl	802041c <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 800097e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fcfc 	bl	8000380 <strlen>
 8000988:	4602      	mov	r2, r0
 800098a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800098e:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000992:	4842      	ldr	r0, [pc, #264]	; (8000a9c <FatFsTest+0x270>)
 8000994:	f00d f8a1 	bl	800dada <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 8000998:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800099c:	4619      	mov	r1, r3
 800099e:	4841      	ldr	r0, [pc, #260]	; (8000aa4 <FatFsTest+0x278>)
 80009a0:	f01f fbb2 	bl	8020108 <iprintf>

    total_byte_ += written_bytes;
 80009a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80009a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009ac:	4413      	add	r3, r2
 80009ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "parameter2 : 5\r\n");
 80009b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80009b6:	493f      	ldr	r1, [pc, #252]	; (8000ab4 <FatFsTest+0x288>)
 80009b8:	4618      	mov	r0, r3
 80009ba:	f01f fd2f 	bl	802041c <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 80009be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcdc 	bl	8000380 <strlen>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80009ce:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80009d2:	4832      	ldr	r0, [pc, #200]	; (8000a9c <FatFsTest+0x270>)
 80009d4:	f00d f881 	bl	800dada <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80009d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009dc:	4619      	mov	r1, r3
 80009de:	4831      	ldr	r0, [pc, #196]	; (8000aa4 <FatFsTest+0x278>)
 80009e0:	f01f fb92 	bl	8020108 <iprintf>

    total_byte_ += written_bytes;
 80009e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80009e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009ec:	4413      	add	r3, r2
 80009ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    printf("total %d bytes written.\r\n", total_byte_);
 80009f2:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80009f6:	4830      	ldr	r0, [pc, #192]	; (8000ab8 <FatFsTest+0x28c>)
 80009f8:	f01f fb86 	bl	8020108 <iprintf>

    f_close(&SDFile);
 80009fc:	4827      	ldr	r0, [pc, #156]	; (8000a9c <FatFsTest+0x270>)
 80009fe:	f00d fa53 	bl	800dea8 <f_close>

    res = f_open(&SDFile, (const char*)filename, FA_READ);
 8000a02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000a06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	6819      	ldr	r1, [r3, #0]
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <FatFsTest+0x270>)
 8000a10:	f00c fda8 	bl	800d564 <f_open>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    if(res == FR_OK)
 8000a1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d123      	bne.n	8000a6a <FatFsTest+0x23e>
    {
        printf("\r\n---------------Reading Start-----------------\r\n");
 8000a22:	4826      	ldr	r0, [pc, #152]	; (8000abc <FatFsTest+0x290>)
 8000a24:	f01f fbf6 	bl	8020214 <puts>
        res = f_read(&SDFile, readbuf, sizeof(readbuf), (unsigned int*)&read_bytes);
 8000a28:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000a2c:	f107 0108 	add.w	r1, r7, #8
 8000a30:	22c8      	movs	r2, #200	; 0xc8
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <FatFsTest+0x270>)
 8000a34:	f00c ff1e 	bl	800d874 <f_read>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

        if(res == FR_OK && read_bytes > 0) printf("%s",readbuf);
 8000a3e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d109      	bne.n	8000a5a <FatFsTest+0x22e>
 8000a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d005      	beq.n	8000a5a <FatFsTest+0x22e>
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4619      	mov	r1, r3
 8000a54:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <FatFsTest+0x294>)
 8000a56:	f01f fb57 	bl	8020108 <iprintf>

        printf("\r\n---------------Reading End-----------------\r\n");
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <FatFsTest+0x298>)
 8000a5c:	f01f fbda 	bl	8020214 <puts>

        printf("total read bytes : %d\r\n", total_byte_);
 8000a60:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000a64:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <FatFsTest+0x29c>)
 8000a66:	f01f fb4f 	bl	8020108 <iprintf>
    }



    f_close(&SDFile);
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <FatFsTest+0x270>)
 8000a6c:	f00d fa1c 	bl	800dea8 <f_close>

    printf("SD card Writing is successfully complete!\n");
 8000a70:	4816      	ldr	r0, [pc, #88]	; (8000acc <FatFsTest+0x2a0>)
 8000a72:	f01f fbcf 	bl	8020214 <puts>
 8000a76:	e007      	b.n	8000a88 <FatFsTest+0x25c>
  }else{
  	printf("[ERROR] f_open failed (%d)\r\n", (int)res);
 8000a78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <FatFsTest+0x2a4>)
 8000a80:	f01f fb42 	bl	8020108 <iprintf>
 8000a84:	e000      	b.n	8000a88 <FatFsTest+0x25c>
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;
 8000a86:	bf00      	nop
  }
}
 8000a88:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	08020db4 	.word	0x08020db4
 8000a94:	24000d40 	.word	0x24000d40
 8000a98:	240008e8 	.word	0x240008e8
 8000a9c:	24000b18 	.word	0x24000b18
 8000aa0:	08020de0 	.word	0x08020de0
 8000aa4:	08020de8 	.word	0x08020de8
 8000aa8:	08020e00 	.word	0x08020e00
 8000aac:	08020e10 	.word	0x08020e10
 8000ab0:	08020e20 	.word	0x08020e20
 8000ab4:	08020e34 	.word	0x08020e34
 8000ab8:	08020e48 	.word	0x08020e48
 8000abc:	08020e64 	.word	0x08020e64
 8000ac0:	08020e98 	.word	0x08020e98
 8000ac4:	08020e9c 	.word	0x08020e9c
 8000ac8:	08020ecc 	.word	0x08020ecc
 8000acc:	08020ee4 	.word	0x08020ee4
 8000ad0:	08020f10 	.word	0x08020f10

08000ad4 <SDCard_Write>:

int SDCard_Write(const char *filename, const char *msg)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000ae0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000ae4:	6018      	str	r0, [r3, #0]
 8000ae6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000aea:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000aee:	6019      	str	r1, [r3, #0]
	const char* msg_ = msg;
 8000af0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000af4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	FRESULT res = FR_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
	uint32_t written_bytes=0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	char buf[1024];

	if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return (int)res;
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4921      	ldr	r1, [pc, #132]	; (8000b94 <SDCard_Write+0xc0>)
 8000b0e:	4822      	ldr	r0, [pc, #136]	; (8000b98 <SDCard_Write+0xc4>)
 8000b10:	f00c fcde 	bl	800d4d0 <f_mount>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <SDCard_Write+0x4c>
 8000b1a:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000b1e:	e033      	b.n	8000b88 <SDCard_Write+0xb4>

	res = f_open(&SDFile, (const char*)filename, FA_WRITE | FA_OPEN_APPEND);
 8000b20:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000b24:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000b28:	2232      	movs	r2, #50	; 0x32
 8000b2a:	6819      	ldr	r1, [r3, #0]
 8000b2c:	481b      	ldr	r0, [pc, #108]	; (8000b9c <SDCard_Write+0xc8>)
 8000b2e:	f00c fd19 	bl	800d564 <f_open>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413

	if(res == FR_OK)
 8000b38:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d121      	bne.n	8000b84 <SDCard_Write+0xb0>
	{
		sprintf(buf,"Your TCP data was : %s\r\n", msg_);
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000b48:	4915      	ldr	r1, [pc, #84]	; (8000ba0 <SDCard_Write+0xcc>)
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f01f fc66 	bl	802041c <siprintf>
		f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fc13 	bl	8000380 <strlen>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000b60:	f107 010c 	add.w	r1, r7, #12
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <SDCard_Write+0xc8>)
 8000b66:	f00c ffb8 	bl	800dada <f_write>
		printf("%s is written, Tick : %ld, %ld bytes written.\r\n", buf, HAL_GetTick(), written_bytes);
 8000b6a:	f000 fff1 	bl	8001b50 <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000b74:	f107 010c 	add.w	r1, r7, #12
 8000b78:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <SDCard_Write+0xd0>)
 8000b7a:	f01f fac5 	bl	8020108 <iprintf>

	    f_close(&SDFile);
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <SDCard_Write+0xc8>)
 8000b80:	f00d f992 	bl	800dea8 <f_close>
	}

	return (int)res;
 8000b84:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	24000d40 	.word	0x24000d40
 8000b98:	240008e8 	.word	0x240008e8
 8000b9c:	24000b18 	.word	0x24000b18
 8000ba0:	08020f30 	.word	0x08020f30
 8000ba4:	08020f4c 	.word	0x08020f4c

08000ba8 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4a07      	ldr	r2, [pc, #28]	; (8000bec <vApplicationGetIdleTaskMemory+0x2c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <vApplicationGetIdleTaskMemory+0x30>)
 8000bd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bde:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	24000f48 	.word	0x24000f48
 8000bf0:	24000ffc 	.word	0x24000ffc

08000bf4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d009      	beq.n	8000c20 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <ITM_SendChar+0x2c>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <ITM_SendChar+0x2e>
 8000c20:	2300      	movs	r3, #0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d010      	beq.n	8000c48 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bf0c      	ite	eq
 8000c30:	2301      	moveq	r3, #1
 8000c32:	2300      	movne	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <ITM_SendChar+0x4a>
    {
      __NOP();
 8000c3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c3c:	e7f3      	b.n	8000c26 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c3e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_write>:
extern "C"{
#endif


int _write(int file, char *ptr, int len)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	da0a      	bge.n	8000c84 <_write+0x2e>
  {
	  ITM_SendChar(*ptr++);
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	60ba      	str	r2, [r7, #8]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffbc 	bl	8000bf4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e7f0      	b.n	8000c66 <_write+0x10>
  }
  return len;
 8000c84:	687b      	ldr	r3, [r7, #4]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b5b0      	push	{r4, r5, r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
 // int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c96:	f000 fae9 	bl	800126c <_ZL10MPU_Configv>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c9a:	4b58      	ldr	r3, [pc, #352]	; (8000dfc <main+0x16c>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d11b      	bne.n	8000ce8 <main+0x58>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb0:	f3bf 8f4f 	dsb	sy
}
 8000cb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cb6:	f3bf 8f6f 	isb	sy
}
 8000cba:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cbc:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <main+0x16c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc4:	f3bf 8f4f 	dsb	sy
}
 8000cc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cca:	f3bf 8f6f 	isb	sy
}
 8000cce:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <main+0x16c>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <main+0x16c>)
 8000cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cda:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cdc:	f3bf 8f4f 	dsb	sy
}
 8000ce0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ce2:	f3bf 8f6f 	isb	sy
}
 8000ce6:	e000      	b.n	8000cea <main+0x5a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ce8:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <main+0x16c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d144      	bne.n	8000d8a <main+0xfa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d00:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <main+0x16c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d08:	f3bf 8f4f 	dsb	sy
}
 8000d0c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <main+0x16c>)
 8000d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d18:	0b5b      	lsrs	r3, r3, #13
 8000d1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	015a      	lsls	r2, r3, #5
 8000d2e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d32:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d36:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d38:	4930      	ldr	r1, [pc, #192]	; (8000dfc <main+0x16c>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	627a      	str	r2, [r7, #36]	; 0x24
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf14      	ite	ne
 8000d4a:	2301      	movne	r3, #1
 8000d4c:	2300      	moveq	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d000      	beq.n	8000d56 <main+0xc6>
      do {
 8000d54:	e7e9      	b.n	8000d2a <main+0x9a>
    } while(sets-- != 0U);
 8000d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d000      	beq.n	8000d6c <main+0xdc>
    do {
 8000d6a:	e7d9      	b.n	8000d20 <main+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6c:	f3bf 8f4f 	dsb	sy
}
 8000d70:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <main+0x16c>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <main+0x16c>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d7e:	f3bf 8f4f 	dsb	sy
}
 8000d82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d84:	f3bf 8f6f 	isb	sy
}
 8000d88:	e000      	b.n	8000d8c <main+0xfc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d8a:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 fe90 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f83c 	bl	8000e0c <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <main+0x170>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <main+0x170>)
 8000d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <main+0x170>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f002 ffe6 	bl	8003d84 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000db8:	2100      	movs	r1, #0
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f002 fffc 	bl	8003db8 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 f958 	bl	8001074 <_ZL12MX_GPIO_Initv>
  MX_MDMA_Init();
 8000dc4:	f000 f8e4 	bl	8000f90 <_ZL12MX_MDMA_Initv>
  MX_SDMMC1_SD_Init();
 8000dc8:	f000 f8ba 	bl	8000f40 <_ZL17MX_SDMMC1_SD_Initv>
  MX_FATFS_Init();
 8000dcc:	f009 fe32 	bl	800aa34 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityNormal, 0, 512);
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <main+0x174>)
 8000dd2:	f107 0408 	add.w	r4, r7, #8
 8000dd6:	461d      	mov	r5, r3
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000de0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8000de4:	f107 0308 	add.w	r3, r7, #8
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f00d fe84 	bl	800eaf8 <osThreadCreate>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <main+0x178>)
 8000df4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000df6:	f00d fe5c 	bl	800eab2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <main+0x16a>
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	58024400 	.word	0x58024400
 8000e04:	08020f98 	.word	0x08020f98
 8000e08:	240018e4 	.word	0x240018e4

08000e0c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b09c      	sub	sp, #112	; 0x70
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	224c      	movs	r2, #76	; 0x4c
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f01e fd9e 	bl	801f95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2220      	movs	r2, #32
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f01e fd98 	bl	801f95c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e2c:	2004      	movs	r0, #4
 8000e2e:	f003 fae5 	bl	80043fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b3f      	ldr	r3, [pc, #252]	; (8000f34 <_Z18SystemClock_Configv+0x128>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <_Z18SystemClock_Configv+0x128>)
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e42:	4b3c      	ldr	r3, [pc, #240]	; (8000f34 <_Z18SystemClock_Configv+0x128>)
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <_Z18SystemClock_Configv+0x12c>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a39      	ldr	r2, [pc, #228]	; (8000f38 <_Z18SystemClock_Configv+0x12c>)
 8000e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <_Z18SystemClock_Configv+0x12c>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <_Z18SystemClock_Configv+0x12c>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e70:	bf14      	ite	ne
 8000e72:	2301      	movne	r3, #1
 8000e74:	2300      	moveq	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d000      	beq.n	8000e7e <_Z18SystemClock_Configv+0x72>
 8000e7c:	e7f2      	b.n	8000e64 <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <_Z18SystemClock_Configv+0x130>)
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	4a2e      	ldr	r2, [pc, #184]	; (8000f3c <_Z18SystemClock_Configv+0x130>)
 8000e84:	f023 0303 	bic.w	r3, r3, #3
 8000e88:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2340      	movs	r3, #64	; 0x40
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e96:	2301      	movs	r3, #1
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ea6:	2332      	movs	r3, #50	; 0x32
 8000ea8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 faf2 	bl	80044b0 <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000edc:	f000 fa2a 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	233f      	movs	r3, #63	; 0x3f
 8000ee2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eec:	2308      	movs	r3, #8
 8000eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ef0:	2340      	movs	r3, #64	; 0x40
 8000ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000efe:	2340      	movs	r3, #64	; 0x40
 8000f00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2102      	movs	r1, #2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 ff2c 	bl	8004d64 <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf14      	ite	ne
 8000f12:	2301      	movne	r3, #1
 8000f14:	2300      	moveq	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8000f1c:	f000 fa0a 	bl	8001334 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000f20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f24:	2100      	movs	r1, #0
 8000f26:	2000      	movs	r0, #0
 8000f28:	f004 f8d2 	bl	80050d0 <HAL_RCC_MCOConfig>
}
 8000f2c:	bf00      	nop
 8000f2e:	3770      	adds	r7, #112	; 0x70
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	58000400 	.word	0x58000400
 8000f38:	58024800 	.word	0x58024800
 8000f3c:	58024400 	.word	0x58024400

08000f40 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8000f48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000f6c:	f007 f85a 	bl	8008024 <HAL_SD_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <_ZL17MX_SDMMC1_SD_Initv+0x44>
  {
    Error_Handler();
 8000f80:	f000 f9d8 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	240017fc 	.word	0x240017fc
 8000f8c:	52007000 	.word	0x52007000

08000f90 <_ZL12MX_MDMA_Initv>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /*##-1- Enable the MDMA clock ###############################################*/
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <_ZL12MX_MDMA_Initv+0xd8>)
 8000f98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f9c:	4a32      	ldr	r2, [pc, #200]	; (8001068 <_ZL12MX_MDMA_Initv+0xd8>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <_ZL12MX_MDMA_Initv+0xd8>)
 8000fa8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request MDMA_SDMMC_Handle */

  /*##-2- Select the MDMA instance to be used for the transfer : MDMA_Channel0 #*/
  MDMA_SDMMC_Handle.Instance = MDMA_Channel0;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fb6:	4a2e      	ldr	r2, [pc, #184]	; (8001070 <_ZL12MX_MDMA_Initv+0xe0>)
 8000fb8:	601a      	str	r2, [r3, #0]

  HAL_MDMA_DeInit(&MDMA_SDMMC_Handle);
 8000fba:	482c      	ldr	r0, [pc, #176]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fbc:	f002 ff88 	bl	8003ed0 <HAL_MDMA_DeInit>

  /*##-3- Initialize the MDMA channel (with liked list node 0 parameters) ####*/
  MDMA_SDMMC_Handle.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fc2:	221d      	movs	r2, #29
 8000fc4:	605a      	str	r2, [r3, #4]
  MDMA_SDMMC_Handle.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  MDMA_SDMMC_Handle.Init.Priority = MDMA_PRIORITY_LOW;
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  MDMA_SDMMC_Handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]

  MDMA_SDMMC_Handle.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	615a      	str	r2, [r3, #20]
  MDMA_SDMMC_Handle.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	619a      	str	r2, [r3, #24]

  MDMA_SDMMC_Handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000fe4:	4b21      	ldr	r3, [pc, #132]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  MDMA_SDMMC_Handle.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  MDMA_SDMMC_Handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000ff2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
  MDMA_SDMMC_Handle.Init.BufferTransferLength = 1;
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  MDMA_SDMMC_Handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8001000:	2200      	movs	r2, #0
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  MDMA_SDMMC_Handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8001006:	2200      	movs	r2, #0
 8001008:	631a      	str	r2, [r3, #48]	; 0x30


  MDMA_SDMMC_Handle.Init.SourceBlockAddressOffset = 0;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 800100c:	2200      	movs	r2, #0
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
  MDMA_SDMMC_Handle.Init.DestBlockAddressOffset = 0;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8001012:	2200      	movs	r2, #0
 8001014:	639a      	str	r2, [r3, #56]	; 0x38

  if (HAL_MDMA_Init(&MDMA_SDMMC_Handle) != HAL_OK)
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8001018:	f002 ff0e 	bl	8003e38 <HAL_MDMA_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <_ZL12MX_MDMA_Initv+0xa0>
  {
    Error_Handler();
 800102c:	f000 f982 	bl	8001334 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&MDMA_SDMMC_Handle, 0, 0) != HAL_OK)
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <_ZL12MX_MDMA_Initv+0xdc>)
 8001036:	f002 ffa3 	bl	8003f80 <HAL_MDMA_ConfigPostRequestMask>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf14      	ite	ne
 8001040:	2301      	movne	r3, #1
 8001042:	2300      	moveq	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <_ZL12MX_MDMA_Initv+0xbe>
  {
    Error_Handler();
 800104a:	f000 f973 	bl	8001334 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2105      	movs	r1, #5
 8001052:	207a      	movs	r0, #122	; 0x7a
 8001054:	f000 fe9b 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001058:	207a      	movs	r0, #122	; 0x7a
 800105a:	f000 feb2 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	58024400 	.word	0x58024400
 800106c:	24001878 	.word	0x24001878
 8001070:	52000040 	.word	0x52000040

08001074 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a3d      	ldr	r2, [pc, #244]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	4a36      	ldr	r2, [pc, #216]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	4b30      	ldr	r3, [pc, #192]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a2e      	ldr	r2, [pc, #184]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	4a27      	ldr	r2, [pc, #156]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_ZL12MX_GPIO_Initv+0x114>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800113e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114c:	2302      	movs	r3, #2
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <_ZL12MX_GPIO_Initv+0x118>)
 8001158:	f002 fc4c 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <_ZL12MX_GPIO_Initv+0x11c>)
 800117a:	f002 fc3b 	bl	80039f4 <HAL_GPIO_Init>

}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	58024400 	.word	0x58024400
 800118c:	58022000 	.word	0x58022000
 8001190:	58020000 	.word	0x58020000

08001194 <_Z13StartInitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const * argument)
{
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b090      	sub	sp, #64	; 0x40
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 800119c:	f009 ff3e 	bl	800b01c <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */

	//0. check printf alive
	printf("Hello World!\n");
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <_Z13StartInitTaskPKv+0x70>)
 80011a2:	f01f f837 	bl	8020214 <puts>

	//1. TCP server initialize
	TcpServerInit();
 80011a6:	f7ff faa7 	bl	80006f8 <TcpServerInit>

	//2. FATfs Initialize
	FatFsInit();
 80011aa:	f7ff fb11 	bl	80007d0 <FatFsInit>
	//FatFsTest("test.txt");


	/* definition and creation of Task1 */
	osThreadDef(Task1, StartTask1, osPriorityLow, 0, 1024);
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <_Z13StartInitTaskPKv+0x74>)
 80011b0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80011b4:	461d      	mov	r5, r3
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00d fc95 	bl	800eaf8 <osThreadCreate>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <_Z13StartInitTaskPKv+0x78>)
 80011d2:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(Task2, StartTask2, osPriorityHigh, 0, 1024);
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <_Z13StartInitTaskPKv+0x7c>)
 80011d6:	f107 0408 	add.w	r4, r7, #8
 80011da:	461d      	mov	r5, r3
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00d fc82 	bl	800eaf8 <osThreadCreate>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a07      	ldr	r2, [pc, #28]	; (8001214 <_Z13StartInitTaskPKv+0x80>)
 80011f8:	6013      	str	r3, [r2, #0]


  /* Infinite loop */
  for(;;)
  {
    vTaskDelete(NULL);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f00f fda8 	bl	8010d50 <vTaskDelete>
 8001200:	e7fb      	b.n	80011fa <_Z13StartInitTaskPKv+0x66>
 8001202:	bf00      	nop
 8001204:	08020fb4 	.word	0x08020fb4
 8001208:	08020fc4 	.word	0x08020fc4
 800120c:	240018e8 	.word	0x240018e8
 8001210:	08020fe0 	.word	0x08020fe0
 8001214:	240018ec 	.word	0x240018ec

08001218 <_Z10StartTask1PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Task1 */
void StartTask1(void const *argument)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommonSensorTask */

	const TickType_t xTime = pdMS_TO_TICKS(5);
 8001220:	2305      	movs	r3, #5
 8001222:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001224:	f00f ffea 	bl	80111fc <xTaskGetTickCount>
 8001228:	4603      	mov	r3, r0
 800122a:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f00d fcaf 	bl	800eb90 <osDelay>

	vTaskDelayUntil(&xLastWakeTime, xTime);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2105      	movs	r1, #5
 8001238:	4618      	mov	r0, r3
 800123a:	f00f fe19 	bl	8010e70 <vTaskDelayUntil>
    osDelay(1);
 800123e:	e7f5      	b.n	800122c <_Z10StartTask1PKv+0x14>

08001240 <_Z10StartTask2PKv>:
* @retval None
*/
/* USER CODE END StartTask2 */

void StartTask2(void const *argument)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2 */

	const TickType_t xTime = pdMS_TO_TICKS(2);
 8001248:	2302      	movs	r3, #2
 800124a:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime = xTaskGetTickCount();
 800124c:	f00f ffd6 	bl	80111fc <xTaskGetTickCount>
 8001250:	4603      	mov	r3, r0
 8001252:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
	DebugDrive();
 8001254:	f7ff f932 	bl	80004bc <_Z10DebugDrivev>

	osDelay(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f00d fc99 	bl	800eb90 <osDelay>

	vTaskDelayUntil(&xLastWakeTime, xTime);
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	2102      	movs	r1, #2
 8001264:	4618      	mov	r0, r3
 8001266:	f00f fe03 	bl	8010e70 <vTaskDelayUntil>
	DebugDrive();
 800126a:	e7f3      	b.n	8001254 <_Z10StartTask2PKv+0x14>

0800126c <_ZL10MPU_Configv>:


/* MPU Configuration */

void MPU_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800127e:	f000 fdb3 	bl	8001de8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  /*Disable Speculative access*/
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001286:	2300      	movs	r3, #0
 8001288:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800128e:	231f      	movs	r3, #31
 8001290:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001292:	2387      	movs	r3, #135	; 0x87
 8001294:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001296:	2300      	movs	r3, #0
 8001298:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800129a:	2300      	movs	r3, #0
 800129c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800129e:	2301      	movs	r3, #1
 80012a0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012a2:	2301      	movs	r3, #1
 80012a4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012ae:	463b      	mov	r3, r7
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fdd1 	bl	8001e58 <HAL_MPU_ConfigRegion>

  /*Set LwIP Heap */
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_ZL10MPU_Configv+0x9c>)
 80012bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80012be:	2310      	movs	r3, #16
 80012c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012ca:	2303      	movs	r3, #3
 80012cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012d2:	463b      	mov	r3, r7
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fdbf 	bl	8001e58 <HAL_MPU_ConfigRegion>

  /*RX & Tx Descriptors*/
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80012da:	2302      	movs	r3, #2
 80012dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <_ZL10MPU_Configv+0xa0>)
 80012e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80012e2:	2308      	movs	r3, #8
 80012e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012ea:	2301      	movs	r3, #1
 80012ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012f2:	463b      	mov	r3, r7
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fdaf 	bl	8001e58 <HAL_MPU_ConfigRegion>


  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012fa:	2004      	movs	r0, #4
 80012fc:	f000 fd8c 	bl	8001e18 <HAL_MPU_Enable>

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	30020000 	.word	0x30020000
 800130c:	30040000 	.word	0x30040000

08001310 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001322:	f000 fc01 	bl	8001b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40001000 	.word	0x40001000

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_MspInit+0x48>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x48>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x48>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	210f      	movs	r1, #15
 8001368:	f06f 0001 	mvn.w	r0, #1
 800136c:	f000 fd0f 	bl	8001d8e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2105      	movs	r1, #5
 8001374:	207d      	movs	r0, #125	; 0x7d
 8001376:	f000 fd0a 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800137a:	207d      	movs	r0, #125	; 0x7d
 800137c:	f000 fd21 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	58024400 	.word	0x58024400

0800138c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0be      	sub	sp, #248	; 0xf8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	22c8      	movs	r2, #200	; 0xc8
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f01e fad5 	bl	801f95c <memset>
  if(hsd->Instance==SDMMC1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <HAL_SD_MspInit+0x144>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f040 8084 	bne.w	80014c6 <HAL_SD_MspInit+0x13a>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80013be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80013ce:	2309      	movs	r3, #9
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013de:	23c0      	movs	r3, #192	; 0xc0
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013e2:	2320      	movs	r3, #32
 80013e4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80013e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80013ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 f8d6 	bl	80055a8 <HAL_RCCEx_PeriphCLKConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_SD_MspInit+0x7a>
    {
      Error_Handler();
 8001402:	f7ff ff97 	bl	8001334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_SD_MspInit+0x148>)
 8001408:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800140c:	4a31      	ldr	r2, [pc, #196]	; (80014d4 <HAL_SD_MspInit+0x148>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001416:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <HAL_SD_MspInit+0x148>)
 8001418:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_SD_MspInit+0x148>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	4a2a      	ldr	r2, [pc, #168]	; (80014d4 <HAL_SD_MspInit+0x148>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_SD_MspInit+0x148>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_SD_MspInit+0x148>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	4a22      	ldr	r2, [pc, #136]	; (80014d4 <HAL_SD_MspInit+0x148>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_SD_MspInit+0x148>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001460:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001464:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800147a:	230c      	movs	r3, #12
 800147c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <HAL_SD_MspInit+0x14c>)
 8001488:	f002 fab4 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800148c:	2304      	movs	r3, #4
 800148e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80014a4:	230c      	movs	r3, #12
 80014a6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014ae:	4619      	mov	r1, r3
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <HAL_SD_MspInit+0x150>)
 80014b2:	f002 fa9f 	bl	80039f4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	2031      	movs	r0, #49	; 0x31
 80014bc:	f000 fc67 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80014c0:	2031      	movs	r0, #49	; 0x31
 80014c2:	f000 fc7e 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	37f8      	adds	r7, #248	; 0xf8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	52007000 	.word	0x52007000
 80014d4:	58024400 	.word	0x58024400
 80014d8:	58020800 	.word	0x58020800
 80014dc:	58020c00 	.word	0x58020c00

080014e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b090      	sub	sp, #64	; 0x40
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	d827      	bhi.n	800153e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014ee:	2200      	movs	r2, #0
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	2036      	movs	r0, #54	; 0x36
 80014f4:	f000 fc4b 	bl	8001d8e <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014f8:	2036      	movs	r0, #54	; 0x36
 80014fa:	f000 fc62 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014fe:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <HAL_InitTick+0xc4>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_InitTick+0xc8>)
 8001506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800150a:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <HAL_InitTick+0xc8>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_InitTick+0xc8>)
 8001516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001522:	f107 0210 	add.w	r2, r7, #16
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fff9 	bl	8005524 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001538:	2b00      	cmp	r3, #0
 800153a:	d106      	bne.n	800154a <HAL_InitTick+0x6a>
 800153c:	e001      	b.n	8001542 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e02b      	b.n	800159a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001542:	f003 ffd9 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8001546:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001548:	e004      	b.n	8001554 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800154a:	f003 ffd5 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 800154e:	4603      	mov	r3, r0
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_InitTick+0xcc>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	3b01      	subs	r3, #1
 8001560:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_InitTick+0xd0>)
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_InitTick+0xd4>)
 8001566:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_InitTick+0xd0>)
 800156a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800156e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_InitTick+0xd0>)
 8001572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001574:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_InitTick+0xd0>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_InitTick+0xd0>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <HAL_InitTick+0xd0>)
 8001584:	f008 f9b2 	bl	80098ec <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d104      	bne.n	8001598 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <HAL_InitTick+0xd0>)
 8001590:	f008 fa0e 	bl	80099b0 <HAL_TIM_Base_Start_IT>
 8001594:	4603      	mov	r3, r0
 8001596:	e000      	b.n	800159a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	3740      	adds	r7, #64	; 0x40
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	24000008 	.word	0x24000008
 80015a8:	58024400 	.word	0x58024400
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	240018f0 	.word	0x240018f0
 80015b4:	40001000 	.word	0x40001000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <SDMMC1_IRQHandler+0x10>)
 80015ea:	f006 ff8b 	bl	8008504 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	240017fc 	.word	0x240017fc

080015f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <TIM6_DAC_IRQHandler+0x10>)
 80015fe:	f008 fa4f 	bl	8009aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	240018f0 	.word	0x240018f0

0800160c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <ETH_IRQHandler+0x10>)
 8001612:	f001 f83d 	bl	8002690 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	240019a4 	.word	0x240019a4

08001620 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&MDMA_SDMMC_Handle);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <MDMA_IRQHandler+0x10>)
 8001626:	f002 fcfd 	bl	8004024 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	24001878 	.word	0x24001878

08001634 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001638:	f002 fbe4 	bl	8003e04 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_kill>:

int _kill(int pid, int sig)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <_kill+0x20>)
 800165c:	2216      	movs	r2, #22
 800165e:	601a      	str	r2, [r3, #0]
  return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	2401009c 	.word	0x2401009c

08001674 <_exit>:

void _exit (int status)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800167c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ffe5 	bl	8001650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001686:	e7fe      	b.n	8001686 <_exit+0x12>

08001688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e00a      	b.n	80016b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800169a:	f3af 8000 	nop.w
 800169e:	4601      	mov	r1, r0
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60ba      	str	r2, [r7, #8]
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf0      	blt.n	800169a <_read+0x12>
  }

  return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
  return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_isatty>:

int _isatty(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d205      	bcs.n	8001768 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <_sbrk+0x6c>)
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001766:	e009      	b.n	800177c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	4a06      	ldr	r2, [pc, #24]	; (8001790 <_sbrk+0x64>)
 8001778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	24080000 	.word	0x24080000
 800178c:	00000800 	.word	0x00000800
 8001790:	2400193c 	.word	0x2400193c
 8001794:	240100a0 	.word	0x240100a0
 8001798:	2401009c 	.word	0x2401009c

0800179c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a0:	f7fe fdf6 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	; (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	; (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f01e f857 	bl	801f87c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7ff fa5f 	bl	8000c90 <main>
  bx  lr
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017dc:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80017e0:	08024d8c 	.word	0x08024d8c
  ldr r2, =_sbss
 80017e4:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 80017e8:	240100a0 	.word	0x240100a0

080017ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC3_IRQHandler>

080017ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <LAN8742_RegisterBusIO+0x28>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <LAN8742_RegisterBusIO+0x28>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <LAN8742_RegisterBusIO+0x28>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181a:	e014      	b.n	8001846 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d17c      	bne.n	800196c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2220      	movs	r2, #32
 8001884:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e01c      	b.n	80018c6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	2112      	movs	r1, #18
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	4798      	blx	r3
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	da03      	bge.n	80018a8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80018a0:	f06f 0304 	mvn.w	r3, #4
 80018a4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80018a6:	e00b      	b.n	80018c0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d105      	bne.n	80018c0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
         break;
 80018be:	e005      	b.n	80018cc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b1f      	cmp	r3, #31
 80018ca:	d9df      	bls.n	800188c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b1f      	cmp	r3, #31
 80018d2:	d902      	bls.n	80018da <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80018d4:	f06f 0302 	mvn.w	r3, #2
 80018d8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d145      	bne.n	800196c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6810      	ldr	r0, [r2, #0]
 80018e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018ec:	2100      	movs	r1, #0
 80018ee:	4798      	blx	r3
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db37      	blt.n	8001966 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6810      	ldr	r0, [r2, #0]
 80018fe:	f107 0208 	add.w	r2, r7, #8
 8001902:	2100      	movs	r1, #0
 8001904:	4798      	blx	r3
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	db28      	blt.n	800195e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4798      	blx	r3
 8001912:	4603      	mov	r3, r0
 8001914:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001916:	e01c      	b.n	8001952 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4798      	blx	r3
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800192a:	d80e      	bhi.n	800194a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6810      	ldr	r0, [r2, #0]
 8001934:	f107 0208 	add.w	r2, r7, #8
 8001938:	2100      	movs	r1, #0
 800193a:	4798      	blx	r3
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	da07      	bge.n	8001952 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001942:	f06f 0304 	mvn.w	r3, #4
 8001946:	613b      	str	r3, [r7, #16]
                 break;
 8001948:	e010      	b.n	800196c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800194a:	f06f 0301 	mvn.w	r3, #1
 800194e:	613b      	str	r3, [r7, #16]
               break;
 8001950:	e00c      	b.n	800196c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1dd      	bne.n	8001918 <LAN8742_Init+0xc6>
 800195c:	e006      	b.n	800196c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800195e:	f06f 0304 	mvn.w	r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e002      	b.n	800196c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001966:	f06f 0303 	mvn.w	r3, #3
 800196a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d112      	bne.n	8001998 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4798      	blx	r3
 8001978:	4603      	mov	r3, r0
 800197a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800197c:	bf00      	nop
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	4798      	blx	r3
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001990:	d9f5      	bls.n	800197e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001998:	693b      	ldr	r3, [r7, #16]
 }
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6810      	ldr	r0, [r2, #0]
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	2101      	movs	r1, #1
 80019bc:	4798      	blx	r3
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da02      	bge.n	80019ca <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019c4:	f06f 0304 	mvn.w	r3, #4
 80019c8:	e06e      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6810      	ldr	r0, [r2, #0]
 80019d2:	f107 020c 	add.w	r2, r7, #12
 80019d6:	2101      	movs	r1, #1
 80019d8:	4798      	blx	r3
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da02      	bge.n	80019e6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80019e0:	f06f 0304 	mvn.w	r3, #4
 80019e4:	e060      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80019f0:	2301      	movs	r3, #1
 80019f2:	e059      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6810      	ldr	r0, [r2, #0]
 80019fc:	f107 020c 	add.w	r2, r7, #12
 8001a00:	2100      	movs	r1, #0
 8001a02:	4798      	blx	r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da02      	bge.n	8001a10 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001a0a:	f06f 0304 	mvn.w	r3, #4
 8001a0e:	e04b      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11b      	bne.n	8001a52 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <LAN8742_GetLinkState+0x90>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e03a      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e033      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	e02c      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e02a      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6810      	ldr	r0, [r2, #0]
 8001a5a:	f107 020c 	add.w	r2, r7, #12
 8001a5e:	211f      	movs	r1, #31
 8001a60:	4798      	blx	r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da02      	bge.n	8001a6e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001a68:	f06f 0304 	mvn.w	r3, #4
 8001a6c:	e01c      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001a78:	2306      	movs	r3, #6
 8001a7a:	e015      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 031c 	and.w	r3, r3, #28
 8001a82:	2b18      	cmp	r3, #24
 8001a84:	d101      	bne.n	8001a8a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a86:	2302      	movs	r3, #2
 8001a88:	e00e      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f003 031c 	and.w	r3, r3, #28
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d101      	bne.n	8001a98 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e007      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 031c 	and.w	r3, r3, #28
 8001a9e:	2b14      	cmp	r3, #20
 8001aa0:	d101      	bne.n	8001aa6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	e000      	b.n	8001aa8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001aa6:	2305      	movs	r3, #5
    }				
  }
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	f000 f95e 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001abc:	f003 fb72 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_Init+0x68>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	4913      	ldr	r1, [pc, #76]	; (8001b1c <HAL_Init+0x6c>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_Init+0x68>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_Init+0x6c>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <HAL_Init+0x70>)
 8001af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_Init+0x74>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	200f      	movs	r0, #15
 8001afc:	f7ff fcf0 	bl	80014e0 <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e002      	b.n	8001b10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0a:	f7ff fc19 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	58024400 	.word	0x58024400
 8001b1c:	08024a60 	.word	0x08024a60
 8001b20:	24000004 	.word	0x24000004
 8001b24:	24000000 	.word	0x24000000

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2400000c 	.word	0x2400000c
 8001b4c:	24001940 	.word	0x24001940

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	24001940 	.word	0x24001940

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2400000c 	.word	0x2400000c

08001bb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetREVID+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0c1b      	lsrs	r3, r3, #16
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	5c001000 	.word	0x5c001000

08001bc8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001bd8:	4904      	ldr	r1, [pc, #16]	; (8001bec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	58000400 	.word	0x58000400

08001bf0 <__NVIC_SetPriorityGrouping>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <__NVIC_SetPriorityGrouping+0x40>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x40>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00
 8001c34:	05fa0000 	.word	0x05fa0000

08001c38 <__NVIC_GetPriorityGrouping>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <__NVIC_EnableIRQ+0x38>)
 8001c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000e100 	.word	0xe000e100

08001c90 <__NVIC_SetPriority>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	; (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	; (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	; 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <__NVIC_SystemReset>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001d50:	f3bf 8f4f 	dsb	sy
}
 8001d54:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <__NVIC_SystemReset+0x24>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001d5e:	4904      	ldr	r1, [pc, #16]	; (8001d70 <__NVIC_SystemReset+0x24>)
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <__NVIC_SystemReset+0x28>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d66:	f3bf 8f4f 	dsb	sy
}
 8001d6a:	bf00      	nop
    __NOP();
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <__NVIC_SystemReset+0x20>
 8001d70:	e000ed00 	.word	0xe000ed00
 8001d74:	05fa0004 	.word	0x05fa0004

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff35 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff4c 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff9c 	bl	8001ce4 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff6b 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff3f 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001de2:	f7ff ffb3 	bl	8001d4c <__NVIC_SystemReset>
	...

08001de8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001dec:	f3bf 8f5f 	dmb	sy
}
 8001df0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_MPU_Disable+0x28>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <HAL_MPU_Disable+0x28>)
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_MPU_Disable+0x2c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00
 8001e14:	e000ed90 	.word	0xe000ed90

08001e18 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e20:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <HAL_MPU_Enable+0x38>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_MPU_Enable+0x3c>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_MPU_Enable+0x3c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e36:	f3bf 8f4f 	dsb	sy
}
 8001e3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e3c:	f3bf 8f6f 	isb	sy
}
 8001e40:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000ed90 	.word	0xe000ed90
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	785a      	ldrb	r2, [r3, #1]
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_MPU_ConfigRegion+0x84>)
 8001e66:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d029      	beq.n	8001ec4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001e70:	4a1a      	ldr	r2, [pc, #104]	; (8001edc <HAL_MPU_ConfigRegion+0x84>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7b1b      	ldrb	r3, [r3, #12]
 8001e7c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7adb      	ldrb	r3, [r3, #11]
 8001e82:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7a9b      	ldrb	r3, [r3, #10]
 8001e8a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	7b5b      	ldrb	r3, [r3, #13]
 8001e92:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7b9b      	ldrb	r3, [r3, #14]
 8001e9a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7bdb      	ldrb	r3, [r3, #15]
 8001ea2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ea4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7a5b      	ldrb	r3, [r3, #9]
 8001eaa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001eac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7a1b      	ldrb	r3, [r3, #8]
 8001eb2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001eb4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	7812      	ldrb	r2, [r2, #0]
 8001eba:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ebe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ec0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001ec2:	e005      	b.n	8001ed0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_MPU_ConfigRegion+0x84>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_MPU_ConfigRegion+0x84>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed90 	.word	0xe000ed90

08001ee0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_GetCurrentCPUID+0x24>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	2b07      	cmp	r3, #7
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e000      	b.n	8001ef8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001ef6:	2301      	movs	r3, #1
  }
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0cf      	b.n	80020ba <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d106      	bne.n	8001f32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2223      	movs	r2, #35	; 0x23
 8001f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f009 fce7 	bl	800b900 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <HAL_ETH_Init+0x1bc>)
 8001f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f38:	4a62      	ldr	r2, [pc, #392]	; (80020c4 <HAL_ETH_Init+0x1bc>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f42:	4b60      	ldr	r3, [pc, #384]	; (80020c4 <HAL_ETH_Init+0x1bc>)
 8001f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7a1b      	ldrb	r3, [r3, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff fe35 	bl	8001bc8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001f5e:	e003      	b.n	8001f68 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001f60:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001f64:	f7ff fe30 	bl	8001bc8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001f68:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HAL_ETH_Init+0x1c0>)
 8001f6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f84:	f7ff fde4 	bl	8001b50 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f8a:	e011      	b.n	8001fb0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f8c:	f7ff fde0 	bl	8001b50 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f9a:	d909      	bls.n	8001fb0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	22e0      	movs	r2, #224	; 0xe0
 8001fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e084      	b.n	80020ba <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e4      	bne.n	8001f8c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 ff3c 	bl	8002e40 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001fc8:	f003 fa66 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a3f      	ldr	r2, [pc, #252]	; (80020cc <HAL_ETH_Init+0x1c4>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	0c9a      	lsrs	r2, r3, #18
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3a01      	subs	r2, #1
 8001fdc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 f935 	bl	8003250 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001ff2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ffe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002002:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	22e0      	movs	r2, #224	; 0xe0
 800201e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e049      	b.n	80020ba <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_ETH_Init+0x1c8>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6952      	ldr	r2, [r2, #20]
 800203a:	0051      	lsls	r1, r2, #1
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	430b      	orrs	r3, r1
 8002042:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002046:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f001 f99d 	bl	800338a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f001 f9e3 	bl	800341c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	3305      	adds	r3, #5
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	021a      	lsls	r2, r3, #8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	061a      	lsls	r2, r3, #24
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	3302      	adds	r3, #2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	3301      	adds	r3, #1
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002094:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020a2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2210      	movs	r2, #16
 80020b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58000400 	.word	0x58000400
 80020cc:	431bde83 	.word	0x431bde83
 80020d0:	ffff8001 	.word	0xffff8001

080020d4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d179      	bne.n	80021da <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2223      	movs	r2, #35	; 0x23
 80020ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_ETH_Start_IT+0x110>)
 8002102:	430b      	orrs	r3, r1
 8002104:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_ETH_Start_IT+0x114>)
 8002116:	430b      	orrs	r3, r1
 8002118:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2204      	movs	r2, #4
 8002120:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f9eb 	bl	80024fe <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0202 	orr.w	r2, r2, #2
 8002136:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002164:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002174:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002190:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80021a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ac:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b8:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 80021c4:	430b      	orrs	r3, r1
 80021c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ca:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2223      	movs	r2, #35	; 0x23
 80021d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
  }
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	0c020060 	.word	0x0c020060
 80021e8:	0c20c000 	.word	0x0c20c000

080021ec <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fa:	2b23      	cmp	r3, #35	; 0x23
 80021fc:	d165      	bne.n	80022ca <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2223      	movs	r2, #35	; 0x23
 8002202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220e:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_ETH_Stop_IT+0xec>)
 8002218:	400b      	ands	r3, r1
 800221a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800221e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800223a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002256:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0202 	bic.w	r2, r2, #2
 800228c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e00e      	b.n	80022b2 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	3212      	adds	r2, #18
 800229a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3301      	adds	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d9ed      	bls.n	8002294 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2210      	movs	r2, #16
 80022c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
  }
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	ffff2f3e 	.word	0xffff2f3e

080022dc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e03a      	b.n	8002376 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002306:	2b23      	cmp	r3, #35	; 0x23
 8002308:	d134      	bne.n	8002374 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002312:	2201      	movs	r2, #1
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f001 f8de 	bl	80034d8 <ETH_Prepare_Tx_Descriptors>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f043 0202 	orr.w	r2, r3, #2
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e01f      	b.n	8002376 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002336:	f3bf 8f4f 	dsb	sy
}
 800233a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	2b03      	cmp	r3, #3
 800234c:	d904      	bls.n	8002358 <HAL_ETH_Transmit_IT+0x7c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	1f1a      	subs	r2, r3, #4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3106      	adds	r1, #6
 8002364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002368:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800236c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b088      	sub	sp, #32
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0a5      	b.n	80024f6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b0:	2b23      	cmp	r3, #35	; 0x23
 80023b2:	d001      	beq.n	80023b8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e09e      	b.n	80024f6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	3212      	adds	r2, #18
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ce:	f1c3 0304 	rsb	r3, r3, #4
 80023d2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80023d4:	e067      	b.n	80024a6 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <HAL_ETH_ReadData+0x88>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03d      	beq.n	8002482 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800245c:	461a      	mov	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	b29b      	uxth	r3, r3
 8002462:	f009 fb7f 	bl	800bb64 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	441a      	add	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d902      	bls.n	8002494 <HAL_ETH_ReadData+0x116>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b04      	subs	r3, #4
 8002492:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	3212      	adds	r2, #18
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db06      	blt.n	80024bc <HAL_ETH_ReadData+0x13e>
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d202      	bcs.n	80024bc <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d08c      	beq.n	80023d6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	441a      	add	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f814 	bl	80024fe <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b088      	sub	sp, #32
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800250a:	2301      	movs	r3, #1
 800250c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002512:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	3212      	adds	r2, #18
 800251a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002524:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002526:	e03b      	b.n	80025a0 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d112      	bne.n	8002556 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	4618      	mov	r0, r3
 8002536:	f009 fae5 	bl	800bb04 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	74fb      	strb	r3, [r7, #19]
 8002544:	e007      	b.n	8002556 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	461a      	mov	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	461a      	mov	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002556:	7cfb      	ldrb	r3, [r7, #19]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d021      	beq.n	80025a0 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800255c:	f3bf 8f5f 	dmb	sy
}
 8002560:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	2b00      	cmp	r3, #0
 8002568:	d004      	beq.n	8002574 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	e003      	b.n	800257c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d902      	bls.n	800258e <ETH_UpdateDescriptor+0x90>
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3b04      	subs	r3, #4
 800258c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	3212      	adds	r2, #18
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	617b      	str	r3, [r7, #20]
      desccount--;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	3b01      	subs	r3, #1
 800259e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <ETH_UpdateDescriptor+0xae>
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1bd      	bne.n	8002528 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d00d      	beq.n	80025d2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025be:	461a      	mov	r2, r3
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80025d2:	bf00      	nop
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3318      	adds	r3, #24
 80025e6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80025f8:	e03f      	b.n	800267a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3b01      	subs	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	3304      	adds	r3, #4
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	3301      	adds	r3, #1
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d028      	beq.n	800267a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68d9      	ldr	r1, [r3, #12]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db1b      	blt.n	8002676 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	3304      	adds	r3, #4
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4618      	mov	r0, r3
 800264c:	f009 faf2 	bl	800bc34 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	3304      	adds	r3, #4
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	2200      	movs	r2, #0
 800265c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	3301      	adds	r3, #1
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
 8002674:	e001      	b.n	800267a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_ETH_ReleaseTxPacket+0xac>
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1b9      	bne.n	80025fa <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d115      	bne.n	80026d8 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d10b      	bne.n	80026d8 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	461a      	mov	r2, r3
 80026ca:	f248 0340 	movw	r3, #32832	; 0x8040
 80026ce:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f008 fdd4 	bl	800b280 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d115      	bne.n	8002718 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10b      	bne.n	8002718 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002708:	461a      	mov	r2, r3
 800270a:	f248 0301 	movw	r3, #32769	; 0x8001
 800270e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f008 fdc4 	bl	800b2a0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002720:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800272c:	d153      	bne.n	80027d6 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002736:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002742:	d148      	bne.n	80027d6 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f043 0208 	orr.w	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002768:	d11e      	bne.n	80027a8 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002772:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002776:	f241 1302 	movw	r3, #4354	; 0x1102
 800277a:	4013      	ands	r3, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800279a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	22e0      	movs	r2, #224	; 0xe0
 80027a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027a6:	e013      	b.n	80027d0 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80027b4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c6:	461a      	mov	r2, r3
 80027c8:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80027cc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f008 fd75 	bl	800b2c0 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027de:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f043 0210 	orr.w	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	22e0      	movs	r2, #224	; 0xe0
 8002816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f008 fd50 	bl	800b2c0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b10      	cmp	r3, #16
 8002836:	d10f      	bne.n	8002858 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002840:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f844 	bl	80028d8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b20      	cmp	r3, #32
 8002866:	d10f      	bne.n	8002888 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002870:	f003 020f 	and.w	r2, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f836 	bl	80028ec <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002888:	f7ff fb2a 	bl	8001ee0 <HAL_GetCurrentCPUID>
 800288c:	4603      	mov	r3, r0
 800288e:	2b03      	cmp	r3, #3
 8002890:	d10d      	bne.n	80028ae <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_ETH_IRQHandler+0x240>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d014      	beq.n	80028c8 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_ETH_IRQHandler+0x240>)
 80028a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f82a 	bl	8002900 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 80028ac:	e00c      	b.n	80028c8 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_ETH_IRQHandler+0x244>)
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_ETH_IRQHandler+0x244>)
 80028bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f81c 	bl	8002900 <HAL_ETH_WakeUpCallback>
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	58000080 	.word	0x58000080
 80028d4:	580000c0 	.word	0x580000c0

080028d8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e03e      	b.n	80029b4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800293e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	055b      	lsls	r3, r3, #21
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f043 030c 	orr.w	r3, r3, #12
 8002962:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002976:	f7ff f8eb 	bl	8001b50 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800297c:	e009      	b.n	8002992 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800297e:	f7ff f8e7 	bl	8001b50 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800298c:	d901      	bls.n	8002992 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e010      	b.n	80029b4 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ed      	bne.n	800297e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e03c      	b.n	8002a58 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029e6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	055b      	lsls	r3, r3, #21
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f023 030c 	bic.w	r3, r3, #12
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_ETH_WritePHYRegister+0xa4>)
 8002a1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002a22:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <HAL_ETH_WritePHYRegister+0xa4>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002a2a:	f7ff f891 	bl	8001b50 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a30:	e009      	b.n	8002a46 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002a32:	f7ff f88d 	bl	8001b50 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a40:	d901      	bls.n	8002a46 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e008      	b.n	8002a58 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ed      	bne.n	8002a32 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40028000 	.word	0x40028000

08002a64 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e1c3      	b.n	8002e00 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf0c      	ite	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	2300      	movne	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0e5b      	lsrs	r3, r3, #25
 8002cc2:	f003 021f 	and.w	r2, r3, #31
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 020f 	and.w	r2, r3, #15
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002d8c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d9c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e00b      	b.n	8002e38 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d105      	bne.n	8002e36 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f86d 	bl	8002f0c <ETH_SetMACConfig>

    return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
  }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e5a:	f002 fb1d 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 8002e5e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d908      	bls.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d804      	bhi.n	8002e7a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e027      	b.n	8002eca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d908      	bls.n	8002e94 <HAL_ETH_SetMDIOClockRange+0x54>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d204      	bcs.n	8002e94 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e01a      	b.n	8002eca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d303      	bcc.n	8002ea4 <HAL_ETH_SetMDIOClockRange+0x64>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d911      	bls.n	8002ec8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d908      	bls.n	8002ebe <HAL_ETH_SetMDIOClockRange+0x7e>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <HAL_ETH_SetMDIOClockRange+0xac>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d804      	bhi.n	8002ebe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	e005      	b.n	8002eca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e000      	b.n	8002eca <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002ec8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	01312cff 	.word	0x01312cff
 8002ee0:	02160ebf 	.word	0x02160ebf
 8002ee4:	03938700 	.word	0x03938700
 8002ee8:	05f5e0ff 	.word	0x05f5e0ff
 8002eec:	08f0d17f 	.word	0x08f0d17f

08002ef0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002f1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	791b      	ldrb	r3, [r3, #4]
 8002f24:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002f26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	7b1b      	ldrb	r3, [r3, #12]
 8002f2c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002f2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	7b5b      	ldrb	r3, [r3, #13]
 8002f34:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	7b9b      	ldrb	r3, [r3, #14]
 8002f3c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	7bdb      	ldrb	r3, [r3, #15]
 8002f44:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	7c12      	ldrb	r2, [r2, #16]
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d102      	bne.n	8002f56 <ETH_SetMACConfig+0x4a>
 8002f50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f54:	e000      	b.n	8002f58 <ETH_SetMACConfig+0x4c>
 8002f56:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	7c52      	ldrb	r2, [r2, #17]
 8002f5e:	2a00      	cmp	r2, #0
 8002f60:	d102      	bne.n	8002f68 <ETH_SetMACConfig+0x5c>
 8002f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f66:	e000      	b.n	8002f6a <ETH_SetMACConfig+0x5e>
 8002f68:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	7c9b      	ldrb	r3, [r3, #18]
 8002f70:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f72:	431a      	orrs	r2, r3
               macconf->Speed |
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002f78:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002f7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	7f1b      	ldrb	r3, [r3, #28]
 8002f84:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002f86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	7f5b      	ldrb	r3, [r3, #29]
 8002f8c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002f8e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	7f92      	ldrb	r2, [r2, #30]
 8002f94:	2a00      	cmp	r2, #0
 8002f96:	d102      	bne.n	8002f9e <ETH_SetMACConfig+0x92>
 8002f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9c:	e000      	b.n	8002fa0 <ETH_SetMACConfig+0x94>
 8002f9e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002fa0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	7fdb      	ldrb	r3, [r3, #31]
 8002fa6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002fa8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002fb0:	2a00      	cmp	r2, #0
 8002fb2:	d102      	bne.n	8002fba <ETH_SetMACConfig+0xae>
 8002fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb8:	e000      	b.n	8002fbc <ETH_SetMACConfig+0xb0>
 8002fba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002fbc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002fc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002fcc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b56      	ldr	r3, [pc, #344]	; (8003138 <ETH_SetMACConfig+0x22c>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	68f9      	ldr	r1, [r7, #12]
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ff6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ff8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003000:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003002:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800300a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800300c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003014:	2a00      	cmp	r2, #0
 8003016:	d102      	bne.n	800301e <ETH_SetMACConfig+0x112>
 8003018:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800301c:	e000      	b.n	8003020 <ETH_SetMACConfig+0x114>
 800301e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003020:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4b42      	ldr	r3, [pc, #264]	; (800313c <ETH_SetMACConfig+0x230>)
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	68f9      	ldr	r1, [r7, #12]
 800303a:	430b      	orrs	r3, r1
 800303c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003044:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <ETH_SetMACConfig+0x234>)
 8003056:	4013      	ands	r3, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	68f9      	ldr	r1, [r7, #12]
 800305e:	430b      	orrs	r3, r1
 8003060:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003068:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800306e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003076:	2a00      	cmp	r2, #0
 8003078:	d101      	bne.n	800307e <ETH_SetMACConfig+0x172>
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	e000      	b.n	8003080 <ETH_SetMACConfig+0x174>
 800307e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003080:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003092:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	68f9      	ldr	r1, [r7, #12]
 800309e:	430b      	orrs	r3, r1
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80030a8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030b0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f023 0103 	bic.w	r1, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80030d6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80030f2:	2a00      	cmp	r2, #0
 80030f4:	d101      	bne.n	80030fa <ETH_SetMACConfig+0x1ee>
 80030f6:	2240      	movs	r2, #64	; 0x40
 80030f8:	e000      	b.n	80030fc <ETH_SetMACConfig+0x1f0>
 80030fa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80030fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003104:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003106:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800310e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800311c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	430a      	orrs	r2, r1
 8003128:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	00048083 	.word	0x00048083
 800313c:	c0f88000 	.word	0xc0f88000
 8003140:	fffffef0 	.word	0xfffffef0

08003144 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b38      	ldr	r3, [pc, #224]	; (800323c <ETH_SetDMAConfig+0xf8>)
 800315a:	4013      	ands	r3, r2
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	6811      	ldr	r1, [r2, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800316a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	791b      	ldrb	r3, [r3, #4]
 8003170:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003176:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	7b1b      	ldrb	r3, [r3, #12]
 800317c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4b2c      	ldr	r3, [pc, #176]	; (8003240 <ETH_SetDMAConfig+0xfc>)
 800318e:	4013      	ands	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	68f9      	ldr	r1, [r7, #12]
 8003196:	430b      	orrs	r3, r1
 8003198:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800319c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	7b5b      	ldrb	r3, [r3, #13]
 80031a2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <ETH_SetDMAConfig+0x100>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	68f9      	ldr	r1, [r7, #12]
 80031c2:	430b      	orrs	r3, r1
 80031c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031c8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	7d1b      	ldrb	r3, [r3, #20]
 80031d4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80031d6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	7f5b      	ldrb	r3, [r3, #29]
 80031dc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <ETH_SetDMAConfig+0x104>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031fe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	7f1b      	ldrb	r3, [r3, #28]
 8003206:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003218:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <ETH_SetDMAConfig+0x108>)
 800321e:	4013      	ands	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	68f9      	ldr	r1, [r7, #12]
 8003226:	430b      	orrs	r3, r1
 8003228:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800322c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	ffff87fd 	.word	0xffff87fd
 8003240:	ffff2ffe 	.word	0xffff2ffe
 8003244:	fffec000 	.word	0xfffec000
 8003248:	ffc0efef 	.word	0xffc0efef
 800324c:	7fc0ffff 	.word	0x7fc0ffff

08003250 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b0a4      	sub	sp, #144	; 0x90
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800325e:	2300      	movs	r3, #0
 8003260:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800328c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003290:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003292:	2300      	movs	r3, #0
 8003294:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003298:	2300      	movs	r3, #0
 800329a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800329c:	2300      	movs	r3, #0
 800329e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80032a8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80032ac:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80032b4:	2300      	movs	r3, #0
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80032be:	2300      	movs	r3, #0
 80032c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80032ca:	2300      	movs	r3, #0
 80032cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80032d2:	2300      	movs	r3, #0
 80032d4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80032e8:	2320      	movs	r3, #32
 80032ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80032fa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003300:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003304:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800330c:	2302      	movs	r3, #2
 800330e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003312:	2300      	movs	r3, #0
 8003314:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800332a:	2300      	movs	r3, #0
 800332c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003338:	4619      	mov	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fde6 	bl	8002f0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003340:	2301      	movs	r3, #1
 8003342:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003344:	2301      	movs	r3, #1
 8003346:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003348:	2300      	movs	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003352:	2300      	movs	r3, #0
 8003354:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800335a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800335e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003364:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003368:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003370:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003376:	f107 0308 	add.w	r3, r7, #8
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fee1 	bl	8003144 <ETH_SetDMAConfig>
}
 8003382:	bf00      	nop
 8003384:	3790      	adds	r7, #144	; 0x90
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e01d      	b.n	80033d4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68d9      	ldr	r1, [r3, #12]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	440b      	add	r3, r1
 80033a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2200      	movs	r2, #0
 80033b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	3206      	adds	r2, #6
 80033ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d9de      	bls.n	8003398 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e8:	461a      	mov	r2, r3
 80033ea:	2303      	movs	r3, #3
 80033ec:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e023      	b.n	8003472 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6919      	ldr	r1, [r3, #16]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2200      	movs	r2, #0
 8003446:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	3212      	adds	r2, #18
 8003468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d9d8      	bls.n	800342a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800349e:	461a      	mov	r2, r3
 80034a0:	2303      	movs	r3, #3
 80034a2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80034d8:	b480      	push	{r7}
 80034da:	b08d      	sub	sp, #52	; 0x34
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3318      	adds	r3, #24
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003502:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800351a:	d007      	beq.n	800352c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	3304      	adds	r3, #4
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	e259      	b.n	80039e4 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d044      	beq.n	80035c6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	4b75      	ldr	r3, [pc, #468]	; (8003718 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003542:	4013      	ands	r3, r2
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003548:	431a      	orrs	r2, r3
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003568:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d027      	beq.n	80035c6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	b29a      	uxth	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	431a      	orrs	r2, r3
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80035b4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00e      	beq.n	80035f0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <ETH_Prepare_Tx_Descriptors+0x244>)
 80035d8:	4013      	ands	r3, r2
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	6992      	ldr	r2, [r2, #24]
 80035de:	431a      	orrs	r2, r3
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d036      	beq.n	8003676 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003614:	f3bf 8f5f 	dmb	sy
}
 8003618:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	3301      	adds	r3, #1
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	2b03      	cmp	r3, #3
 8003630:	d902      	bls.n	8003638 <ETH_Prepare_Tx_Descriptors+0x160>
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	3b04      	subs	r3, #4
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003640:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	3301      	adds	r3, #1
 8003646:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003654:	d10f      	bne.n	8003676 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003660:	f3bf 8f5f 	dmb	sy
}
 8003664:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003672:	2302      	movs	r3, #2
 8003674:	e1b6      	b.n	80039e4 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	3301      	adds	r3, #1
 800367a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <ETH_Prepare_Tx_Descriptors+0x244>)
 800368c:	4013      	ands	r3, r2
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	6852      	ldr	r2, [r2, #4]
 8003692:	431a      	orrs	r2, r3
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <ETH_Prepare_Tx_Descriptors+0x248>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	6852      	ldr	r2, [r2, #4]
 80036bc:	0412      	lsls	r2, r2, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	e008      	b.n	80036d8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <ETH_Prepare_Tx_Descriptors+0x248>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	6a3a      	ldr	r2, [r7, #32]
 80036d6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d021      	beq.n	8003728 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	04db      	lsls	r3, r3, #19
 80036f2:	431a      	orrs	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	69d2      	ldr	r2, [r2, #28]
 8003704:	431a      	orrs	r2, r3
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	e02e      	b.n	8003776 <ETH_Prepare_Tx_Descriptors+0x29e>
 8003718:	ffff0000 	.word	0xffff0000
 800371c:	ffffc000 	.word	0xffffc000
 8003720:	c000ffff 	.word	0xc000ffff
 8003724:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	4b7b      	ldr	r3, [pc, #492]	; (800391c <ETH_Prepare_Tx_Descriptors+0x444>)
 800372e:	4013      	ands	r3, r2
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	6852      	ldr	r2, [r2, #4]
 8003734:	431a      	orrs	r2, r3
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	431a      	orrs	r2, r3
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	431a      	orrs	r2, r3
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80037ac:	f3bf 8f5f 	dmb	sy
}
 80037b0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80da 	beq.w	8003980 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	431a      	orrs	r2, r3
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80037de:	e0cf      	b.n	8003980 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80037ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ee:	3301      	adds	r3, #1
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d902      	bls.n	80037fe <ETH_Prepare_Tx_Descriptors+0x326>
 80037f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fa:	3b04      	subs	r3, #4
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003806:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800381c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003820:	d007      	beq.n	8003832 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003826:	3304      	adds	r3, #4
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d029      	beq.n	8003886 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383e:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003840:	2300      	movs	r3, #0
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
 8003844:	e019      	b.n	800387a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003846:	f3bf 8f5f 	dmb	sy
}
 800384a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	3301      	adds	r3, #1
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	2b03      	cmp	r3, #3
 8003862:	d902      	bls.n	800386a <ETH_Prepare_Tx_Descriptors+0x392>
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	3b04      	subs	r3, #4
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800386e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003872:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	3301      	adds	r3, #1
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
 800387a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	429a      	cmp	r2, r3
 8003880:	d3e1      	bcc.n	8003846 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003882:	2302      	movs	r3, #2
 8003884:	e0ae      	b.n	80039e4 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	3301      	adds	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <ETH_Prepare_Tx_Descriptors+0x448>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	4b16      	ldr	r3, [pc, #88]	; (8003924 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	6852      	ldr	r2, [r2, #4]
 80038d2:	0412      	lsls	r2, r2, #16
 80038d4:	431a      	orrs	r2, r3
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	e008      	b.n	80038ee <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d018      	beq.n	800392c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003900:	4013      	ands	r3, r2
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	69d2      	ldr	r2, [r2, #28]
 8003906:	431a      	orrs	r2, r3
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	e020      	b.n	800395c <ETH_Prepare_Tx_Descriptors+0x484>
 800391a:	bf00      	nop
 800391c:	ffff8000 	.word	0xffff8000
 8003920:	ffffc000 	.word	0xffffc000
 8003924:	c000ffff 	.word	0xc000ffff
 8003928:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <ETH_Prepare_Tx_Descriptors+0x518>)
 8003932:	4013      	ands	r3, r2
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	6852      	ldr	r2, [r2, #4]
 8003938:	431a      	orrs	r2, r3
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	431a      	orrs	r2, r3
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	3301      	adds	r3, #1
 8003960:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003962:	f3bf 8f5f 	dmb	sy
}
 8003966:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f47f af2b 	bne.w	80037e0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	e005      	b.n	80039aa <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	3304      	adds	r3, #4
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80039cc:	b672      	cpsid	i
}
 80039ce:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	4413      	add	r3, r2
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80039de:	b662      	cpsie	i
}
 80039e0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3734      	adds	r7, #52	; 0x34
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	ffff8000 	.word	0xffff8000

080039f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b089      	sub	sp, #36	; 0x24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a02:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <HAL_GPIO_Init+0x234>)
 8003a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a06:	e194      	b.n	8003d32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8186 	beq.w	8003d2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d005      	beq.n	8003a38 <HAL_GPIO_Init+0x44>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d130      	bne.n	8003a9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	2203      	movs	r2, #3
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6e:	2201      	movs	r2, #1
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 0201 	and.w	r2, r3, #1
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d017      	beq.n	8003ad6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d123      	bne.n	8003b2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	08da      	lsrs	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3208      	adds	r2, #8
 8003aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	220f      	movs	r2, #15
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0203 	and.w	r2, r3, #3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80e0 	beq.w	8003d2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6c:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <HAL_GPIO_Init+0x238>)
 8003b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b72:	4a2e      	ldr	r2, [pc, #184]	; (8003c2c <HAL_GPIO_Init+0x238>)
 8003b74:	f043 0302 	orr.w	r3, r3, #2
 8003b78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_GPIO_Init+0x238>)
 8003b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8a:	4a29      	ldr	r2, [pc, #164]	; (8003c30 <HAL_GPIO_Init+0x23c>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a20      	ldr	r2, [pc, #128]	; (8003c34 <HAL_GPIO_Init+0x240>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d052      	beq.n	8003c5c <HAL_GPIO_Init+0x268>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <HAL_GPIO_Init+0x244>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d031      	beq.n	8003c22 <HAL_GPIO_Init+0x22e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <HAL_GPIO_Init+0x248>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <HAL_GPIO_Init+0x22a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_GPIO_Init+0x24c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x226>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_GPIO_Init+0x250>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x222>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <HAL_GPIO_Init+0x254>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x21e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <HAL_GPIO_Init+0x258>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x21a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <HAL_GPIO_Init+0x25c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x216>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <HAL_GPIO_Init+0x260>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x212>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <HAL_GPIO_Init+0x264>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x20e>
 8003bfe:	2309      	movs	r3, #9
 8003c00:	e02d      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c02:	230a      	movs	r3, #10
 8003c04:	e02b      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c06:	2308      	movs	r3, #8
 8003c08:	e029      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e027      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e025      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e023      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e021      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e01f      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e01d      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e01b      	b.n	8003c5e <HAL_GPIO_Init+0x26a>
 8003c26:	bf00      	nop
 8003c28:	58000080 	.word	0x58000080
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58000400 	.word	0x58000400
 8003c34:	58020000 	.word	0x58020000
 8003c38:	58020400 	.word	0x58020400
 8003c3c:	58020800 	.word	0x58020800
 8003c40:	58020c00 	.word	0x58020c00
 8003c44:	58021000 	.word	0x58021000
 8003c48:	58021400 	.word	0x58021400
 8003c4c:	58021800 	.word	0x58021800
 8003c50:	58021c00 	.word	0x58021c00
 8003c54:	58022000 	.word	0x58022000
 8003c58:	58022400 	.word	0x58022400
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	f002 0203 	and.w	r2, r2, #3
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	4093      	lsls	r3, r2
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c6e:	4938      	ldr	r1, [pc, #224]	; (8003d50 <HAL_GPIO_Init+0x35c>)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	3302      	adds	r3, #2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f ae63 	bne.w	8003a08 <HAL_GPIO_Init+0x14>
  }
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	3724      	adds	r7, #36	; 0x24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	58000400 	.word	0x58000400

08003d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	887b      	ldrh	r3, [r7, #2]
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	e001      	b.n	8003d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003d8c:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <HAL_HSEM_FastTake+0x2c>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3320      	adds	r3, #32
 8003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d96:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_HSEM_FastTake+0x30>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	58026400 	.word	0x58026400
 8003db4:	80000300 	.word	0x80000300

08003db8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003dc2:	4906      	ldr	r1, [pc, #24]	; (8003ddc <HAL_HSEM_Release+0x24>)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	58026400 	.word	0x58026400

08003de0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_HSEM_ActivateNotification+0x20>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4904      	ldr	r1, [pc, #16]	; (8003e00 <HAL_HSEM_ActivateNotification+0x20>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
#endif
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	58026500 	.word	0x58026500

08003e04 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_HSEM_IRQHandler+0x30>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <HAL_HSEM_IRQHandler+0x30>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	4906      	ldr	r1, [pc, #24]	; (8003e34 <HAL_HSEM_IRQHandler+0x30>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <HAL_HSEM_IRQHandler+0x30>)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f01b fb0b 	bl	801f440 <HAL_HSEM_FreeCallback>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	58026500 	.word	0x58026500

08003e38 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e40:	f7fd fe86 	bl	8001b50 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e03b      	b.n	8003ec8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003e70:	e00f      	b.n	8003e92 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003e72:	f7fd fe6d 	bl	8001b50 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b05      	cmp	r3, #5
 8003e7e:	d908      	bls.n	8003e92 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2240      	movs	r2, #64	; 0x40
 8003e84:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e01a      	b.n	8003ec8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e8      	bne.n	8003e72 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa13 	bl	80042cc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e048      	b.n	8003f74 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2200      	movs	r2, #0
 8003f28:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	221f      	movs	r2, #31
 8003f48:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e03e      	b.n	8004018 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e037      	b.n	8004018 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d126      	bne.n	800400a <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d11c      	bne.n	8004004 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d108      	bne.n	8003ff2 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fee:	611a      	str	r2, [r3, #16]
 8003ff0:	e00d      	b.n	800400e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004000:	611a      	str	r2, [r3, #16]
 8004002:	e004      	b.n	800400e <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
 8004008:	e001      	b.n	800400e <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
}
 8004018:	4618      	mov	r0, r3
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004030:	4b91      	ldr	r3, [pc, #580]	; (8004278 <HAL_MDMA_IRQHandler+0x254>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a91      	ldr	r2, [pc, #580]	; (800427c <HAL_MDMA_IRQHandler+0x258>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	4b8e      	ldr	r3, [pc, #568]	; (8004280 <HAL_MDMA_IRQHandler+0x25c>)
 8004046:	4413      	add	r3, r2
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2201      	movs	r2, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8004056:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 812d 	beq.w	80042c0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d054      	beq.n	800411e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d04d      	beq.n	800411e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0202 	bic.w	r2, r2, #2
 8004090:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a8:	f043 0201 	orr.w	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	669a      	str	r2, [r3, #104]	; 0x68
 80040b0:	e005      	b.n	80040be <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040cc:	f043 0204 	orr.w	r2, r3, #4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040e2:	f043 0208 	orr.w	r2, r3, #8
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f8:	f043 0210 	orr.w	r2, r3, #16
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800410e:	f043 0220 	orr.w	r2, r3, #32
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2210      	movs	r2, #16
 8004140:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d012      	beq.n	8004186 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2208      	movs	r2, #8
 8004174:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d012      	beq.n	80041ba <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2204      	movs	r2, #4
 80041a8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d039      	beq.n	800423c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d032      	beq.n	800423c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80041e4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d110      	bne.n	8004214 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	2b00      	cmp	r3, #0
 8004208:	d05c      	beq.n	80042c4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
        }
        return;
 8004212:	e057      	b.n	80042c4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2202      	movs	r2, #2
 800421a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004240:	2b00      	cmp	r3, #0
 8004242:	d040      	beq.n	80042c6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2204      	movs	r2, #4
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3301      	adds	r3, #1
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	429a      	cmp	r2, r3
 8004266:	d30d      	bcc.n	8004284 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f2      	bne.n	800425c <HAL_MDMA_IRQHandler+0x238>
 8004276:	e006      	b.n	8004286 <HAL_MDMA_IRQHandler+0x262>
 8004278:	24000000 	.word	0x24000000
 800427c:	1b4e81b5 	.word	0x1b4e81b5
 8004280:	adffffc0 	.word	0xadffffc0
        break;
 8004284:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d004      	beq.n	80042a6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2203      	movs	r2, #3
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042a4:	e003      	b.n	80042ae <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
 80042be:	e002      	b.n	80042c6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80042c4:	bf00      	nop
    }
  }
}
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68d9      	ldr	r1, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80042f2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80042fe:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800430a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	3b01      	subs	r3, #1
 8004312:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004314:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004320:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004322:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d107      	bne.n	800433e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800433c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	2b00      	cmp	r3, #0
 800434c:	da11      	bge.n	8004372 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800435c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	425b      	negs	r3, r3
 8004364:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	b292      	uxth	r2, r2
 800436e:	621a      	str	r2, [r3, #32]
 8004370:	e006      	b.n	8004380 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	b292      	uxth	r2, r2
 800437e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	da15      	bge.n	80043b4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004396:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	425b      	negs	r3, r3
 800439e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6a19      	ldr	r1, [r3, #32]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	041a      	lsls	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	621a      	str	r2, [r3, #32]
 80043b2:	e009      	b.n	80043c8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6a19      	ldr	r1, [r3, #32]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	041a      	lsls	r2, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d006      	beq.n	80043e0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	629a      	str	r2, [r3, #40]	; 0x28
 80043de:	e003      	b.n	80043e8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2200      	movs	r2, #0
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	2b06      	cmp	r3, #6
 800440e:	d00a      	beq.n	8004426 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d001      	beq.n	8004422 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e040      	b.n	80044a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e03e      	b.n	80044a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800442e:	491f      	ldr	r1, [pc, #124]	; (80044ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4313      	orrs	r3, r2
 8004434:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004436:	f7fd fb8b 	bl	8001b50 <HAL_GetTick>
 800443a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800443c:	e009      	b.n	8004452 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800443e:	f7fd fb87 	bl	8001b50 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800444c:	d901      	bls.n	8004452 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e028      	b.n	80044a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004452:	4b16      	ldr	r3, [pc, #88]	; (80044ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445e:	d1ee      	bne.n	800443e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b1e      	cmp	r3, #30
 8004464:	d008      	beq.n	8004478 <HAL_PWREx_ConfigSupply+0x7c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b2e      	cmp	r3, #46	; 0x2e
 800446a:	d005      	beq.n	8004478 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b1d      	cmp	r3, #29
 8004470:	d002      	beq.n	8004478 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b2d      	cmp	r3, #45	; 0x2d
 8004476:	d114      	bne.n	80044a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004478:	f7fd fb6a 	bl	8001b50 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800447e:	e009      	b.n	8004494 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004480:	f7fd fb66 	bl	8001b50 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800448e:	d901      	bls.n	8004494 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e007      	b.n	80044a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d1ee      	bne.n	8004480 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	58024800 	.word	0x58024800

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08c      	sub	sp, #48	; 0x30
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f000 bc48 	b.w	8004d54 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8088 	beq.w	80045e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d2:	4b99      	ldr	r3, [pc, #612]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044dc:	4b96      	ldr	r3, [pc, #600]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d007      	beq.n	80044f8 <HAL_RCC_OscConfig+0x48>
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ea:	2b18      	cmp	r3, #24
 80044ec:	d111      	bne.n	8004512 <HAL_RCC_OscConfig+0x62>
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d10c      	bne.n	8004512 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	4b8f      	ldr	r3, [pc, #572]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d06d      	beq.n	80045e0 <HAL_RCC_OscConfig+0x130>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d169      	bne.n	80045e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	f000 bc21 	b.w	8004d54 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451a:	d106      	bne.n	800452a <HAL_RCC_OscConfig+0x7a>
 800451c:	4b86      	ldr	r3, [pc, #536]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a85      	ldr	r2, [pc, #532]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e02e      	b.n	8004588 <HAL_RCC_OscConfig+0xd8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x9c>
 8004532:	4b81      	ldr	r3, [pc, #516]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a80      	ldr	r2, [pc, #512]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b7e      	ldr	r3, [pc, #504]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a7d      	ldr	r2, [pc, #500]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e01d      	b.n	8004588 <HAL_RCC_OscConfig+0xd8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0xc0>
 8004556:	4b78      	ldr	r3, [pc, #480]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a77      	ldr	r2, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 800455c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b75      	ldr	r3, [pc, #468]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a74      	ldr	r2, [pc, #464]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e00b      	b.n	8004588 <HAL_RCC_OscConfig+0xd8>
 8004570:	4b71      	ldr	r3, [pc, #452]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a70      	ldr	r2, [pc, #448]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	4b6e      	ldr	r3, [pc, #440]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6d      	ldr	r2, [pc, #436]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fd fade 	bl	8001b50 <HAL_GetTick>
 8004594:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fd fada 	bl	8001b50 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e3d4      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045aa:	4b63      	ldr	r3, [pc, #396]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0xe8>
 80045b6:	e014      	b.n	80045e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd faca 	bl	8001b50 <HAL_GetTick>
 80045bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fd fac6 	bl	8001b50 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e3c0      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045d2:	4b59      	ldr	r3, [pc, #356]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x110>
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80ca 	beq.w	8004784 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f0:	4b51      	ldr	r3, [pc, #324]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045fa:	4b4f      	ldr	r3, [pc, #316]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <HAL_RCC_OscConfig+0x166>
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	2b18      	cmp	r3, #24
 800460a:	d156      	bne.n	80046ba <HAL_RCC_OscConfig+0x20a>
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d151      	bne.n	80046ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004616:	4b48      	ldr	r3, [pc, #288]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_RCC_OscConfig+0x17e>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e392      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800462e:	4b42      	ldr	r3, [pc, #264]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 0219 	bic.w	r2, r3, #25
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	493f      	ldr	r1, [pc, #252]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd fa86 	bl	8001b50 <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004648:	f7fd fa82 	bl	8001b50 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e37c      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800465a:	4b37      	ldr	r3, [pc, #220]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	f7fd faa3 	bl	8001bb0 <HAL_GetREVID>
 800466a:	4603      	mov	r3, r0
 800466c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004670:	4293      	cmp	r3, r2
 8004672:	d817      	bhi.n	80046a4 <HAL_RCC_OscConfig+0x1f4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	d108      	bne.n	800468e <HAL_RCC_OscConfig+0x1de>
 800467c:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004684:	4a2c      	ldr	r2, [pc, #176]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800468c:	e07a      	b.n	8004784 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468e:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	031b      	lsls	r3, r3, #12
 800469c:	4926      	ldr	r1, [pc, #152]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a2:	e06f      	b.n	8004784 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	4921      	ldr	r1, [pc, #132]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b8:	e064      	b.n	8004784 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d047      	beq.n	8004752 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 0219 	bic.w	r2, r3, #25
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	491a      	ldr	r1, [pc, #104]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fd fa3c 	bl	8001b50 <HAL_GetTick>
 80046d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046dc:	f7fd fa38 	bl	8001b50 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e332      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ee:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fa:	f7fd fa59 	bl	8001bb0 <HAL_GetREVID>
 80046fe:	4603      	mov	r3, r0
 8004700:	f241 0203 	movw	r2, #4099	; 0x1003
 8004704:	4293      	cmp	r3, r2
 8004706:	d819      	bhi.n	800473c <HAL_RCC_OscConfig+0x28c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d108      	bne.n	8004722 <HAL_RCC_OscConfig+0x272>
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004718:	4a07      	ldr	r2, [pc, #28]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 800471a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800471e:	6053      	str	r3, [r2, #4]
 8004720:	e030      	b.n	8004784 <HAL_RCC_OscConfig+0x2d4>
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	031b      	lsls	r3, r3, #12
 8004730:	4901      	ldr	r1, [pc, #4]	; (8004738 <HAL_RCC_OscConfig+0x288>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
 8004736:	e025      	b.n	8004784 <HAL_RCC_OscConfig+0x2d4>
 8004738:	58024400 	.word	0x58024400
 800473c:	4b9a      	ldr	r3, [pc, #616]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	4997      	ldr	r1, [pc, #604]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
 8004750:	e018      	b.n	8004784 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004752:	4b95      	ldr	r3, [pc, #596]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a94      	ldr	r2, [pc, #592]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fd f9f7 	bl	8001b50 <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004766:	f7fd f9f3 	bl	8001b50 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e2ed      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004778:	4b8b      	ldr	r3, [pc, #556]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80a9 	beq.w	80048e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004792:	4b85      	ldr	r3, [pc, #532]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800479c:	4b82      	ldr	r3, [pc, #520]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d007      	beq.n	80047b8 <HAL_RCC_OscConfig+0x308>
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b18      	cmp	r3, #24
 80047ac:	d13a      	bne.n	8004824 <HAL_RCC_OscConfig+0x374>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d135      	bne.n	8004824 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047b8:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_OscConfig+0x320>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	2b80      	cmp	r3, #128	; 0x80
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e2c1      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047d0:	f7fd f9ee 	bl	8001bb0 <HAL_GetREVID>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80047da:	4293      	cmp	r3, r2
 80047dc:	d817      	bhi.n	800480e <HAL_RCC_OscConfig+0x35e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d108      	bne.n	80047f8 <HAL_RCC_OscConfig+0x348>
 80047e6:	4b70      	ldr	r3, [pc, #448]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047ee:	4a6e      	ldr	r2, [pc, #440]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80047f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047f6:	e075      	b.n	80048e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047f8:	4b6b      	ldr	r3, [pc, #428]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	069b      	lsls	r3, r3, #26
 8004806:	4968      	ldr	r1, [pc, #416]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800480c:	e06a      	b.n	80048e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800480e:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	061b      	lsls	r3, r3, #24
 800481c:	4962      	ldr	r1, [pc, #392]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800481e:	4313      	orrs	r3, r2
 8004820:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004822:	e05f      	b.n	80048e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d042      	beq.n	80048b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800482c:	4b5e      	ldr	r3, [pc, #376]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a5d      	ldr	r2, [pc, #372]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd f98a 	bl	8001b50 <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004840:	f7fd f986 	bl	8001b50 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e280      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004852:	4b55      	ldr	r3, [pc, #340]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800485e:	f7fd f9a7 	bl	8001bb0 <HAL_GetREVID>
 8004862:	4603      	mov	r3, r0
 8004864:	f241 0203 	movw	r2, #4099	; 0x1003
 8004868:	4293      	cmp	r3, r2
 800486a:	d817      	bhi.n	800489c <HAL_RCC_OscConfig+0x3ec>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	2b20      	cmp	r3, #32
 8004872:	d108      	bne.n	8004886 <HAL_RCC_OscConfig+0x3d6>
 8004874:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800487c:	4a4a      	ldr	r2, [pc, #296]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800487e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004882:	6053      	str	r3, [r2, #4]
 8004884:	e02e      	b.n	80048e4 <HAL_RCC_OscConfig+0x434>
 8004886:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	069b      	lsls	r3, r3, #26
 8004894:	4944      	ldr	r1, [pc, #272]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	604b      	str	r3, [r1, #4]
 800489a:	e023      	b.n	80048e4 <HAL_RCC_OscConfig+0x434>
 800489c:	4b42      	ldr	r3, [pc, #264]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	061b      	lsls	r3, r3, #24
 80048aa:	493f      	ldr	r1, [pc, #252]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60cb      	str	r3, [r1, #12]
 80048b0:	e018      	b.n	80048e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048b2:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3c      	ldr	r2, [pc, #240]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80048b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fd f947 	bl	8001b50 <HAL_GetTick>
 80048c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048c6:	f7fd f943 	bl	8001b50 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e23d      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048d8:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d036      	beq.n	800495e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d019      	beq.n	800492c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f8:	4b2b      	ldr	r3, [pc, #172]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80048fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fc:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd f924 	bl	8001b50 <HAL_GetTick>
 8004908:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490c:	f7fd f920 	bl	8001b50 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e21a      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800491e:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x45c>
 800492a:	e018      	b.n	800495e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800492e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004930:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004938:	f7fd f90a 	bl	8001b50 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004940:	f7fd f906 	bl	8001b50 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e200      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d039      	beq.n	80049de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01c      	beq.n	80049ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800497c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800497e:	f7fd f8e7 	bl	8001b50 <HAL_GetTick>
 8004982:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004986:	f7fd f8e3 	bl	8001b50 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e1dd      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x4d6>
 80049a4:	e01b      	b.n	80049de <HAL_RCC_OscConfig+0x52e>
 80049a6:	bf00      	nop
 80049a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049ac:	4b9b      	ldr	r3, [pc, #620]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a9a      	ldr	r2, [pc, #616]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 80049b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049b8:	f7fd f8ca 	bl	8001b50 <HAL_GetTick>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049c0:	f7fd f8c6 	bl	8001b50 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e1c0      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049d2:	4b92      	ldr	r3, [pc, #584]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8081 	beq.w	8004aee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049ec:	4b8c      	ldr	r3, [pc, #560]	; (8004c20 <HAL_RCC_OscConfig+0x770>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a8b      	ldr	r2, [pc, #556]	; (8004c20 <HAL_RCC_OscConfig+0x770>)
 80049f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049f8:	f7fd f8aa 	bl	8001b50 <HAL_GetTick>
 80049fc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a00:	f7fd f8a6 	bl	8001b50 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1a0      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a12:	4b83      	ldr	r3, [pc, #524]	; (8004c20 <HAL_RCC_OscConfig+0x770>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d106      	bne.n	8004a34 <HAL_RCC_OscConfig+0x584>
 8004a26:	4b7d      	ldr	r3, [pc, #500]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	4a7c      	ldr	r2, [pc, #496]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6713      	str	r3, [r2, #112]	; 0x70
 8004a32:	e02d      	b.n	8004a90 <HAL_RCC_OscConfig+0x5e0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCC_OscConfig+0x5a6>
 8004a3c:	4b77      	ldr	r3, [pc, #476]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a40:	4a76      	ldr	r2, [pc, #472]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	6713      	str	r3, [r2, #112]	; 0x70
 8004a48:	4b74      	ldr	r3, [pc, #464]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	4a73      	ldr	r2, [pc, #460]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a4e:	f023 0304 	bic.w	r3, r3, #4
 8004a52:	6713      	str	r3, [r2, #112]	; 0x70
 8004a54:	e01c      	b.n	8004a90 <HAL_RCC_OscConfig+0x5e0>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b05      	cmp	r3, #5
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x5c8>
 8004a5e:	4b6f      	ldr	r3, [pc, #444]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	4a6e      	ldr	r2, [pc, #440]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a64:	f043 0304 	orr.w	r3, r3, #4
 8004a68:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6a:	4b6c      	ldr	r3, [pc, #432]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4a6b      	ldr	r2, [pc, #428]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6713      	str	r3, [r2, #112]	; 0x70
 8004a76:	e00b      	b.n	8004a90 <HAL_RCC_OscConfig+0x5e0>
 8004a78:	4b68      	ldr	r3, [pc, #416]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a67      	ldr	r2, [pc, #412]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
 8004a84:	4b65      	ldr	r3, [pc, #404]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	4a64      	ldr	r2, [pc, #400]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004a8a:	f023 0304 	bic.w	r3, r3, #4
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d015      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fd f85a 	bl	8001b50 <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa0:	f7fd f856 	bl	8001b50 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e14e      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ab6:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0ee      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x5f0>
 8004ac2:	e014      	b.n	8004aee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fd f844 	bl	8001b50 <HAL_GetTick>
 8004ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004acc:	f7fd f840 	bl	8001b50 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e138      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ae2:	4b4e      	ldr	r3, [pc, #312]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1ee      	bne.n	8004acc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 812d 	beq.w	8004d52 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004af8:	4b48      	ldr	r3, [pc, #288]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b00:	2b18      	cmp	r3, #24
 8004b02:	f000 80bd 	beq.w	8004c80 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	f040 809e 	bne.w	8004c4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b10:	4b42      	ldr	r3, [pc, #264]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a41      	ldr	r2, [pc, #260]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd f818 	bl	8001b50 <HAL_GetTick>
 8004b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fd f814 	bl	8001b50 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e10e      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b36:	4b39      	ldr	r3, [pc, #228]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b42:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b46:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_OscConfig+0x774>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b52:	0112      	lsls	r2, r2, #4
 8004b54:	430a      	orrs	r2, r1
 8004b56:	4931      	ldr	r1, [pc, #196]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	3b01      	subs	r3, #1
 8004b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	025b      	lsls	r3, r3, #9
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	3b01      	subs	r3, #1
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	3b01      	subs	r3, #1
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b8c:	4923      	ldr	r1, [pc, #140]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b92:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	4a21      	ldr	r2, [pc, #132]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b9e:	4b1f      	ldr	r3, [pc, #124]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba2:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <HAL_RCC_OscConfig+0x778>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004baa:	00d2      	lsls	r2, r2, #3
 8004bac:	491b      	ldr	r1, [pc, #108]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	f023 020c 	bic.w	r2, r3, #12
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	4917      	ldr	r1, [pc, #92]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004bc4:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	f023 0202 	bic.w	r2, r3, #2
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	4912      	ldr	r1, [pc, #72]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bd6:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	4a10      	ldr	r2, [pc, #64]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be2:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	4a0d      	ldr	r2, [pc, #52]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004bfa:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	4a07      	ldr	r2, [pc, #28]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c06:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fc ff9d 	bl	8001b50 <HAL_GetTick>
 8004c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c18:	e011      	b.n	8004c3e <HAL_RCC_OscConfig+0x78e>
 8004c1a:	bf00      	nop
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	58024800 	.word	0x58024800
 8004c24:	fffffc0c 	.word	0xfffffc0c
 8004c28:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c2c:	f7fc ff90 	bl	8001b50 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e08a      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f0      	beq.n	8004c2c <HAL_RCC_OscConfig+0x77c>
 8004c4a:	e082      	b.n	8004d52 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4c:	4b43      	ldr	r3, [pc, #268]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a42      	ldr	r2, [pc, #264]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004c52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fc ff7a 	bl	8001b50 <HAL_GetTick>
 8004c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c60:	f7fc ff76 	bl	8001b50 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e070      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c72:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f0      	bne.n	8004c60 <HAL_RCC_OscConfig+0x7b0>
 8004c7e:	e068      	b.n	8004d52 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c86:	4b35      	ldr	r3, [pc, #212]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d031      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f003 0203 	and.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d12a      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d122      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d11a      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	0a5b      	lsrs	r3, r3, #9
 8004cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d111      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	0c1b      	lsrs	r3, r3, #16
 8004cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d108      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e02b      	b.n	8004d54 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004cfc:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	08db      	lsrs	r3, r3, #3
 8004d02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d01f      	beq.n	8004d52 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	4a11      	ldr	r2, [pc, #68]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d1e:	f7fc ff17 	bl	8001b50 <HAL_GetTick>
 8004d22:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d24:	bf00      	nop
 8004d26:	f7fc ff13 	bl	8001b50 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d0f9      	beq.n	8004d26 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_RCC_OscConfig+0x8b0>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004d3e:	00d2      	lsls	r2, r2, #3
 8004d40:	4906      	ldr	r1, [pc, #24]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d46:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <HAL_RCC_OscConfig+0x8ac>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3730      	adds	r7, #48	; 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	ffff0007 	.word	0xffff0007

08004d64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e19c      	b.n	80050b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d78:	4b8a      	ldr	r3, [pc, #552]	; (8004fa4 <HAL_RCC_ClockConfig+0x240>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d910      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	4b87      	ldr	r3, [pc, #540]	; (8004fa4 <HAL_RCC_ClockConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 020f 	bic.w	r2, r3, #15
 8004d8e:	4985      	ldr	r1, [pc, #532]	; (8004fa4 <HAL_RCC_ClockConfig+0x240>)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b83      	ldr	r3, [pc, #524]	; (8004fa4 <HAL_RCC_ClockConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e184      	b.n	80050b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d010      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	4b7b      	ldr	r3, [pc, #492]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d908      	bls.n	8004dd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dc4:	4b78      	ldr	r3, [pc, #480]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	4975      	ldr	r1, [pc, #468]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d010      	beq.n	8004e04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	4b70      	ldr	r3, [pc, #448]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d908      	bls.n	8004e04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004df2:	4b6d      	ldr	r3, [pc, #436]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	496a      	ldr	r1, [pc, #424]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d010      	beq.n	8004e32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	4b64      	ldr	r3, [pc, #400]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d908      	bls.n	8004e32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e20:	4b61      	ldr	r3, [pc, #388]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	495e      	ldr	r1, [pc, #376]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d010      	beq.n	8004e60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d908      	bls.n	8004e60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e4e:	4b56      	ldr	r3, [pc, #344]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	4953      	ldr	r1, [pc, #332]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d010      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	4b4d      	ldr	r3, [pc, #308]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d908      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e7c:	4b4a      	ldr	r3, [pc, #296]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f023 020f 	bic.w	r2, r3, #15
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4947      	ldr	r1, [pc, #284]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d055      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e9a:	4b43      	ldr	r3, [pc, #268]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	4940      	ldr	r1, [pc, #256]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004eb4:	4b3c      	ldr	r3, [pc, #240]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d121      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0f6      	b.n	80050b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ecc:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d115      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0ea      	b.n	80050b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ee4:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0de      	b.n	80050b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ef4:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0d6      	b.n	80050b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f04:	4b28      	ldr	r3, [pc, #160]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	f023 0207 	bic.w	r2, r3, #7
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4925      	ldr	r1, [pc, #148]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f16:	f7fc fe1b 	bl	8001b50 <HAL_GetTick>
 8004f1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1e:	f7fc fe17 	bl	8001b50 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0be      	b.n	80050b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d1eb      	bne.n	8004f1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d208      	bcs.n	8004f74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f023 020f 	bic.w	r2, r3, #15
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	490e      	ldr	r1, [pc, #56]	; (8004fa8 <HAL_RCC_ClockConfig+0x244>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_RCC_ClockConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d214      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <HAL_RCC_ClockConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 020f 	bic.w	r2, r3, #15
 8004f8a:	4906      	ldr	r1, [pc, #24]	; (8004fa4 <HAL_RCC_ClockConfig+0x240>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <HAL_RCC_ClockConfig+0x240>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e086      	b.n	80050b2 <HAL_RCC_ClockConfig+0x34e>
 8004fa4:	52002000 	.word	0x52002000
 8004fa8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d010      	beq.n	8004fda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d208      	bcs.n	8004fda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fc8:	4b3c      	ldr	r3, [pc, #240]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	4939      	ldr	r1, [pc, #228]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	4b34      	ldr	r3, [pc, #208]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d208      	bcs.n	8005008 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ff6:	4b31      	ldr	r3, [pc, #196]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	492e      	ldr	r1, [pc, #184]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8005004:	4313      	orrs	r3, r2
 8005006:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	4b28      	ldr	r3, [pc, #160]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005020:	429a      	cmp	r2, r3
 8005022:	d208      	bcs.n	8005036 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005024:	4b25      	ldr	r3, [pc, #148]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	4922      	ldr	r1, [pc, #136]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8005032:	4313      	orrs	r3, r2
 8005034:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d010      	beq.n	8005064 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800504e:	429a      	cmp	r2, r3
 8005050:	d208      	bcs.n	8005064 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005052:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4917      	ldr	r1, [pc, #92]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8005060:	4313      	orrs	r3, r2
 8005062:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005064:	f000 f89e 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8005068:	4602      	mov	r2, r0
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	4912      	ldr	r1, [pc, #72]	; (80050c0 <HAL_RCC_ClockConfig+0x35c>)
 8005076:	5ccb      	ldrb	r3, [r1, r3]
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005082:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <HAL_RCC_ClockConfig+0x358>)
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <HAL_RCC_ClockConfig+0x35c>)
 800508c:	5cd3      	ldrb	r3, [r2, r3]
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
 8005098:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <HAL_RCC_ClockConfig+0x360>)
 800509a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800509c:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <HAL_RCC_ClockConfig+0x364>)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80050a2:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <HAL_RCC_ClockConfig+0x368>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc fa1a 	bl	80014e0 <HAL_InitTick>
 80050ac:	4603      	mov	r3, r0
 80050ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	58024400 	.word	0x58024400
 80050c0:	08024a60 	.word	0x08024a60
 80050c4:	24000004 	.word	0x24000004
 80050c8:	24000000 	.word	0x24000000
 80050cc:	24000008 	.word	0x24000008

080050d0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08c      	sub	sp, #48	; 0x30
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d12a      	bne.n	8005138 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80050e2:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 80050e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e8:	4a2b      	ldr	r2, [pc, #172]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050f2:	4b29      	ldr	r3, [pc, #164]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 80050f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005106:	2302      	movs	r3, #2
 8005108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800510a:	2303      	movs	r3, #3
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510e:	2300      	movs	r3, #0
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005112:	2300      	movs	r3, #0
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005116:	f107 031c 	add.w	r3, r7, #28
 800511a:	4619      	mov	r1, r3
 800511c:	481f      	ldr	r0, [pc, #124]	; (800519c <HAL_RCC_MCOConfig+0xcc>)
 800511e:	f7fe fc69 	bl	80039f4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	430b      	orrs	r3, r1
 8005130:	4919      	ldr	r1, [pc, #100]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 8005132:	4313      	orrs	r3, r2
 8005134:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005136:	e02a      	b.n	800518e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 800513a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800513e:	4a16      	ldr	r2, [pc, #88]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 8005140:	f043 0304 	orr.w	r3, r3, #4
 8005144:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005148:	4b13      	ldr	r3, [pc, #76]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 800514a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005160:	2303      	movs	r3, #3
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005164:	2300      	movs	r3, #0
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005168:	2300      	movs	r3, #0
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800516c:	f107 031c 	add.w	r3, r7, #28
 8005170:	4619      	mov	r1, r3
 8005172:	480b      	ldr	r0, [pc, #44]	; (80051a0 <HAL_RCC_MCOConfig+0xd0>)
 8005174:	f7fe fc3e 	bl	80039f4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	01d9      	lsls	r1, r3, #7
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	430b      	orrs	r3, r1
 8005188:	4903      	ldr	r1, [pc, #12]	; (8005198 <HAL_RCC_MCOConfig+0xc8>)
 800518a:	4313      	orrs	r3, r2
 800518c:	610b      	str	r3, [r1, #16]
}
 800518e:	bf00      	nop
 8005190:	3730      	adds	r7, #48	; 0x30
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	58020000 	.word	0x58020000
 80051a0:	58020800 	.word	0x58020800

080051a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051aa:	4bb3      	ldr	r3, [pc, #716]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b2:	2b18      	cmp	r3, #24
 80051b4:	f200 8155 	bhi.w	8005462 <HAL_RCC_GetSysClockFreq+0x2be>
 80051b8:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	08005225 	.word	0x08005225
 80051c4:	08005463 	.word	0x08005463
 80051c8:	08005463 	.word	0x08005463
 80051cc:	08005463 	.word	0x08005463
 80051d0:	08005463 	.word	0x08005463
 80051d4:	08005463 	.word	0x08005463
 80051d8:	08005463 	.word	0x08005463
 80051dc:	08005463 	.word	0x08005463
 80051e0:	0800524b 	.word	0x0800524b
 80051e4:	08005463 	.word	0x08005463
 80051e8:	08005463 	.word	0x08005463
 80051ec:	08005463 	.word	0x08005463
 80051f0:	08005463 	.word	0x08005463
 80051f4:	08005463 	.word	0x08005463
 80051f8:	08005463 	.word	0x08005463
 80051fc:	08005463 	.word	0x08005463
 8005200:	08005251 	.word	0x08005251
 8005204:	08005463 	.word	0x08005463
 8005208:	08005463 	.word	0x08005463
 800520c:	08005463 	.word	0x08005463
 8005210:	08005463 	.word	0x08005463
 8005214:	08005463 	.word	0x08005463
 8005218:	08005463 	.word	0x08005463
 800521c:	08005463 	.word	0x08005463
 8005220:	08005257 	.word	0x08005257
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005224:	4b94      	ldr	r3, [pc, #592]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005230:	4b91      	ldr	r3, [pc, #580]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	08db      	lsrs	r3, r3, #3
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	4a90      	ldr	r2, [pc, #576]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005242:	e111      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005244:	4b8d      	ldr	r3, [pc, #564]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005246:	61bb      	str	r3, [r7, #24]
      break;
 8005248:	e10e      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800524a:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800524c:	61bb      	str	r3, [r7, #24]
      break;
 800524e:	e10b      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005250:	4b8c      	ldr	r3, [pc, #560]	; (8005484 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005252:	61bb      	str	r3, [r7, #24]
      break;
 8005254:	e108      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005256:	4b88      	ldr	r3, [pc, #544]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005260:	4b85      	ldr	r3, [pc, #532]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800526a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800526c:	4b82      	ldr	r3, [pc, #520]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005276:	4b80      	ldr	r3, [pc, #512]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	08db      	lsrs	r3, r3, #3
 800527c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80e1 	beq.w	800545c <HAL_RCC_GetSysClockFreq+0x2b8>
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b02      	cmp	r3, #2
 800529e:	f000 8083 	beq.w	80053a8 <HAL_RCC_GetSysClockFreq+0x204>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	f200 80a1 	bhi.w	80053ec <HAL_RCC_GetSysClockFreq+0x248>
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x114>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d056      	beq.n	8005364 <HAL_RCC_GetSysClockFreq+0x1c0>
 80052b6:	e099      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b8:	4b6f      	ldr	r3, [pc, #444]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02d      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052c4:	4b6c      	ldr	r3, [pc, #432]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	08db      	lsrs	r3, r3, #3
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	4a6b      	ldr	r2, [pc, #428]	; (800547c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
 80052d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ee:	4b62      	ldr	r3, [pc, #392]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005302:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005488 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800531e:	e087      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800548c <HAL_RCC_GetSysClockFreq+0x2e8>
 800532e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005332:	4b51      	ldr	r3, [pc, #324]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005342:	ed97 6a02 	vldr	s12, [r7, #8]
 8005346:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800534a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005362:	e065      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005490 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b40      	ldr	r3, [pc, #256]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a02 	vldr	s12, [r7, #8]
 800538a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053a6:	e043      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005494 <HAL_RCC_GetSysClockFreq+0x2f0>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b2f      	ldr	r3, [pc, #188]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005488 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053ea:	e021      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005490 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005412:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005488 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800542e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005430:	4b11      	ldr	r3, [pc, #68]	; (8005478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	0a5b      	lsrs	r3, r3, #9
 8005436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543a:	3301      	adds	r3, #1
 800543c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005448:	edd7 6a07 	vldr	s13, [r7, #28]
 800544c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005454:	ee17 3a90 	vmov	r3, s15
 8005458:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800545a:	e005      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	61bb      	str	r3, [r7, #24]
      break;
 8005460:	e002      	b.n	8005468 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005464:	61bb      	str	r3, [r7, #24]
      break;
 8005466:	bf00      	nop
  }

  return sysclockfreq;
 8005468:	69bb      	ldr	r3, [r7, #24]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3724      	adds	r7, #36	; 0x24
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	58024400 	.word	0x58024400
 800547c:	03d09000 	.word	0x03d09000
 8005480:	003d0900 	.word	0x003d0900
 8005484:	017d7840 	.word	0x017d7840
 8005488:	46000000 	.word	0x46000000
 800548c:	4c742400 	.word	0x4c742400
 8005490:	4a742400 	.word	0x4a742400
 8005494:	4bbebc20 	.word	0x4bbebc20

08005498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800549e:	f7ff fe81 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 80054a2:	4602      	mov	r2, r0
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	0a1b      	lsrs	r3, r3, #8
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	490f      	ldr	r1, [pc, #60]	; (80054ec <HAL_RCC_GetHCLKFreq+0x54>)
 80054b0:	5ccb      	ldrb	r3, [r1, r3]
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	4a09      	ldr	r2, [pc, #36]	; (80054ec <HAL_RCC_GetHCLKFreq+0x54>)
 80054c6:	5cd3      	ldrb	r3, [r2, r3]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	fa22 f303 	lsr.w	r3, r2, r3
 80054d2:	4a07      	ldr	r2, [pc, #28]	; (80054f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80054d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054d6:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80054de:	681b      	ldr	r3, [r3, #0]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	58024400 	.word	0x58024400
 80054ec:	08024a60 	.word	0x08024a60
 80054f0:	24000004 	.word	0x24000004
 80054f4:	24000000 	.word	0x24000000

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054fc:	f7ff ffcc 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b06      	ldr	r3, [pc, #24]	; (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4904      	ldr	r1, [pc, #16]	; (8005520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	58024400 	.word	0x58024400
 8005520:	08024a60 	.word	0x08024a60

08005524 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	223f      	movs	r2, #63	; 0x3f
 8005532:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005534:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <HAL_RCC_GetClockConfig+0x7c>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0207 	and.w	r2, r3, #7
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <HAL_RCC_GetClockConfig+0x7c>)
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800554c:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <HAL_RCC_GetClockConfig+0x7c>)
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_RCC_GetClockConfig+0x7c>)
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005564:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <HAL_RCC_GetClockConfig+0x7c>)
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <HAL_RCC_GetClockConfig+0x7c>)
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <HAL_RCC_GetClockConfig+0x7c>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCC_GetClockConfig+0x80>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 020f 	and.w	r2, r3, #15
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	601a      	str	r2, [r3, #0]
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	58024400 	.word	0x58024400
 80055a4:	52002000 	.word	0x52002000

080055a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055ac:	b0cc      	sub	sp, #304	; 0x130
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80055cc:	2500      	movs	r5, #0
 80055ce:	ea54 0305 	orrs.w	r3, r4, r5
 80055d2:	d049      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055de:	d02f      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055e4:	d828      	bhi.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055ea:	d01a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f0:	d822      	bhi.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055fa:	d007      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055fc:	e01c      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fe:	4bb8      	ldr	r3, [pc, #736]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	4ab7      	ldr	r2, [pc, #732]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005608:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800560a:	e01a      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800560c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005610:	3308      	adds	r3, #8
 8005612:	2102      	movs	r1, #2
 8005614:	4618      	mov	r0, r3
 8005616:	f002 fba1 	bl	8007d5c <RCCEx_PLL2_Config>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005620:	e00f      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005622:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005626:	3328      	adds	r3, #40	; 0x28
 8005628:	2102      	movs	r1, #2
 800562a:	4618      	mov	r0, r3
 800562c:	f002 fc48 	bl	8007ec0 <RCCEx_PLL3_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005636:	e004      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800563e:	e000      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005642:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800564a:	4ba5      	ldr	r3, [pc, #660]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005652:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005658:	4aa1      	ldr	r2, [pc, #644]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800565a:	430b      	orrs	r3, r1
 800565c:	6513      	str	r3, [r2, #80]	; 0x50
 800565e:	e003      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005660:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005664:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005674:	f04f 0900 	mov.w	r9, #0
 8005678:	ea58 0309 	orrs.w	r3, r8, r9
 800567c:	d047      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800567e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005684:	2b04      	cmp	r3, #4
 8005686:	d82a      	bhi.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a5 	.word	0x080056a5
 8005694:	080056b3 	.word	0x080056b3
 8005698:	080056c9 	.word	0x080056c9
 800569c:	080056e7 	.word	0x080056e7
 80056a0:	080056e7 	.word	0x080056e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a4:	4b8e      	ldr	r3, [pc, #568]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	4a8d      	ldr	r2, [pc, #564]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056b0:	e01a      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056b6:	3308      	adds	r3, #8
 80056b8:	2100      	movs	r1, #0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f002 fb4e 	bl	8007d5c <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056c6:	e00f      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056cc:	3328      	adds	r3, #40	; 0x28
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f002 fbf5 	bl	8007ec0 <RCCEx_PLL3_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056dc:	e004      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80056e4:	e000      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056f0:	4b7b      	ldr	r3, [pc, #492]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	f023 0107 	bic.w	r1, r3, #7
 80056f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fe:	4a78      	ldr	r2, [pc, #480]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005700:	430b      	orrs	r3, r1
 8005702:	6513      	str	r3, [r2, #80]	; 0x50
 8005704:	e003      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005706:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800570a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800570e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800571a:	f04f 0b00 	mov.w	fp, #0
 800571e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005722:	d04c      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005724:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572e:	d030      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005734:	d829      	bhi.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005736:	2bc0      	cmp	r3, #192	; 0xc0
 8005738:	d02d      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800573a:	2bc0      	cmp	r3, #192	; 0xc0
 800573c:	d825      	bhi.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800573e:	2b80      	cmp	r3, #128	; 0x80
 8005740:	d018      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d821      	bhi.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d007      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800574e:	e01c      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005750:	4b63      	ldr	r3, [pc, #396]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	4a62      	ldr	r2, [pc, #392]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800575c:	e01c      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800575e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005762:	3308      	adds	r3, #8
 8005764:	2100      	movs	r1, #0
 8005766:	4618      	mov	r0, r3
 8005768:	f002 faf8 	bl	8007d5c <RCCEx_PLL2_Config>
 800576c:	4603      	mov	r3, r0
 800576e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005772:	e011      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005778:	3328      	adds	r3, #40	; 0x28
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f002 fb9f 	bl	8007ec0 <RCCEx_PLL3_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005788:	e006      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005790:	e002      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005798:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10a      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80057a0:	4b4f      	ldr	r3, [pc, #316]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80057a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	4a4c      	ldr	r2, [pc, #304]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6513      	str	r3, [r2, #80]	; 0x50
 80057b4:	e003      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80057ba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80057ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057ce:	2300      	movs	r3, #0
 80057d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057d4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80057d8:	460b      	mov	r3, r1
 80057da:	4313      	orrs	r3, r2
 80057dc:	d053      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80057de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057ea:	d035      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80057ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057f0:	d82e      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057f6:	d031      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80057f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80057fc:	d828      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80057fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005802:	d01a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005808:	d822      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800580e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005812:	d007      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005814:	e01c      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005816:	4b32      	ldr	r3, [pc, #200]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	4a31      	ldr	r2, [pc, #196]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800581c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005820:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005822:	e01c      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005828:	3308      	adds	r3, #8
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f002 fa95 	bl	8007d5c <RCCEx_PLL2_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005838:	e011      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800583a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800583e:	3328      	adds	r3, #40	; 0x28
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f002 fb3c 	bl	8007ec0 <RCCEx_PLL3_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800584e:	e006      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005856:	e002      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005858:	bf00      	nop
 800585a:	e000      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800585c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005866:	4b1e      	ldr	r3, [pc, #120]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800586e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005876:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005878:	430b      	orrs	r3, r1
 800587a:	6593      	str	r3, [r2, #88]	; 0x58
 800587c:	e003      	b.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005882:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005886:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005892:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005896:	2300      	movs	r3, #0
 8005898:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800589c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80058a0:	460b      	mov	r3, r1
 80058a2:	4313      	orrs	r3, r2
 80058a4:	d056      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b2:	d038      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80058b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058b8:	d831      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058be:	d034      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80058c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058c4:	d82b      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058ca:	d01d      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d0:	d825      	bhi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80058d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058da:	d00a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80058dc:	e01f      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80058de:	bf00      	nop
 80058e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e4:	4ba2      	ldr	r3, [pc, #648]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	4aa1      	ldr	r2, [pc, #644]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058f0:	e01c      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058f6:	3308      	adds	r3, #8
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f002 fa2e 	bl	8007d5c <RCCEx_PLL2_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005906:	e011      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800590c:	3328      	adds	r3, #40	; 0x28
 800590e:	2100      	movs	r1, #0
 8005910:	4618      	mov	r0, r3
 8005912:	f002 fad5 	bl	8007ec0 <RCCEx_PLL3_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800591c:	e006      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005924:	e002      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800592a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005934:	4b8e      	ldr	r3, [pc, #568]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005938:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800593c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005944:	4a8a      	ldr	r2, [pc, #552]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005946:	430b      	orrs	r3, r1
 8005948:	6593      	str	r3, [r2, #88]	; 0x58
 800594a:	e003      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005950:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005954:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005960:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800596a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800596e:	460b      	mov	r3, r1
 8005970:	4313      	orrs	r3, r2
 8005972:	d03a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005974:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	2b30      	cmp	r3, #48	; 0x30
 800597c:	d01f      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800597e:	2b30      	cmp	r3, #48	; 0x30
 8005980:	d819      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005982:	2b20      	cmp	r3, #32
 8005984:	d00c      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005986:	2b20      	cmp	r3, #32
 8005988:	d815      	bhi.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d019      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800598e:	2b10      	cmp	r3, #16
 8005990:	d111      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005992:	4b77      	ldr	r3, [pc, #476]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	4a76      	ldr	r2, [pc, #472]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800599e:	e011      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059a4:	3308      	adds	r3, #8
 80059a6:	2102      	movs	r1, #2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f002 f9d7 	bl	8007d5c <RCCEx_PLL2_Config>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80059b4:	e006      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80059bc:	e002      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80059c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059cc:	4b68      	ldr	r3, [pc, #416]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80059d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059da:	4a65      	ldr	r2, [pc, #404]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059dc:	430b      	orrs	r3, r1
 80059de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059e0:	e003      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80059f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a00:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d051      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a14:	d035      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a1a:	d82e      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a20:	d031      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a26:	d828      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2c:	d01a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a32:	d822      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3c:	d007      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005a3e:	e01c      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a40:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	4a4a      	ldr	r2, [pc, #296]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a4c:	e01c      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a52:	3308      	adds	r3, #8
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f002 f980 	bl	8007d5c <RCCEx_PLL2_Config>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a62:	e011      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a68:	3328      	adds	r3, #40	; 0x28
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f002 fa27 	bl	8007ec0 <RCCEx_PLL3_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a78:	e006      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005a80:	e002      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a88:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a90:	4b37      	ldr	r3, [pc, #220]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005a98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9e:	4a34      	ldr	r2, [pc, #208]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	6513      	str	r3, [r2, #80]	; 0x50
 8005aa4:	e003      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005aaa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005aba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ac4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4313      	orrs	r3, r2
 8005acc:	d056      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad8:	d033      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005ada:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ade:	d82c      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ae4:	d02f      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005ae6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aea:	d826      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005aec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005af0:	d02b      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005af6:	d820      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005afc:	d012      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b02:	d81a      	bhi.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d022      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b0c:	d115      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b12:	3308      	adds	r3, #8
 8005b14:	2101      	movs	r1, #1
 8005b16:	4618      	mov	r0, r3
 8005b18:	f002 f920 	bl	8007d5c <RCCEx_PLL2_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b22:	e015      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b28:	3328      	adds	r3, #40	; 0x28
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f002 f9c7 	bl	8007ec0 <RCCEx_PLL3_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b38:	e00a      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b42:	bf00      	nop
 8005b44:	e004      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b50:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10d      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b66:	4a02      	ldr	r2, [pc, #8]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6513      	str	r3, [r2, #80]	; 0x50
 8005b6c:	e006      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b6e:	bf00      	nop
 8005b70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b78:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005b88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b92:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005b96:	460b      	mov	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d055      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ba8:	d033      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bae:	d82c      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb4:	d02f      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d826      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bc0:	d02b      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005bc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bc6:	d820      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bcc:	d012      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd2:	d81a      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d022      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bdc:	d115      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005be2:	3308      	adds	r3, #8
 8005be4:	2101      	movs	r1, #1
 8005be6:	4618      	mov	r0, r3
 8005be8:	f002 f8b8 	bl	8007d5c <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005bf2:	e015      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bf8:	3328      	adds	r3, #40	; 0x28
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f002 f95f 	bl	8007ec0 <RCCEx_PLL3_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c08:	e00a      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005c10:	e006      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c12:	bf00      	nop
 8005c14:	e004      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c16:	bf00      	nop
 8005c18:	e002      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c1a:	bf00      	nop
 8005c1c:	e000      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c20:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10b      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c28:	4bb6      	ldr	r3, [pc, #728]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005c30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005c38:	4ab2      	ldr	r2, [pc, #712]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c3e:	e003      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c44:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4313      	orrs	r3, r2
 8005c66:	d02a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d011      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c76:	d10a      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	2101      	movs	r1, #1
 8005c80:	4618      	mov	r0, r3
 8005c82:	f002 f86b 	bl	8007d5c <RCCEx_PLL2_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005c8c:	e004      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005c94:	e000      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c98:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005ca0:	4b98      	ldr	r3, [pc, #608]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cae:	4a95      	ldr	r2, [pc, #596]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cb4:	e003      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005cba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cd4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	d037      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce8:	d00e      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cee:	d816      	bhi.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d018      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cf8:	d111      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfa:	4b82      	ldr	r3, [pc, #520]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	4a81      	ldr	r2, [pc, #516]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d06:	e00f      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	2101      	movs	r1, #1
 8005d10:	4618      	mov	r0, r3
 8005d12:	f002 f823 	bl	8007d5c <RCCEx_PLL2_Config>
 8005d16:	4603      	mov	r3, r0
 8005d18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d1c:	e004      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005d24:	e000      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d28:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d30:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d34:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3e:	4a71      	ldr	r2, [pc, #452]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6513      	str	r3, [r2, #80]	; 0x50
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d46:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d4a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005d5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d64:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	d03a      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d81d      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005d78:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005dbd 	.word	0x08005dbd
 8005d84:	08005d91 	.word	0x08005d91
 8005d88:	08005d9f 	.word	0x08005d9f
 8005d8c:	08005dbd 	.word	0x08005dbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d90:	4b5c      	ldr	r3, [pc, #368]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4a5b      	ldr	r2, [pc, #364]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d9c:	e00f      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005da2:	3308      	adds	r3, #8
 8005da4:	2102      	movs	r1, #2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 ffd8 	bl	8007d5c <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005db2:	e004      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005dba:	e000      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dbe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dc6:	4b4f      	ldr	r3, [pc, #316]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	f023 0103 	bic.w	r1, r3, #3
 8005dce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd4:	4a4b      	ldr	r2, [pc, #300]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dda:	e003      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ddc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005de0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f000 80a0 	beq.w	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e06:	4b40      	ldr	r3, [pc, #256]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a3f      	ldr	r2, [pc, #252]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e12:	f7fb fe9d 	bl	8001b50 <HAL_GetTick>
 8005e16:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1c:	f7fb fe98 	bl	8001b50 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b64      	cmp	r3, #100	; 0x64
 8005e2a:	d903      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e32:	e005      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e34:	4b34      	ldr	r3, [pc, #208]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ed      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005e40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d17a      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e48:	4b2e      	ldr	r3, [pc, #184]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e54:	4053      	eors	r3, r2
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d015      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e5e:	4b29      	ldr	r3, [pc, #164]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e6a:	4b26      	ldr	r3, [pc, #152]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	4a25      	ldr	r2, [pc, #148]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e76:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	4a22      	ldr	r2, [pc, #136]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e82:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005e88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e96:	d118      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fb fe5a 	bl	8001b50 <HAL_GetTick>
 8005e9c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea0:	e00d      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fb fe55 	bl	8001b50 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	f241 3388 	movw	r3, #5000	; 0x1388
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d903      	bls.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8005ebc:	e005      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ebe:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0eb      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005eca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d130      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ed6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee2:	d115      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005ee4:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ef0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ef4:	091a      	lsrs	r2, r3, #4
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	4a02      	ldr	r2, [pc, #8]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6113      	str	r3, [r2, #16]
 8005f00:	e00c      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005f02:	bf00      	nop
 8005f04:	58024400 	.word	0x58024400
 8005f08:	58024800 	.word	0x58024800
 8005f0c:	00ffffcf 	.word	0x00ffffcf
 8005f10:	4bd4      	ldr	r3, [pc, #848]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	4ad3      	ldr	r2, [pc, #844]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f1a:	6113      	str	r3, [r2, #16]
 8005f1c:	4bd1      	ldr	r3, [pc, #836]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f1e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f2c:	4acd      	ldr	r2, [pc, #820]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	6713      	str	r3, [r2, #112]	; 0x70
 8005f32:	e008      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f38:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005f3c:	e003      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f42:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f002 0301 	and.w	r3, r2, #1
 8005f52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f56:	2300      	movs	r3, #0
 8005f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f000 808b 	beq.w	800607e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f70:	2b28      	cmp	r3, #40	; 0x28
 8005f72:	d86b      	bhi.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005f74:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08006055 	.word	0x08006055
 8005f80:	0800604d 	.word	0x0800604d
 8005f84:	0800604d 	.word	0x0800604d
 8005f88:	0800604d 	.word	0x0800604d
 8005f8c:	0800604d 	.word	0x0800604d
 8005f90:	0800604d 	.word	0x0800604d
 8005f94:	0800604d 	.word	0x0800604d
 8005f98:	0800604d 	.word	0x0800604d
 8005f9c:	08006021 	.word	0x08006021
 8005fa0:	0800604d 	.word	0x0800604d
 8005fa4:	0800604d 	.word	0x0800604d
 8005fa8:	0800604d 	.word	0x0800604d
 8005fac:	0800604d 	.word	0x0800604d
 8005fb0:	0800604d 	.word	0x0800604d
 8005fb4:	0800604d 	.word	0x0800604d
 8005fb8:	0800604d 	.word	0x0800604d
 8005fbc:	08006037 	.word	0x08006037
 8005fc0:	0800604d 	.word	0x0800604d
 8005fc4:	0800604d 	.word	0x0800604d
 8005fc8:	0800604d 	.word	0x0800604d
 8005fcc:	0800604d 	.word	0x0800604d
 8005fd0:	0800604d 	.word	0x0800604d
 8005fd4:	0800604d 	.word	0x0800604d
 8005fd8:	0800604d 	.word	0x0800604d
 8005fdc:	08006055 	.word	0x08006055
 8005fe0:	0800604d 	.word	0x0800604d
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	0800604d 	.word	0x0800604d
 8005fec:	0800604d 	.word	0x0800604d
 8005ff0:	0800604d 	.word	0x0800604d
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	0800604d 	.word	0x0800604d
 8005ffc:	08006055 	.word	0x08006055
 8006000:	0800604d 	.word	0x0800604d
 8006004:	0800604d 	.word	0x0800604d
 8006008:	0800604d 	.word	0x0800604d
 800600c:	0800604d 	.word	0x0800604d
 8006010:	0800604d 	.word	0x0800604d
 8006014:	0800604d 	.word	0x0800604d
 8006018:	0800604d 	.word	0x0800604d
 800601c:	08006055 	.word	0x08006055
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006020:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006024:	3308      	adds	r3, #8
 8006026:	2101      	movs	r1, #1
 8006028:	4618      	mov	r0, r3
 800602a:	f001 fe97 	bl	8007d5c <RCCEx_PLL2_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006034:	e00f      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006036:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800603a:	3328      	adds	r3, #40	; 0x28
 800603c:	2101      	movs	r1, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f001 ff3e 	bl	8007ec0 <RCCEx_PLL3_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800604a:	e004      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006052:	e000      	b.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006056:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800605e:	4b81      	ldr	r3, [pc, #516]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006066:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800606a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606e:	4a7d      	ldr	r2, [pc, #500]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6553      	str	r3, [r2, #84]	; 0x54
 8006074:	e003      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006076:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800607a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800607e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f002 0302 	and.w	r3, r2, #2
 800608a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800608e:	2300      	movs	r3, #0
 8006090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006094:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006098:	460b      	mov	r3, r1
 800609a:	4313      	orrs	r3, r2
 800609c:	d042      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800609e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d825      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060fd 	.word	0x080060fd
 80060b4:	080060c9 	.word	0x080060c9
 80060b8:	080060df 	.word	0x080060df
 80060bc:	080060fd 	.word	0x080060fd
 80060c0:	080060fd 	.word	0x080060fd
 80060c4:	080060fd 	.word	0x080060fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060cc:	3308      	adds	r3, #8
 80060ce:	2101      	movs	r1, #1
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 fe43 	bl	8007d5c <RCCEx_PLL2_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060dc:	e00f      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060e2:	3328      	adds	r3, #40	; 0x28
 80060e4:	2101      	movs	r1, #1
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 feea 	bl	8007ec0 <RCCEx_PLL3_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060f2:	e004      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80060fa:	e000      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80060fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006106:	4b57      	ldr	r3, [pc, #348]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	f023 0107 	bic.w	r1, r3, #7
 800610e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006114:	4a53      	ldr	r2, [pc, #332]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006116:	430b      	orrs	r3, r1
 8006118:	6553      	str	r3, [r2, #84]	; 0x54
 800611a:	e003      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006120:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006124:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	f002 0304 	and.w	r3, r2, #4
 8006130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800613a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800613e:	460b      	mov	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	d044      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006144:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800614c:	2b05      	cmp	r3, #5
 800614e:	d825      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8006150:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	080061a5 	.word	0x080061a5
 800615c:	08006171 	.word	0x08006171
 8006160:	08006187 	.word	0x08006187
 8006164:	080061a5 	.word	0x080061a5
 8006168:	080061a5 	.word	0x080061a5
 800616c:	080061a5 	.word	0x080061a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006170:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006174:	3308      	adds	r3, #8
 8006176:	2101      	movs	r1, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f001 fdef 	bl	8007d5c <RCCEx_PLL2_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006184:	e00f      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006186:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800618a:	3328      	adds	r3, #40	; 0x28
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f001 fe96 	bl	8007ec0 <RCCEx_PLL3_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800619a:	e004      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80061a2:	e000      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80061a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10b      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061ae:	4b2d      	ldr	r3, [pc, #180]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	f023 0107 	bic.w	r1, r3, #7
 80061b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061be:	4a29      	ldr	r2, [pc, #164]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6593      	str	r3, [r2, #88]	; 0x58
 80061c4:	e003      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80061ca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	f002 0320 	and.w	r3, r2, #32
 80061da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061de:	2300      	movs	r3, #0
 80061e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061e8:	460b      	mov	r3, r1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	d057      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061fa:	d035      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80061fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006200:	d82c      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d031      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620c:	d826      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800620e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006212:	d02d      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006218:	d820      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800621a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800621e:	d012      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8006220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006224:	d81a      	bhi.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d024      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800622a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622e:	d115      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006230:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006234:	3308      	adds	r3, #8
 8006236:	2100      	movs	r1, #0
 8006238:	4618      	mov	r0, r3
 800623a:	f001 fd8f 	bl	8007d5c <RCCEx_PLL2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006244:	e017      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006246:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800624a:	3328      	adds	r3, #40	; 0x28
 800624c:	2102      	movs	r1, #2
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fe36 	bl	8007ec0 <RCCEx_PLL3_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800625a:	e00c      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006262:	e008      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006264:	58024400 	.word	0x58024400
        break;
 8006268:	bf00      	nop
 800626a:	e004      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800626c:	bf00      	nop
 800626e:	e002      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006276:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800627e:	4bc2      	ldr	r3, [pc, #776]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006286:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800628a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800628e:	4abe      	ldr	r2, [pc, #760]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006290:	430b      	orrs	r3, r1
 8006292:	6553      	str	r3, [r2, #84]	; 0x54
 8006294:	e003      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006296:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800629a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800629e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80062aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ae:	2300      	movs	r3, #0
 80062b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4313      	orrs	r3, r2
 80062bc:	d055      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80062c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062ca:	d033      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80062cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062d0:	d82c      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d6:	d02f      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80062d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062dc:	d826      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80062de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e2:	d02b      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80062e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e8:	d820      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80062ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ee:	d012      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80062f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f4:	d81a      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d022      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80062fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fe:	d115      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006300:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006304:	3308      	adds	r3, #8
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f001 fd27 	bl	8007d5c <RCCEx_PLL2_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006314:	e015      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800631a:	3328      	adds	r3, #40	; 0x28
 800631c:	2102      	movs	r1, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f001 fdce 	bl	8007ec0 <RCCEx_PLL3_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800632a:	e00a      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006332:	e006      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006334:	bf00      	nop
 8006336:	e004      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006338:	bf00      	nop
 800633a:	e002      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006342:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10b      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800634a:	4b8f      	ldr	r3, [pc, #572]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006352:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800635a:	4a8b      	ldr	r2, [pc, #556]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800635c:	430b      	orrs	r3, r1
 800635e:	6593      	str	r3, [r2, #88]	; 0x58
 8006360:	e003      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006362:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006366:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800636a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006376:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800637a:	2300      	movs	r3, #0
 800637c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006380:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006384:	460b      	mov	r3, r1
 8006386:	4313      	orrs	r3, r2
 8006388:	d055      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800638a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800638e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006392:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006396:	d033      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006398:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800639c:	d82c      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800639e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a2:	d02f      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a8:	d826      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80063aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063ae:	d02b      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80063b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063b4:	d820      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80063b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ba:	d012      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80063bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063c0:	d81a      	bhi.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d022      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ca:	d115      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063d0:	3308      	adds	r3, #8
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 fcc1 	bl	8007d5c <RCCEx_PLL2_Config>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063e0:	e015      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063e6:	3328      	adds	r3, #40	; 0x28
 80063e8:	2102      	movs	r1, #2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 fd68 	bl	8007ec0 <RCCEx_PLL3_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063f6:	e00a      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80063fe:	e006      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006400:	bf00      	nop
 8006402:	e004      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006404:	bf00      	nop
 8006406:	e002      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006408:	bf00      	nop
 800640a:	e000      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800640c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10b      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006416:	4b5c      	ldr	r3, [pc, #368]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641a:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800641e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006426:	4a58      	ldr	r2, [pc, #352]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006428:	430b      	orrs	r3, r1
 800642a:	6593      	str	r3, [r2, #88]	; 0x58
 800642c:	e003      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006432:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006436:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	f002 0308 	and.w	r3, r2, #8
 8006442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006446:	2300      	movs	r3, #0
 8006448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800644c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006450:	460b      	mov	r3, r1
 8006452:	4313      	orrs	r3, r2
 8006454:	d01e      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006456:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006462:	d10c      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006464:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006468:	3328      	adds	r3, #40	; 0x28
 800646a:	2102      	movs	r1, #2
 800646c:	4618      	mov	r0, r3
 800646e:	f001 fd27 	bl	8007ec0 <RCCEx_PLL3_Config>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800647e:	4b42      	ldr	r3, [pc, #264]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006486:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648e:	4a3e      	ldr	r2, [pc, #248]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006490:	430b      	orrs	r3, r1
 8006492:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006494:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f002 0310 	and.w	r3, r2, #16
 80064a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064a4:	2300      	movs	r3, #0
 80064a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80064ae:	460b      	mov	r3, r1
 80064b0:	4313      	orrs	r3, r2
 80064b2:	d01e      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c0:	d10c      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064c6:	3328      	adds	r3, #40	; 0x28
 80064c8:	2102      	movs	r1, #2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 fcf8 	bl	8007ec0 <RCCEx_PLL3_Config>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064dc:	4b2a      	ldr	r3, [pc, #168]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ec:	4a26      	ldr	r2, [pc, #152]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80064fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006502:	2300      	movs	r3, #0
 8006504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006508:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800650c:	460b      	mov	r3, r1
 800650e:	4313      	orrs	r3, r2
 8006510:	d040      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800651a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651e:	d022      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006524:	d81b      	bhi.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800652a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652e:	d00b      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006530:	e015      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006532:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006536:	3308      	adds	r3, #8
 8006538:	2100      	movs	r1, #0
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fc0e 	bl	8007d5c <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006546:	e00f      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006548:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800654c:	3328      	adds	r3, #40	; 0x28
 800654e:	2102      	movs	r1, #2
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fcb5 	bl	8007ec0 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800655c:	e004      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006564:	e000      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006568:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10d      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006574:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006578:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800657c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006580:	4a01      	ldr	r2, [pc, #4]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006582:	430b      	orrs	r3, r1
 8006584:	6593      	str	r3, [r2, #88]	; 0x58
 8006586:	e005      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006590:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006594:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80065a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80065a2:	2300      	movs	r3, #0
 80065a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80065aa:	460b      	mov	r3, r1
 80065ac:	4313      	orrs	r3, r2
 80065ae:	d03b      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065bc:	d01f      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80065be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065c2:	d818      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80065c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c8:	d003      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80065ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ce:	d007      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80065d0:	e011      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d2:	4b64      	ldr	r3, [pc, #400]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	4a63      	ldr	r2, [pc, #396]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065de:	e00f      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065e4:	3328      	adds	r3, #40	; 0x28
 80065e6:	2101      	movs	r1, #1
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 fc69 	bl	8007ec0 <RCCEx_PLL3_Config>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80065f4:	e004      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80065fc:	e000      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80065fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006600:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006608:	4b56      	ldr	r3, [pc, #344]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006610:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006618:	4a52      	ldr	r2, [pc, #328]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800661a:	430b      	orrs	r3, r1
 800661c:	6553      	str	r3, [r2, #84]	; 0x54
 800661e:	e003      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006620:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006624:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006628:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006634:	673b      	str	r3, [r7, #112]	; 0x70
 8006636:	2300      	movs	r3, #0
 8006638:	677b      	str	r3, [r7, #116]	; 0x74
 800663a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800663e:	460b      	mov	r3, r1
 8006640:	4313      	orrs	r3, r2
 8006642:	d031      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006644:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800664e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006652:	d007      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006654:	e011      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006656:	4b43      	ldr	r3, [pc, #268]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4a42      	ldr	r2, [pc, #264]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800665c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006660:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006662:	e00e      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006664:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006668:	3308      	adds	r3, #8
 800666a:	2102      	movs	r1, #2
 800666c:	4618      	mov	r0, r3
 800666e:	f001 fb75 	bl	8007d5c <RCCEx_PLL2_Config>
 8006672:	4603      	mov	r3, r0
 8006674:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800668a:	4b36      	ldr	r3, [pc, #216]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800668c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006698:	4a32      	ldr	r2, [pc, #200]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800669a:	430b      	orrs	r3, r1
 800669c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800669e:	e003      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066a4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80066b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b6:	2300      	movs	r3, #0
 80066b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d00c      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066c8:	3328      	adds	r3, #40	; 0x28
 80066ca:	2102      	movs	r1, #2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 fbf7 	bl	8007ec0 <RCCEx_PLL3_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80066ea:	663b      	str	r3, [r7, #96]	; 0x60
 80066ec:	2300      	movs	r3, #0
 80066ee:	667b      	str	r3, [r7, #100]	; 0x64
 80066f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d03a      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006706:	d018      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670c:	d811      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800670e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006712:	d014      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006718:	d80b      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d011      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800671e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006722:	d106      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a0e      	ldr	r2, [pc, #56]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800672a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006738:	e004      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800673a:	bf00      	nop
 800673c:	e002      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006744:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10d      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800674e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006750:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800675c:	4a01      	ldr	r2, [pc, #4]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800675e:	430b      	orrs	r3, r1
 8006760:	6553      	str	r3, [r2, #84]	; 0x54
 8006762:	e005      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006768:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800676c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006770:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800677c:	65bb      	str	r3, [r7, #88]	; 0x58
 800677e:	2300      	movs	r3, #0
 8006780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006782:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006786:	460b      	mov	r3, r1
 8006788:	4313      	orrs	r3, r2
 800678a:	d009      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800678c:	4baa      	ldr	r3, [pc, #680]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800678e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006790:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800679a:	4aa7      	ldr	r2, [pc, #668]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800679c:	430b      	orrs	r3, r1
 800679e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80067ac:	653b      	str	r3, [r7, #80]	; 0x50
 80067ae:	2300      	movs	r3, #0
 80067b0:	657b      	str	r3, [r7, #84]	; 0x54
 80067b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80067b6:	460b      	mov	r3, r1
 80067b8:	4313      	orrs	r3, r2
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067bc:	4b9e      	ldr	r3, [pc, #632]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80067c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80067cc:	4a9a      	ldr	r2, [pc, #616]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80067ce:	430b      	orrs	r3, r1
 80067d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80067de:	64bb      	str	r3, [r7, #72]	; 0x48
 80067e0:	2300      	movs	r3, #0
 80067e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80067e8:	460b      	mov	r3, r1
 80067ea:	4313      	orrs	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067ee:	4b92      	ldr	r3, [pc, #584]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80067f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80067f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fc:	4a8e      	ldr	r2, [pc, #568]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80067fe:	430b      	orrs	r3, r1
 8006800:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006802:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800680e:	643b      	str	r3, [r7, #64]	; 0x40
 8006810:	2300      	movs	r3, #0
 8006812:	647b      	str	r3, [r7, #68]	; 0x44
 8006814:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006818:	460b      	mov	r3, r1
 800681a:	4313      	orrs	r3, r2
 800681c:	d00e      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800681e:	4b86      	ldr	r3, [pc, #536]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	4a85      	ldr	r2, [pc, #532]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006828:	6113      	str	r3, [r2, #16]
 800682a:	4b83      	ldr	r3, [pc, #524]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800682c:	6919      	ldr	r1, [r3, #16]
 800682e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006832:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006836:	4a80      	ldr	r2, [pc, #512]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006838:	430b      	orrs	r3, r1
 800683a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800683c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006848:	63bb      	str	r3, [r7, #56]	; 0x38
 800684a:	2300      	movs	r3, #0
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006852:	460b      	mov	r3, r1
 8006854:	4313      	orrs	r3, r2
 8006856:	d009      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006858:	4b77      	ldr	r3, [pc, #476]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800685a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006860:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	4a74      	ldr	r2, [pc, #464]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006868:	430b      	orrs	r3, r1
 800686a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800686c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006878:	633b      	str	r3, [r7, #48]	; 0x30
 800687a:	2300      	movs	r3, #0
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
 800687e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006882:	460b      	mov	r3, r1
 8006884:	4313      	orrs	r3, r2
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006888:	4b6b      	ldr	r3, [pc, #428]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800688a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006890:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006898:	4a67      	ldr	r2, [pc, #412]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800689a:	430b      	orrs	r3, r1
 800689c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800689e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	2100      	movs	r1, #0
 80068a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80068b4:	460b      	mov	r3, r1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	d011      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068be:	3308      	adds	r3, #8
 80068c0:	2100      	movs	r1, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 fa4a 	bl	8007d5c <RCCEx_PLL2_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80068ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068da:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	2100      	movs	r1, #0
 80068e8:	6239      	str	r1, [r7, #32]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
 80068f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068f4:	460b      	mov	r3, r1
 80068f6:	4313      	orrs	r3, r2
 80068f8:	d011      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80068fe:	3308      	adds	r3, #8
 8006900:	2101      	movs	r1, #1
 8006902:	4618      	mov	r0, r3
 8006904:	f001 fa2a 	bl	8007d5c <RCCEx_PLL2_Config>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800690e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800691a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800691e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	2100      	movs	r1, #0
 8006928:	61b9      	str	r1, [r7, #24]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006934:	460b      	mov	r3, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	d011      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800693a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800693e:	3308      	adds	r3, #8
 8006940:	2102      	movs	r1, #2
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fa0a 	bl	8007d5c <RCCEx_PLL2_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800694e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006956:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800695a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800695e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	2100      	movs	r1, #0
 8006968:	6139      	str	r1, [r7, #16]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006974:	460b      	mov	r3, r1
 8006976:	4313      	orrs	r3, r2
 8006978:	d011      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800697a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800697e:	3328      	adds	r3, #40	; 0x28
 8006980:	2100      	movs	r1, #0
 8006982:	4618      	mov	r0, r3
 8006984:	f001 fa9c 	bl	8007ec0 <RCCEx_PLL3_Config>
 8006988:	4603      	mov	r3, r0
 800698a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800698e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006996:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800699a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800699e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	2100      	movs	r1, #0
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069b4:	460b      	mov	r3, r1
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d011      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069be:	3328      	adds	r3, #40	; 0x28
 80069c0:	2101      	movs	r1, #1
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fa7c 	bl	8007ec0 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80069ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069da:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	2100      	movs	r1, #0
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069f4:	460b      	mov	r3, r1
 80069f6:	4313      	orrs	r3, r2
 80069f8:	d011      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80069fe:	3328      	adds	r3, #40	; 0x28
 8006a00:	2102      	movs	r1, #2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 fa5c 	bl	8007ec0 <RCCEx_PLL3_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8006a0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a1a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8006a1e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a32:	46bd      	mov	sp, r7
 8006a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a38:	58024400 	.word	0x58024400

08006a3c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b090      	sub	sp, #64	; 0x40
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	f040 8094 	bne.w	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006a54:	4b9e      	ldr	r3, [pc, #632]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	f200 8087 	bhi.w	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006a81 	.word	0x08006a81
 8006a70:	08006aa9 	.word	0x08006aa9
 8006a74:	08006ad1 	.word	0x08006ad1
 8006a78:	08006b6d 	.word	0x08006b6d
 8006a7c:	08006af9 	.word	0x08006af9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a80:	4b93      	ldr	r3, [pc, #588]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a8c:	d108      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 f810 	bl	8007ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a9c:	f000 bd45 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa4:	f000 bd41 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aa8:	4b89      	ldr	r3, [pc, #548]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ab4:	d108      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ab6:	f107 0318 	add.w	r3, r7, #24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fd54 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac4:	f000 bd31 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006acc:	f000 bd2d 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ad0:	4b7f      	ldr	r3, [pc, #508]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006adc:	d108      	bne.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ade:	f107 030c 	add.w	r3, r7, #12
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fe94 	bl	8007810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aec:	f000 bd1d 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af4:	f000 bd19 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006af8:	4b75      	ldr	r3, [pc, #468]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b02:	4b73      	ldr	r3, [pc, #460]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d10c      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b14:	4b6e      	ldr	r3, [pc, #440]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	08db      	lsrs	r3, r3, #3
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	4a6d      	ldr	r2, [pc, #436]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b26:	e01f      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b28:	4b69      	ldr	r3, [pc, #420]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b34:	d106      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b3c:	d102      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b3e:	4b66      	ldr	r3, [pc, #408]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b42:	e011      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b44:	4b62      	ldr	r3, [pc, #392]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b50:	d106      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b58:	d102      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b5a:	4b60      	ldr	r3, [pc, #384]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b5e:	e003      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b64:	f000 bce1 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b68:	f000 bcdf 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b6c:	4b5c      	ldr	r3, [pc, #368]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b70:	f000 bcdb 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b78:	f000 bcd7 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b80:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006b84:	430b      	orrs	r3, r1
 8006b86:	f040 80ad 	bne.w	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006b8a:	4b51      	ldr	r3, [pc, #324]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006b92:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9a:	d056      	beq.n	8006c4a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba2:	f200 8090 	bhi.w	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	2bc0      	cmp	r3, #192	; 0xc0
 8006baa:	f000 8088 	beq.w	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb2:	f200 8088 	bhi.w	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b80      	cmp	r3, #128	; 0x80
 8006bba:	d032      	beq.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	2b80      	cmp	r3, #128	; 0x80
 8006bc0:	f200 8081 	bhi.w	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	2b40      	cmp	r3, #64	; 0x40
 8006bce:	d014      	beq.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006bd0:	e079      	b.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bd2:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bde:	d108      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 ff67 	bl	8007ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bee:	f000 bc9c 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf6:	f000 bc98 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bfa:	4b35      	ldr	r3, [pc, #212]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c06:	d108      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c08:	f107 0318 	add.w	r3, r7, #24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fcab 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c16:	f000 bc88 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1e:	f000 bc84 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c22:	4b2b      	ldr	r3, [pc, #172]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c2e:	d108      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c30:	f107 030c 	add.w	r3, r7, #12
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fdeb 	bl	8007810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c3e:	f000 bc74 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c46:	f000 bc70 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c4a:	4b21      	ldr	r3, [pc, #132]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d10c      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	08db      	lsrs	r3, r3, #3
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	4a18      	ldr	r2, [pc, #96]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006c72:	fa22 f303 	lsr.w	r3, r2, r3
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c78:	e01f      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c7a:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c86:	d106      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c8e:	d102      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c94:	e011      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c96:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006caa:	d102      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006cb6:	f000 bc38 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cba:	f000 bc36 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cbe:	4b08      	ldr	r3, [pc, #32]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cc2:	f000 bc32 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cca:	f000 bc2e 	b.w	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cce:	bf00      	nop
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	03d09000 	.word	0x03d09000
 8006cd8:	003d0900 	.word	0x003d0900
 8006cdc:	017d7840 	.word	0x017d7840
 8006ce0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006cec:	430b      	orrs	r3, r1
 8006cee:	f040 809c 	bne.w	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006cf2:	4b9e      	ldr	r3, [pc, #632]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006cfa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d02:	d054      	beq.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d0a:	f200 808b 	bhi.w	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d14:	f000 8083 	beq.w	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d1e:	f200 8081 	bhi.w	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d28:	d02f      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d30:	d878      	bhi.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d3e:	d012      	beq.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006d40:	e070      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d42:	4b8a      	ldr	r3, [pc, #552]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d4e:	d107      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 feaf 	bl	8007ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d5e:	e3e4      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d64:	e3e1      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d66:	4b81      	ldr	r3, [pc, #516]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d72:	d107      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d74:	f107 0318 	add.w	r3, r7, #24
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fbf5 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d82:	e3d2      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d88:	e3cf      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d8a:	4b78      	ldr	r3, [pc, #480]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d96:	d107      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fd37 	bl	8007810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da6:	e3c0      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dac:	e3bd      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dae:	4b6f      	ldr	r3, [pc, #444]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006db8:	4b6c      	ldr	r3, [pc, #432]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d10c      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dca:	4b68      	ldr	r3, [pc, #416]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	08db      	lsrs	r3, r3, #3
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	4a66      	ldr	r2, [pc, #408]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ddc:	e01e      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dde:	4b63      	ldr	r3, [pc, #396]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dea:	d106      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006df2:	d102      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006df4:	4b5f      	ldr	r3, [pc, #380]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df8:	e010      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dfa:	4b5c      	ldr	r3, [pc, #368]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e06:	d106      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e0e:	d102      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e10:	4b59      	ldr	r3, [pc, #356]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e14:	e002      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e1a:	e386      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e1c:	e385      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e1e:	4b57      	ldr	r3, [pc, #348]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e22:	e382      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e28:	e37f      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e2e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006e32:	430b      	orrs	r3, r1
 8006e34:	f040 80a7 	bne.w	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006e38:	4b4c      	ldr	r3, [pc, #304]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006e40:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e48:	d055      	beq.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e50:	f200 8096 	bhi.w	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e5a:	f000 8084 	beq.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e64:	f200 808c 	bhi.w	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e6e:	d030      	beq.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e76:	f200 8083 	bhi.w	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e86:	d012      	beq.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006e88:	e07a      	b.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e8a:	4b38      	ldr	r3, [pc, #224]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e96:	d107      	bne.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fe0b 	bl	8007ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea6:	e340      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eac:	e33d      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eae:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eba:	d107      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ebc:	f107 0318 	add.w	r3, r7, #24
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fb51 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eca:	e32e      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed0:	e32b      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ed2:	4b26      	ldr	r3, [pc, #152]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ee0:	f107 030c 	add.w	r3, r7, #12
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 fc93 	bl	8007810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eee:	e31c      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ef4:	e319      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ef6:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f00:	4b1a      	ldr	r3, [pc, #104]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d10c      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f12:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	08db      	lsrs	r3, r3, #3
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	4a14      	ldr	r2, [pc, #80]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f24:	e01e      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f26:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f32:	d106      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f3a:	d102      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f3c:	4b0d      	ldr	r3, [pc, #52]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f40:	e010      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f42:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f56:	d102      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f5c:	e002      	b.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006f62:	e2e2      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f64:	e2e1      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6a:	e2de      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	03d09000 	.word	0x03d09000
 8006f74:	003d0900 	.word	0x003d0900
 8006f78:	017d7840 	.word	0x017d7840
 8006f7c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f84:	e2d1      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	f040 809c 	bne.w	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006f94:	4b93      	ldr	r3, [pc, #588]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006f9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa4:	d054      	beq.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fac:	f200 808b 	bhi.w	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fb6:	f000 8083 	beq.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fc0:	f200 8081 	bhi.w	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fca:	d02f      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd2:	d878      	bhi.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe0:	d012      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006fe2:	e070      	b.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fe4:	4b7f      	ldr	r3, [pc, #508]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ff0:	d107      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fd5e 	bl	8007ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007000:	e293      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007006:	e290      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007008:	4b76      	ldr	r3, [pc, #472]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007016:	f107 0318 	add.w	r3, r7, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 faa4 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007024:	e281      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702a:	e27e      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800702c:	4b6d      	ldr	r3, [pc, #436]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007038:	d107      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800703a:	f107 030c 	add.w	r3, r7, #12
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fbe6 	bl	8007810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007048:	e26f      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800704e:	e26c      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007050:	4b64      	ldr	r3, [pc, #400]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007058:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800705a:	4b62      	ldr	r3, [pc, #392]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b04      	cmp	r3, #4
 8007064:	d10c      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007068:	2b00      	cmp	r3, #0
 800706a:	d109      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800706c:	4b5d      	ldr	r3, [pc, #372]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	08db      	lsrs	r3, r3, #3
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	4a5c      	ldr	r2, [pc, #368]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800707e:	e01e      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007080:	4b58      	ldr	r3, [pc, #352]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708c:	d106      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007094:	d102      	bne.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007096:	4b55      	ldr	r3, [pc, #340]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800709a:	e010      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800709c:	4b51      	ldr	r3, [pc, #324]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a8:	d106      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80070aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b0:	d102      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070b2:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b6:	e002      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80070bc:	e235      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80070be:	e234      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070c0:	4b4c      	ldr	r3, [pc, #304]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070c4:	e231      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ca:	e22e      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80070cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070d0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80070d4:	430b      	orrs	r3, r1
 80070d6:	f040 808f 	bne.w	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80070da:	4b42      	ldr	r3, [pc, #264]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80070dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070de:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80070e2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070ea:	d06b      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070f2:	d874      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070fa:	d056      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007102:	d86c      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800710a:	d03b      	beq.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007112:	d864      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800711a:	d021      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007122:	d85c      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007130:	d004      	beq.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007132:	e054      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007134:	f7fe f9e0 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8007138:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800713a:	e1f6      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800713c:	4b29      	ldr	r3, [pc, #164]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007148:	d107      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800714a:	f107 0318 	add.w	r3, r7, #24
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fa0a 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007158:	e1e7      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800715e:	e1e4      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007160:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800716c:	d107      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800716e:	f107 030c 	add.w	r3, r7, #12
 8007172:	4618      	mov	r0, r3
 8007174:	f000 fb4c 	bl	8007810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800717c:	e1d5      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007182:	e1d2      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007184:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b04      	cmp	r3, #4
 800718e:	d109      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007190:	4b14      	ldr	r3, [pc, #80]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	08db      	lsrs	r3, r3, #3
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800719c:	fa22 f303 	lsr.w	r3, r2, r3
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a2:	e1c2      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071a8:	e1bf      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071aa:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b6:	d102      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071bc:	e1b5      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c2:	e1b2      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071d0:	d102      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80071d2:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80071d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d6:	e1a8      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071dc:	e1a5      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e2:	e1a2      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80071e4:	58024400 	.word	0x58024400
 80071e8:	03d09000 	.word	0x03d09000
 80071ec:	003d0900 	.word	0x003d0900
 80071f0:	017d7840 	.word	0x017d7840
 80071f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80071f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007200:	430b      	orrs	r3, r1
 8007202:	d173      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007204:	4b9c      	ldr	r3, [pc, #624]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800720c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007214:	d02f      	beq.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800721c:	d863      	bhi.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722a:	d012      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800722c:	e05b      	b.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800722e:	4b92      	ldr	r3, [pc, #584]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723a:	d107      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800723c:	f107 0318 	add.w	r3, r7, #24
 8007240:	4618      	mov	r0, r3
 8007242:	f000 f991 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800724a:	e16e      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800724c:	2300      	movs	r3, #0
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007250:	e16b      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007252:	4b89      	ldr	r3, [pc, #548]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800725a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725e:	d107      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007260:	f107 030c 	add.w	r3, r7, #12
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fad3 	bl	8007810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800726e:	e15c      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007274:	e159      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007276:	4b80      	ldr	r3, [pc, #512]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800727e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007280:	4b7d      	ldr	r3, [pc, #500]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b04      	cmp	r3, #4
 800728a:	d10c      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800728c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007292:	4b79      	ldr	r3, [pc, #484]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	08db      	lsrs	r3, r3, #3
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	4a77      	ldr	r2, [pc, #476]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a4:	e01e      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072a6:	4b74      	ldr	r3, [pc, #464]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072b2:	d106      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80072b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ba:	d102      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072bc:	4b70      	ldr	r3, [pc, #448]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c0:	e010      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072c2:	4b6d      	ldr	r3, [pc, #436]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ce:	d106      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d6:	d102      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072d8:	4b6a      	ldr	r3, [pc, #424]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80072e2:	e122      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80072e4:	e121      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ea:	e11e      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80072ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80072f4:	430b      	orrs	r3, r1
 80072f6:	d133      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80072f8:	4b5f      	ldr	r3, [pc, #380]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80072fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007300:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730e:	d012      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8007310:	e023      	b.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007312:	4b59      	ldr	r3, [pc, #356]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800731a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800731e:	d107      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fbc7 	bl	8007ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800732e:	e0fc      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007334:	e0f9      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007336:	4b50      	ldr	r3, [pc, #320]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800733e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007342:	d107      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007344:	f107 0318 	add.w	r3, r7, #24
 8007348:	4618      	mov	r0, r3
 800734a:	f000 f90d 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007352:	e0ea      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007358:	e0e7      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800735e:	e0e4      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007364:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007368:	430b      	orrs	r3, r1
 800736a:	f040 808d 	bne.w	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800736e:	4b42      	ldr	r3, [pc, #264]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007376:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800737e:	d06b      	beq.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007386:	d874      	bhi.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738e:	d056      	beq.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007396:	d86c      	bhi.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800739e:	d03b      	beq.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073a6:	d864      	bhi.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ae:	d021      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b6:	d85c      	bhi.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c4:	d004      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80073c6:	e054      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80073c8:	f000 f8b8 	bl	800753c <HAL_RCCEx_GetD3PCLK1Freq>
 80073cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073ce:	e0ac      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073d0:	4b29      	ldr	r3, [pc, #164]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073dc:	d107      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073de:	f107 0318 	add.w	r3, r7, #24
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f8c0 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073ec:	e09d      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073f2:	e09a      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073f4:	4b20      	ldr	r3, [pc, #128]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007400:	d107      	bne.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007402:	f107 030c 	add.w	r3, r7, #12
 8007406:	4618      	mov	r0, r3
 8007408:	f000 fa02 	bl	8007810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007410:	e08b      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007416:	e088      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007418:	4b17      	ldr	r3, [pc, #92]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	2b04      	cmp	r3, #4
 8007422:	d109      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007424:	4b14      	ldr	r3, [pc, #80]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	08db      	lsrs	r3, r3, #3
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	4a13      	ldr	r2, [pc, #76]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007436:	e078      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800743c:	e075      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744a:	d102      	bne.n	8007452 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800744c:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007450:	e06b      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007456:	e068      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007458:	4b07      	ldr	r3, [pc, #28]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007464:	d102      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007466:	4b07      	ldr	r3, [pc, #28]	; (8007484 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800746a:	e05e      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007470:	e05b      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007476:	e058      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007478:	58024400 	.word	0x58024400
 800747c:	03d09000 	.word	0x03d09000
 8007480:	003d0900 	.word	0x003d0900
 8007484:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007490:	430b      	orrs	r3, r1
 8007492:	d148      	bne.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007494:	4b27      	ldr	r3, [pc, #156]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800749c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a4:	d02a      	beq.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ac:	d838      	bhi.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ba:	d00d      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80074bc:	e030      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80074be:	4b1d      	ldr	r3, [pc, #116]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074ca:	d102      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80074cc:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074d0:	e02b      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d6:	e028      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074d8:	4b16      	ldr	r3, [pc, #88]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074e4:	d107      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fae4 	bl	8007ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074f4:	e019      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074fa:	e016      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074fc:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007508:	d107      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800750a:	f107 0318 	add.w	r3, r7, #24
 800750e:	4618      	mov	r0, r3
 8007510:	f000 f82a 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007518:	e007      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800751e:	e004      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007524:	e001      	b.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800752a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800752c:	4618      	mov	r0, r3
 800752e:	3740      	adds	r7, #64	; 0x40
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	58024400 	.word	0x58024400
 8007538:	017d7840 	.word	0x017d7840

0800753c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007540:	f7fd ffaa 	bl	8005498 <HAL_RCC_GetHCLKFreq>
 8007544:	4602      	mov	r2, r0
 8007546:	4b06      	ldr	r3, [pc, #24]	; (8007560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	091b      	lsrs	r3, r3, #4
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	4904      	ldr	r1, [pc, #16]	; (8007564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007552:	5ccb      	ldrb	r3, [r1, r3]
 8007554:	f003 031f 	and.w	r3, r3, #31
 8007558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800755c:	4618      	mov	r0, r3
 800755e:	bd80      	pop	{r7, pc}
 8007560:	58024400 	.word	0x58024400
 8007564:	08024a60 	.word	0x08024a60

08007568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007568:	b480      	push	{r7}
 800756a:	b089      	sub	sp, #36	; 0x24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007570:	4ba1      	ldr	r3, [pc, #644]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800757a:	4b9f      	ldr	r3, [pc, #636]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	0b1b      	lsrs	r3, r3, #12
 8007580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007586:	4b9c      	ldr	r3, [pc, #624]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	091b      	lsrs	r3, r3, #4
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007592:	4b99      	ldr	r3, [pc, #612]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	08db      	lsrs	r3, r3, #3
 8007598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8111 	beq.w	80077d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f000 8083 	beq.w	80076c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	f200 80a1 	bhi.w	8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d056      	beq.n	8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075d2:	e099      	b.n	8007708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075d4:	4b88      	ldr	r3, [pc, #544]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d02d      	beq.n	800763c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075e0:	4b85      	ldr	r3, [pc, #532]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	08db      	lsrs	r3, r3, #3
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	4a84      	ldr	r2, [pc, #528]	; (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
 80075f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a03 	vldr	s12, [r7, #12]
 800761e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800763a:	e087      	b.n	800774c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b6a      	ldr	r3, [pc, #424]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007662:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800767e:	e065      	b.n	800774c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	ee07 3a90 	vmov	s15, r3
 8007686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800768e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007692:	4b59      	ldr	r3, [pc, #356]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c2:	e043      	b.n	800774c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800780c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d6:	4b48      	ldr	r3, [pc, #288]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007706:	e021      	b.n	800774c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771a:	4b37      	ldr	r3, [pc, #220]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772a:	ed97 6a03 	vldr	s12, [r7, #12]
 800772e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800774c:	4b2a      	ldr	r3, [pc, #168]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	0a5b      	lsrs	r3, r3, #9
 8007752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007756:	ee07 3a90 	vmov	s15, r3
 800775a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007766:	edd7 6a07 	vldr	s13, [r7, #28]
 800776a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007772:	ee17 2a90 	vmov	r2, s15
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800777a:	4b1f      	ldr	r3, [pc, #124]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	0c1b      	lsrs	r3, r3, #16
 8007780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007794:	edd7 6a07 	vldr	s13, [r7, #28]
 8007798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a0:	ee17 2a90 	vmov	r2, s15
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80077a8:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	0e1b      	lsrs	r3, r3, #24
 80077ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ce:	ee17 2a90 	vmov	r2, s15
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077d6:	e008      	b.n	80077ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	609a      	str	r2, [r3, #8]
}
 80077ea:	bf00      	nop
 80077ec:	3724      	adds	r7, #36	; 0x24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	58024400 	.word	0x58024400
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	46000000 	.word	0x46000000
 8007804:	4c742400 	.word	0x4c742400
 8007808:	4a742400 	.word	0x4a742400
 800780c:	4bbebc20 	.word	0x4bbebc20

08007810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007810:	b480      	push	{r7}
 8007812:	b089      	sub	sp, #36	; 0x24
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007818:	4ba1      	ldr	r3, [pc, #644]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	f003 0303 	and.w	r3, r3, #3
 8007820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007822:	4b9f      	ldr	r3, [pc, #636]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	0d1b      	lsrs	r3, r3, #20
 8007828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800782c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800782e:	4b9c      	ldr	r3, [pc, #624]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800783a:	4b99      	ldr	r3, [pc, #612]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	08db      	lsrs	r3, r3, #3
 8007840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	fb02 f303 	mul.w	r3, r2, r3
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 8111 	beq.w	8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b02      	cmp	r3, #2
 8007862:	f000 8083 	beq.w	800796c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	2b02      	cmp	r3, #2
 800786a:	f200 80a1 	bhi.w	80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d056      	beq.n	8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800787a:	e099      	b.n	80079b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800787c:	4b88      	ldr	r3, [pc, #544]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	d02d      	beq.n	80078e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007888:	4b85      	ldr	r3, [pc, #532]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	08db      	lsrs	r3, r3, #3
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	4a84      	ldr	r2, [pc, #528]	; (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
 8007898:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b2:	4b7b      	ldr	r3, [pc, #492]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078e2:	e087      	b.n	80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	ee07 3a90 	vmov	s15, r3
 80078ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f6:	4b6a      	ldr	r3, [pc, #424]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007906:	ed97 6a03 	vldr	s12, [r7, #12]
 800790a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800790e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800791a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800791e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007926:	e065      	b.n	80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793a:	4b59      	ldr	r3, [pc, #356]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794a:	ed97 6a03 	vldr	s12, [r7, #12]
 800794e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800795e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800796a:	e043      	b.n	80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007976:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800797a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800797e:	4b48      	ldr	r3, [pc, #288]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007986:	ee07 3a90 	vmov	s15, r3
 800798a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007992:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800799a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800799e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ae:	e021      	b.n	80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c2:	4b37      	ldr	r3, [pc, #220]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079f4:	4b2a      	ldr	r3, [pc, #168]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	0a5b      	lsrs	r3, r3, #9
 80079fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a1a:	ee17 2a90 	vmov	r2, s15
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a22:	4b1f      	ldr	r3, [pc, #124]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a2c:	ee07 3a90 	vmov	s15, r3
 8007a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a48:	ee17 2a90 	vmov	r2, s15
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a50:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a54:	0e1b      	lsrs	r3, r3, #24
 8007a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a76:	ee17 2a90 	vmov	r2, s15
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a7e:	e008      	b.n	8007a92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	609a      	str	r2, [r3, #8]
}
 8007a92:	bf00      	nop
 8007a94:	3724      	adds	r7, #36	; 0x24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	58024400 	.word	0x58024400
 8007aa4:	03d09000 	.word	0x03d09000
 8007aa8:	46000000 	.word	0x46000000
 8007aac:	4c742400 	.word	0x4c742400
 8007ab0:	4a742400 	.word	0x4a742400
 8007ab4:	4bbebc20 	.word	0x4bbebc20

08007ab8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b089      	sub	sp, #36	; 0x24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ac0:	4ba0      	ldr	r3, [pc, #640]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007aca:	4b9e      	ldr	r3, [pc, #632]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ace:	091b      	lsrs	r3, r3, #4
 8007ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ad4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ad6:	4b9b      	ldr	r3, [pc, #620]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ae0:	4b98      	ldr	r3, [pc, #608]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae4:	08db      	lsrs	r3, r3, #3
 8007ae6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	fb02 f303 	mul.w	r3, r2, r3
 8007af0:	ee07 3a90 	vmov	s15, r3
 8007af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 8111 	beq.w	8007d26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	f000 8083 	beq.w	8007c12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	f200 80a1 	bhi.w	8007c56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d056      	beq.n	8007bce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007b20:	e099      	b.n	8007c56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b22:	4b88      	ldr	r3, [pc, #544]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d02d      	beq.n	8007b8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b2e:	4b85      	ldr	r3, [pc, #532]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	08db      	lsrs	r3, r3, #3
 8007b34:	f003 0303 	and.w	r3, r3, #3
 8007b38:	4a83      	ldr	r2, [pc, #524]	; (8007d48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b58:	4b7a      	ldr	r3, [pc, #488]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b88:	e087      	b.n	8007c9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	ee07 3a90 	vmov	s15, r3
 8007b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9c:	4b69      	ldr	r3, [pc, #420]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bcc:	e065      	b.n	8007c9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be0:	4b58      	ldr	r3, [pc, #352]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be8:	ee07 3a90 	vmov	s15, r3
 8007bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bf4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c10:	e043      	b.n	8007c9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	ee07 3a90 	vmov	s15, r3
 8007c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c24:	4b47      	ldr	r3, [pc, #284]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2c:	ee07 3a90 	vmov	s15, r3
 8007c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c54:	e021      	b.n	8007c9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	ee07 3a90 	vmov	s15, r3
 8007c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c60:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007d50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c68:	4b36      	ldr	r3, [pc, #216]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c70:	ee07 3a90 	vmov	s15, r3
 8007c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007c9a:	4b2a      	ldr	r3, [pc, #168]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	0a5b      	lsrs	r3, r3, #9
 8007ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc0:	ee17 2a90 	vmov	r2, s15
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	0c1b      	lsrs	r3, r3, #16
 8007cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cee:	ee17 2a90 	vmov	r2, s15
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	0e1b      	lsrs	r3, r3, #24
 8007cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d00:	ee07 3a90 	vmov	s15, r3
 8007d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1c:	ee17 2a90 	vmov	r2, s15
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d24:	e008      	b.n	8007d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	609a      	str	r2, [r3, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	3724      	adds	r7, #36	; 0x24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	58024400 	.word	0x58024400
 8007d48:	03d09000 	.word	0x03d09000
 8007d4c:	46000000 	.word	0x46000000
 8007d50:	4c742400 	.word	0x4c742400
 8007d54:	4a742400 	.word	0x4a742400
 8007d58:	4bbebc20 	.word	0x4bbebc20

08007d5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d6a:	4b53      	ldr	r3, [pc, #332]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d101      	bne.n	8007d7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e099      	b.n	8007eae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d7a:	4b4f      	ldr	r3, [pc, #316]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a4e      	ldr	r2, [pc, #312]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d86:	f7f9 fee3 	bl	8001b50 <HAL_GetTick>
 8007d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d8c:	e008      	b.n	8007da0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d8e:	f7f9 fedf 	bl	8001b50 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e086      	b.n	8007eae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007da0:	4b45      	ldr	r3, [pc, #276]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1f0      	bne.n	8007d8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007dac:	4b42      	ldr	r3, [pc, #264]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	031b      	lsls	r3, r3, #12
 8007dba:	493f      	ldr	r1, [pc, #252]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	628b      	str	r3, [r1, #40]	; 0x28
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	025b      	lsls	r3, r3, #9
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	061b      	lsls	r3, r3, #24
 8007dec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007df0:	4931      	ldr	r1, [pc, #196]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007df6:	4b30      	ldr	r3, [pc, #192]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	492d      	ldr	r1, [pc, #180]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e08:	4b2b      	ldr	r3, [pc, #172]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	f023 0220 	bic.w	r2, r3, #32
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	4928      	ldr	r1, [pc, #160]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e1a:	4b27      	ldr	r3, [pc, #156]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	4a26      	ldr	r2, [pc, #152]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e20:	f023 0310 	bic.w	r3, r3, #16
 8007e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e26:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e2a:	4b24      	ldr	r3, [pc, #144]	; (8007ebc <RCCEx_PLL2_Config+0x160>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	69d2      	ldr	r2, [r2, #28]
 8007e32:	00d2      	lsls	r2, r2, #3
 8007e34:	4920      	ldr	r1, [pc, #128]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e3a:	4b1f      	ldr	r3, [pc, #124]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3e:	4a1e      	ldr	r2, [pc, #120]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e40:	f043 0310 	orr.w	r3, r3, #16
 8007e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e4c:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e58:	e00f      	b.n	8007e7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d106      	bne.n	8007e6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e60:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e6c:	e005      	b.n	8007e7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e6e:	4b12      	ldr	r3, [pc, #72]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	4a11      	ldr	r2, [pc, #68]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a0e      	ldr	r2, [pc, #56]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e86:	f7f9 fe63 	bl	8001b50 <HAL_GetTick>
 8007e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e8c:	e008      	b.n	8007ea0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e8e:	f7f9 fe5f 	bl	8001b50 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d901      	bls.n	8007ea0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e006      	b.n	8007eae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <RCCEx_PLL2_Config+0x15c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0f0      	beq.n	8007e8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	58024400 	.word	0x58024400
 8007ebc:	ffff0007 	.word	0xffff0007

08007ec0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ece:	4b53      	ldr	r3, [pc, #332]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d101      	bne.n	8007ede <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e099      	b.n	8008012 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ede:	4b4f      	ldr	r3, [pc, #316]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a4e      	ldr	r2, [pc, #312]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eea:	f7f9 fe31 	bl	8001b50 <HAL_GetTick>
 8007eee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ef0:	e008      	b.n	8007f04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ef2:	f7f9 fe2d 	bl	8001b50 <HAL_GetTick>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e086      	b.n	8008012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f04:	4b45      	ldr	r3, [pc, #276]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f0      	bne.n	8007ef2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f10:	4b42      	ldr	r3, [pc, #264]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	051b      	lsls	r3, r3, #20
 8007f1e:	493f      	ldr	r1, [pc, #252]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	628b      	str	r3, [r1, #40]	; 0x28
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	025b      	lsls	r3, r3, #9
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f46:	431a      	orrs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	061b      	lsls	r3, r3, #24
 8007f50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f54:	4931      	ldr	r1, [pc, #196]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f5a:	4b30      	ldr	r3, [pc, #192]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	492d      	ldr	r1, [pc, #180]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f6c:	4b2b      	ldr	r3, [pc, #172]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	4928      	ldr	r1, [pc, #160]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f7e:	4b27      	ldr	r3, [pc, #156]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	4a26      	ldr	r2, [pc, #152]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f8a:	4b24      	ldr	r3, [pc, #144]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f8e:	4b24      	ldr	r3, [pc, #144]	; (8008020 <RCCEx_PLL3_Config+0x160>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	69d2      	ldr	r2, [r2, #28]
 8007f96:	00d2      	lsls	r2, r2, #3
 8007f98:	4920      	ldr	r1, [pc, #128]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f9e:	4b1f      	ldr	r3, [pc, #124]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	4a1e      	ldr	r2, [pc, #120]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d106      	bne.n	8007fbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fb0:	4b1a      	ldr	r3, [pc, #104]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	4a19      	ldr	r2, [pc, #100]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fbc:	e00f      	b.n	8007fde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d106      	bne.n	8007fd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007fc4:	4b15      	ldr	r3, [pc, #84]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	4a14      	ldr	r2, [pc, #80]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fd0:	e005      	b.n	8007fde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	4a11      	ldr	r2, [pc, #68]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007fde:	4b0f      	ldr	r3, [pc, #60]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a0e      	ldr	r2, [pc, #56]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8007fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fea:	f7f9 fdb1 	bl	8001b50 <HAL_GetTick>
 8007fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ff0:	e008      	b.n	8008004 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ff2:	f7f9 fdad 	bl	8001b50 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e006      	b.n	8008012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <RCCEx_PLL3_Config+0x15c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0f0      	beq.n	8007ff2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	58024400 	.word	0x58024400
 8008020:	ffff0007 	.word	0xffff0007

08008024 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08a      	sub	sp, #40	; 0x28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e075      	b.n	8008122 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7f9 f99f 	bl	800138c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2204      	movs	r2, #4
 8008052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f868 	bl	800812c <HAL_SD_InitCard>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e05d      	b.n	8008122 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008066:	f107 0308 	add.w	r3, r7, #8
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fdaf 	bl	8008bd0 <HAL_SD_GetCardStatus>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e052      	b.n	8008122 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800807c:	7e3b      	ldrb	r3, [r7, #24]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008082:	7e7b      	ldrb	r3, [r7, #25]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10a      	bne.n	80080a6 <HAL_SD_Init+0x82>
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d102      	bne.n	800809c <HAL_SD_Init+0x78>
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080a2:	659a      	str	r2, [r3, #88]	; 0x58
 80080a4:	e00b      	b.n	80080be <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d104      	bne.n	80080b8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080b4:	659a      	str	r2, [r3, #88]	; 0x58
 80080b6:	e002      	b.n	80080be <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fe6d 	bl	8008da4 <HAL_SD_ConfigWideBusOperation>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e026      	b.n	8008122 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80080d4:	f7f9 fd3c 	bl	8001b50 <HAL_GetTick>
 80080d8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80080da:	e011      	b.n	8008100 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080dc:	f7f9 fd38 	bl	8001b50 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ea:	d109      	bne.n	8008100 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e010      	b.n	8008122 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 ff61 	bl	8008fc8 <HAL_SD_GetCardState>
 8008106:	4603      	mov	r3, r0
 8008108:	2b04      	cmp	r3, #4
 800810a:	d1e7      	bne.n	80080dc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3728      	adds	r7, #40	; 0x28
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800812c:	b590      	push	{r4, r7, lr}
 800812e:	b08d      	sub	sp, #52	; 0x34
 8008130:	af02      	add	r7, sp, #8
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008138:	2300      	movs	r3, #0
 800813a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008140:	2300      	movs	r3, #0
 8008142:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008144:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008148:	f04f 0100 	mov.w	r1, #0
 800814c:	f7fe fc76 	bl	8006a3c <HAL_RCCEx_GetPeriphCLKFreq>
 8008150:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	2b00      	cmp	r3, #0
 8008156:	d109      	bne.n	800816c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008166:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e070      	b.n	800824e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	0a1b      	lsrs	r3, r3, #8
 8008170:	4a39      	ldr	r2, [pc, #228]	; (8008258 <HAL_SD_InitCard+0x12c>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	091b      	lsrs	r3, r3, #4
 8008178:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681c      	ldr	r4, [r3, #0]
 800817e:	466a      	mov	r2, sp
 8008180:	f107 0318 	add.w	r3, r7, #24
 8008184:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008188:	e882 0003 	stmia.w	r2, {r0, r1}
 800818c:	f107 030c 	add.w	r3, r7, #12
 8008190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008192:	4620      	mov	r0, r4
 8008194:	f001 fe84 	bl	8009ea0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fec7 	bl	8009f30 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d007      	beq.n	80081ca <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80081ba:	4a28      	ldr	r2, [pc, #160]	; (800825c <HAL_SD_InitCard+0x130>)
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	3301      	adds	r3, #1
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f9 fccf 	bl	8001b68 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 ffea 	bl	80091a4 <SD_PowerON>
 80081d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e02e      	b.n	800824e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 ff09 	bl	8009008 <SD_InitCard>
 80081f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00b      	beq.n	8008216 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	431a      	orrs	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e01b      	b.n	800824e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800821e:	4618      	mov	r0, r3
 8008220:	f001 ff1c 	bl	800a05c <SDMMC_CmdBlockLength>
 8008224:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00f      	beq.n	800824c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <HAL_SD_InitCard+0x134>)
 8008232:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	431a      	orrs	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	372c      	adds	r7, #44	; 0x2c
 8008252:	46bd      	mov	sp, r7
 8008254:	bd90      	pop	{r4, r7, pc}
 8008256:	bf00      	nop
 8008258:	014f8b59 	.word	0x014f8b59
 800825c:	00012110 	.word	0x00012110
 8008260:	1fe00fff 	.word	0x1fe00fff

08008264 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08c      	sub	sp, #48	; 0x30
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d107      	bne.n	800828c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008280:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e08d      	b.n	80083a8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	f040 8086 	bne.w	80083a6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	441a      	add	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d907      	bls.n	80082be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e074      	b.n	80083a8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2203      	movs	r2, #3
 80082c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2200      	movs	r2, #0
 80082cc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	025a      	lsls	r2, r3, #9
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d002      	beq.n	80082ea <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	025b      	lsls	r3, r3, #9
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	025b      	lsls	r3, r3, #9
 80082f4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80082f6:	2390      	movs	r3, #144	; 0x90
 80082f8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80082fa:	2302      	movs	r3, #2
 80082fc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80082fe:	2300      	movs	r3, #0
 8008300:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008302:	2300      	movs	r3, #0
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f107 0210 	add.w	r2, r7, #16
 800830e:	4611      	mov	r1, r2
 8008310:	4618      	mov	r0, r3
 8008312:	f001 fe77 	bl	800a004 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68da      	ldr	r2, [r3, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008324:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2201      	movs	r2, #1
 8008334:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d90a      	bls.n	8008352 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2282      	movs	r2, #130	; 0x82
 8008340:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008348:	4618      	mov	r0, r3
 800834a:	f001 fecd 	bl	800a0e8 <SDMMC_CmdReadMultiBlock>
 800834e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008350:	e009      	b.n	8008366 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2281      	movs	r2, #129	; 0x81
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800835e:	4618      	mov	r0, r3
 8008360:	f001 fe9f 	bl	800a0a2 <SDMMC_CmdReadSingleBlock>
 8008364:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d012      	beq.n	8008392 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a0f      	ldr	r2, [pc, #60]	; (80083b0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	431a      	orrs	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e00a      	b.n	80083a8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80083a0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	e000      	b.n	80083a8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80083a6:	2302      	movs	r3, #2
  }
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3730      	adds	r7, #48	; 0x30
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	1fe00fff 	.word	0x1fe00fff

080083b4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08c      	sub	sp, #48	; 0x30
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d107      	bne.n	80083dc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e08d      	b.n	80084f8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	f040 8086 	bne.w	80084f6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d907      	bls.n	800840e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008402:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e074      	b.n	80084f8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2203      	movs	r2, #3
 8008412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	025a      	lsls	r2, r3, #9
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	2b01      	cmp	r3, #1
 8008432:	d002      	beq.n	800843a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	025b      	lsls	r3, r3, #9
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800843a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800843e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	025b      	lsls	r3, r3, #9
 8008444:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008446:	2390      	movs	r3, #144	; 0x90
 8008448:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800844a:	2300      	movs	r3, #0
 800844c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800844e:	2300      	movs	r3, #0
 8008450:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008452:	2300      	movs	r3, #0
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f107 0210 	add.w	r2, r7, #16
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f001 fdcf 	bl	800a004 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008474:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2201      	movs	r2, #1
 8008484:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d90a      	bls.n	80084a2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	22a0      	movs	r2, #160	; 0xa0
 8008490:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fe6b 	bl	800a174 <SDMMC_CmdWriteMultiBlock>
 800849e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80084a0:	e009      	b.n	80084b6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2290      	movs	r2, #144	; 0x90
 80084a6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ae:	4618      	mov	r0, r3
 80084b0:	f001 fe3d 	bl	800a12e <SDMMC_CmdWriteSingleBlock>
 80084b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d012      	beq.n	80084e2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0f      	ldr	r2, [pc, #60]	; (8008500 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	431a      	orrs	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e00a      	b.n	80084f8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80084f0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e000      	b.n	80084f8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80084f6:	2302      	movs	r3, #2
  }
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3730      	adds	r7, #48	; 0x30
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	1fe00fff 	.word	0x1fe00fff

08008504 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d008      	beq.n	8008532 <HAL_SD_IRQHandler+0x2e>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f003 0308 	and.w	r3, r3, #8
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 f926 	bl	800977c <SD_Read_IT>
 8008530:	e19a      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80ac 	beq.w	800869a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800854a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	4b59      	ldr	r3, [pc, #356]	; (80086bc <HAL_SD_IRQHandler+0x1b8>)
 8008558:	400b      	ands	r3, r1
 800855a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800856a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800857a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d038      	beq.n	80085f8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d104      	bne.n	800859a <HAL_SD_IRQHandler+0x96>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	d011      	beq.n	80085be <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 fe0c 	bl	800a1bc <SDMMC_CmdStopTransfer>
 80085a4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	431a      	orrs	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f95b 	bl	8008874 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a3f      	ldr	r2, [pc, #252]	; (80086c0 <HAL_SD_IRQHandler+0x1bc>)
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d104      	bne.n	80085e8 <HAL_SD_IRQHandler+0xe4>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f002 fab5 	bl	800ab58 <HAL_SD_RxCpltCallback>
 80085ee:	e13b      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f002 faa7 	bl	800ab44 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80085f6:	e137      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 8132 	beq.w	8008868 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2200      	movs	r2, #0
 800860a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2200      	movs	r2, #0
 8008612:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2200      	movs	r2, #0
 800861a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <HAL_SD_IRQHandler+0x12c>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f003 0320 	and.w	r3, r3, #32
 800862c:	2b00      	cmp	r3, #0
 800862e:	d011      	beq.n	8008654 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f001 fdc1 	bl	800a1bc <SDMMC_CmdStopTransfer>
 800863a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d008      	beq.n	8008654 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	431a      	orrs	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f910 	bl	8008874 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <HAL_SD_IRQHandler+0x172>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f002 fa64 	bl	800ab44 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <HAL_SD_IRQHandler+0x18e>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80eb 	beq.w	8008868 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f002 fa60 	bl	800ab58 <HAL_SD_RxCpltCallback>
}
 8008698:	e0e6      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00d      	beq.n	80086c4 <HAL_SD_IRQHandler+0x1c0>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d008      	beq.n	80086c4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 f8a8 	bl	8009808 <SD_Write_IT>
 80086b8:	e0d6      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
 80086ba:	bf00      	nop
 80086bc:	ffff3ec5 	.word	0xffff3ec5
 80086c0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 809d 	beq.w	800880e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	f043 0202 	orr.w	r2, r3, #2
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	f043 0208 	orr.w	r2, r3, #8
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871a:	f043 0220 	orr.w	r2, r3, #32
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008734:	f043 0210 	orr.w	r2, r3, #16
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a4b      	ldr	r2, [pc, #300]	; (8008870 <HAL_SD_IRQHandler+0x36c>)
 8008742:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008752:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008762:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008772:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008782:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fd17 	bl	800a1bc <SDMMC_CmdStopTransfer>
 800878e:	4602      	mov	r2, r0
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087a8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087b2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0308 	and.w	r3, r3, #8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f851 	bl	8008874 <HAL_SD_ErrorCallback>
}
 80087d2:	e049      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d044      	beq.n	8008868 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d040      	beq.n	8008868 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80087f4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2200      	movs	r2, #0
 80087fc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f834 	bl	8008874 <HAL_SD_ErrorCallback>
}
 800880c:	e02c      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d025      	beq.n	8008868 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10c      	bne.n	800884e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 f84a 	bl	80098d8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008844:	e010      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 f832 	bl	80098b0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800884c:	e00c      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f003 0320 	and.w	r3, r3, #32
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 f833 	bl	80098c4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800885e:	e003      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 f81b 	bl	800989c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008866:	e7ff      	b.n	8008868 <HAL_SD_IRQHandler+0x364>
 8008868:	bf00      	nop
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	18000f3a 	.word	0x18000f3a

08008874 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008896:	0f9b      	lsrs	r3, r3, #30
 8008898:	b2da      	uxtb	r2, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a2:	0e9b      	lsrs	r3, r3, #26
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b4:	0e1b      	lsrs	r3, r3, #24
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c6:	0c1b      	lsrs	r3, r3, #16
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e8:	0d1b      	lsrs	r3, r3, #20
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f4:	0c1b      	lsrs	r3, r3, #16
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008906:	0bdb      	lsrs	r3, r3, #15
 8008908:	b2db      	uxtb	r3, r3
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	b2da      	uxtb	r2, r3
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008918:	0b9b      	lsrs	r3, r3, #14
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892a:	0b5b      	lsrs	r3, r3, #13
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	b2da      	uxtb	r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800893c:	0b1b      	lsrs	r3, r3, #12
 800893e:	b2db      	uxtb	r3, r3
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	b2da      	uxtb	r2, r3
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2200      	movs	r2, #0
 800894e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008954:	2b00      	cmp	r3, #0
 8008956:	d163      	bne.n	8008a20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895c:	009a      	lsls	r2, r3, #2
 800895e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008962:	4013      	ands	r3, r2
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008968:	0f92      	lsrs	r2, r2, #30
 800896a:	431a      	orrs	r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008974:	0edb      	lsrs	r3, r3, #27
 8008976:	b2db      	uxtb	r3, r3
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	b2da      	uxtb	r2, r3
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008986:	0e1b      	lsrs	r3, r3, #24
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	b2da      	uxtb	r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008998:	0d5b      	lsrs	r3, r3, #21
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089aa:	0c9b      	lsrs	r3, r3, #18
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089bc:	0bdb      	lsrs	r3, r3, #15
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0307 	and.w	r3, r3, #7
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	7e1b      	ldrb	r3, [r3, #24]
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	3302      	adds	r3, #2
 80089e0:	2201      	movs	r2, #1
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80089ea:	fb03 f202 	mul.w	r2, r3, r2
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	7a1b      	ldrb	r3, [r3, #8]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 030f 	and.w	r3, r3, #15
 80089fc:	2201      	movs	r2, #1
 80089fe:	409a      	lsls	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008a0c:	0a52      	lsrs	r2, r2, #9
 8008a0e:	fb03 f202 	mul.w	r2, r3, r2
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a1c:	655a      	str	r2, [r3, #84]	; 0x54
 8008a1e:	e031      	b.n	8008a84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d11d      	bne.n	8008a64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2c:	041b      	lsls	r3, r3, #16
 8008a2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a36:	0c1b      	lsrs	r3, r3, #16
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	3301      	adds	r3, #1
 8008a44:	029a      	lsls	r2, r3, #10
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a58:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	655a      	str	r2, [r3, #84]	; 0x54
 8008a62:	e00f      	b.n	8008a84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a58      	ldr	r2, [pc, #352]	; (8008bcc <HAL_SD_GetCardCSD+0x344>)
 8008a6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e09d      	b.n	8008bc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a88:	0b9b      	lsrs	r3, r3, #14
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a9a:	09db      	lsrs	r3, r3, #7
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008abc:	0fdb      	lsrs	r3, r3, #31
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac8:	0f5b      	lsrs	r3, r3, #29
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ada:	0e9b      	lsrs	r3, r3, #26
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aec:	0d9b      	lsrs	r3, r3, #22
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008afe:	0d5b      	lsrs	r3, r3, #21
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b1a:	0c1b      	lsrs	r3, r3, #16
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b2e:	0bdb      	lsrs	r3, r3, #15
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b42:	0b9b      	lsrs	r3, r3, #14
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b56:	0b5b      	lsrs	r3, r3, #13
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b6a:	0b1b      	lsrs	r3, r3, #12
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b7e:	0a9b      	lsrs	r3, r3, #10
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	1fe00fff 	.word	0x1fe00fff

08008bd0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b094      	sub	sp, #80	; 0x50
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d101      	bne.n	8008bf0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0a7      	b.n	8008d40 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008bf0:	f107 0308 	add.w	r3, r7, #8
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fb62 	bl	80092c0 <SD_SendSDStatus>
 8008bfc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d011      	beq.n	8008c28 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a4f      	ldr	r2, [pc, #316]	; (8008d48 <HAL_SD_GetCardStatus+0x178>)
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c12:	431a      	orrs	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008c26:	e070      	b.n	8008d0a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	099b      	lsrs	r3, r3, #6
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	0a1b      	lsrs	r3, r3, #8
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	0e1b      	lsrs	r3, r3, #24
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	061a      	lsls	r2, r3, #24
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	021b      	lsls	r3, r3, #8
 8008c6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c6e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	0a1b      	lsrs	r3, r3, #8
 8008c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c78:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	0e1b      	lsrs	r3, r3, #24
 8008c7e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	0a1b      	lsrs	r3, r3, #8
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	0d1b      	lsrs	r3, r3, #20
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 030f 	and.w	r3, r3, #15
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	0c1b      	lsrs	r3, r3, #16
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	0a9b      	lsrs	r3, r3, #10
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	0a1b      	lsrs	r3, r3, #8
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	091b      	lsrs	r3, r3, #4
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	f003 030f 	and.w	r3, r3, #15
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 030f 	and.w	r3, r3, #15
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	0e1b      	lsrs	r3, r3, #24
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d12:	4618      	mov	r0, r3
 8008d14:	f001 f9a2 	bl	800a05c <SDMMC_CmdBlockLength>
 8008d18:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00d      	beq.n	8008d3c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a08      	ldr	r2, [pc, #32]	; (8008d48 <HAL_SD_GetCardStatus+0x178>)
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d2c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008d3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3750      	adds	r7, #80	; 0x50
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	1fe00fff 	.word	0x1fe00fff

08008d4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008da4:	b590      	push	{r4, r7, lr}
 8008da6:	b08d      	sub	sp, #52	; 0x34
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2203      	movs	r2, #3
 8008db8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d02e      	beq.n	8008e22 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dca:	d106      	bne.n	8008dda <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8008dd8:	e029      	b.n	8008e2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008de0:	d10a      	bne.n	8008df8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fb64 	bl	80094b0 <SD_WideBus_Enable>
 8008de8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	635a      	str	r2, [r3, #52]	; 0x34
 8008df6:	e01a      	b.n	8008e2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fba1 	bl	8009546 <SD_WideBus_Disable>
 8008e04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	635a      	str	r2, [r3, #52]	; 0x34
 8008e12:	e00c      	b.n	8008e2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	635a      	str	r2, [r3, #52]	; 0x34
 8008e20:	e005      	b.n	8008e2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a5f      	ldr	r2, [pc, #380]	; (8008fb8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008e3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e44:	e096      	b.n	8008f74 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008e46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008e4a:	f04f 0100 	mov.w	r1, #0
 8008e4e:	f7fd fdf5 	bl	8006a3c <HAL_RCCEx_GetPeriphCLKFreq>
 8008e52:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 8083 	beq.w	8008f62 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695a      	ldr	r2, [r3, #20]
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4950      	ldr	r1, [pc, #320]	; (8008fbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e7a:	fba1 1303 	umull	r1, r3, r1, r3
 8008e7e:	0e1b      	lsrs	r3, r3, #24
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d303      	bcc.n	8008e8c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	e05a      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e94:	d103      	bne.n	8008e9e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	e051      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ea6:	d126      	bne.n	8008ef6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10e      	bne.n	8008ece <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	4a43      	ldr	r2, [pc, #268]	; (8008fc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d906      	bls.n	8008ec6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	4a40      	ldr	r2, [pc, #256]	; (8008fbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec0:	0e5b      	lsrs	r3, r3, #25
 8008ec2:	61bb      	str	r3, [r7, #24]
 8008ec4:	e03d      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	61bb      	str	r3, [r7, #24]
 8008ecc:	e039      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	69fa      	ldr	r2, [r7, #28]
 8008ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eda:	4a39      	ldr	r2, [pc, #228]	; (8008fc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d906      	bls.n	8008eee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4a36      	ldr	r2, [pc, #216]	; (8008fbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee8:	0e5b      	lsrs	r3, r3, #25
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	e029      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	61bb      	str	r3, [r7, #24]
 8008ef4:	e025      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10e      	bne.n	8008f1c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	4a30      	ldr	r2, [pc, #192]	; (8008fc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d906      	bls.n	8008f14 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	4a2c      	ldr	r2, [pc, #176]	; (8008fbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0e:	0e1b      	lsrs	r3, r3, #24
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	e016      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	61bb      	str	r3, [r7, #24]
 8008f1a:	e012      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f28:	4a26      	ldr	r2, [pc, #152]	; (8008fc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d906      	bls.n	8008f3c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	4a22      	ldr	r2, [pc, #136]	; (8008fbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008f32:	fba2 2303 	umull	r2, r3, r2, r3
 8008f36:	0e1b      	lsrs	r3, r3, #24
 8008f38:	61bb      	str	r3, [r7, #24]
 8008f3a:	e002      	b.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681c      	ldr	r4, [r3, #0]
 8008f46:	466a      	mov	r2, sp
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f50:	e882 0003 	stmia.w	r2, {r0, r1}
 8008f54:	f107 0308 	add.w	r3, r7, #8
 8008f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 ffa0 	bl	8009ea0 <SDMMC_Init>
 8008f60:	e008      	b.n	8008f74 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f001 f86d 	bl	800a05c <SDMMC_CmdBlockLength>
 8008f82:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00c      	beq.n	8008fa4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a0a      	ldr	r2, [pc, #40]	; (8008fb8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	372c      	adds	r7, #44	; 0x2c
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd90      	pop	{r4, r7, pc}
 8008fb8:	1fe00fff 	.word	0x1fe00fff
 8008fbc:	55e63b89 	.word	0x55e63b89
 8008fc0:	02faf080 	.word	0x02faf080
 8008fc4:	017d7840 	.word	0x017d7840

08008fc8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008fd4:	f107 030c 	add.w	r3, r7, #12
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa40 	bl	8009460 <SD_SendStatus>
 8008fe0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	0a5b      	lsrs	r3, r3, #9
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ffe:	693b      	ldr	r3, [r7, #16]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b090      	sub	sp, #64	; 0x40
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009014:	f7f8 fd9c 	bl	8001b50 <HAL_GetTick>
 8009018:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 ff97 	bl	8009f52 <SDMMC_GetPowerState>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d102      	bne.n	8009030 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800902a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800902e:	e0b5      	b.n	800919c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009034:	2b03      	cmp	r3, #3
 8009036:	d02e      	beq.n	8009096 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4618      	mov	r0, r3
 800903e:	f001 f9e2 	bl	800a406 <SDMMC_CmdSendCID>
 8009042:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <SD_InitCard+0x46>
    {
      return errorstate;
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	e0a6      	b.n	800919c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2100      	movs	r1, #0
 8009054:	4618      	mov	r0, r3
 8009056:	f000 ffc2 	bl	8009fde <SDMMC_GetResponse>
 800905a:	4602      	mov	r2, r0
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2104      	movs	r1, #4
 8009066:	4618      	mov	r0, r3
 8009068:	f000 ffb9 	bl	8009fde <SDMMC_GetResponse>
 800906c:	4602      	mov	r2, r0
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2108      	movs	r1, #8
 8009078:	4618      	mov	r0, r3
 800907a:	f000 ffb0 	bl	8009fde <SDMMC_GetResponse>
 800907e:	4602      	mov	r2, r0
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	210c      	movs	r1, #12
 800908a:	4618      	mov	r0, r3
 800908c:	f000 ffa7 	bl	8009fde <SDMMC_GetResponse>
 8009090:	4602      	mov	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	2b03      	cmp	r3, #3
 800909c:	d01d      	beq.n	80090da <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800909e:	e019      	b.n	80090d4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f107 020a 	add.w	r2, r7, #10
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f001 f9ea 	bl	800a484 <SDMMC_CmdSetRelAdd>
 80090b0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80090b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <SD_InitCard+0xb4>
      {
        return errorstate;
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	e06f      	b.n	800919c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80090bc:	f7f8 fd48 	bl	8001b50 <HAL_GetTick>
 80090c0:	4602      	mov	r2, r0
 80090c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	f241 3287 	movw	r2, #4999	; 0x1387
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d902      	bls.n	80090d4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80090ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090d2:	e063      	b.n	800919c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80090d4:	897b      	ldrh	r3, [r7, #10]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0e2      	beq.n	80090a0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d036      	beq.n	8009150 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80090e2:	897b      	ldrh	r3, [r7, #10]
 80090e4:	461a      	mov	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f2:	041b      	lsls	r3, r3, #16
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f001 f9a4 	bl	800a444 <SDMMC_CmdSendCSD>
 80090fc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <SD_InitCard+0x100>
    {
      return errorstate;
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	e049      	b.n	800919c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2100      	movs	r1, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f000 ff65 	bl	8009fde <SDMMC_GetResponse>
 8009114:	4602      	mov	r2, r0
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2104      	movs	r1, #4
 8009120:	4618      	mov	r0, r3
 8009122:	f000 ff5c 	bl	8009fde <SDMMC_GetResponse>
 8009126:	4602      	mov	r2, r0
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2108      	movs	r1, #8
 8009132:	4618      	mov	r0, r3
 8009134:	f000 ff53 	bl	8009fde <SDMMC_GetResponse>
 8009138:	4602      	mov	r2, r0
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	210c      	movs	r1, #12
 8009144:	4618      	mov	r0, r3
 8009146:	f000 ff4a 	bl	8009fde <SDMMC_GetResponse>
 800914a:	4602      	mov	r2, r0
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2104      	movs	r1, #4
 8009156:	4618      	mov	r0, r3
 8009158:	f000 ff41 	bl	8009fde <SDMMC_GetResponse>
 800915c:	4603      	mov	r3, r0
 800915e:	0d1a      	lsrs	r2, r3, #20
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009164:	f107 030c 	add.w	r3, r7, #12
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff fb8c 	bl	8008888 <HAL_SD_GetCardCSD>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009176:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800917a:	e00f      	b.n	800919c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009184:	041b      	lsls	r3, r3, #16
 8009186:	4619      	mov	r1, r3
 8009188:	4610      	mov	r0, r2
 800918a:	f001 f853 	bl	800a234 <SDMMC_CmdSelDesel>
 800918e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <SD_InitCard+0x192>
  {
    return errorstate;
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	e000      	b.n	800919c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3740      	adds	r7, #64	; 0x40
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80091b4:	2300      	movs	r3, #0
 80091b6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4618      	mov	r0, r3
 80091be:	f001 f85c 	bl	800a27a <SDMMC_CmdGoIdleState>
 80091c2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	e072      	b.n	80092b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f001 f86f 	bl	800a2b6 <SDMMC_CmdOperCond>
 80091d8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e0:	d10d      	bne.n	80091fe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 f844 	bl	800a27a <SDMMC_CmdGoIdleState>
 80091f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <SD_PowerON+0x60>
    {
      return errorstate;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	e05a      	b.n	80092b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d137      	bne.n	800927c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2100      	movs	r1, #0
 8009212:	4618      	mov	r0, r3
 8009214:	f001 f86f 	bl	800a2f6 <SDMMC_CmdAppCommand>
 8009218:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d02d      	beq.n	800927c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009224:	e046      	b.n	80092b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2100      	movs	r1, #0
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f862 	bl	800a2f6 <SDMMC_CmdAppCommand>
 8009232:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <SD_PowerON+0x9a>
    {
      return errorstate;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	e03a      	b.n	80092b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	491e      	ldr	r1, [pc, #120]	; (80092bc <SD_PowerON+0x118>)
 8009244:	4618      	mov	r0, r3
 8009246:	f001 f879 	bl	800a33c <SDMMC_CmdAppOperCommand>
 800924a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009252:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009256:	e02d      	b.n	80092b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f000 febd 	bl	8009fde <SDMMC_GetResponse>
 8009264:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	0fdb      	lsrs	r3, r3, #31
 800926a:	2b01      	cmp	r3, #1
 800926c:	d101      	bne.n	8009272 <SD_PowerON+0xce>
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <SD_PowerON+0xd0>
 8009272:	2300      	movs	r3, #0
 8009274:	613b      	str	r3, [r7, #16]

    count++;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	3301      	adds	r3, #1
 800927a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009282:	4293      	cmp	r3, r2
 8009284:	d802      	bhi.n	800928c <SD_PowerON+0xe8>
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0cc      	beq.n	8009226 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009292:	4293      	cmp	r3, r2
 8009294:	d902      	bls.n	800929c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009296:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800929a:	e00b      	b.n	80092b4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	c1100000 	.word	0xc1100000

080092c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08c      	sub	sp, #48	; 0x30
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80092ca:	f7f8 fc41 	bl	8001b50 <HAL_GetTick>
 80092ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 fe7f 	bl	8009fde <SDMMC_GetResponse>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ea:	d102      	bne.n	80092f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092f0:	e0b0      	b.n	8009454 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2140      	movs	r1, #64	; 0x40
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 feaf 	bl	800a05c <SDMMC_CmdBlockLength>
 80092fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	e0a0      	b.n	8009454 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931a:	041b      	lsls	r3, r3, #16
 800931c:	4619      	mov	r1, r3
 800931e:	4610      	mov	r0, r2
 8009320:	f000 ffe9 	bl	800a2f6 <SDMMC_CmdAppCommand>
 8009324:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	e08d      	b.n	8009454 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800933c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009342:	2360      	movs	r3, #96	; 0x60
 8009344:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009346:	2302      	movs	r3, #2
 8009348:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800934a:	2300      	movs	r3, #0
 800934c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800934e:	2301      	movs	r3, #1
 8009350:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f107 0208 	add.w	r2, r7, #8
 800935a:	4611      	mov	r1, r2
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fe51 	bl	800a004 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4618      	mov	r0, r3
 8009368:	f001 f8d1 	bl	800a50e <SDMMC_CmdStatusRegister>
 800936c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d02b      	beq.n	80093cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	e069      	b.n	8009454 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d013      	beq.n	80093b6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800938e:	2300      	movs	r3, #0
 8009390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009392:	e00d      	b.n	80093b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fdab 	bl	8009ef4 <SDMMC_ReadFIFO>
 800939e:	4602      	mov	r2, r0
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	601a      	str	r2, [r3, #0]
        pData++;
 80093a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a6:	3304      	adds	r3, #4
 80093a8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80093aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ac:	3301      	adds	r3, #1
 80093ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	2b07      	cmp	r3, #7
 80093b4:	d9ee      	bls.n	8009394 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093b6:	f7f8 fbcb 	bl	8001b50 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093c4:	d102      	bne.n	80093cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80093c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093ca:	e043      	b.n	8009454 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0d2      	beq.n	8009380 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	f003 0308 	and.w	r3, r3, #8
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80093e8:	2308      	movs	r3, #8
 80093ea:	e033      	b.n	8009454 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d001      	beq.n	80093fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80093fa:	2302      	movs	r3, #2
 80093fc:	e02a      	b.n	8009454 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d017      	beq.n	800943c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800940c:	2320      	movs	r3, #32
 800940e:	e021      	b.n	8009454 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fd6d 	bl	8009ef4 <SDMMC_ReadFIFO>
 800941a:	4602      	mov	r2, r0
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	601a      	str	r2, [r3, #0]
    pData++;
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	3304      	adds	r3, #4
 8009424:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009426:	f7f8 fb93 	bl	8001b50 <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009434:	d102      	bne.n	800943c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800943a:	e00b      	b.n	8009454 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1e2      	bne.n	8009410 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a03      	ldr	r2, [pc, #12]	; (800945c <SD_SendSDStatus+0x19c>)
 8009450:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3730      	adds	r7, #48	; 0x30
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	18000f3a 	.word	0x18000f3a

08009460 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009474:	e018      	b.n	80094a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947e:	041b      	lsls	r3, r3, #16
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f001 f820 	bl	800a4c8 <SDMMC_CmdSendStatus>
 8009488:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	e009      	b.n	80094a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fd9f 	bl	8009fde <SDMMC_GetResponse>
 80094a0:	4602      	mov	r2, r0
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	2300      	movs	r3, #0
 80094be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fd89 	bl	8009fde <SDMMC_GetResponse>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094d6:	d102      	bne.n	80094de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80094d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094dc:	e02f      	b.n	800953e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80094de:	f107 030c 	add.w	r3, r7, #12
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f879 	bl	80095dc <SD_FindSCR>
 80094ea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	e023      	b.n	800953e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01c      	beq.n	800953a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009508:	041b      	lsls	r3, r3, #16
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f000 fef2 	bl	800a2f6 <SDMMC_CmdAppCommand>
 8009512:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	e00f      	b.n	800953e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2102      	movs	r1, #2
 8009524:	4618      	mov	r0, r3
 8009526:	f000 ff29 	bl	800a37c <SDMMC_CmdBusWidth>
 800952a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	e003      	b.n	800953e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009536:	2300      	movs	r3, #0
 8009538:	e001      	b.n	800953e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800953a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	2300      	movs	r3, #0
 8009554:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2100      	movs	r1, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fd3e 	bl	8009fde <SDMMC_GetResponse>
 8009562:	4603      	mov	r3, r0
 8009564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800956c:	d102      	bne.n	8009574 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800956e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009572:	e02f      	b.n	80095d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009574:	f107 030c 	add.w	r3, r7, #12
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f82e 	bl	80095dc <SD_FindSCR>
 8009580:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	e023      	b.n	80095d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d01c      	beq.n	80095d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800959e:	041b      	lsls	r3, r3, #16
 80095a0:	4619      	mov	r1, r3
 80095a2:	4610      	mov	r0, r2
 80095a4:	f000 fea7 	bl	800a2f6 <SDMMC_CmdAppCommand>
 80095a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	e00f      	b.n	80095d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fede 	bl	800a37c <SDMMC_CmdBusWidth>
 80095c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	e003      	b.n	80095d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095cc:	2300      	movs	r3, #0
 80095ce:	e001      	b.n	80095d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08e      	sub	sp, #56	; 0x38
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095e6:	f7f8 fab3 	bl	8001b50 <HAL_GetTick>
 80095ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80095f0:	2300      	movs	r3, #0
 80095f2:	60bb      	str	r3, [r7, #8]
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2108      	movs	r1, #8
 8009602:	4618      	mov	r0, r3
 8009604:	f000 fd2a 	bl	800a05c <SDMMC_CmdBlockLength>
 8009608:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800960a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	e0ad      	b.n	8009770 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961c:	041b      	lsls	r3, r3, #16
 800961e:	4619      	mov	r1, r3
 8009620:	4610      	mov	r0, r2
 8009622:	f000 fe68 	bl	800a2f6 <SDMMC_CmdAppCommand>
 8009626:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <SD_FindSCR+0x56>
  {
    return errorstate;
 800962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009630:	e09e      	b.n	8009770 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009636:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009638:	2308      	movs	r3, #8
 800963a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800963c:	2330      	movs	r3, #48	; 0x30
 800963e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009640:	2302      	movs	r3, #2
 8009642:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009644:	2300      	movs	r3, #0
 8009646:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009648:	2301      	movs	r3, #1
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f107 0210 	add.w	r2, r7, #16
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fcd4 	bl	800a004 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f000 feae 	bl	800a3c2 <SDMMC_CmdSendSCR>
 8009666:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	2b00      	cmp	r3, #0
 800966c:	d027      	beq.n	80096be <SD_FindSCR+0xe2>
  {
    return errorstate;
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	e07e      	b.n	8009770 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d113      	bne.n	80096a8 <SD_FindSCR+0xcc>
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	2b00      	cmp	r3, #0
 8009684:	d110      	bne.n	80096a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 fc32 	bl	8009ef4 <SDMMC_ReadFIFO>
 8009690:	4603      	mov	r3, r0
 8009692:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fc2b 	bl	8009ef4 <SDMMC_ReadFIFO>
 800969e:	4603      	mov	r3, r0
 80096a0:	60fb      	str	r3, [r7, #12]
      index++;
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	3301      	adds	r3, #1
 80096a6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80096a8:	f7f8 fa52 	bl	8001b50 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096b6:	d102      	bne.n	80096be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80096b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096bc:	e058      	b.n	8009770 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096c4:	f240 532a 	movw	r3, #1322	; 0x52a
 80096c8:	4013      	ands	r3, r2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0d1      	beq.n	8009672 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2208      	movs	r2, #8
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80096e4:	2308      	movs	r3, #8
 80096e6:	e043      	b.n	8009770 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d005      	beq.n	8009702 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2202      	movs	r2, #2
 80096fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80096fe:	2302      	movs	r3, #2
 8009700:	e036      	b.n	8009770 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	2b00      	cmp	r3, #0
 800970e:	d005      	beq.n	800971c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2220      	movs	r2, #32
 8009716:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009718:	2320      	movs	r3, #32
 800971a:	e029      	b.n	8009770 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a15      	ldr	r2, [pc, #84]	; (8009778 <SD_FindSCR+0x19c>)
 8009722:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	061a      	lsls	r2, r3, #24
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009730:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	0a1b      	lsrs	r3, r3, #8
 8009736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800973a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	0e1b      	lsrs	r3, r3, #24
 8009740:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009744:	601a      	str	r2, [r3, #0]
    scr++;
 8009746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009748:	3304      	adds	r3, #4
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	061a      	lsls	r2, r3, #24
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009758:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	0a1b      	lsrs	r3, r3, #8
 800975e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009762:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	0e1b      	lsrs	r3, r3, #24
 8009768:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3738      	adds	r7, #56	; 0x38
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	18000f3a 	.word	0x18000f3a

0800977c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	2b1f      	cmp	r3, #31
 8009790:	d936      	bls.n	8009800 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8009792:	2300      	movs	r3, #0
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e027      	b.n	80097e8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fba9 	bl	8009ef4 <SDMMC_ReadFIFO>
 80097a2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	3301      	adds	r3, #1
 80097b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	0a1b      	lsrs	r3, r3, #8
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	3301      	adds	r3, #1
 80097c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	0c1b      	lsrs	r3, r3, #16
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	3301      	adds	r3, #1
 80097d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	0e1b      	lsrs	r3, r3, #24
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	3301      	adds	r3, #1
 80097e0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3301      	adds	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	2b07      	cmp	r3, #7
 80097ec:	d9d4      	bls.n	8009798 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f8:	f1a3 0220 	sub.w	r2, r3, #32
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8009800:	bf00      	nop
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	2b1f      	cmp	r3, #31
 800981c:	d93a      	bls.n	8009894 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
 8009822:	e02b      	b.n	800987c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	60fb      	str	r3, [r7, #12]
      tmp++;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	3301      	adds	r3, #1
 800982e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	021a      	lsls	r2, r3, #8
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	4313      	orrs	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	3301      	adds	r3, #1
 8009840:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	041a      	lsls	r2, r3, #16
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4313      	orrs	r3, r2
 800984c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	3301      	adds	r3, #1
 8009852:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	061a      	lsls	r2, r3, #24
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4313      	orrs	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	3301      	adds	r3, #1
 8009864:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f107 020c 	add.w	r2, r7, #12
 800986e:	4611      	mov	r1, r2
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fb4c 	bl	8009f0e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	3301      	adds	r3, #1
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	2b07      	cmp	r3, #7
 8009880:	d9d0      	bls.n	8009824 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	f1a3 0220 	sub.w	r2, r3, #32
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	621a      	str	r2, [r3, #32]
  }
}
 8009894:	bf00      	nop
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e049      	b.n	8009992 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f841 	bl	800999a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f000 fa00 	bl	8009d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80099a2:	bf00      	nop
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
	...

080099b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d001      	beq.n	80099c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e054      	b.n	8009a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0201 	orr.w	r2, r2, #1
 80099de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a26      	ldr	r2, [pc, #152]	; (8009a80 <HAL_TIM_Base_Start_IT+0xd0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d022      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f2:	d01d      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a22      	ldr	r2, [pc, #136]	; (8009a84 <HAL_TIM_Base_Start_IT+0xd4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d018      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a21      	ldr	r2, [pc, #132]	; (8009a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d013      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	; (8009a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d00e      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d009      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	; (8009a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d004      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d115      	bne.n	8009a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	4b19      	ldr	r3, [pc, #100]	; (8009a9c <HAL_TIM_Base_Start_IT+0xec>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b06      	cmp	r3, #6
 8009a40:	d015      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a48:	d011      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0201 	orr.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5a:	e008      	b.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	e000      	b.n	8009a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40000400 	.word	0x40000400
 8009a88:	40000800 	.word	0x40000800
 8009a8c:	40000c00 	.word	0x40000c00
 8009a90:	40010400 	.word	0x40010400
 8009a94:	40001800 	.word	0x40001800
 8009a98:	40014000 	.word	0x40014000
 8009a9c:	00010007 	.word	0x00010007

08009aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d122      	bne.n	8009afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f003 0302 	and.w	r3, r3, #2
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d11b      	bne.n	8009afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0202 	mvn.w	r2, #2
 8009acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f905 	bl	8009cf2 <HAL_TIM_IC_CaptureCallback>
 8009ae8:	e005      	b.n	8009af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f8f7 	bl	8009cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f908 	bl	8009d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f003 0304 	and.w	r3, r3, #4
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d122      	bne.n	8009b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b04      	cmp	r3, #4
 8009b16:	d11b      	bne.n	8009b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0204 	mvn.w	r2, #4
 8009b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f8db 	bl	8009cf2 <HAL_TIM_IC_CaptureCallback>
 8009b3c:	e005      	b.n	8009b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f8cd 	bl	8009cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f8de 	bl	8009d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f003 0308 	and.w	r3, r3, #8
 8009b5a:	2b08      	cmp	r3, #8
 8009b5c:	d122      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b08      	cmp	r3, #8
 8009b6a:	d11b      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f06f 0208 	mvn.w	r2, #8
 8009b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2204      	movs	r2, #4
 8009b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f8b1 	bl	8009cf2 <HAL_TIM_IC_CaptureCallback>
 8009b90:	e005      	b.n	8009b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f8a3 	bl	8009cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8b4 	bl	8009d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b10      	cmp	r3, #16
 8009bb0:	d122      	bne.n	8009bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	2b10      	cmp	r3, #16
 8009bbe:	d11b      	bne.n	8009bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f06f 0210 	mvn.w	r2, #16
 8009bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2208      	movs	r2, #8
 8009bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f887 	bl	8009cf2 <HAL_TIM_IC_CaptureCallback>
 8009be4:	e005      	b.n	8009bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f879 	bl	8009cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f88a 	bl	8009d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d10e      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d107      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f06f 0201 	mvn.w	r2, #1
 8009c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f7 fb76 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2e:	2b80      	cmp	r3, #128	; 0x80
 8009c30:	d10e      	bne.n	8009c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3c:	2b80      	cmp	r3, #128	; 0x80
 8009c3e:	d107      	bne.n	8009c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f914 	bl	8009e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5e:	d10e      	bne.n	8009c7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c6a:	2b80      	cmp	r3, #128	; 0x80
 8009c6c:	d107      	bne.n	8009c7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f907 	bl	8009e8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c88:	2b40      	cmp	r3, #64	; 0x40
 8009c8a:	d10e      	bne.n	8009caa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c96:	2b40      	cmp	r3, #64	; 0x40
 8009c98:	d107      	bne.n	8009caa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f838 	bl	8009d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b20      	cmp	r3, #32
 8009cb6:	d10e      	bne.n	8009cd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d107      	bne.n	8009cd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f06f 0220 	mvn.w	r2, #32
 8009cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f8c7 	bl	8009e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cd6:	bf00      	nop
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
	...

08009d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a40      	ldr	r2, [pc, #256]	; (8009e44 <TIM_Base_SetConfig+0x114>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d013      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4e:	d00f      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a3d      	ldr	r2, [pc, #244]	; (8009e48 <TIM_Base_SetConfig+0x118>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00b      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a3c      	ldr	r2, [pc, #240]	; (8009e4c <TIM_Base_SetConfig+0x11c>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d007      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a3b      	ldr	r2, [pc, #236]	; (8009e50 <TIM_Base_SetConfig+0x120>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d003      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a3a      	ldr	r2, [pc, #232]	; (8009e54 <TIM_Base_SetConfig+0x124>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d108      	bne.n	8009d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a2f      	ldr	r2, [pc, #188]	; (8009e44 <TIM_Base_SetConfig+0x114>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d01f      	beq.n	8009dca <TIM_Base_SetConfig+0x9a>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d90:	d01b      	beq.n	8009dca <TIM_Base_SetConfig+0x9a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a2c      	ldr	r2, [pc, #176]	; (8009e48 <TIM_Base_SetConfig+0x118>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d017      	beq.n	8009dca <TIM_Base_SetConfig+0x9a>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2b      	ldr	r2, [pc, #172]	; (8009e4c <TIM_Base_SetConfig+0x11c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d013      	beq.n	8009dca <TIM_Base_SetConfig+0x9a>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a2a      	ldr	r2, [pc, #168]	; (8009e50 <TIM_Base_SetConfig+0x120>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00f      	beq.n	8009dca <TIM_Base_SetConfig+0x9a>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a29      	ldr	r2, [pc, #164]	; (8009e54 <TIM_Base_SetConfig+0x124>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00b      	beq.n	8009dca <TIM_Base_SetConfig+0x9a>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a28      	ldr	r2, [pc, #160]	; (8009e58 <TIM_Base_SetConfig+0x128>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d007      	beq.n	8009dca <TIM_Base_SetConfig+0x9a>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a27      	ldr	r2, [pc, #156]	; (8009e5c <TIM_Base_SetConfig+0x12c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d003      	beq.n	8009dca <TIM_Base_SetConfig+0x9a>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a26      	ldr	r2, [pc, #152]	; (8009e60 <TIM_Base_SetConfig+0x130>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d108      	bne.n	8009ddc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a10      	ldr	r2, [pc, #64]	; (8009e44 <TIM_Base_SetConfig+0x114>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d00f      	beq.n	8009e28 <TIM_Base_SetConfig+0xf8>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a12      	ldr	r2, [pc, #72]	; (8009e54 <TIM_Base_SetConfig+0x124>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00b      	beq.n	8009e28 <TIM_Base_SetConfig+0xf8>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a11      	ldr	r2, [pc, #68]	; (8009e58 <TIM_Base_SetConfig+0x128>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d007      	beq.n	8009e28 <TIM_Base_SetConfig+0xf8>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a10      	ldr	r2, [pc, #64]	; (8009e5c <TIM_Base_SetConfig+0x12c>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d003      	beq.n	8009e28 <TIM_Base_SetConfig+0xf8>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a0f      	ldr	r2, [pc, #60]	; (8009e60 <TIM_Base_SetConfig+0x130>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d103      	bne.n	8009e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	691a      	ldr	r2, [r3, #16]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	615a      	str	r2, [r3, #20]
}
 8009e36:	bf00      	nop
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	40010000 	.word	0x40010000
 8009e48:	40000400 	.word	0x40000400
 8009e4c:	40000800 	.word	0x40000800
 8009e50:	40000c00 	.word	0x40000c00
 8009e54:	40010400 	.word	0x40010400
 8009e58:	40014000 	.word	0x40014000
 8009e5c:	40014400 	.word	0x40014400
 8009e60:	40014800 	.word	0x40014800

08009e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	b480      	push	{r7}
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	f107 001c 	add.w	r0, r7, #28
 8009eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009eb6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009eba:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009ebe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009ec2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009ec6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <SDMMC_Init+0x50>)
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	b004      	add	sp, #16
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	ffc02c00 	.word	0xffc02c00

08009ef4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f043 0203 	orr.w	r2, r3, #3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0303 	and.w	r3, r3, #3
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	370c      	adds	r7, #12
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
	...

08009f70 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009f94:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009f9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68da      	ldr	r2, [r3, #12]
 8009fa6:	4b06      	ldr	r3, [pc, #24]	; (8009fc0 <SDMMC_SendCommand+0x50>)
 8009fa8:	4013      	ands	r3, r2
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	fffee0c0 	.word	0xfffee0c0

08009fc4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	b2db      	uxtb	r3, r3
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b085      	sub	sp, #20
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3314      	adds	r3, #20
 8009fec:	461a      	mov	r2, r3
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a02a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a030:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a036:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0

}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a06a:	2310      	movs	r3, #16
 800a06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a06e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a074:	2300      	movs	r3, #0
 800a076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a07c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff ff73 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a08e:	2110      	movs	r1, #16
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fa5f 	bl	800a554 <SDMMC_GetCmdResp1>
 800a096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a098:	69fb      	ldr	r3, [r7, #28]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b088      	sub	sp, #32
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a0b0:	2311      	movs	r3, #17
 800a0b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff ff50 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d4:	2111      	movs	r1, #17
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fa3c 	bl	800a554 <SDMMC_GetCmdResp1>
 800a0dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0de:	69fb      	ldr	r3, [r7, #28]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3720      	adds	r7, #32
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a0f6:	2312      	movs	r3, #18
 800a0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a108:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a10a:	f107 0308 	add.w	r3, r7, #8
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff ff2d 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a116:	f241 3288 	movw	r2, #5000	; 0x1388
 800a11a:	2112      	movs	r1, #18
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa19 	bl	800a554 <SDMMC_GetCmdResp1>
 800a122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a124:	69fb      	ldr	r3, [r7, #28]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3720      	adds	r7, #32
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b088      	sub	sp, #32
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a13c:	2318      	movs	r3, #24
 800a13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a140:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a146:	2300      	movs	r3, #0
 800a148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a14a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a14e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a150:	f107 0308 	add.w	r3, r7, #8
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff ff0a 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a15c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a160:	2118      	movs	r1, #24
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f9f6 	bl	800a554 <SDMMC_GetCmdResp1>
 800a168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a16a:	69fb      	ldr	r3, [r7, #28]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3720      	adds	r7, #32
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a182:	2319      	movs	r3, #25
 800a184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a18a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a196:	f107 0308 	add.w	r3, r7, #8
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff fee7 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a1a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a6:	2119      	movs	r1, #25
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f9d3 	bl	800a554 <SDMMC_GetCmdResp1>
 800a1ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3720      	adds	r7, #32
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a1c8:	230c      	movs	r3, #12
 800a1ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1da:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1f4:	f107 0308 	add.w	r3, r7, #8
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff feb8 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a200:	4a0b      	ldr	r2, [pc, #44]	; (800a230 <SDMMC_CmdStopTransfer+0x74>)
 800a202:	210c      	movs	r1, #12
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f9a5 	bl	800a554 <SDMMC_GetCmdResp1>
 800a20a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a21e:	d101      	bne.n	800a224 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a220:	2300      	movs	r3, #0
 800a222:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a224:	69fb      	ldr	r3, [r7, #28]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	05f5e100 	.word	0x05f5e100

0800a234 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a242:	2307      	movs	r3, #7
 800a244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a24a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a24c:	2300      	movs	r3, #0
 800a24e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a254:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a256:	f107 0308 	add.w	r3, r7, #8
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7ff fe87 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a262:	f241 3288 	movw	r2, #5000	; 0x1388
 800a266:	2107      	movs	r1, #7
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f973 	bl	800a554 <SDMMC_GetCmdResp1>
 800a26e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a270:	69fb      	ldr	r3, [r7, #28]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3720      	adds	r7, #32
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b088      	sub	sp, #32
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a28a:	2300      	movs	r3, #0
 800a28c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a28e:	2300      	movs	r3, #0
 800a290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a296:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a298:	f107 0308 	add.w	r3, r7, #8
 800a29c:	4619      	mov	r1, r3
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f7ff fe66 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fb97 	bl	800a9d8 <SDMMC_GetCmdError>
 800a2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3720      	adds	r7, #32
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b088      	sub	sp, #32
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a2be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a2c4:	2308      	movs	r3, #8
 800a2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2d8:	f107 0308 	add.w	r3, r7, #8
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff fe46 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fb29 	bl	800a93c <SDMMC_GetCmdResp7>
 800a2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ec:	69fb      	ldr	r3, [r7, #28]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3720      	adds	r7, #32
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b088      	sub	sp, #32
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a304:	2337      	movs	r3, #55	; 0x37
 800a306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a318:	f107 0308 	add.w	r3, r7, #8
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff fe26 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a324:	f241 3288 	movw	r2, #5000	; 0x1388
 800a328:	2137      	movs	r1, #55	; 0x37
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f912 	bl	800a554 <SDMMC_GetCmdResp1>
 800a330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a332:	69fb      	ldr	r3, [r7, #28]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3720      	adds	r7, #32
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b088      	sub	sp, #32
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a34a:	2329      	movs	r3, #41	; 0x29
 800a34c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a34e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a354:	2300      	movs	r3, #0
 800a356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a35c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a35e:	f107 0308 	add.w	r3, r7, #8
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fe03 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fa2e 	bl	800a7cc <SDMMC_GetCmdResp3>
 800a370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a372:	69fb      	ldr	r3, [r7, #28]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3720      	adds	r7, #32
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a38a:	2306      	movs	r3, #6
 800a38c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a38e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a394:	2300      	movs	r3, #0
 800a396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a39c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a39e:	f107 0308 	add.w	r3, r7, #8
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff fde3 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ae:	2106      	movs	r1, #6
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8cf 	bl	800a554 <SDMMC_GetCmdResp1>
 800a3b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3b8:	69fb      	ldr	r3, [r7, #28]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b088      	sub	sp, #32
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a3ce:	2333      	movs	r3, #51	; 0x33
 800a3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3e2:	f107 0308 	add.w	r3, r7, #8
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff fdc1 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f2:	2133      	movs	r1, #51	; 0x33
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f8ad 	bl	800a554 <SDMMC_GetCmdResp1>
 800a3fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3fc:	69fb      	ldr	r3, [r7, #28]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3720      	adds	r7, #32
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b088      	sub	sp, #32
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a412:	2302      	movs	r3, #2
 800a414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a41a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a424:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a426:	f107 0308 	add.w	r3, r7, #8
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff fd9f 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f980 	bl	800a738 <SDMMC_GetCmdResp2>
 800a438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a43a:	69fb      	ldr	r3, [r7, #28]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3720      	adds	r7, #32
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a452:	2309      	movs	r3, #9
 800a454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a456:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a45a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a45c:	2300      	movs	r3, #0
 800a45e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a464:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a466:	f107 0308 	add.w	r3, r7, #8
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7ff fd7f 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f960 	bl	800a738 <SDMMC_GetCmdResp2>
 800a478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a47a:	69fb      	ldr	r3, [r7, #28]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a492:	2303      	movs	r3, #3
 800a494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a49a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a49c:	2300      	movs	r3, #0
 800a49e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4a6:	f107 0308 	add.w	r3, r7, #8
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff fd5f 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	2103      	movs	r1, #3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f9c8 	bl	800a84c <SDMMC_GetCmdResp6>
 800a4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4be:	69fb      	ldr	r3, [r7, #28]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3720      	adds	r7, #32
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b088      	sub	sp, #32
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a4d6:	230d      	movs	r3, #13
 800a4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4ea:	f107 0308 	add.w	r3, r7, #8
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff fd3d 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a4f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4fa:	210d      	movs	r1, #13
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f829 	bl	800a554 <SDMMC_GetCmdResp1>
 800a502:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a504:	69fb      	ldr	r3, [r7, #28]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3720      	adds	r7, #32
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b088      	sub	sp, #32
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a51a:	230d      	movs	r3, #13
 800a51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a51e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a524:	2300      	movs	r3, #0
 800a526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a52c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff fd1b 	bl	8009f70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a53a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a53e:	210d      	movs	r1, #13
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f807 	bl	800a554 <SDMMC_GetCmdResp1>
 800a546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a548:	69fb      	ldr	r3, [r7, #28]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	460b      	mov	r3, r1
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a562:	4b70      	ldr	r3, [pc, #448]	; (800a724 <SDMMC_GetCmdResp1+0x1d0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a70      	ldr	r2, [pc, #448]	; (800a728 <SDMMC_GetCmdResp1+0x1d4>)
 800a568:	fba2 2303 	umull	r2, r3, r2, r3
 800a56c:	0a5a      	lsrs	r2, r3, #9
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	fb02 f303 	mul.w	r3, r2, r3
 800a574:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	1e5a      	subs	r2, r3, #1
 800a57a:	61fa      	str	r2, [r7, #28]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a584:	e0c9      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	4b67      	ldr	r3, [pc, #412]	; (800a72c <SDMMC_GetCmdResp1+0x1d8>)
 800a590:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0ef      	beq.n	800a576 <SDMMC_GetCmdResp1+0x22>
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1ea      	bne.n	800a576 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2204      	movs	r2, #4
 800a5b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5b2:	2304      	movs	r3, #4
 800a5b4:	e0b1      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d004      	beq.n	800a5cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e0a6      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4a58      	ldr	r2, [pc, #352]	; (800a730 <SDMMC_GetCmdResp1+0x1dc>)
 800a5d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7ff fcf6 	bl	8009fc4 <SDMMC_GetCommandResponse>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	461a      	mov	r2, r3
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d001      	beq.n	800a5e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e099      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7ff fcf8 	bl	8009fde <SDMMC_GetResponse>
 800a5ee:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	4b50      	ldr	r3, [pc, #320]	; (800a734 <SDMMC_GetCmdResp1+0x1e0>)
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d101      	bne.n	800a5fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e08d      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	da02      	bge.n	800a60a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a608:	e087      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a614:	2340      	movs	r3, #64	; 0x40
 800a616:	e080      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a622:	2380      	movs	r3, #128	; 0x80
 800a624:	e079      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a630:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a634:	e071      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a640:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a644:	e069      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a654:	e061      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a664:	e059      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a674:	e051      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a684:	e049      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a694:	e041      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a6a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6a4:	e039      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a6b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a6b4:	e031      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a6c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a6c4:	e029      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a6d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a6d4:	e021      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a6e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a6e4:	e019      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a6f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6f4:	e011      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d002      	beq.n	800a706 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a704:	e009      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f003 0308 	and.w	r3, r3, #8
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a710:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a714:	e001      	b.n	800a71a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3720      	adds	r7, #32
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	24000000 	.word	0x24000000
 800a728:	10624dd3 	.word	0x10624dd3
 800a72c:	00200045 	.word	0x00200045
 800a730:	002000c5 	.word	0x002000c5
 800a734:	fdffe008 	.word	0xfdffe008

0800a738 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a740:	4b1f      	ldr	r3, [pc, #124]	; (800a7c0 <SDMMC_GetCmdResp2+0x88>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a1f      	ldr	r2, [pc, #124]	; (800a7c4 <SDMMC_GetCmdResp2+0x8c>)
 800a746:	fba2 2303 	umull	r2, r3, r2, r3
 800a74a:	0a5b      	lsrs	r3, r3, #9
 800a74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a750:	fb02 f303 	mul.w	r3, r2, r3
 800a754:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	1e5a      	subs	r2, r3, #1
 800a75a:	60fa      	str	r2, [r7, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d102      	bne.n	800a766 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a764:	e026      	b.n	800a7b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a772:	2b00      	cmp	r3, #0
 800a774:	d0ef      	beq.n	800a756 <SDMMC_GetCmdResp2+0x1e>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1ea      	bne.n	800a756 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d004      	beq.n	800a796 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2204      	movs	r2, #4
 800a790:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a792:	2304      	movs	r3, #4
 800a794:	e00e      	b.n	800a7b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d004      	beq.n	800a7ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e003      	b.n	800a7b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a06      	ldr	r2, [pc, #24]	; (800a7c8 <SDMMC_GetCmdResp2+0x90>)
 800a7b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	24000000 	.word	0x24000000
 800a7c4:	10624dd3 	.word	0x10624dd3
 800a7c8:	002000c5 	.word	0x002000c5

0800a7cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a7d4:	4b1a      	ldr	r3, [pc, #104]	; (800a840 <SDMMC_GetCmdResp3+0x74>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a1a      	ldr	r2, [pc, #104]	; (800a844 <SDMMC_GetCmdResp3+0x78>)
 800a7da:	fba2 2303 	umull	r2, r3, r2, r3
 800a7de:	0a5b      	lsrs	r3, r3, #9
 800a7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7e4:	fb02 f303 	mul.w	r3, r2, r3
 800a7e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	1e5a      	subs	r2, r3, #1
 800a7ee:	60fa      	str	r2, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d102      	bne.n	800a7fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7f8:	e01b      	b.n	800a832 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0ef      	beq.n	800a7ea <SDMMC_GetCmdResp3+0x1e>
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1ea      	bne.n	800a7ea <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2204      	movs	r2, #4
 800a824:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a826:	2304      	movs	r3, #4
 800a828:	e003      	b.n	800a832 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a06      	ldr	r2, [pc, #24]	; (800a848 <SDMMC_GetCmdResp3+0x7c>)
 800a82e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	24000000 	.word	0x24000000
 800a844:	10624dd3 	.word	0x10624dd3
 800a848:	002000c5 	.word	0x002000c5

0800a84c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b088      	sub	sp, #32
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	460b      	mov	r3, r1
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a85a:	4b35      	ldr	r3, [pc, #212]	; (800a930 <SDMMC_GetCmdResp6+0xe4>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a35      	ldr	r2, [pc, #212]	; (800a934 <SDMMC_GetCmdResp6+0xe8>)
 800a860:	fba2 2303 	umull	r2, r3, r2, r3
 800a864:	0a5b      	lsrs	r3, r3, #9
 800a866:	f241 3288 	movw	r2, #5000	; 0x1388
 800a86a:	fb02 f303 	mul.w	r3, r2, r3
 800a86e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	1e5a      	subs	r2, r3, #1
 800a874:	61fa      	str	r2, [r7, #28]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d102      	bne.n	800a880 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a87a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a87e:	e052      	b.n	800a926 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a884:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0ef      	beq.n	800a870 <SDMMC_GetCmdResp6+0x24>
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1ea      	bne.n	800a870 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d004      	beq.n	800a8b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2204      	movs	r2, #4
 800a8aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	e03a      	b.n	800a926 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d004      	beq.n	800a8c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e02f      	b.n	800a926 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f7ff fb7c 	bl	8009fc4 <SDMMC_GetCommandResponse>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	7afb      	ldrb	r3, [r7, #11]
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d001      	beq.n	800a8da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e025      	b.n	800a926 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	4a16      	ldr	r2, [pc, #88]	; (800a938 <SDMMC_GetCmdResp6+0xec>)
 800a8de:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7ff fb7b 	bl	8009fde <SDMMC_GetResponse>
 800a8e8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d106      	bne.n	800a902 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	0c1b      	lsrs	r3, r3, #16
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	e011      	b.n	800a926 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a90c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a910:	e009      	b.n	800a926 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a91c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a920:	e001      	b.n	800a926 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	24000000 	.word	0x24000000
 800a934:	10624dd3 	.word	0x10624dd3
 800a938:	002000c5 	.word	0x002000c5

0800a93c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a944:	4b22      	ldr	r3, [pc, #136]	; (800a9d0 <SDMMC_GetCmdResp7+0x94>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a22      	ldr	r2, [pc, #136]	; (800a9d4 <SDMMC_GetCmdResp7+0x98>)
 800a94a:	fba2 2303 	umull	r2, r3, r2, r3
 800a94e:	0a5b      	lsrs	r3, r3, #9
 800a950:	f241 3288 	movw	r2, #5000	; 0x1388
 800a954:	fb02 f303 	mul.w	r3, r2, r3
 800a958:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	1e5a      	subs	r2, r3, #1
 800a95e:	60fa      	str	r2, [r7, #12]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a968:	e02c      	b.n	800a9c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0ef      	beq.n	800a95a <SDMMC_GetCmdResp7+0x1e>
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1ea      	bne.n	800a95a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2204      	movs	r2, #4
 800a994:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a996:	2304      	movs	r3, #4
 800a998:	e014      	b.n	800a9c4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e009      	b.n	800a9c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2240      	movs	r2, #64	; 0x40
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a9c2:	2300      	movs	r3, #0

}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	24000000 	.word	0x24000000
 800a9d4:	10624dd3 	.word	0x10624dd3

0800a9d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a9e0:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <SDMMC_GetCmdError+0x50>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a11      	ldr	r2, [pc, #68]	; (800aa2c <SDMMC_GetCmdError+0x54>)
 800a9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ea:	0a5b      	lsrs	r3, r3, #9
 800a9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9f0:	fb02 f303 	mul.w	r3, r2, r3
 800a9f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	60fa      	str	r2, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa04:	e009      	b.n	800aa1a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d0f1      	beq.n	800a9f6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <SDMMC_GetCmdError+0x58>)
 800aa16:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	24000000 	.word	0x24000000
 800aa2c:	10624dd3 	.word	0x10624dd3
 800aa30:	002000c5 	.word	0x002000c5

0800aa34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa34:	b480      	push	{r7}
 800aa36:	af00      	add	r7, sp, #0
  //retSD = FATFS_LinkDriver(&SD_Driver, SDPath);

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa38:	bf00      	nop
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa42:	b480      	push	{r7}
 800aa44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa46:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
	...

0800aa54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aa5e:	f000 f885 	bl	800ab6c <BSP_SD_IsDetected>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d001      	beq.n	800aa6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800aa68:	2302      	movs	r3, #2
 800aa6a:	e012      	b.n	800aa92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800aa6c:	480b      	ldr	r0, [pc, #44]	; (800aa9c <BSP_SD_Init+0x48>)
 800aa6e:	f7fd fad9 	bl	8008024 <HAL_SD_Init>
 800aa72:	4603      	mov	r3, r0
 800aa74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800aa7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aa80:	4806      	ldr	r0, [pc, #24]	; (800aa9c <BSP_SD_Init+0x48>)
 800aa82:	f7fe f98f 	bl	8008da4 <HAL_SD_ConfigWideBusOperation>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aa90:	79fb      	ldrb	r3, [r7, #7]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	240017fc 	.word	0x240017fc

0800aaa0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	68f9      	ldr	r1, [r7, #12]
 800aab6:	4806      	ldr	r0, [pc, #24]	; (800aad0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aab8:	f7fd fbd4 	bl	8008264 <HAL_SD_ReadBlocks_DMA>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3718      	adds	r7, #24
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	240017fc 	.word	0x240017fc

0800aad4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	68f9      	ldr	r1, [r7, #12]
 800aaea:	4806      	ldr	r0, [pc, #24]	; (800ab04 <BSP_SD_WriteBlocks_DMA+0x30>)
 800aaec:	f7fd fc62 	bl	80083b4 <HAL_SD_WriteBlocks_DMA>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	240017fc 	.word	0x240017fc

0800ab08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ab0c:	4805      	ldr	r0, [pc, #20]	; (800ab24 <BSP_SD_GetCardState+0x1c>)
 800ab0e:	f7fe fa5b 	bl	8008fc8 <HAL_SD_GetCardState>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	bf14      	ite	ne
 800ab18:	2301      	movne	r3, #1
 800ab1a:	2300      	moveq	r3, #0
 800ab1c:	b2db      	uxtb	r3, r3
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	240017fc 	.word	0x240017fc

0800ab28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4803      	ldr	r0, [pc, #12]	; (800ab40 <BSP_SD_GetCardInfo+0x18>)
 800ab34:	f7fe f90a 	bl	8008d4c <HAL_SD_GetCardInfo>
}
 800ab38:	bf00      	nop
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	240017fc 	.word	0x240017fc

0800ab44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ab4c:	f000 fa4a 	bl	800afe4 <BSP_SD_WriteCpltCallback>
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ab60:	f000 fa4e 	bl	800b000 <BSP_SD_ReadCpltCallback>
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ab72:	2301      	movs	r3, #1
 800ab74:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ab76:	f000 f80b 	bl	800ab90 <BSP_PlatformIsDetected>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ab80:	2300      	movs	r3, #0
 800ab82:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	b2db      	uxtb	r3, r3
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ab96:	2301      	movs	r3, #1
 800ab98:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ab9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab9e:	4806      	ldr	r0, [pc, #24]	; (800abb8 <BSP_PlatformIsDetected+0x28>)
 800aba0:	f7f9 f8d8 	bl	8003d54 <HAL_GPIO_ReadPin>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800abaa:	2300      	movs	r3, #0
 800abac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800abae:	79fb      	ldrb	r3, [r7, #7]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	58022000 	.word	0x58022000

0800abbc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800abc4:	f003 ff88 	bl	800ead8 <osKernelSysTick>
 800abc8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800abca:	e006      	b.n	800abda <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800abcc:	f7ff ff9c 	bl	800ab08 <BSP_SD_GetCardState>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800abd6:	2300      	movs	r3, #0
 800abd8:	e009      	b.n	800abee <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800abda:	f003 ff7d 	bl	800ead8 <osKernelSysTick>
 800abde:	4602      	mov	r2, r0
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d8f0      	bhi.n	800abcc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800abea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
	...

0800abf8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ac02:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <SD_CheckStatus+0x38>)
 800ac04:	2201      	movs	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ac08:	f7ff ff7e 	bl	800ab08 <BSP_SD_GetCardState>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d107      	bne.n	800ac22 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ac12:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <SD_CheckStatus+0x38>)
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	f023 0301 	bic.w	r3, r3, #1
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <SD_CheckStatus+0x38>)
 800ac20:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ac22:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <SD_CheckStatus+0x38>)
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	b2db      	uxtb	r3, r3
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	2400000d 	.word	0x2400000d

0800ac34 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ac34:	b590      	push	{r4, r7, lr}
 800ac36:	b087      	sub	sp, #28
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ac3e:	4b20      	ldr	r3, [pc, #128]	; (800acc0 <SD_initialize+0x8c>)
 800ac40:	2201      	movs	r2, #1
 800ac42:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ac44:	f003 ff3c 	bl	800eac0 <osKernelRunning>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d030      	beq.n	800acb0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ac4e:	f7ff ff01 	bl	800aa54 <BSP_SD_Init>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d107      	bne.n	800ac68 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff ffcc 	bl	800abf8 <SD_CheckStatus>
 800ac60:	4603      	mov	r3, r0
 800ac62:	461a      	mov	r2, r3
 800ac64:	4b16      	ldr	r3, [pc, #88]	; (800acc0 <SD_initialize+0x8c>)
 800ac66:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ac68:	4b15      	ldr	r3, [pc, #84]	; (800acc0 <SD_initialize+0x8c>)
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d01e      	beq.n	800acb0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ac72:	4b14      	ldr	r3, [pc, #80]	; (800acc4 <SD_initialize+0x90>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10e      	bne.n	800ac98 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ac7a:	4b13      	ldr	r3, [pc, #76]	; (800acc8 <SD_initialize+0x94>)
 800ac7c:	f107 0408 	add.w	r4, r7, #8
 800ac80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ac86:	f107 0308 	add.w	r3, r7, #8
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f004 f8f8 	bl	800ee82 <osMessageCreate>
 800ac92:	4603      	mov	r3, r0
 800ac94:	4a0b      	ldr	r2, [pc, #44]	; (800acc4 <SD_initialize+0x90>)
 800ac96:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ac98:	4b0a      	ldr	r3, [pc, #40]	; (800acc4 <SD_initialize+0x90>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d107      	bne.n	800acb0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800aca0:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <SD_initialize+0x8c>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	f043 0301 	orr.w	r3, r3, #1
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	4b04      	ldr	r3, [pc, #16]	; (800acc0 <SD_initialize+0x8c>)
 800acae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800acb0:	4b03      	ldr	r3, [pc, #12]	; (800acc0 <SD_initialize+0x8c>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	b2db      	uxtb	r3, r3
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	371c      	adds	r7, #28
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd90      	pop	{r4, r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2400000d 	.word	0x2400000d
 800acc4:	24001944 	.word	0x24001944
 800acc8:	08020ffc 	.word	0x08020ffc

0800accc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800acd6:	79fb      	ldrb	r3, [r7, #7]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff ff8d 	bl	800abf8 <SD_CheckStatus>
 800acde:	4603      	mov	r3, r0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b094      	sub	sp, #80	; 0x50
 800acec:	af00      	add	r7, sp, #0
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	607a      	str	r2, [r7, #4]
 800acf2:	603b      	str	r3, [r7, #0]
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  //uint32_t alignedAddr;

  /*---Edited for managing DCache*/
  uint32_t alignedAddr = (uint32_t)buff	 & ~0x1F;
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f023 031f 	bic.w	r3, r3, #31
 800ad04:	64bb      	str	r3, [r7, #72]	; 0x48

  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr,
 800ad06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  	   	   count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	0251      	lsls	r1, r2, #9
 800ad0c:	68b8      	ldr	r0, [r7, #8]
 800ad0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad10:	1a82      	subs	r2, r0, r2
 800ad12:	440a      	add	r2, r1
 800ad14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad16:	62ba      	str	r2, [r7, #40]	; 0x28
    if ( dsize > 0 ) { 
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	dd1d      	ble.n	800ad5a <SD_read+0x72>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	f003 021f 	and.w	r2, r3, #31
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	4413      	add	r3, r2
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad2e:	f3bf 8f4f 	dsb	sy
}
 800ad32:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ad34:	4a3f      	ldr	r2, [pc, #252]	; (800ae34 <SD_read+0x14c>)
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	3320      	adds	r3, #32
 800ad40:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	3b20      	subs	r3, #32
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
      } while ( op_size > 0 );
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dcf2      	bgt.n	800ad34 <SD_read+0x4c>
  __ASM volatile ("dsb 0xF":::"memory");
 800ad4e:	f3bf 8f4f 	dsb	sy
}
 800ad52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ad54:	f3bf 8f6f 	isb	sy
}
 800ad58:	bf00      	nop
}
 800ad5a:	bf00      	nop

  SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr,
 800ad5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  		   	   	   count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	0251      	lsls	r1, r2, #9
 800ad62:	68b8      	ldr	r0, [r7, #8]
 800ad64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad66:	1a82      	subs	r2, r0, r2
 800ad68:	440a      	add	r2, r1
 800ad6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad6c:	63ba      	str	r2, [r7, #56]	; 0x38
    if ( dsize > 0 ) { 
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dd1d      	ble.n	800adb0 <SD_read+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800ad74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad76:	f003 021f 	and.w	r2, r3, #31
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7c:	4413      	add	r3, r2
 800ad7e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800ad80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad82:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dsb 0xF":::"memory");
 800ad84:	f3bf 8f4f 	dsb	sy
}
 800ad88:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ad8a:	4a2a      	ldr	r2, [pc, #168]	; (800ae34 <SD_read+0x14c>)
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	3320      	adds	r3, #32
 800ad96:	633b      	str	r3, [r7, #48]	; 0x30
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800ad98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9a:	3b20      	subs	r3, #32
 800ad9c:	637b      	str	r3, [r7, #52]	; 0x34
      } while ( op_size > 0 );
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dcf2      	bgt.n	800ad8a <SD_read+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800ada4:	f3bf 8f4f 	dsb	sy
}
 800ada8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800adaa:	f3bf 8f6f 	isb	sy
}
 800adae:	bf00      	nop
}
 800adb0:	bf00      	nop
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800adb2:	f247 5030 	movw	r0, #30000	; 0x7530
 800adb6:	f7ff ff01 	bl	800abbc <SD_CheckStatusWithTimeout>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	da02      	bge.n	800adc6 <SD_read+0xde>
  {
    return res;
 800adc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800adc4:	e032      	b.n	800ae2c <SD_read+0x144>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	68b8      	ldr	r0, [r7, #8]
 800adcc:	f7ff fe68 	bl	800aaa0 <BSP_SD_ReadBlocks_DMA>
 800add0:	4603      	mov	r3, r0
 800add2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if (ret == MSD_OK) {
 800add6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800adda:	2b00      	cmp	r3, #0
 800addc:	d124      	bne.n	800ae28 <SD_read+0x140>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800adde:	4b16      	ldr	r3, [pc, #88]	; (800ae38 <SD_read+0x150>)
 800ade0:	6819      	ldr	r1, [r3, #0]
 800ade2:	f107 0314 	add.w	r3, r7, #20
 800ade6:	f247 5230 	movw	r2, #30000	; 0x7530
 800adea:	4618      	mov	r0, r3
 800adec:	f004 f8b2 	bl	800ef54 <osMessageGet>

    if (event.status == osEventMessage)
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2b10      	cmp	r3, #16
 800adf4:	d118      	bne.n	800ae28 <SD_read+0x140>
    {
      if (event.value.v == READ_CPLT_MSG)
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d115      	bne.n	800ae28 <SD_read+0x140>
      {
        timer = osKernelSysTick();
 800adfc:	f003 fe6c 	bl	800ead8 <osKernelSysTick>
 800ae00:	6438      	str	r0, [r7, #64]	; 0x40
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ae02:	e008      	b.n	800ae16 <SD_read+0x12e>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae04:	f7ff fe80 	bl	800ab08 <BSP_SD_GetCardState>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d103      	bne.n	800ae16 <SD_read+0x12e>
              {
                res = RES_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                //alignedAddr = (uint32_t)buff & ~0x1F;
                //SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

                break;
 800ae14:	e008      	b.n	800ae28 <SD_read+0x140>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ae16:	f003 fe5f 	bl	800ead8 <osKernelSysTick>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	f247 522f 	movw	r2, #29999	; 0x752f
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d9ed      	bls.n	800ae04 <SD_read+0x11c>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ae28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3750      	adds	r7, #80	; 0x50
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	e000ed00 	.word	0xe000ed00
 800ae38:	24001944 	.word	0x24001944

0800ae3c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08e      	sub	sp, #56	; 0x38
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	607a      	str	r2, [r7, #4]
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ae52:	f247 5030 	movw	r0, #30000	; 0x7530
 800ae56:	f7ff feb1 	bl	800abbc <SD_CheckStatusWithTimeout>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	da02      	bge.n	800ae66 <SD_write+0x2a>
  {
    return res;
 800ae60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae64:	e05d      	b.n	800af22 <SD_write+0xe6>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f023 031f 	bic.w	r3, r3, #31
 800ae6c:	633b      	str	r3, [r7, #48]	; 0x30
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	0251      	lsls	r1, r2, #9
 800ae74:	68b8      	ldr	r0, [r7, #8]
 800ae76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae78:	1a82      	subs	r2, r0, r2
 800ae7a:	440a      	add	r2, r1
 800ae7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae7e:	627a      	str	r2, [r7, #36]	; 0x24
    if ( dsize > 0 ) { 
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	dd1d      	ble.n	800aec2 <SD_write+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	f003 021f 	and.w	r2, r3, #31
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	4413      	add	r3, r2
 800ae90:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 800ae96:	f3bf 8f4f 	dsb	sy
}
 800ae9a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ae9c:	4a23      	ldr	r2, [pc, #140]	; (800af2c <SD_write+0xf0>)
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	3320      	adds	r3, #32
 800aea8:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	3b20      	subs	r3, #32
 800aeae:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	dcf2      	bgt.n	800ae9c <SD_write+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 800aeb6:	f3bf 8f4f 	dsb	sy
}
 800aeba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aebc:	f3bf 8f6f 	isb	sy
}
 800aec0:	bf00      	nop
}
 800aec2:	bf00      	nop
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	68b8      	ldr	r0, [r7, #8]
 800aeca:	f7ff fe03 	bl	800aad4 <BSP_SD_WriteBlocks_DMA>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d124      	bne.n	800af1e <SD_write+0xe2>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800aed4:	4b16      	ldr	r3, [pc, #88]	; (800af30 <SD_write+0xf4>)
 800aed6:	6819      	ldr	r1, [r3, #0]
 800aed8:	f107 0310 	add.w	r3, r7, #16
 800aedc:	f247 5230 	movw	r2, #30000	; 0x7530
 800aee0:	4618      	mov	r0, r3
 800aee2:	f004 f837 	bl	800ef54 <osMessageGet>

    if (event.status == osEventMessage)
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2b10      	cmp	r3, #16
 800aeea:	d118      	bne.n	800af1e <SD_write+0xe2>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d115      	bne.n	800af1e <SD_write+0xe2>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800aef2:	f003 fdf1 	bl	800ead8 <osKernelSysTick>
 800aef6:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800aef8:	e008      	b.n	800af0c <SD_write+0xd0>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aefa:	f7ff fe05 	bl	800ab08 <BSP_SD_GetCardState>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d103      	bne.n	800af0c <SD_write+0xd0>
          {
            res = RES_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 800af0a:	e008      	b.n	800af1e <SD_write+0xe2>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800af0c:	f003 fde4 	bl	800ead8 <osKernelSysTick>
 800af10:	4602      	mov	r2, r0
 800af12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	f247 522f 	movw	r2, #29999	; 0x752f
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d9ed      	bls.n	800aefa <SD_write+0xbe>
    }

  }
#endif

  return res;
 800af1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800af22:	4618      	mov	r0, r3
 800af24:	3738      	adds	r7, #56	; 0x38
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	e000ed00 	.word	0xe000ed00
 800af30:	24001944 	.word	0x24001944

0800af34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08c      	sub	sp, #48	; 0x30
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	603a      	str	r2, [r7, #0]
 800af3e:	71fb      	strb	r3, [r7, #7]
 800af40:	460b      	mov	r3, r1
 800af42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af4a:	4b25      	ldr	r3, [pc, #148]	; (800afe0 <SD_ioctl+0xac>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	f003 0301 	and.w	r3, r3, #1
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <SD_ioctl+0x28>
 800af58:	2303      	movs	r3, #3
 800af5a:	e03c      	b.n	800afd6 <SD_ioctl+0xa2>

  switch (cmd)
 800af5c:	79bb      	ldrb	r3, [r7, #6]
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d834      	bhi.n	800afcc <SD_ioctl+0x98>
 800af62:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <SD_ioctl+0x34>)
 800af64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af68:	0800af79 	.word	0x0800af79
 800af6c:	0800af81 	.word	0x0800af81
 800af70:	0800af99 	.word	0x0800af99
 800af74:	0800afb3 	.word	0x0800afb3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af7e:	e028      	b.n	800afd2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4618      	mov	r0, r3
 800af86:	f7ff fdcf 	bl	800ab28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af8a:	6a3a      	ldr	r2, [r7, #32]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af90:	2300      	movs	r3, #0
 800af92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800af96:	e01c      	b.n	800afd2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af98:	f107 0308 	add.w	r3, r7, #8
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7ff fdc3 	bl	800ab28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800afa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800afb0:	e00f      	b.n	800afd2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800afb2:	f107 0308 	add.w	r3, r7, #8
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7ff fdb6 	bl	800ab28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800afbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbe:	0a5a      	lsrs	r2, r3, #9
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800afca:	e002      	b.n	800afd2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800afcc:	2304      	movs	r3, #4
 800afce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800afd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3730      	adds	r7, #48	; 0x30
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	2400000d 	.word	0x2400000d

0800afe4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800afe8:	4b04      	ldr	r3, [pc, #16]	; (800affc <BSP_SD_WriteCpltCallback+0x18>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2200      	movs	r2, #0
 800afee:	2102      	movs	r1, #2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f003 ff6f 	bl	800eed4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800aff6:	bf00      	nop
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	24001944 	.word	0x24001944

0800b000 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b004:	4b04      	ldr	r3, [pc, #16]	; (800b018 <BSP_SD_ReadCpltCallback+0x18>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2200      	movs	r2, #0
 800b00a:	2101      	movs	r1, #1
 800b00c:	4618      	mov	r0, r3
 800b00e:	f003 ff61 	bl	800eed4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b012:	bf00      	nop
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	24001944 	.word	0x24001944

0800b01c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b022:	4b88      	ldr	r3, [pc, #544]	; (800b244 <MX_LWIP_Init+0x228>)
 800b024:	22c0      	movs	r2, #192	; 0xc0
 800b026:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b028:	4b86      	ldr	r3, [pc, #536]	; (800b244 <MX_LWIP_Init+0x228>)
 800b02a:	22a8      	movs	r2, #168	; 0xa8
 800b02c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b02e:	4b85      	ldr	r3, [pc, #532]	; (800b244 <MX_LWIP_Init+0x228>)
 800b030:	2201      	movs	r2, #1
 800b032:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 800b034:	4b83      	ldr	r3, [pc, #524]	; (800b244 <MX_LWIP_Init+0x228>)
 800b036:	221e      	movs	r2, #30
 800b038:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b03a:	4b83      	ldr	r3, [pc, #524]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b03c:	22ff      	movs	r2, #255	; 0xff
 800b03e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b040:	4b81      	ldr	r3, [pc, #516]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b042:	22ff      	movs	r2, #255	; 0xff
 800b044:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b046:	4b80      	ldr	r3, [pc, #512]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b048:	22ff      	movs	r2, #255	; 0xff
 800b04a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b04c:	4b7e      	ldr	r3, [pc, #504]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b04e:	2200      	movs	r2, #0
 800b050:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800b052:	4b7e      	ldr	r3, [pc, #504]	; (800b24c <MX_LWIP_Init+0x230>)
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b058:	4b7c      	ldr	r3, [pc, #496]	; (800b24c <MX_LWIP_Init+0x230>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800b05e:	4b7b      	ldr	r3, [pc, #492]	; (800b24c <MX_LWIP_Init+0x230>)
 800b060:	2200      	movs	r2, #0
 800b062:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800b064:	4b79      	ldr	r3, [pc, #484]	; (800b24c <MX_LWIP_Init+0x230>)
 800b066:	2200      	movs	r2, #0
 800b068:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b06a:	2100      	movs	r1, #0
 800b06c:	2000      	movs	r0, #0
 800b06e:	f013 fcff 	bl	801ea70 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b072:	4b74      	ldr	r3, [pc, #464]	; (800b244 <MX_LWIP_Init+0x228>)
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	061a      	lsls	r2, r3, #24
 800b078:	4b72      	ldr	r3, [pc, #456]	; (800b244 <MX_LWIP_Init+0x228>)
 800b07a:	785b      	ldrb	r3, [r3, #1]
 800b07c:	041b      	lsls	r3, r3, #16
 800b07e:	431a      	orrs	r2, r3
 800b080:	4b70      	ldr	r3, [pc, #448]	; (800b244 <MX_LWIP_Init+0x228>)
 800b082:	789b      	ldrb	r3, [r3, #2]
 800b084:	021b      	lsls	r3, r3, #8
 800b086:	4313      	orrs	r3, r2
 800b088:	4a6e      	ldr	r2, [pc, #440]	; (800b244 <MX_LWIP_Init+0x228>)
 800b08a:	78d2      	ldrb	r2, [r2, #3]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	061a      	lsls	r2, r3, #24
 800b090:	4b6c      	ldr	r3, [pc, #432]	; (800b244 <MX_LWIP_Init+0x228>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	0619      	lsls	r1, r3, #24
 800b096:	4b6b      	ldr	r3, [pc, #428]	; (800b244 <MX_LWIP_Init+0x228>)
 800b098:	785b      	ldrb	r3, [r3, #1]
 800b09a:	041b      	lsls	r3, r3, #16
 800b09c:	4319      	orrs	r1, r3
 800b09e:	4b69      	ldr	r3, [pc, #420]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0a0:	789b      	ldrb	r3, [r3, #2]
 800b0a2:	021b      	lsls	r3, r3, #8
 800b0a4:	430b      	orrs	r3, r1
 800b0a6:	4967      	ldr	r1, [pc, #412]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0a8:	78c9      	ldrb	r1, [r1, #3]
 800b0aa:	430b      	orrs	r3, r1
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0b2:	431a      	orrs	r2, r3
 800b0b4:	4b63      	ldr	r3, [pc, #396]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	0619      	lsls	r1, r3, #24
 800b0ba:	4b62      	ldr	r3, [pc, #392]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0bc:	785b      	ldrb	r3, [r3, #1]
 800b0be:	041b      	lsls	r3, r3, #16
 800b0c0:	4319      	orrs	r1, r3
 800b0c2:	4b60      	ldr	r3, [pc, #384]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0c4:	789b      	ldrb	r3, [r3, #2]
 800b0c6:	021b      	lsls	r3, r3, #8
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	495e      	ldr	r1, [pc, #376]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0cc:	78c9      	ldrb	r1, [r1, #3]
 800b0ce:	430b      	orrs	r3, r1
 800b0d0:	0a1b      	lsrs	r3, r3, #8
 800b0d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	4b5a      	ldr	r3, [pc, #360]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	0619      	lsls	r1, r3, #24
 800b0de:	4b59      	ldr	r3, [pc, #356]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0e0:	785b      	ldrb	r3, [r3, #1]
 800b0e2:	041b      	lsls	r3, r3, #16
 800b0e4:	4319      	orrs	r1, r3
 800b0e6:	4b57      	ldr	r3, [pc, #348]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0e8:	789b      	ldrb	r3, [r3, #2]
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	430b      	orrs	r3, r1
 800b0ee:	4955      	ldr	r1, [pc, #340]	; (800b244 <MX_LWIP_Init+0x228>)
 800b0f0:	78c9      	ldrb	r1, [r1, #3]
 800b0f2:	430b      	orrs	r3, r1
 800b0f4:	0e1b      	lsrs	r3, r3, #24
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	4a55      	ldr	r2, [pc, #340]	; (800b250 <MX_LWIP_Init+0x234>)
 800b0fa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b0fc:	4b52      	ldr	r3, [pc, #328]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	061a      	lsls	r2, r3, #24
 800b102:	4b51      	ldr	r3, [pc, #324]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b104:	785b      	ldrb	r3, [r3, #1]
 800b106:	041b      	lsls	r3, r3, #16
 800b108:	431a      	orrs	r2, r3
 800b10a:	4b4f      	ldr	r3, [pc, #316]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b10c:	789b      	ldrb	r3, [r3, #2]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	4313      	orrs	r3, r2
 800b112:	4a4d      	ldr	r2, [pc, #308]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b114:	78d2      	ldrb	r2, [r2, #3]
 800b116:	4313      	orrs	r3, r2
 800b118:	061a      	lsls	r2, r3, #24
 800b11a:	4b4b      	ldr	r3, [pc, #300]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	0619      	lsls	r1, r3, #24
 800b120:	4b49      	ldr	r3, [pc, #292]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b122:	785b      	ldrb	r3, [r3, #1]
 800b124:	041b      	lsls	r3, r3, #16
 800b126:	4319      	orrs	r1, r3
 800b128:	4b47      	ldr	r3, [pc, #284]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b12a:	789b      	ldrb	r3, [r3, #2]
 800b12c:	021b      	lsls	r3, r3, #8
 800b12e:	430b      	orrs	r3, r1
 800b130:	4945      	ldr	r1, [pc, #276]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b132:	78c9      	ldrb	r1, [r1, #3]
 800b134:	430b      	orrs	r3, r1
 800b136:	021b      	lsls	r3, r3, #8
 800b138:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b13c:	431a      	orrs	r2, r3
 800b13e:	4b42      	ldr	r3, [pc, #264]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	0619      	lsls	r1, r3, #24
 800b144:	4b40      	ldr	r3, [pc, #256]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b146:	785b      	ldrb	r3, [r3, #1]
 800b148:	041b      	lsls	r3, r3, #16
 800b14a:	4319      	orrs	r1, r3
 800b14c:	4b3e      	ldr	r3, [pc, #248]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b14e:	789b      	ldrb	r3, [r3, #2]
 800b150:	021b      	lsls	r3, r3, #8
 800b152:	430b      	orrs	r3, r1
 800b154:	493c      	ldr	r1, [pc, #240]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b156:	78c9      	ldrb	r1, [r1, #3]
 800b158:	430b      	orrs	r3, r1
 800b15a:	0a1b      	lsrs	r3, r3, #8
 800b15c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b160:	431a      	orrs	r2, r3
 800b162:	4b39      	ldr	r3, [pc, #228]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	0619      	lsls	r1, r3, #24
 800b168:	4b37      	ldr	r3, [pc, #220]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b16a:	785b      	ldrb	r3, [r3, #1]
 800b16c:	041b      	lsls	r3, r3, #16
 800b16e:	4319      	orrs	r1, r3
 800b170:	4b35      	ldr	r3, [pc, #212]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b172:	789b      	ldrb	r3, [r3, #2]
 800b174:	021b      	lsls	r3, r3, #8
 800b176:	430b      	orrs	r3, r1
 800b178:	4933      	ldr	r1, [pc, #204]	; (800b248 <MX_LWIP_Init+0x22c>)
 800b17a:	78c9      	ldrb	r1, [r1, #3]
 800b17c:	430b      	orrs	r3, r1
 800b17e:	0e1b      	lsrs	r3, r3, #24
 800b180:	4313      	orrs	r3, r2
 800b182:	4a34      	ldr	r2, [pc, #208]	; (800b254 <MX_LWIP_Init+0x238>)
 800b184:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b186:	4b31      	ldr	r3, [pc, #196]	; (800b24c <MX_LWIP_Init+0x230>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	061a      	lsls	r2, r3, #24
 800b18c:	4b2f      	ldr	r3, [pc, #188]	; (800b24c <MX_LWIP_Init+0x230>)
 800b18e:	785b      	ldrb	r3, [r3, #1]
 800b190:	041b      	lsls	r3, r3, #16
 800b192:	431a      	orrs	r2, r3
 800b194:	4b2d      	ldr	r3, [pc, #180]	; (800b24c <MX_LWIP_Init+0x230>)
 800b196:	789b      	ldrb	r3, [r3, #2]
 800b198:	021b      	lsls	r3, r3, #8
 800b19a:	4313      	orrs	r3, r2
 800b19c:	4a2b      	ldr	r2, [pc, #172]	; (800b24c <MX_LWIP_Init+0x230>)
 800b19e:	78d2      	ldrb	r2, [r2, #3]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	061a      	lsls	r2, r3, #24
 800b1a4:	4b29      	ldr	r3, [pc, #164]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	0619      	lsls	r1, r3, #24
 800b1aa:	4b28      	ldr	r3, [pc, #160]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1ac:	785b      	ldrb	r3, [r3, #1]
 800b1ae:	041b      	lsls	r3, r3, #16
 800b1b0:	4319      	orrs	r1, r3
 800b1b2:	4b26      	ldr	r3, [pc, #152]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1b4:	789b      	ldrb	r3, [r3, #2]
 800b1b6:	021b      	lsls	r3, r3, #8
 800b1b8:	430b      	orrs	r3, r1
 800b1ba:	4924      	ldr	r1, [pc, #144]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1bc:	78c9      	ldrb	r1, [r1, #3]
 800b1be:	430b      	orrs	r3, r1
 800b1c0:	021b      	lsls	r3, r3, #8
 800b1c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1c6:	431a      	orrs	r2, r3
 800b1c8:	4b20      	ldr	r3, [pc, #128]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	0619      	lsls	r1, r3, #24
 800b1ce:	4b1f      	ldr	r3, [pc, #124]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1d0:	785b      	ldrb	r3, [r3, #1]
 800b1d2:	041b      	lsls	r3, r3, #16
 800b1d4:	4319      	orrs	r1, r3
 800b1d6:	4b1d      	ldr	r3, [pc, #116]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1d8:	789b      	ldrb	r3, [r3, #2]
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	430b      	orrs	r3, r1
 800b1de:	491b      	ldr	r1, [pc, #108]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1e0:	78c9      	ldrb	r1, [r1, #3]
 800b1e2:	430b      	orrs	r3, r1
 800b1e4:	0a1b      	lsrs	r3, r3, #8
 800b1e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	4b17      	ldr	r3, [pc, #92]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	0619      	lsls	r1, r3, #24
 800b1f2:	4b16      	ldr	r3, [pc, #88]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1f4:	785b      	ldrb	r3, [r3, #1]
 800b1f6:	041b      	lsls	r3, r3, #16
 800b1f8:	4319      	orrs	r1, r3
 800b1fa:	4b14      	ldr	r3, [pc, #80]	; (800b24c <MX_LWIP_Init+0x230>)
 800b1fc:	789b      	ldrb	r3, [r3, #2]
 800b1fe:	021b      	lsls	r3, r3, #8
 800b200:	430b      	orrs	r3, r1
 800b202:	4912      	ldr	r1, [pc, #72]	; (800b24c <MX_LWIP_Init+0x230>)
 800b204:	78c9      	ldrb	r1, [r1, #3]
 800b206:	430b      	orrs	r3, r1
 800b208:	0e1b      	lsrs	r3, r3, #24
 800b20a:	4313      	orrs	r3, r2
 800b20c:	4a12      	ldr	r2, [pc, #72]	; (800b258 <MX_LWIP_Init+0x23c>)
 800b20e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b210:	4b12      	ldr	r3, [pc, #72]	; (800b25c <MX_LWIP_Init+0x240>)
 800b212:	9302      	str	r3, [sp, #8]
 800b214:	4b12      	ldr	r3, [pc, #72]	; (800b260 <MX_LWIP_Init+0x244>)
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	2300      	movs	r3, #0
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	4b0e      	ldr	r3, [pc, #56]	; (800b258 <MX_LWIP_Init+0x23c>)
 800b21e:	4a0d      	ldr	r2, [pc, #52]	; (800b254 <MX_LWIP_Init+0x238>)
 800b220:	490b      	ldr	r1, [pc, #44]	; (800b250 <MX_LWIP_Init+0x234>)
 800b222:	4810      	ldr	r0, [pc, #64]	; (800b264 <MX_LWIP_Init+0x248>)
 800b224:	f00b ff62 	bl	80170ec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b228:	480e      	ldr	r0, [pc, #56]	; (800b264 <MX_LWIP_Init+0x248>)
 800b22a:	f00c f911 	bl	8017450 <netif_set_default>

  netif_set_down(&gnetif);
 800b22e:	480d      	ldr	r0, [pc, #52]	; (800b264 <MX_LWIP_Init+0x248>)
 800b230:	f00c f98a 	bl	8017548 <netif_set_down>
//    /* When the netif link is down this function must be called */
//    netif_set_down(&gnetif);
//  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b234:	490c      	ldr	r1, [pc, #48]	; (800b268 <MX_LWIP_Init+0x24c>)
 800b236:	480b      	ldr	r0, [pc, #44]	; (800b264 <MX_LWIP_Init+0x248>)
 800b238:	f00c fa1c 	bl	8017674 <netif_set_link_callback>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b23c:	bf00      	nop
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	24001988 	.word	0x24001988
 800b248:	2400198c 	.word	0x2400198c
 800b24c:	24001990 	.word	0x24001990
 800b250:	2400197c 	.word	0x2400197c
 800b254:	24001980 	.word	0x24001980
 800b258:	24001984 	.word	0x24001984
 800b25c:	0801e981 	.word	0x0801e981
 800b260:	0800b855 	.word	0x0800b855
 800b264:	24001948 	.word	0x24001948
 800b268:	0800b26d 	.word	0x0800b26d

0800b26c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b288:	4b04      	ldr	r3, [pc, #16]	; (800b29c <HAL_ETH_RxCpltCallback+0x1c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f003 fdaf 	bl	800edf0 <osSemaphoreRelease>
}
 800b292:	bf00      	nop
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	2400199c 	.word	0x2400199c

0800b2a0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <HAL_ETH_TxCpltCallback+0x1c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f003 fd9f 	bl	800edf0 <osSemaphoreRelease>
}
 800b2b2:	bf00      	nop
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	240019a0 	.word	0x240019a0

0800b2c0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7f7 fe11 	bl	8002ef0 <HAL_ETH_GetDMAError>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d4:	2b80      	cmp	r3, #128	; 0x80
 800b2d6:	d104      	bne.n	800b2e2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800b2d8:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <HAL_ETH_ErrorCallback+0x2c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f003 fd87 	bl	800edf0 <osSemaphoreRelease>
  }
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	2400199c 	.word	0x2400199c

0800b2f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b2f0:	b5b0      	push	{r4, r5, r7, lr}
 800b2f2:	b0a8      	sub	sp, #160	; 0xa0
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800b30a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b30e:	2264      	movs	r2, #100	; 0x64
 800b310:	2100      	movs	r1, #0
 800b312:	4618      	mov	r0, r3
 800b314:	f014 fb22 	bl	801f95c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b318:	4b84      	ldr	r3, [pc, #528]	; (800b52c <low_level_init+0x23c>)
 800b31a:	4a85      	ldr	r2, [pc, #532]	; (800b530 <low_level_init+0x240>)
 800b31c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b31e:	2300      	movs	r3, #0
 800b320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800b324:	2380      	movs	r3, #128	; 0x80
 800b326:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800b32a:	23e1      	movs	r3, #225	; 0xe1
 800b32c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800b330:	2300      	movs	r3, #0
 800b332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800b336:	2300      	movs	r3, #0
 800b338:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800b33c:	2300      	movs	r3, #0
 800b33e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800b342:	4a7a      	ldr	r2, [pc, #488]	; (800b52c <low_level_init+0x23c>)
 800b344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b348:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b34a:	4b78      	ldr	r3, [pc, #480]	; (800b52c <low_level_init+0x23c>)
 800b34c:	2201      	movs	r2, #1
 800b34e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b350:	4b76      	ldr	r3, [pc, #472]	; (800b52c <low_level_init+0x23c>)
 800b352:	4a78      	ldr	r2, [pc, #480]	; (800b534 <low_level_init+0x244>)
 800b354:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b356:	4b75      	ldr	r3, [pc, #468]	; (800b52c <low_level_init+0x23c>)
 800b358:	4a77      	ldr	r2, [pc, #476]	; (800b538 <low_level_init+0x248>)
 800b35a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b35c:	4b73      	ldr	r3, [pc, #460]	; (800b52c <low_level_init+0x23c>)
 800b35e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b362:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b364:	4871      	ldr	r0, [pc, #452]	; (800b52c <low_level_init+0x23c>)
 800b366:	f7f6 fdcf 	bl	8001f08 <HAL_ETH_Init>
 800b36a:	4603      	mov	r3, r0
 800b36c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b370:	2238      	movs	r2, #56	; 0x38
 800b372:	2100      	movs	r1, #0
 800b374:	4871      	ldr	r0, [pc, #452]	; (800b53c <low_level_init+0x24c>)
 800b376:	f014 faf1 	bl	801f95c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b37a:	4b70      	ldr	r3, [pc, #448]	; (800b53c <low_level_init+0x24c>)
 800b37c:	2221      	movs	r2, #33	; 0x21
 800b37e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b380:	4b6e      	ldr	r3, [pc, #440]	; (800b53c <low_level_init+0x24c>)
 800b382:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b386:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b388:	4b6c      	ldr	r3, [pc, #432]	; (800b53c <low_level_init+0x24c>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b38e:	486c      	ldr	r0, [pc, #432]	; (800b540 <low_level_init+0x250>)
 800b390:	f00b fd16 	bl	8016dc0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2206      	movs	r2, #6
 800b398:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b39c:	4b63      	ldr	r3, [pc, #396]	; (800b52c <low_level_init+0x23c>)
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	781a      	ldrb	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b3a8:	4b60      	ldr	r3, [pc, #384]	; (800b52c <low_level_init+0x23c>)
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	785a      	ldrb	r2, [r3, #1]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b3b4:	4b5d      	ldr	r3, [pc, #372]	; (800b52c <low_level_init+0x23c>)
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	789a      	ldrb	r2, [r3, #2]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b3c0:	4b5a      	ldr	r3, [pc, #360]	; (800b52c <low_level_init+0x23c>)
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	78da      	ldrb	r2, [r3, #3]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b3cc:	4b57      	ldr	r3, [pc, #348]	; (800b52c <low_level_init+0x23c>)
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	791a      	ldrb	r2, [r3, #4]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b3d8:	4b54      	ldr	r3, [pc, #336]	; (800b52c <low_level_init+0x23c>)
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	795a      	ldrb	r2, [r3, #5]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b3ea:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3f2:	f043 030a 	orr.w	r3, r3, #10
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800b3fe:	2203      	movs	r2, #3
 800b400:	2100      	movs	r1, #0
 800b402:	2001      	movs	r0, #1
 800b404:	f004 fc10 	bl	800fc28 <xQueueGenericCreate>
 800b408:	4603      	mov	r3, r0
 800b40a:	4a4e      	ldr	r2, [pc, #312]	; (800b544 <low_level_init+0x254>)
 800b40c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800b40e:	2203      	movs	r2, #3
 800b410:	2100      	movs	r1, #0
 800b412:	2001      	movs	r0, #1
 800b414:	f004 fc08 	bl	800fc28 <xQueueGenericCreate>
 800b418:	4603      	mov	r3, r0
 800b41a:	4a4b      	ldr	r2, [pc, #300]	; (800b548 <low_level_init+0x258>)
 800b41c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b41e:	4b4b      	ldr	r3, [pc, #300]	; (800b54c <low_level_init+0x25c>)
 800b420:	f107 0408 	add.w	r4, r7, #8
 800b424:	461d      	mov	r5, r3
 800b426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b42a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b42e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	4618      	mov	r0, r3
 800b43a:	f003 fb5d 	bl	800eaf8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b43e:	4944      	ldr	r1, [pc, #272]	; (800b550 <low_level_init+0x260>)
 800b440:	4844      	ldr	r0, [pc, #272]	; (800b554 <low_level_init+0x264>)
 800b442:	f7f6 f9d4 	bl	80017ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b446:	4843      	ldr	r0, [pc, #268]	; (800b554 <low_level_init+0x264>)
 800b448:	f7f6 fa03 	bl	8001852 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b44c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b450:	2b00      	cmp	r3, #0
 800b452:	d164      	bne.n	800b51e <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b454:	483f      	ldr	r0, [pc, #252]	; (800b554 <low_level_init+0x264>)
 800b456:	f7f6 faa4 	bl	80019a2 <LAN8742_GetLinkState>
 800b45a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b45e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b462:	2b01      	cmp	r3, #1
 800b464:	dc06      	bgt.n	800b474 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f00c f8d4 	bl	8017614 <netif_set_link_down>
      netif_set_down(netif);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f00c f86b 	bl	8017548 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b472:	e056      	b.n	800b522 <low_level_init+0x232>
      switch (PHYLinkState)
 800b474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b478:	3b02      	subs	r3, #2
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d82a      	bhi.n	800b4d4 <low_level_init+0x1e4>
 800b47e:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <low_level_init+0x194>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b495 	.word	0x0800b495
 800b488:	0800b4a7 	.word	0x0800b4a7
 800b48c:	0800b4b7 	.word	0x0800b4b7
 800b490:	0800b4c7 	.word	0x0800b4c7
        duplex = ETH_FULLDUPLEX_MODE;
 800b494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b49c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b4a4:	e01f      	b.n	800b4e6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b4ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b4b4:	e017      	b.n	800b4e6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 800b4b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b4c4:	e00f      	b.n	800b4e6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b4d2:	e008      	b.n	800b4e6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 800b4d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800b4dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800b4e4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b4e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	480f      	ldr	r0, [pc, #60]	; (800b52c <low_level_init+0x23c>)
 800b4ee:	f7f7 fab9 	bl	8002a64 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b4f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4f6:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800b4f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4fc:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b4fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b502:	4619      	mov	r1, r3
 800b504:	4809      	ldr	r0, [pc, #36]	; (800b52c <low_level_init+0x23c>)
 800b506:	f7f7 fc81 	bl	8002e0c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b50a:	4808      	ldr	r0, [pc, #32]	; (800b52c <low_level_init+0x23c>)
 800b50c:	f7f6 fde2 	bl	80020d4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f00b ffad 	bl	8017470 <netif_set_up>
    netif_set_link_up(netif);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f00c f848 	bl	80175ac <netif_set_link_up>
}
 800b51c:	e001      	b.n	800b522 <low_level_init+0x232>
    Error_Handler();
 800b51e:	f7f5 ff09 	bl	8001334 <Error_Handler>
}
 800b522:	bf00      	nop
 800b524:	37a0      	adds	r7, #160	; 0xa0
 800b526:	46bd      	mov	sp, r7
 800b528:	bdb0      	pop	{r4, r5, r7, pc}
 800b52a:	bf00      	nop
 800b52c:	240019a4 	.word	0x240019a4
 800b530:	40028000 	.word	0x40028000
 800b534:	30040060 	.word	0x30040060
 800b538:	30040000 	.word	0x30040000
 800b53c:	24001a54 	.word	0x24001a54
 800b540:	08024a84 	.word	0x08024a84
 800b544:	2400199c 	.word	0x2400199c
 800b548:	240019a0 	.word	0x240019a0
 800b54c:	08021014 	.word	0x08021014
 800b550:	24000010 	.word	0x24000010
 800b554:	24001a8c 	.word	0x24001a8c

0800b558 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b092      	sub	sp, #72	; 0x48
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b566:	2300      	movs	r3, #0
 800b568:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b570:	f107 030c 	add.w	r3, r7, #12
 800b574:	2230      	movs	r2, #48	; 0x30
 800b576:	2100      	movs	r1, #0
 800b578:	4618      	mov	r0, r3
 800b57a:	f014 f9ef 	bl	801f95c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b57e:	f107 030c 	add.w	r3, r7, #12
 800b582:	2230      	movs	r2, #48	; 0x30
 800b584:	2100      	movs	r1, #0
 800b586:	4618      	mov	r0, r3
 800b588:	f014 f9e8 	bl	801f95c <memset>

  for(q = p; q != NULL; q = q->next)
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	643b      	str	r3, [r7, #64]	; 0x40
 800b590:	e045      	b.n	800b61e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b594:	2b03      	cmp	r3, #3
 800b596:	d902      	bls.n	800b59e <low_level_output+0x46>
      return ERR_IF;
 800b598:	f06f 030b 	mvn.w	r3, #11
 800b59c:	e065      	b.n	800b66a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800b59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5a0:	6859      	ldr	r1, [r3, #4]
 800b5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	3348      	adds	r3, #72	; 0x48
 800b5ae:	443b      	add	r3, r7
 800b5b0:	3b3c      	subs	r3, #60	; 0x3c
 800b5b2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5b6:	895b      	ldrh	r3, [r3, #10]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5bc:	4613      	mov	r3, r2
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	3348      	adds	r3, #72	; 0x48
 800b5c6:	443b      	add	r3, r7
 800b5c8:	3b38      	subs	r3, #56	; 0x38
 800b5ca:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d011      	beq.n	800b5f6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d4:	1e5a      	subs	r2, r3, #1
 800b5d6:	f107 000c 	add.w	r0, r7, #12
 800b5da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5dc:	460b      	mov	r3, r1
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	440b      	add	r3, r1
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	18c1      	adds	r1, r0, r3
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	3348      	adds	r3, #72	; 0x48
 800b5f0:	443b      	add	r3, r7
 800b5f2:	3b34      	subs	r3, #52	; 0x34
 800b5f4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d109      	bne.n	800b612 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b5fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b600:	4613      	mov	r3, r2
 800b602:	005b      	lsls	r3, r3, #1
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	3348      	adds	r3, #72	; 0x48
 800b60a:	443b      	add	r3, r7
 800b60c:	3b34      	subs	r3, #52	; 0x34
 800b60e:	2200      	movs	r2, #0
 800b610:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b614:	3301      	adds	r3, #1
 800b616:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	643b      	str	r3, [r7, #64]	; 0x40
 800b61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1b6      	bne.n	800b592 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	891b      	ldrh	r3, [r3, #8]
 800b628:	461a      	mov	r2, r3
 800b62a:	4b12      	ldr	r3, [pc, #72]	; (800b674 <low_level_output+0x11c>)
 800b62c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b62e:	4a11      	ldr	r2, [pc, #68]	; (800b674 <low_level_output+0x11c>)
 800b630:	f107 030c 	add.w	r3, r7, #12
 800b634:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b636:	4a0f      	ldr	r2, [pc, #60]	; (800b674 <low_level_output+0x11c>)
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800b63c:	6838      	ldr	r0, [r7, #0]
 800b63e:	f00c fc6d 	bl	8017f1c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800b642:	490c      	ldr	r1, [pc, #48]	; (800b674 <low_level_output+0x11c>)
 800b644:	480c      	ldr	r0, [pc, #48]	; (800b678 <low_level_output+0x120>)
 800b646:	f7f6 fe49 	bl	80022dc <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800b64a:	bf00      	nop
 800b64c:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <low_level_output+0x124>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b654:	4618      	mov	r0, r3
 800b656:	f003 fb7d 	bl	800ed54 <osSemaphoreWait>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1f5      	bne.n	800b64c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800b660:	4805      	ldr	r0, [pc, #20]	; (800b678 <low_level_output+0x120>)
 800b662:	f7f6 ffba 	bl	80025da <HAL_ETH_ReleaseTxPacket>

  return errval;
 800b666:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3748      	adds	r7, #72	; 0x48
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	24001a54 	.word	0x24001a54
 800b678:	240019a4 	.word	0x240019a4
 800b67c:	240019a0 	.word	0x240019a0

0800b680 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b688:	2300      	movs	r3, #0
 800b68a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b68c:	4b07      	ldr	r3, [pc, #28]	; (800b6ac <low_level_input+0x2c>)
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d105      	bne.n	800b6a0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b694:	f107 030c 	add.w	r3, r7, #12
 800b698:	4619      	mov	r1, r3
 800b69a:	4805      	ldr	r0, [pc, #20]	; (800b6b0 <low_level_input+0x30>)
 800b69c:	f7f6 fe6f 	bl	800237e <HAL_ETH_ReadData>
  }

  return p;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	24001998 	.word	0x24001998
 800b6b0:	240019a4 	.word	0x240019a4

0800b6b4 <ethernetif_input>:
 * @param netif the lwip network interface structure for this ethernetif
 */
extern struct netif gnetif;

static void ethernetif_input(void const * argument)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b0a2      	sub	sp, #136	; 0x88
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]

	ETH_MACConfigTypeDef MACConf = {0};
 800b6bc:	f107 030c 	add.w	r3, r7, #12
 800b6c0:	2264      	movs	r2, #100	; 0x64
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f014 f949 	bl	801f95c <memset>
	int32_t PHYLinkState = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b6da:	2300      	movs	r3, #0
 800b6dc:	67fb      	str	r3, [r7, #124]	; 0x7c

	struct pbuf *p = NULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	677b      	str	r3, [r7, #116]	; 0x74
	struct netif *netif = (struct netif *) argument;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	673b      	str	r3, [r7, #112]	; 0x70

  for( ;; )
  {
	  //TIME_WAITING_FOR_INPUT
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 800b6e6:	4b57      	ldr	r3, [pc, #348]	; (800b844 <ethernetif_input+0x190>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f241 3188 	movw	r1, #5000	; 0x1388
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f003 fb30 	bl	800ed54 <osSemaphoreWait>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d115      	bne.n	800b726 <ethernetif_input+0x72>
    {
      do
      {
        p = low_level_input( netif );
 800b6fa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b6fc:	f7ff ffc0 	bl	800b680 <low_level_input>
 800b700:	6778      	str	r0, [r7, #116]	; 0x74
        if (p != NULL)
 800b702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00a      	beq.n	800b71e <ethernetif_input+0x6a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b70e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b710:	4798      	blx	r3
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <ethernetif_input+0x6a>
          {
            pbuf_free(p);
 800b718:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b71a:	f00c fb59 	bl	8017dd0 <pbuf_free>
          }
        }

      } while(p!=NULL);
 800b71e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1ea      	bne.n	800b6fa <ethernetif_input+0x46>
 800b724:	e089      	b.n	800b83a <ethernetif_input+0x186>
    }
    else
    {

	  if (netif_is_link_up(&gnetif))
 800b726:	4b48      	ldr	r3, [pc, #288]	; (800b848 <ethernetif_input+0x194>)
 800b728:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b72c:	089b      	lsrs	r3, r3, #2
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d003      	beq.n	800b740 <ethernetif_input+0x8c>
	  {
	    /* When the netif is fully configured this function must be called */
	    netif_set_up(&gnetif);
 800b738:	4843      	ldr	r0, [pc, #268]	; (800b848 <ethernetif_input+0x194>)
 800b73a:	f00b fe99 	bl	8017470 <netif_set_up>
 800b73e:	e002      	b.n	800b746 <ethernetif_input+0x92>
	  }
	  else
	  {
	    /* When the netif link is down this function must be called */
	    netif_set_down(&gnetif);
 800b740:	4841      	ldr	r0, [pc, #260]	; (800b848 <ethernetif_input+0x194>)
 800b742:	f00b ff01 	bl	8017548 <netif_set_down>
	  }

  	  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b746:	4841      	ldr	r0, [pc, #260]	; (800b84c <ethernetif_input+0x198>)
 800b748:	f7f6 f92b 	bl	80019a2 <LAN8742_GetLinkState>
 800b74c:	67b8      	str	r0, [r7, #120]	; 0x78

  	  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b74e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b750:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b754:	089b      	lsrs	r3, r3, #2
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00c      	beq.n	800b77a <ethernetif_input+0xc6>
 800b760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b762:	2b01      	cmp	r3, #1
 800b764:	dc09      	bgt.n	800b77a <ethernetif_input+0xc6>
  	  {
  		HAL_ETH_Stop_IT(&heth);
 800b766:	483a      	ldr	r0, [pc, #232]	; (800b850 <ethernetif_input+0x19c>)
 800b768:	f7f6 fd40 	bl	80021ec <HAL_ETH_Stop_IT>
  		netif_set_down(netif);
 800b76c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b76e:	f00b feeb 	bl	8017548 <netif_set_down>
  		netif_set_link_down(netif);
 800b772:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b774:	f00b ff4e 	bl	8017614 <netif_set_link_down>
 800b778:	e05f      	b.n	800b83a <ethernetif_input+0x186>
  	  }
  	  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b77a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b77c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b780:	f003 0304 	and.w	r3, r3, #4
 800b784:	2b00      	cmp	r3, #0
 800b786:	d158      	bne.n	800b83a <ethernetif_input+0x186>
 800b788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	dd55      	ble.n	800b83a <ethernetif_input+0x186>
  	  {
  		switch (PHYLinkState)
 800b78e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b790:	3b02      	subs	r3, #2
 800b792:	2b03      	cmp	r3, #3
 800b794:	d832      	bhi.n	800b7fc <ethernetif_input+0x148>
 800b796:	a201      	add	r2, pc, #4	; (adr r2, 800b79c <ethernetif_input+0xe8>)
 800b798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79c:	0800b7ad 	.word	0x0800b7ad
 800b7a0:	0800b7c3 	.word	0x0800b7c3
 800b7a4:	0800b7d7 	.word	0x0800b7d7
 800b7a8:	0800b7eb 	.word	0x0800b7eb
  		{
  		case LAN8742_STATUS_100MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 800b7ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 800b7b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b7b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b7c0:	e01d      	b.n	800b7fe <ethernetif_input+0x14a>
  		case LAN8742_STATUS_100MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 800b7c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b7ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b7d4:	e013      	b.n	800b7fe <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 800b7d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7da:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b7e8:	e009      	b.n	800b7fe <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 800b7fa:	e000      	b.n	800b7fe <ethernetif_input+0x14a>
  		default:
  		  break;
 800b7fc:	bf00      	nop
  		}

  		if(linkchanged)
 800b7fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b802:	2b00      	cmp	r3, #0
 800b804:	d019      	beq.n	800b83a <ethernetif_input+0x186>
  		{
  		  /* Get MAC Config MAC */
  		  HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b806:	f107 030c 	add.w	r3, r7, #12
 800b80a:	4619      	mov	r1, r3
 800b80c:	4810      	ldr	r0, [pc, #64]	; (800b850 <ethernetif_input+0x19c>)
 800b80e:	f7f7 f929 	bl	8002a64 <HAL_ETH_GetMACConfig>
  		  MACConf.DuplexMode = duplex;
 800b812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b814:	627b      	str	r3, [r7, #36]	; 0x24
  		  MACConf.Speed = speed;
 800b816:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b81a:	623b      	str	r3, [r7, #32]
  		  HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b81c:	f107 030c 	add.w	r3, r7, #12
 800b820:	4619      	mov	r1, r3
 800b822:	480b      	ldr	r0, [pc, #44]	; (800b850 <ethernetif_input+0x19c>)
 800b824:	f7f7 faf2 	bl	8002e0c <HAL_ETH_SetMACConfig>
  		  HAL_ETH_Start_IT(&heth);
 800b828:	4809      	ldr	r0, [pc, #36]	; (800b850 <ethernetif_input+0x19c>)
 800b82a:	f7f6 fc53 	bl	80020d4 <HAL_ETH_Start_IT>
  		  netif_set_up(netif);
 800b82e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b830:	f00b fe1e 	bl	8017470 <netif_set_up>
  		  netif_set_link_up(netif);
 800b834:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b836:	f00b feb9 	bl	80175ac <netif_set_link_up>
  		}
  	  }
    }
	osDelay(1);
 800b83a:	2001      	movs	r0, #1
 800b83c:	f003 f9a8 	bl	800eb90 <osDelay>
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 800b840:	e751      	b.n	800b6e6 <ethernetif_input+0x32>
 800b842:	bf00      	nop
 800b844:	2400199c 	.word	0x2400199c
 800b848:	24001948 	.word	0x24001948
 800b84c:	24001a8c 	.word	0x24001a8c
 800b850:	240019a4 	.word	0x240019a4

0800b854 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <ethernetif_init+0x1c>
 800b862:	4b0e      	ldr	r3, [pc, #56]	; (800b89c <ethernetif_init+0x48>)
 800b864:	f240 2243 	movw	r2, #579	; 0x243
 800b868:	490d      	ldr	r1, [pc, #52]	; (800b8a0 <ethernetif_init+0x4c>)
 800b86a:	480e      	ldr	r0, [pc, #56]	; (800b8a4 <ethernetif_init+0x50>)
 800b86c:	f014 fc4c 	bl	8020108 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2273      	movs	r2, #115	; 0x73
 800b874:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2274      	movs	r2, #116	; 0x74
 800b87c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a09      	ldr	r2, [pc, #36]	; (800b8a8 <ethernetif_init+0x54>)
 800b884:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a08      	ldr	r2, [pc, #32]	; (800b8ac <ethernetif_init+0x58>)
 800b88a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7ff fd2f 	bl	800b2f0 <low_level_init>

  return ERR_OK;
 800b892:	2300      	movs	r3, #0
}
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	08021030 	.word	0x08021030
 800b8a0:	0802104c 	.word	0x0802104c
 800b8a4:	0802105c 	.word	0x0802105c
 800b8a8:	0801471d 	.word	0x0801471d
 800b8ac:	0800b559 	.word	0x0800b559

0800b8b0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b8bc:	68f9      	ldr	r1, [r7, #12]
 800b8be:	4809      	ldr	r0, [pc, #36]	; (800b8e4 <pbuf_free_custom+0x34>)
 800b8c0:	f00b fb6e 	bl	8016fa0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b8c4:	4b08      	ldr	r3, [pc, #32]	; (800b8e8 <pbuf_free_custom+0x38>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d107      	bne.n	800b8dc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b8cc:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <pbuf_free_custom+0x38>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800b8d2:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <pbuf_free_custom+0x3c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f003 fa8a 	bl	800edf0 <osSemaphoreRelease>
  }
}
 800b8dc:	bf00      	nop
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	08024a84 	.word	0x08024a84
 800b8e8:	24001998 	.word	0x24001998
 800b8ec:	2400199c 	.word	0x2400199c

0800b8f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b8f4:	f7f6 f92c 	bl	8001b50 <HAL_GetTick>
 800b8f8:	4603      	mov	r3, r0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	bd80      	pop	{r7, pc}
	...

0800b900 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08e      	sub	sp, #56	; 0x38
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b90c:	2200      	movs	r2, #0
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	605a      	str	r2, [r3, #4]
 800b912:	609a      	str	r2, [r3, #8]
 800b914:	60da      	str	r2, [r3, #12]
 800b916:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a4d      	ldr	r2, [pc, #308]	; (800ba54 <HAL_ETH_MspInit+0x154>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	f040 8093 	bne.w	800ba4a <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b924:	4b4c      	ldr	r3, [pc, #304]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b926:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b92a:	4a4b      	ldr	r2, [pc, #300]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b92c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b930:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b934:	4b48      	ldr	r3, [pc, #288]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b936:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b93a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b93e:	623b      	str	r3, [r7, #32]
 800b940:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b942:	4b45      	ldr	r3, [pc, #276]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b948:	4a43      	ldr	r2, [pc, #268]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b94a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b94e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b952:	4b41      	ldr	r3, [pc, #260]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b960:	4b3d      	ldr	r3, [pc, #244]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b962:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b966:	4a3c      	ldr	r2, [pc, #240]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b96c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b970:	4b39      	ldr	r3, [pc, #228]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b97a:	61bb      	str	r3, [r7, #24]
 800b97c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b97e:	4b36      	ldr	r3, [pc, #216]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b984:	4a34      	ldr	r2, [pc, #208]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b98a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b98e:	4b32      	ldr	r3, [pc, #200]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b99c:	4b2e      	ldr	r3, [pc, #184]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b99e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9a2:	4a2d      	ldr	r2, [pc, #180]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b9a4:	f043 0304 	orr.w	r3, r3, #4
 800b9a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b9ac:	4b2a      	ldr	r3, [pc, #168]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b9ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9b2:	f003 0304 	and.w	r3, r3, #4
 800b9b6:	613b      	str	r3, [r7, #16]
 800b9b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9ba:	4b27      	ldr	r3, [pc, #156]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b9bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9c0:	4a25      	ldr	r2, [pc, #148]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b9ca:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <HAL_ETH_MspInit+0x158>)
 800b9cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	60fb      	str	r3, [r7, #12]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 800b9d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9de:	2302      	movs	r3, #2
 800b9e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9e6:	2303      	movs	r3, #3
 800b9e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b9ea:	230b      	movs	r3, #11
 800b9ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b9ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4819      	ldr	r0, [pc, #100]	; (800ba5c <HAL_ETH_MspInit+0x15c>)
 800b9f6:	f7f7 fffd 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 800b9fa:	2332      	movs	r3, #50	; 0x32
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9fe:	2302      	movs	r3, #2
 800ba00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba06:	2303      	movs	r3, #3
 800ba08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba0a:	230b      	movs	r3, #11
 800ba0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba12:	4619      	mov	r1, r3
 800ba14:	4812      	ldr	r0, [pc, #72]	; (800ba60 <HAL_ETH_MspInit+0x160>)
 800ba16:	f7f7 ffed 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 800ba1a:	2386      	movs	r3, #134	; 0x86
 800ba1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba26:	2303      	movs	r3, #3
 800ba28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba2a:	230b      	movs	r3, #11
 800ba2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba32:	4619      	mov	r1, r3
 800ba34:	480b      	ldr	r0, [pc, #44]	; (800ba64 <HAL_ETH_MspInit+0x164>)
 800ba36:	f7f7 ffdd 	bl	80039f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2105      	movs	r1, #5
 800ba3e:	203d      	movs	r0, #61	; 0x3d
 800ba40:	f7f6 f9a5 	bl	8001d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ba44:	203d      	movs	r0, #61	; 0x3d
 800ba46:	f7f6 f9bc 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ba4a:	bf00      	nop
 800ba4c:	3738      	adds	r7, #56	; 0x38
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	40028000 	.word	0x40028000
 800ba58:	58024400 	.word	0x58024400
 800ba5c:	58021800 	.word	0x58021800
 800ba60:	58020800 	.word	0x58020800
 800ba64:	58020000 	.word	0x58020000

0800ba68 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ba6c:	4802      	ldr	r0, [pc, #8]	; (800ba78 <ETH_PHY_IO_Init+0x10>)
 800ba6e:	f7f7 f9e7 	bl	8002e40 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	240019a4 	.word	0x240019a4

0800ba7c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	af00      	add	r7, sp, #0
  return 0;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	68f9      	ldr	r1, [r7, #12]
 800ba9e:	4807      	ldr	r0, [pc, #28]	; (800babc <ETH_PHY_IO_ReadReg+0x30>)
 800baa0:	f7f6 ff38 	bl	8002914 <HAL_ETH_ReadPHYRegister>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d002      	beq.n	800bab0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800baaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baae:	e000      	b.n	800bab2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	240019a4 	.word	0x240019a4

0800bac0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	68f9      	ldr	r1, [r7, #12]
 800bad2:	4807      	ldr	r0, [pc, #28]	; (800baf0 <ETH_PHY_IO_WriteReg+0x30>)
 800bad4:	f7f6 ff72 	bl	80029bc <HAL_ETH_WritePHYRegister>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800bade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bae2:	e000      	b.n	800bae6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	240019a4 	.word	0x240019a4

0800baf4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800baf8:	f7f6 f82a 	bl	8001b50 <HAL_GetTick>
 800bafc:	4603      	mov	r3, r0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	bd80      	pop	{r7, pc}
	...

0800bb04 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af02      	add	r7, sp, #8
 800bb0a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bb0c:	4812      	ldr	r0, [pc, #72]	; (800bb58 <HAL_ETH_RxAllocateCallback+0x54>)
 800bb0e:	f00b f9d3 	bl	8016eb8 <memp_malloc_pool>
 800bb12:	60f8      	str	r0, [r7, #12]
  if (p)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d014      	beq.n	800bb44 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f103 0220 	add.w	r2, r3, #32
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	4a0d      	ldr	r2, [pc, #52]	; (800bb5c <HAL_ETH_RxAllocateCallback+0x58>)
 800bb28:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bb32:	9201      	str	r2, [sp, #4]
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2241      	movs	r2, #65	; 0x41
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	f00b ff8f 	bl	8017a60 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bb42:	e005      	b.n	800bb50 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bb44:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <HAL_ETH_RxAllocateCallback+0x5c>)
 800bb46:	2201      	movs	r2, #1
 800bb48:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	601a      	str	r2, [r3, #0]
}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	08024a84 	.word	0x08024a84
 800bb5c:	0800b8b1 	.word	0x0800b8b1
 800bb60:	24001998 	.word	0x24001998

0800bb64 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b08d      	sub	sp, #52	; 0x34
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	3b20      	subs	r3, #32
 800bb82:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb86:	2200      	movs	r2, #0
 800bb88:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	887a      	ldrh	r2, [r7, #2]
 800bb94:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d103      	bne.n	800bba6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	e003      	b.n	800bbae <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbac:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbba:	e009      	b.n	800bbd0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbe:	891a      	ldrh	r2, [r3, #8]
 800bbc0:	887b      	ldrh	r3, [r7, #2]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1f2      	bne.n	800bbbc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800bbd6:	887b      	ldrh	r3, [r7, #2]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	623a      	str	r2, [r7, #32]
 800bbdc:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	dd1d      	ble.n	800bc20 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	f003 021f 	and.w	r2, r3, #31
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	4413      	add	r3, r2
 800bbee:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
 800bbf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800bbf4:	f3bf 8f4f 	dsb	sy
}
 800bbf8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800bbfa:	4a0d      	ldr	r2, [pc, #52]	; (800bc30 <HAL_ETH_RxLinkCallback+0xcc>)
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	3320      	adds	r3, #32
 800bc06:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	3b20      	subs	r3, #32
 800bc0c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	dcf2      	bgt.n	800bbfa <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800bc14:	f3bf 8f4f 	dsb	sy
}
 800bc18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bc1a:	f3bf 8f6f 	isb	sy
}
 800bc1e:	bf00      	nop
}
 800bc20:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bc22:	bf00      	nop
 800bc24:	3734      	adds	r7, #52	; 0x34
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	e000ed00 	.word	0xe000ed00

0800bc34 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f00c f8c7 	bl	8017dd0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	4a08      	ldr	r2, [pc, #32]	; (800bc7c <disk_status+0x30>)
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	4413      	add	r3, r2
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	79fa      	ldrb	r2, [r7, #7]
 800bc64:	4905      	ldr	r1, [pc, #20]	; (800bc7c <disk_status+0x30>)
 800bc66:	440a      	add	r2, r1
 800bc68:	7a12      	ldrb	r2, [r2, #8]
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	4798      	blx	r3
 800bc6e:	4603      	mov	r3, r0
 800bc70:	73fb      	strb	r3, [r7, #15]
	return stat;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	24001ab4 	.word	0x24001ab4

0800bc80 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4603      	mov	r3, r0
 800bc88:	71fb      	strb	r3, [r7, #7]
	 DSTATUS stat = RES_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73fb      	strb	r3, [r7, #15]

	  if(disk.is_initialized[pdrv] == 0)
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	4a0d      	ldr	r2, [pc, #52]	; (800bcc8 <disk_initialize+0x48>)
 800bc92:	5cd3      	ldrb	r3, [r2, r3]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d111      	bne.n	800bcbc <disk_initialize+0x3c>
	  {
	    disk.is_initialized[pdrv] = 1;
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	4a0b      	ldr	r2, [pc, #44]	; (800bcc8 <disk_initialize+0x48>)
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	54d1      	strb	r1, [r2, r3]
	    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bca0:	79fb      	ldrb	r3, [r7, #7]
 800bca2:	4a09      	ldr	r2, [pc, #36]	; (800bcc8 <disk_initialize+0x48>)
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	79fa      	ldrb	r2, [r7, #7]
 800bcae:	4906      	ldr	r1, [pc, #24]	; (800bcc8 <disk_initialize+0x48>)
 800bcb0:	440a      	add	r2, r1
 800bcb2:	7a12      	ldrb	r2, [r2, #8]
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	4798      	blx	r3
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]
	  }
	  return stat;
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	24001ab4 	.word	0x24001ab4

0800bccc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bccc:	b590      	push	{r4, r7, lr}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60b9      	str	r1, [r7, #8]
 800bcd4:	607a      	str	r2, [r7, #4]
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	4a0a      	ldr	r2, [pc, #40]	; (800bd08 <disk_read+0x3c>)
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	689c      	ldr	r4, [r3, #8]
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
 800bcea:	4a07      	ldr	r2, [pc, #28]	; (800bd08 <disk_read+0x3c>)
 800bcec:	4413      	add	r3, r2
 800bcee:	7a18      	ldrb	r0, [r3, #8]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	47a0      	blx	r4
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	75fb      	strb	r3, [r7, #23]
	  return res;
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	371c      	adds	r7, #28
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd90      	pop	{r4, r7, pc}
 800bd06:	bf00      	nop
 800bd08:	24001ab4 	.word	0x24001ab4

0800bd0c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 800bd0c:	b590      	push	{r4, r7, lr}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	607a      	str	r2, [r7, #4]
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	4a0a      	ldr	r2, [pc, #40]	; (800bd48 <disk_write+0x3c>)
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	68dc      	ldr	r4, [r3, #12]
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	4a07      	ldr	r2, [pc, #28]	; (800bd48 <disk_write+0x3c>)
 800bd2c:	4413      	add	r3, r2
 800bd2e:	7a18      	ldrb	r0, [r3, #8]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	68b9      	ldr	r1, [r7, #8]
 800bd36:	47a0      	blx	r4
 800bd38:	4603      	mov	r3, r0
 800bd3a:	75fb      	strb	r3, [r7, #23]
	  return res;
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]

}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	371c      	adds	r7, #28
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd90      	pop	{r4, r7, pc}
 800bd46:	bf00      	nop
 800bd48:	24001ab4 	.word	0x24001ab4

0800bd4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	603a      	str	r2, [r7, #0]
 800bd56:	71fb      	strb	r3, [r7, #7]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	71bb      	strb	r3, [r7, #6]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	4a09      	ldr	r2, [pc, #36]	; (800bd84 <disk_ioctl+0x38>)
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	79fa      	ldrb	r2, [r7, #7]
 800bd6a:	4906      	ldr	r1, [pc, #24]	; (800bd84 <disk_ioctl+0x38>)
 800bd6c:	440a      	add	r2, r1
 800bd6e:	7a10      	ldrb	r0, [r2, #8]
 800bd70:	79b9      	ldrb	r1, [r7, #6]
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	4798      	blx	r3
 800bd76:	4603      	mov	r3, r0
 800bd78:	73fb      	strb	r3, [r7, #15]
	  return res;
 800bd7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	24001ab4 	.word	0x24001ab4

0800bd88 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	3301      	adds	r3, #1
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bd98:	89fb      	ldrh	r3, [r7, #14]
 800bd9a:	021b      	lsls	r3, r3, #8
 800bd9c:	b21a      	sxth	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b21b      	sxth	r3, r3
 800bda4:	4313      	orrs	r3, r2
 800bda6:	b21b      	sxth	r3, r3
 800bda8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bdaa:	89fb      	ldrh	r3, [r7, #14]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3303      	adds	r3, #3
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	021b      	lsls	r3, r3, #8
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	3202      	adds	r2, #2
 800bdd0:	7812      	ldrb	r2, [r2, #0]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	021b      	lsls	r3, r3, #8
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	3201      	adds	r2, #1
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	021b      	lsls	r3, r3, #8
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	7812      	ldrb	r2, [r2, #0]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	60fb      	str	r3, [r7, #12]
	return rv;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr

0800bdfe <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bdfe:	b480      	push	{r7}
 800be00:	b083      	sub	sp, #12
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	460b      	mov	r3, r1
 800be08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	607a      	str	r2, [r7, #4]
 800be10:	887a      	ldrh	r2, [r7, #2]
 800be12:	b2d2      	uxtb	r2, r2
 800be14:	701a      	strb	r2, [r3, #0]
 800be16:	887b      	ldrh	r3, [r7, #2]
 800be18:	0a1b      	lsrs	r3, r3, #8
 800be1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	607a      	str	r2, [r7, #4]
 800be22:	887a      	ldrh	r2, [r7, #2]
 800be24:	b2d2      	uxtb	r2, r2
 800be26:	701a      	strb	r2, [r3, #0]
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	607a      	str	r2, [r7, #4]
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	b2d2      	uxtb	r2, r2
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	0a1b      	lsrs	r3, r3, #8
 800be4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	607a      	str	r2, [r7, #4]
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	b2d2      	uxtb	r2, r2
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	0a1b      	lsrs	r3, r3, #8
 800be60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	b2d2      	uxtb	r2, r2
 800be6c:	701a      	strb	r2, [r3, #0]
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	0a1b      	lsrs	r3, r3, #8
 800be72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	1c5a      	adds	r2, r3, #1
 800be78:	607a      	str	r2, [r7, #4]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	701a      	strb	r2, [r3, #0]
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 800be96:	2281      	movs	r2, #129	; 0x81
 800be98:	79fb      	ldrb	r3, [r7, #7]
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d30f      	bcc.n	800bebe <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 800be9e:	229f      	movs	r2, #159	; 0x9f
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d801      	bhi.n	800beaa <dbc_1st+0x1e>
 800bea6:	2301      	movs	r3, #1
 800bea8:	e00a      	b.n	800bec0 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 800beaa:	22e0      	movs	r2, #224	; 0xe0
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	4293      	cmp	r3, r2
 800beb0:	d305      	bcc.n	800bebe <dbc_1st+0x32>
 800beb2:	22fc      	movs	r2, #252	; 0xfc
 800beb4:	79fb      	ldrb	r3, [r7, #7]
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d801      	bhi.n	800bebe <dbc_1st+0x32>
 800beba:	2301      	movs	r3, #1
 800bebc:	e000      	b.n	800bec0 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 800bed6:	2240      	movs	r2, #64	; 0x40
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	4293      	cmp	r3, r2
 800bedc:	d319      	bcc.n	800bf12 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 800bede:	227e      	movs	r2, #126	; 0x7e
 800bee0:	79fb      	ldrb	r3, [r7, #7]
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d801      	bhi.n	800beea <dbc_2nd+0x1e>
 800bee6:	2301      	movs	r3, #1
 800bee8:	e014      	b.n	800bf14 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 800beea:	2280      	movs	r2, #128	; 0x80
 800beec:	79fb      	ldrb	r3, [r7, #7]
 800beee:	4293      	cmp	r3, r2
 800bef0:	d305      	bcc.n	800befe <dbc_2nd+0x32>
 800bef2:	22fc      	movs	r2, #252	; 0xfc
 800bef4:	79fb      	ldrb	r3, [r7, #7]
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d801      	bhi.n	800befe <dbc_2nd+0x32>
 800befa:	2301      	movs	r3, #1
 800befc:	e00a      	b.n	800bf14 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 800befe:	2200      	movs	r2, #0
 800bf00:	79fb      	ldrb	r3, [r7, #7]
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d305      	bcc.n	800bf12 <dbc_2nd+0x46>
 800bf06:	2200      	movs	r2, #0
 800bf08:	79fb      	ldrb	r3, [r7, #7]
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d801      	bhi.n	800bf12 <dbc_2nd+0x46>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e000      	b.n	800bf14 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	791b      	ldrb	r3, [r3, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d02c      	beq.n	800bf8e <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	7858      	ldrb	r0, [r3, #1]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf42:	2301      	movs	r3, #1
 800bf44:	f7ff fee2 	bl	800bd0c <disk_write>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d11d      	bne.n	800bf8a <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a1b      	ldr	r3, [r3, #32]
 800bf5c:	1ad2      	subs	r2, r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d213      	bcs.n	800bf8e <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	78db      	ldrb	r3, [r3, #3]
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d10f      	bne.n	800bf8e <sync_window+0x6e>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	7858      	ldrb	r0, [r3, #1]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	699b      	ldr	r3, [r3, #24]
 800bf80:	441a      	add	r2, r3
 800bf82:	2301      	movs	r3, #1
 800bf84:	f7ff fec2 	bl	800bd0c <disk_write>
 800bf88:	e001      	b.n	800bf8e <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d01b      	beq.n	800bfe8 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7ff ffb5 	bl	800bf20 <sync_window>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d113      	bne.n	800bfe8 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	7858      	ldrb	r0, [r3, #1]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfca:	2301      	movs	r3, #1
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	f7ff fe7d 	bl	800bccc <disk_read>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d004      	beq.n	800bfe2 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800bfd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
	...

0800bff4 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff ff8f 	bl	800bf20 <sync_window>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c006:	7bfb      	ldrb	r3, [r7, #15]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d158      	bne.n	800c0be <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b03      	cmp	r3, #3
 800c012:	d148      	bne.n	800c0a6 <sync_fs+0xb2>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	795b      	ldrb	r3, [r3, #5]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d144      	bne.n	800c0a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	3330      	adds	r3, #48	; 0x30
 800c020:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c024:	2100      	movs	r1, #0
 800c026:	4618      	mov	r0, r3
 800c028:	f013 fc98 	bl	801f95c <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3330      	adds	r3, #48	; 0x30
 800c030:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c034:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff fee0 	bl	800bdfe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3330      	adds	r3, #48	; 0x30
 800c042:	4921      	ldr	r1, [pc, #132]	; (800c0c8 <sync_fs+0xd4>)
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fef5 	bl	800be34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3330      	adds	r3, #48	; 0x30
 800c04e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c052:	491e      	ldr	r1, [pc, #120]	; (800c0cc <sync_fs+0xd8>)
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff feed 	bl	800be34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3330      	adds	r3, #48	; 0x30
 800c05e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f7ff fee3 	bl	800be34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3330      	adds	r3, #48	; 0x30
 800c072:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	4619      	mov	r1, r3
 800c07c:	4610      	mov	r0, r2
 800c07e:	f7ff fed9 	bl	800be34 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	1c5a      	adds	r2, r3, #1
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	7858      	ldrb	r0, [r3, #1]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09a:	2301      	movs	r3, #1
 800c09c:	f7ff fe36 	bl	800bd0c <disk_write>
			fs->fsi_flag = 0;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	785b      	ldrb	r3, [r3, #1]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff fe4c 	bl	800bd4c <disk_ioctl>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <sync_fs+0xca>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	41615252 	.word	0x41615252
 800c0cc:	61417272 	.word	0x61417272

0800c0d0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	3b02      	subs	r3, #2
 800c0de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	3b02      	subs	r3, #2
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d301      	bcc.n	800c0f0 <clst2sect+0x20>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	e008      	b.n	800c102 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	895b      	ldrh	r3, [r3, #10]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	fb01 f303 	mul.w	r3, r1, r3
 800c100:	4413      	add	r3, r2
}
 800c102:	4618      	mov	r0, r3
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b086      	sub	sp, #24
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d904      	bls.n	800c12e <get_fat+0x20>
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	683a      	ldr	r2, [r7, #0]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d302      	bcc.n	800c134 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c12e:	2301      	movs	r3, #1
 800c130:	617b      	str	r3, [r7, #20]
 800c132:	e08f      	b.n	800c254 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c138:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d062      	beq.n	800c208 <get_fat+0xfa>
 800c142:	2b03      	cmp	r3, #3
 800c144:	dc7c      	bgt.n	800c240 <get_fat+0x132>
 800c146:	2b01      	cmp	r3, #1
 800c148:	d002      	beq.n	800c150 <get_fat+0x42>
 800c14a:	2b02      	cmp	r3, #2
 800c14c:	d042      	beq.n	800c1d4 <get_fat+0xc6>
 800c14e:	e077      	b.n	800c240 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	085b      	lsrs	r3, r3, #1
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	4413      	add	r3, r2
 800c15c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	6a1a      	ldr	r2, [r3, #32]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	0a5b      	lsrs	r3, r3, #9
 800c166:	4413      	add	r3, r2
 800c168:	4619      	mov	r1, r3
 800c16a:	6938      	ldr	r0, [r7, #16]
 800c16c:	f7ff ff14 	bl	800bf98 <move_window>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d167      	bne.n	800c246 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	60fa      	str	r2, [r7, #12]
 800c17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	4413      	add	r3, r2
 800c184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c188:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	6a1a      	ldr	r2, [r3, #32]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	0a5b      	lsrs	r3, r3, #9
 800c192:	4413      	add	r3, r2
 800c194:	4619      	mov	r1, r3
 800c196:	6938      	ldr	r0, [r7, #16]
 800c198:	f7ff fefe 	bl	800bf98 <move_window>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d153      	bne.n	800c24a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1b0:	021b      	lsls	r3, r3, #8
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <get_fat+0xbc>
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	091b      	lsrs	r3, r3, #4
 800c1c8:	e002      	b.n	800c1d0 <get_fat+0xc2>
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1d0:	617b      	str	r3, [r7, #20]
			break;
 800c1d2:	e03f      	b.n	800c254 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	6a1a      	ldr	r2, [r3, #32]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	4413      	add	r3, r2
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6938      	ldr	r0, [r7, #16]
 800c1e2:	f7ff fed9 	bl	800bf98 <move_window>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d130      	bne.n	800c24e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1fa:	4413      	add	r3, r2
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7ff fdc3 	bl	800bd88 <ld_word>
 800c202:	4603      	mov	r3, r0
 800c204:	617b      	str	r3, [r7, #20]
			break;
 800c206:	e025      	b.n	800c254 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	6a1a      	ldr	r2, [r3, #32]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	09db      	lsrs	r3, r3, #7
 800c210:	4413      	add	r3, r2
 800c212:	4619      	mov	r1, r3
 800c214:	6938      	ldr	r0, [r7, #16]
 800c216:	f7ff febf 	bl	800bf98 <move_window>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d118      	bne.n	800c252 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c22e:	4413      	add	r3, r2
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff fdc1 	bl	800bdb8 <ld_dword>
 800c236:	4603      	mov	r3, r0
 800c238:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c23c:	617b      	str	r3, [r7, #20]
			break;
 800c23e:	e009      	b.n	800c254 <get_fat+0x146>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 800c240:	2301      	movs	r3, #1
 800c242:	617b      	str	r3, [r7, #20]
 800c244:	e006      	b.n	800c254 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c246:	bf00      	nop
 800c248:	e004      	b.n	800c254 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c24a:	bf00      	nop
 800c24c:	e002      	b.n	800c254 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c24e:	bf00      	nop
 800c250:	e000      	b.n	800c254 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c252:	bf00      	nop
		}
	}

	return val;
 800c254:	697b      	ldr	r3, [r7, #20]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c25e:	b590      	push	{r4, r7, lr}
 800c260:	b089      	sub	sp, #36	; 0x24
 800c262:	af00      	add	r7, sp, #0
 800c264:	60f8      	str	r0, [r7, #12]
 800c266:	60b9      	str	r1, [r7, #8]
 800c268:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c26a:	2302      	movs	r3, #2
 800c26c:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2b01      	cmp	r3, #1
 800c272:	f240 80d2 	bls.w	800c41a <put_fat+0x1bc>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	f080 80cc 	bcs.w	800c41a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	2b03      	cmp	r3, #3
 800c288:	f000 8096 	beq.w	800c3b8 <put_fat+0x15a>
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	f300 80cd 	bgt.w	800c42c <put_fat+0x1ce>
 800c292:	2b01      	cmp	r3, #1
 800c294:	d002      	beq.n	800c29c <put_fat+0x3e>
 800c296:	2b02      	cmp	r3, #2
 800c298:	d06e      	beq.n	800c378 <put_fat+0x11a>
 800c29a:	e0c7      	b.n	800c42c <put_fat+0x1ce>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	61bb      	str	r3, [r7, #24]
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	085b      	lsrs	r3, r3, #1
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6a1a      	ldr	r2, [r3, #32]
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	0a5b      	lsrs	r3, r3, #9
 800c2b2:	4413      	add	r3, r2
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f7ff fe6e 	bl	800bf98 <move_window>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2c0:	7ffb      	ldrb	r3, [r7, #31]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f040 80ab 	bne.w	800c41e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	1c59      	adds	r1, r3, #1
 800c2d2:	61b9      	str	r1, [r7, #24]
 800c2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d8:	4413      	add	r3, r2
 800c2da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00d      	beq.n	800c302 <put_fat+0xa4>
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	b25b      	sxtb	r3, r3
 800c2ec:	f003 030f 	and.w	r3, r3, #15
 800c2f0:	b25a      	sxtb	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	b25b      	sxtb	r3, r3
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	e001      	b.n	800c306 <put_fat+0xa8>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	b2db      	uxtb	r3, r3
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6a1a      	ldr	r2, [r3, #32]
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	0a5b      	lsrs	r3, r3, #9
 800c318:	4413      	add	r3, r2
 800c31a:	4619      	mov	r1, r3
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f7ff fe3b 	bl	800bf98 <move_window>
 800c322:	4603      	mov	r3, r0
 800c324:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c326:	7ffb      	ldrb	r3, [r7, #31]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d17a      	bne.n	800c422 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c338:	4413      	add	r3, r2
 800c33a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <put_fat+0xf0>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	091b      	lsrs	r3, r3, #4
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	e00e      	b.n	800c36c <put_fat+0x10e>
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b25b      	sxtb	r3, r3
 800c354:	f023 030f 	bic.w	r3, r3, #15
 800c358:	b25a      	sxtb	r2, r3
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	0a1b      	lsrs	r3, r3, #8
 800c35e:	b25b      	sxtb	r3, r3
 800c360:	f003 030f 	and.w	r3, r3, #15
 800c364:	b25b      	sxtb	r3, r3
 800c366:	4313      	orrs	r3, r2
 800c368:	b25b      	sxtb	r3, r3
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2201      	movs	r2, #1
 800c374:	711a      	strb	r2, [r3, #4]
			break;
 800c376:	e059      	b.n	800c42c <put_fat+0x1ce>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6a1a      	ldr	r2, [r3, #32]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	0a1b      	lsrs	r3, r3, #8
 800c380:	4413      	add	r3, r2
 800c382:	4619      	mov	r1, r3
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f7ff fe07 	bl	800bf98 <move_window>
 800c38a:	4603      	mov	r3, r0
 800c38c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c38e:	7ffb      	ldrb	r3, [r7, #31]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d148      	bne.n	800c426 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	005b      	lsls	r3, r3, #1
 800c39e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c3a2:	4413      	add	r3, r2
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	b292      	uxth	r2, r2
 800c3a8:	4611      	mov	r1, r2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff fd27 	bl	800bdfe <st_word>
			fs->wflag = 1;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	711a      	strb	r2, [r3, #4]
			break;
 800c3b6:	e039      	b.n	800c42c <put_fat+0x1ce>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a1a      	ldr	r2, [r3, #32]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	09db      	lsrs	r3, r3, #7
 800c3c0:	4413      	add	r3, r2
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff fde7 	bl	800bf98 <move_window>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3ce:	7ffb      	ldrb	r3, [r7, #31]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d12a      	bne.n	800c42a <put_fat+0x1cc>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3e8:	4413      	add	r3, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff fce4 	bl	800bdb8 <ld_dword>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c3f6:	4323      	orrs	r3, r4
 800c3f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c408:	4413      	add	r3, r2
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff fd11 	bl	800be34 <st_dword>
			fs->wflag = 1;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2201      	movs	r2, #1
 800c416:	711a      	strb	r2, [r3, #4]
			break;
 800c418:	e008      	b.n	800c42c <put_fat+0x1ce>
		}
	}
 800c41a:	bf00      	nop
 800c41c:	e006      	b.n	800c42c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c41e:	bf00      	nop
 800c420:	e004      	b.n	800c42c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c422:	bf00      	nop
 800c424:	e002      	b.n	800c42c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c426:	bf00      	nop
 800c428:	e000      	b.n	800c42c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c42a:	bf00      	nop
	return res;
 800c42c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3724      	adds	r7, #36	; 0x24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd90      	pop	{r4, r7, pc}

0800c436 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b088      	sub	sp, #32
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	60f8      	str	r0, [r7, #12]
 800c43e:	60b9      	str	r1, [r7, #8]
 800c440:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d904      	bls.n	800c45c <remove_chain+0x26>
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d301      	bcc.n	800c460 <remove_chain+0x2a>
 800c45c:	2302      	movs	r3, #2
 800c45e:	e04b      	b.n	800c4f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00c      	beq.n	800c480 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	69b8      	ldr	r0, [r7, #24]
 800c46e:	f7ff fef6 	bl	800c25e <put_fat>
 800c472:	4603      	mov	r3, r0
 800c474:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c476:	7ffb      	ldrb	r3, [r7, #31]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <remove_chain+0x4a>
 800c47c:	7ffb      	ldrb	r3, [r7, #31]
 800c47e:	e03b      	b.n	800c4f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c480:	68b9      	ldr	r1, [r7, #8]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f7ff fe43 	bl	800c10e <get_fat>
 800c488:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d031      	beq.n	800c4f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d101      	bne.n	800c49a <remove_chain+0x64>
 800c496:	2302      	movs	r3, #2
 800c498:	e02e      	b.n	800c4f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4a0:	d101      	bne.n	800c4a6 <remove_chain+0x70>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e028      	b.n	800c4f8 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	69b8      	ldr	r0, [r7, #24]
 800c4ac:	f7ff fed7 	bl	800c25e <put_fat>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c4b4:	7ffb      	ldrb	r3, [r7, #31]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <remove_chain+0x88>
 800c4ba:	7ffb      	ldrb	r3, [r7, #31]
 800c4bc:	e01c      	b.n	800c4f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	691a      	ldr	r2, [r3, #16]
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	3b02      	subs	r3, #2
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d20b      	bcs.n	800c4e4 <remove_chain+0xae>
			fs->free_clst++;
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	795b      	ldrb	r3, [r3, #5]
 800c4da:	f043 0301 	orr.w	r3, r3, #1
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d3c6      	bcc.n	800c480 <remove_chain+0x4a>
 800c4f2:	e000      	b.n	800c4f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c4f4:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3720      	adds	r7, #32
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10d      	bne.n	800c532 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d004      	beq.n	800c52c <create_chain+0x2c>
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	69ba      	ldr	r2, [r7, #24]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d31b      	bcc.n	800c564 <create_chain+0x64>
 800c52c:	2301      	movs	r3, #1
 800c52e:	61bb      	str	r3, [r7, #24]
 800c530:	e018      	b.n	800c564 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f7ff fdea 	bl	800c10e <get_fat>
 800c53a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d801      	bhi.n	800c546 <create_chain+0x46>
 800c542:	2301      	movs	r3, #1
 800c544:	e0a9      	b.n	800c69a <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c54c:	d101      	bne.n	800c552 <create_chain+0x52>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	e0a3      	b.n	800c69a <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d201      	bcs.n	800c560 <create_chain+0x60>
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	e09c      	b.n	800c69a <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d101      	bne.n	800c570 <create_chain+0x70>
 800c56c:	2300      	movs	r3, #0
 800c56e:	e094      	b.n	800c69a <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800c574:	69ba      	ldr	r2, [r7, #24]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d129      	bne.n	800c5d0 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	3301      	adds	r3, #1
 800c580:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	69fa      	ldr	r2, [r7, #28]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d301      	bcc.n	800c590 <create_chain+0x90>
 800c58c:	2302      	movs	r3, #2
 800c58e:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800c590:	69f9      	ldr	r1, [r7, #28]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff fdbb 	bl	800c10e <get_fat>
 800c598:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d003      	beq.n	800c5a8 <create_chain+0xa8>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5a6:	d101      	bne.n	800c5ac <create_chain+0xac>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	e076      	b.n	800c69a <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00e      	beq.n	800c5d0 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d906      	bls.n	800c5cc <create_chain+0xcc>
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d201      	bcs.n	800c5cc <create_chain+0xcc>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d129      	bne.n	800c62a <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	69fa      	ldr	r2, [r7, #28]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d307      	bcc.n	800c5fa <create_chain+0xfa>
					ncl = 2;
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800c5ee:	69fa      	ldr	r2, [r7, #28]
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d901      	bls.n	800c5fa <create_chain+0xfa>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e04f      	b.n	800c69a <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c5fa:	69f9      	ldr	r1, [r7, #28]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff fd86 	bl	800c10e <get_fat>
 800c602:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00e      	beq.n	800c628 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d003      	beq.n	800c618 <create_chain+0x118>
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c616:	d101      	bne.n	800c61c <create_chain+0x11c>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	e03e      	b.n	800c69a <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800c61c:	69fa      	ldr	r2, [r7, #28]
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	429a      	cmp	r2, r3
 800c622:	d1da      	bne.n	800c5da <create_chain+0xda>
 800c624:	2300      	movs	r3, #0
 800c626:	e038      	b.n	800c69a <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800c628:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800c62a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c62e:	69f9      	ldr	r1, [r7, #28]
 800c630:	6938      	ldr	r0, [r7, #16]
 800c632:	f7ff fe14 	bl	800c25e <put_fat>
 800c636:	4603      	mov	r3, r0
 800c638:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d109      	bne.n	800c654 <create_chain+0x154>
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d006      	beq.n	800c654 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800c646:	69fa      	ldr	r2, [r7, #28]
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6938      	ldr	r0, [r7, #16]
 800c64c:	f7ff fe07 	bl	800c25e <put_fat>
 800c650:	4603      	mov	r3, r0
 800c652:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c654:	7dfb      	ldrb	r3, [r7, #23]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d116      	bne.n	800c688 <create_chain+0x188>
		fs->last_clst = ncl;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	69fa      	ldr	r2, [r7, #28]
 800c65e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	691a      	ldr	r2, [r3, #16]
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	3b02      	subs	r3, #2
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d804      	bhi.n	800c678 <create_chain+0x178>
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	1e5a      	subs	r2, r3, #1
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	795b      	ldrb	r3, [r3, #5]
 800c67c:	f043 0301 	orr.w	r3, r3, #1
 800c680:	b2da      	uxtb	r2, r3
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	715a      	strb	r2, [r3, #5]
 800c686:	e007      	b.n	800c698 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d102      	bne.n	800c694 <create_chain+0x194>
 800c68e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c692:	e000      	b.n	800c696 <create_chain+0x196>
 800c694:	2301      	movs	r3, #1
 800c696:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c698:	69fb      	ldr	r3, [r7, #28]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3720      	adds	r7, #32
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b086      	sub	sp, #24
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff fc37 	bl	800bf20 <sync_window>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <dir_clear+0x1a>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e036      	b.n	800c72a <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff fd06 	bl	800c0d0 <clst2sect>
 800c6c4:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	693a      	ldr	r2, [r7, #16]
 800c6ca:	62da      	str	r2, [r3, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3330      	adds	r3, #48	; 0x30
 800c6d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f013 f940 	bl	801f95c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3330      	adds	r3, #48	; 0x30
 800c6e0:	60fb      	str	r3, [r7, #12]
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]
 800c6ea:	e003      	b.n	800c6f4 <dir_clear+0x52>
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	617b      	str	r3, [r7, #20]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	895b      	ldrh	r3, [r3, #10]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d20b      	bcs.n	800c718 <dir_clear+0x76>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7858      	ldrb	r0, [r3, #1]
 800c704:	693a      	ldr	r2, [r7, #16]
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	441a      	add	r2, r3
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	68f9      	ldr	r1, [r7, #12]
 800c70e:	f7ff fafd 	bl	800bd0c <disk_write>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0e9      	beq.n	800c6ec <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	895b      	ldrh	r3, [r3, #10]
 800c71c:	461a      	mov	r2, r3
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	4293      	cmp	r3, r2
 800c722:	bf14      	ite	ne
 800c724:	2301      	movne	r3, #1
 800c726:	2300      	moveq	r3, #0
 800c728:	b2db      	uxtb	r3, r3
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b086      	sub	sp, #24
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c748:	d204      	bcs.n	800c754 <dir_sdi+0x22>
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	f003 031f 	and.w	r3, r3, #31
 800c750:	2b00      	cmp	r3, #0
 800c752:	d001      	beq.n	800c758 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c754:	2302      	movs	r3, #2
 800c756:	e063      	b.n	800c820 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <dir_sdi+0x46>
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d902      	bls.n	800c778 <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c776:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d10c      	bne.n	800c798 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	095b      	lsrs	r3, r3, #5
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	8912      	ldrh	r2, [r2, #8]
 800c786:	4293      	cmp	r3, r2
 800c788:	d301      	bcc.n	800c78e <dir_sdi+0x5c>
 800c78a:	2302      	movs	r3, #2
 800c78c:	e048      	b.n	800c820 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	619a      	str	r2, [r3, #24]
 800c796:	e029      	b.n	800c7ec <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	895b      	ldrh	r3, [r3, #10]
 800c79c:	025b      	lsls	r3, r3, #9
 800c79e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7a0:	e019      	b.n	800c7d6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6979      	ldr	r1, [r7, #20]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fcb1 	bl	800c10e <get_fat>
 800c7ac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7b4:	d101      	bne.n	800c7ba <dir_sdi+0x88>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e032      	b.n	800c820 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d904      	bls.n	800c7ca <dir_sdi+0x98>
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	697a      	ldr	r2, [r7, #20]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d301      	bcc.n	800c7ce <dir_sdi+0x9c>
 800c7ca:	2302      	movs	r3, #2
 800c7cc:	e028      	b.n	800c820 <dir_sdi+0xee>
			ofs -= csz;
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d2e1      	bcs.n	800c7a2 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 800c7de:	6979      	ldr	r1, [r7, #20]
 800c7e0:	6938      	ldr	r0, [r7, #16]
 800c7e2:	f7ff fc75 	bl	800c0d0 <clst2sect>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d101      	bne.n	800c7fe <dir_sdi+0xcc>
 800c7fa:	2302      	movs	r3, #2
 800c7fc:	e010      	b.n	800c820 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	699a      	ldr	r2, [r3, #24]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	0a5b      	lsrs	r3, r3, #9
 800c806:	441a      	add	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c818:	441a      	add	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3718      	adds	r7, #24
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	3320      	adds	r3, #32
 800c83e:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c846:	d302      	bcc.n	800c84e <dir_next+0x26>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d101      	bne.n	800c85a <dir_next+0x32>
 800c856:	2304      	movs	r3, #4
 800c858:	e078      	b.n	800c94c <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c860:	2b00      	cmp	r3, #0
 800c862:	d166      	bne.n	800c932 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d10a      	bne.n	800c88c <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	095b      	lsrs	r3, r3, #5
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	8912      	ldrh	r2, [r2, #8]
 800c87e:	4293      	cmp	r3, r2
 800c880:	d357      	bcc.n	800c932 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	619a      	str	r2, [r3, #24]
 800c888:	2304      	movs	r3, #4
 800c88a:	e05f      	b.n	800c94c <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	0a5b      	lsrs	r3, r3, #9
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	8952      	ldrh	r2, [r2, #10]
 800c894:	3a01      	subs	r2, #1
 800c896:	4013      	ands	r3, r2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d14a      	bne.n	800c932 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	f7ff fc32 	bl	800c10e <get_fat>
 800c8aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d801      	bhi.n	800c8b6 <dir_next+0x8e>
 800c8b2:	2302      	movs	r3, #2
 800c8b4:	e04a      	b.n	800c94c <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8bc:	d101      	bne.n	800c8c2 <dir_next+0x9a>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e044      	b.n	800c94c <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	695b      	ldr	r3, [r3, #20]
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d328      	bcc.n	800c91e <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d104      	bne.n	800c8dc <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	619a      	str	r2, [r3, #24]
 800c8d8:	2304      	movs	r3, #4
 800c8da:	e037      	b.n	800c94c <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	f7ff fe0b 	bl	800c500 <create_chain>
 800c8ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d101      	bne.n	800c8f6 <dir_next+0xce>
 800c8f2:	2307      	movs	r3, #7
 800c8f4:	e02a      	b.n	800c94c <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d101      	bne.n	800c900 <dir_next+0xd8>
 800c8fc:	2302      	movs	r3, #2
 800c8fe:	e025      	b.n	800c94c <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c906:	d101      	bne.n	800c90c <dir_next+0xe4>
 800c908:	2301      	movs	r3, #1
 800c90a:	e01f      	b.n	800c94c <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800c90c:	6979      	ldr	r1, [r7, #20]
 800c90e:	6938      	ldr	r0, [r7, #16]
 800c910:	f7ff fec7 	bl	800c6a2 <dir_clear>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <dir_next+0xf6>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e016      	b.n	800c94c <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	697a      	ldr	r2, [r7, #20]
 800c922:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 800c924:	6979      	ldr	r1, [r7, #20]
 800c926:	6938      	ldr	r0, [r7, #16]
 800c928:	f7ff fbd2 	bl	800c0d0 <clst2sect>
 800c92c:	4602      	mov	r2, r0
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c944:	441a      	add	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c964:	2100      	movs	r1, #0
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7ff fee3 	bl	800c732 <dir_sdi>
 800c96c:	4603      	mov	r3, r0
 800c96e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c970:	7dfb      	ldrb	r3, [r7, #23]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d12b      	bne.n	800c9ce <dir_alloc+0x7a>
		n = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	4619      	mov	r1, r3
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f7ff fb09 	bl	800bf98 <move_window>
 800c986:	4603      	mov	r3, r0
 800c988:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d11d      	bne.n	800c9cc <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	69db      	ldr	r3, [r3, #28]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2be5      	cmp	r3, #229	; 0xe5
 800c998:	d004      	beq.n	800c9a4 <dir_alloc+0x50>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	69db      	ldr	r3, [r3, #28]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d107      	bne.n	800c9b4 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	613b      	str	r3, [r7, #16]
 800c9aa:	693a      	ldr	r2, [r7, #16]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d102      	bne.n	800c9b8 <dir_alloc+0x64>
 800c9b2:	e00c      	b.n	800c9ce <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff ff34 	bl	800c828 <dir_next>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c9c4:	7dfb      	ldrb	r3, [r7, #23]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d0d7      	beq.n	800c97a <dir_alloc+0x26>
 800c9ca:	e000      	b.n	800c9ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c9cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	2b04      	cmp	r3, #4
 800c9d2:	d101      	bne.n	800c9d8 <dir_alloc+0x84>
 800c9d4:	2307      	movs	r3, #7
 800c9d6:	75fb      	strb	r3, [r7, #23]
	return res;
 800c9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	331a      	adds	r3, #26
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff f9c9 	bl	800bd88 <ld_word>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d109      	bne.n	800ca16 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	3314      	adds	r3, #20
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7ff f9be 	bl	800bd88 <ld_word>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	041b      	lsls	r3, r3, #16
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	4313      	orrs	r3, r2
 800ca14:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ca16:	68fb      	ldr	r3, [r7, #12]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	331a      	adds	r3, #26
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	b292      	uxth	r2, r2
 800ca34:	4611      	mov	r1, r2
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7ff f9e1 	bl	800bdfe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b03      	cmp	r3, #3
 800ca42:	d109      	bne.n	800ca58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	f103 0214 	add.w	r2, r3, #20
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	0c1b      	lsrs	r3, r3, #16
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	f7ff f9d3 	bl	800bdfe <st_word>
	}
}
 800ca58:	bf00      	nop
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca6e:	2100      	movs	r1, #0
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff fe5e 	bl	800c732 <dir_sdi>
 800ca76:	4603      	mov	r3, r0
 800ca78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca7a:	7dfb      	ldrb	r3, [r7, #23]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <dir_find+0x24>
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	e03e      	b.n	800cb02 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6938      	ldr	r0, [r7, #16]
 800ca8c:	f7ff fa84 	bl	800bf98 <move_window>
 800ca90:	4603      	mov	r3, r0
 800ca92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d12f      	bne.n	800cafa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <dir_find+0x4e>
 800caa8:	2304      	movs	r3, #4
 800caaa:	75fb      	strb	r3, [r7, #23]
 800caac:	e028      	b.n	800cb00 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	69db      	ldr	r3, [r3, #28]
 800cab2:	330b      	adds	r3, #11
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	69db      	ldr	r3, [r3, #28]
 800cac4:	330b      	adds	r3, #11
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	f003 0308 	and.w	r3, r3, #8
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10a      	bne.n	800cae6 <dir_find+0x86>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	69d8      	ldr	r0, [r3, #28]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3320      	adds	r3, #32
 800cad8:	220b      	movs	r2, #11
 800cada:	4619      	mov	r1, r3
 800cadc:	f012 ff06 	bl	801f8ec <memcmp>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00b      	beq.n	800cafe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cae6:	2100      	movs	r1, #0
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff fe9d 	bl	800c828 <dir_next>
 800caee:	4603      	mov	r3, r0
 800caf0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d0c5      	beq.n	800ca84 <dir_find+0x24>
 800caf8:	e002      	b.n	800cb00 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cafa:	bf00      	nop
 800cafc:	e000      	b.n	800cb00 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cafe:	bf00      	nop

	return res;
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3718      	adds	r7, #24
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}

0800cb0a <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cb18:	2101      	movs	r1, #1
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff ff1a 	bl	800c954 <dir_alloc>
 800cb20:	4603      	mov	r3, r0
 800cb22:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d11c      	bne.n	800cb64 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	68b8      	ldr	r0, [r7, #8]
 800cb32:	f7ff fa31 	bl	800bf98 <move_window>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d111      	bne.n	800cb64 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	69db      	ldr	r3, [r3, #28]
 800cb44:	2220      	movs	r2, #32
 800cb46:	2100      	movs	r1, #0
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f012 ff07 	bl	801f95c <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	69d8      	ldr	r0, [r3, #28]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	3320      	adds	r3, #32
 800cb56:	220b      	movs	r2, #11
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f012 fed7 	bl	801f90c <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2201      	movs	r2, #1
 800cb62:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b08a      	sub	sp, #40	; 0x28
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3320      	adds	r3, #32
 800cb84:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 800cb86:	220b      	movs	r2, #11
 800cb88:	2120      	movs	r1, #32
 800cb8a:	6938      	ldr	r0, [r7, #16]
 800cb8c:	f012 fee6 	bl	801f95c <memset>
	si = i = 0; ni = 8;
 800cb90:	2300      	movs	r3, #0
 800cb92:	61bb      	str	r3, [r7, #24]
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	61fb      	str	r3, [r7, #28]
 800cb98:	2308      	movs	r3, #8
 800cb9a:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	61fa      	str	r2, [r7, #28]
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	4413      	add	r3, r2
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cbac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbb0:	2b20      	cmp	r3, #32
 800cbb2:	d97c      	bls.n	800ccae <create_name+0x13e>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 800cbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbb8:	2b2f      	cmp	r3, #47	; 0x2f
 800cbba:	d007      	beq.n	800cbcc <create_name+0x5c>
 800cbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbc0:	2b5c      	cmp	r3, #92	; 0x5c
 800cbc2:	d110      	bne.n	800cbe6 <create_name+0x76>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 800cbc4:	e002      	b.n	800cbcc <create_name+0x5c>
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	61fb      	str	r3, [r7, #28]
 800cbcc:	697a      	ldr	r2, [r7, #20]
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	2b2f      	cmp	r3, #47	; 0x2f
 800cbd6:	d0f6      	beq.n	800cbc6 <create_name+0x56>
 800cbd8:	697a      	ldr	r2, [r7, #20]
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	4413      	add	r3, r2
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2b5c      	cmp	r3, #92	; 0x5c
 800cbe2:	d0f0      	beq.n	800cbc6 <create_name+0x56>
			break;
 800cbe4:	e064      	b.n	800ccb0 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 800cbe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbea:	2b2e      	cmp	r3, #46	; 0x2e
 800cbec:	d003      	beq.n	800cbf6 <create_name+0x86>
 800cbee:	69ba      	ldr	r2, [r7, #24]
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d30d      	bcc.n	800cc12 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	2b0b      	cmp	r3, #11
 800cbfa:	d003      	beq.n	800cc04 <create_name+0x94>
 800cbfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc00:	2b2e      	cmp	r3, #46	; 0x2e
 800cc02:	d001      	beq.n	800cc08 <create_name+0x98>
 800cc04:	2306      	movs	r3, #6
 800cc06:	e075      	b.n	800ccf4 <create_name+0x184>
			i = 8; ni = 11;				/* Enter file extension field */
 800cc08:	2308      	movs	r3, #8
 800cc0a:	61bb      	str	r3, [r7, #24]
 800cc0c:	230b      	movs	r3, #11
 800cc0e:	623b      	str	r3, [r7, #32]
			continue;
 800cc10:	e04c      	b.n	800ccac <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 800cc12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff f938 	bl	800be8c <dbc_1st>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d024      	beq.n	800cc6c <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	61fa      	str	r2, [r7, #28]
 800cc28:	697a      	ldr	r2, [r7, #20]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff f94a 	bl	800becc <dbc_2nd>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d004      	beq.n	800cc48 <create_name+0xd8>
 800cc3e:	6a3b      	ldr	r3, [r7, #32]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d301      	bcc.n	800cc4c <create_name+0xdc>
 800cc48:	2306      	movs	r3, #6
 800cc4a:	e053      	b.n	800ccf4 <create_name+0x184>
			sfn[i++] = c;
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	1c5a      	adds	r2, r3, #1
 800cc50:	61ba      	str	r2, [r7, #24]
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	4413      	add	r3, r2
 800cc56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cc5a:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	61ba      	str	r2, [r7, #24]
 800cc62:	693a      	ldr	r2, [r7, #16]
 800cc64:	4413      	add	r3, r2
 800cc66:	7bfa      	ldrb	r2, [r7, #15]
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	e797      	b.n	800cb9c <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc70:	4619      	mov	r1, r3
 800cc72:	4822      	ldr	r0, [pc, #136]	; (800ccfc <create_name+0x18c>)
 800cc74:	f013 fc35 	bl	80204e2 <strchr>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <create_name+0x112>
 800cc7e:	2306      	movs	r3, #6
 800cc80:	e038      	b.n	800ccf4 <create_name+0x184>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cc82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc86:	2b60      	cmp	r3, #96	; 0x60
 800cc88:	d908      	bls.n	800cc9c <create_name+0x12c>
 800cc8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc8e:	2b7a      	cmp	r3, #122	; 0x7a
 800cc90:	d804      	bhi.n	800cc9c <create_name+0x12c>
 800cc92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc96:	3b20      	subs	r3, #32
 800cc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	61ba      	str	r2, [r7, #24]
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	4413      	add	r3, r2
 800cca6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ccaa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800ccac:	e776      	b.n	800cb9c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ccae:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	441a      	add	r2, r3
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <create_name+0x154>
 800ccc0:	2306      	movs	r3, #6
 800ccc2:	e017      	b.n	800ccf4 <create_name+0x184>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2be5      	cmp	r3, #229	; 0xe5
 800ccca:	d102      	bne.n	800ccd2 <create_name+0x162>
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	2205      	movs	r2, #5
 800ccd0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 800ccd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccd6:	2b20      	cmp	r3, #32
 800ccd8:	d905      	bls.n	800cce6 <create_name+0x176>
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	4413      	add	r3, r2
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b20      	cmp	r3, #32
 800cce4:	d801      	bhi.n	800ccea <create_name+0x17a>
 800cce6:	2204      	movs	r2, #4
 800cce8:	e000      	b.n	800ccec <create_name+0x17c>
 800ccea:	2200      	movs	r2, #0
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	330b      	adds	r3, #11
 800ccf0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ccf2:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3728      	adds	r7, #40	; 0x28
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	08021084 	.word	0x08021084

0800cd00 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800cd10:	e002      	b.n	800cd18 <follow_path+0x18>
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	3301      	adds	r3, #1
 800cd16:	603b      	str	r3, [r7, #0]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2b2f      	cmp	r3, #47	; 0x2f
 800cd1e:	d0f8      	beq.n	800cd12 <follow_path+0x12>
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b5c      	cmp	r3, #92	; 0x5c
 800cd26:	d0f4      	beq.n	800cd12 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b1f      	cmp	r3, #31
 800cd34:	d80a      	bhi.n	800cd4c <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2280      	movs	r2, #128	; 0x80
 800cd3a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800cd3e:	2100      	movs	r1, #0
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7ff fcf6 	bl	800c732 <dir_sdi>
 800cd46:	4603      	mov	r3, r0
 800cd48:	75fb      	strb	r3, [r7, #23]
 800cd4a:	e043      	b.n	800cdd4 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd4c:	463b      	mov	r3, r7
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff ff0d 	bl	800cb70 <create_name>
 800cd56:	4603      	mov	r3, r0
 800cd58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd5a:	7dfb      	ldrb	r3, [r7, #23]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d134      	bne.n	800cdca <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7ff fe7d 	bl	800ca60 <dir_find>
 800cd66:	4603      	mov	r3, r0
 800cd68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800cd70:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00a      	beq.n	800cd8e <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
 800cd7a:	2b04      	cmp	r3, #4
 800cd7c:	d127      	bne.n	800cdce <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
 800cd80:	f003 0304 	and.w	r3, r3, #4
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d122      	bne.n	800cdce <follow_path+0xce>
 800cd88:	2305      	movs	r3, #5
 800cd8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cd8c:	e01f      	b.n	800cdce <follow_path+0xce>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800cd8e:	7bfb      	ldrb	r3, [r7, #15]
 800cd90:	f003 0304 	and.w	r3, r3, #4
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d11c      	bne.n	800cdd2 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	799b      	ldrb	r3, [r3, #6]
 800cd9c:	f003 0310 	and.w	r3, r3, #16
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800cda4:	2305      	movs	r3, #5
 800cda6:	75fb      	strb	r3, [r7, #23]
 800cda8:	e014      	b.n	800cdd4 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdb8:	4413      	add	r3, r2
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6938      	ldr	r0, [r7, #16]
 800cdbe:	f7ff fe10 	bl	800c9e2 <ld_clust>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cdc8:	e7c0      	b.n	800cd4c <follow_path+0x4c>
			if (res != FR_OK) break;
 800cdca:	bf00      	nop
 800cdcc:	e002      	b.n	800cdd4 <follow_path+0xd4>
				break;
 800cdce:	bf00      	nop
 800cdd0:	e000      	b.n	800cdd4 <follow_path+0xd4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800cdd2:	bf00      	nop
			}
		}
	}

	return res;
 800cdd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b089      	sub	sp, #36	; 0x24
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800cde6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdea:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	613b      	str	r3, [r7, #16]
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d101      	bne.n	800ce00 <get_ldnumber+0x22>
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	e02d      	b.n	800ce5c <get_ldnumber+0x7e>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	61fa      	str	r2, [r7, #28]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
 800ce0c:	2b20      	cmp	r3, #32
 800ce0e:	d902      	bls.n	800ce16 <get_ldnumber+0x38>
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	2b3a      	cmp	r3, #58	; 0x3a
 800ce14:	d1f4      	bne.n	800ce00 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	2b3a      	cmp	r3, #58	; 0x3a
 800ce1a:	d11c      	bne.n	800ce56 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b2f      	cmp	r3, #47	; 0x2f
 800ce26:	d90c      	bls.n	800ce42 <get_ldnumber+0x64>
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	2b39      	cmp	r3, #57	; 0x39
 800ce2e:	d808      	bhi.n	800ce42 <get_ldnumber+0x64>
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	3302      	adds	r3, #2
 800ce34:	69fa      	ldr	r2, [r7, #28]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d103      	bne.n	800ce42 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	3b30      	subs	r3, #48	; 0x30
 800ce40:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	dc04      	bgt.n	800ce52 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	69fa      	ldr	r2, [r7, #28]
 800ce50:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	e002      	b.n	800ce5c <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800ce56:	2300      	movs	r3, #0
 800ce58:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800ce5a:	697b      	ldr	r3, [r7, #20]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3724      	adds	r7, #36	; 0x24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	711a      	strb	r2, [r3, #4]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce7e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7ff f888 	bl	800bf98 <move_window>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <check_fs+0x2a>
 800ce8e:	2304      	movs	r3, #4
 800ce90:	e088      	b.n	800cfa4 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3330      	adds	r3, #48	; 0x30
 800ce96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fe ff74 	bl	800bd88 <ld_word>
 800cea0:	4603      	mov	r3, r0
 800cea2:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ceaa:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800ceac:	7b7b      	ldrb	r3, [r7, #13]
 800ceae:	2beb      	cmp	r3, #235	; 0xeb
 800ceb0:	d005      	beq.n	800cebe <check_fs+0x56>
 800ceb2:	7b7b      	ldrb	r3, [r7, #13]
 800ceb4:	2be9      	cmp	r3, #233	; 0xe9
 800ceb6:	d002      	beq.n	800cebe <check_fs+0x56>
 800ceb8:	7b7b      	ldrb	r3, [r7, #13]
 800ceba:	2be8      	cmp	r3, #232	; 0xe8
 800cebc:	d16a      	bne.n	800cf94 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800cebe:	89fb      	ldrh	r3, [r7, #14]
 800cec0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d10c      	bne.n	800cee2 <check_fs+0x7a>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	3330      	adds	r3, #48	; 0x30
 800cecc:	3352      	adds	r3, #82	; 0x52
 800cece:	2208      	movs	r2, #8
 800ced0:	4936      	ldr	r1, [pc, #216]	; (800cfac <check_fs+0x144>)
 800ced2:	4618      	mov	r0, r3
 800ced4:	f012 fd0a 	bl	801f8ec <memcmp>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800cede:	2300      	movs	r3, #0
 800cee0:	e060      	b.n	800cfa4 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	3330      	adds	r3, #48	; 0x30
 800cee6:	330b      	adds	r3, #11
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7fe ff4d 	bl	800bd88 <ld_word>
 800ceee:	4603      	mov	r3, r0
 800cef0:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cef8:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800cefa:	897a      	ldrh	r2, [r7, #10]
 800cefc:	897b      	ldrh	r3, [r7, #10]
 800cefe:	3b01      	subs	r3, #1
 800cf00:	4013      	ands	r3, r2
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d146      	bne.n	800cf94 <check_fs+0x12c>
 800cf06:	897b      	ldrh	r3, [r7, #10]
 800cf08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf0c:	d342      	bcc.n	800cf94 <check_fs+0x12c>
 800cf0e:	897b      	ldrh	r3, [r7, #10]
 800cf10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf14:	d83e      	bhi.n	800cf94 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800cf16:	7b7b      	ldrb	r3, [r7, #13]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d03b      	beq.n	800cf94 <check_fs+0x12c>
 800cf1c:	7b7a      	ldrb	r2, [r7, #13]
 800cf1e:	7b7b      	ldrb	r3, [r7, #13]
 800cf20:	3b01      	subs	r3, #1
 800cf22:	4013      	ands	r3, r2
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d135      	bne.n	800cf94 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	3330      	adds	r3, #48	; 0x30
 800cf2c:	330e      	adds	r3, #14
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe ff2a 	bl	800bd88 <ld_word>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d02c      	beq.n	800cf94 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf40:	3b01      	subs	r3, #1
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d826      	bhi.n	800cf94 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	3330      	adds	r3, #48	; 0x30
 800cf4a:	3311      	adds	r3, #17
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fe ff1b 	bl	800bd88 <ld_word>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d01d      	beq.n	800cf94 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3330      	adds	r3, #48	; 0x30
 800cf5c:	3313      	adds	r3, #19
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fe ff12 	bl	800bd88 <ld_word>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b7f      	cmp	r3, #127	; 0x7f
 800cf68:	d809      	bhi.n	800cf7e <check_fs+0x116>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	3330      	adds	r3, #48	; 0x30
 800cf6e:	3320      	adds	r3, #32
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe ff21 	bl	800bdb8 <ld_dword>
 800cf76:	4603      	mov	r3, r0
 800cf78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf7c:	d30a      	bcc.n	800cf94 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	3330      	adds	r3, #48	; 0x30
 800cf82:	3316      	adds	r3, #22
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fe feff 	bl	800bd88 <ld_word>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 800cf90:	2300      	movs	r3, #0
 800cf92:	e007      	b.n	800cfa4 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800cf94:	89fb      	ldrh	r3, [r7, #14]
 800cf96:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d101      	bne.n	800cfa2 <check_fs+0x13a>
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	e000      	b.n	800cfa4 <check_fs+0x13c>
 800cfa2:	2303      	movs	r3, #3
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	08021094 	.word	0x08021094

0800cfb0 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b088      	sub	sp, #32
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800cfba:	2100      	movs	r1, #0
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7ff ff53 	bl	800ce68 <check_fs>
 800cfc2:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d007      	beq.n	800cfda <find_volume+0x2a>
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d802      	bhi.n	800cfd6 <find_volume+0x26>
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d101      	bne.n	800cfda <find_volume+0x2a>
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	e045      	b.n	800d066 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800cfda:	2300      	movs	r3, #0
 800cfdc:	61fb      	str	r3, [r7, #28]
 800cfde:	e014      	b.n	800d00a <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800cfee:	4413      	add	r3, r2
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7fe fee1 	bl	800bdb8 <ld_dword>
 800cff6:	4602      	mov	r2, r0
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	3320      	adds	r3, #32
 800cffe:	443b      	add	r3, r7
 800d000:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	3301      	adds	r3, #1
 800d008:	61fb      	str	r3, [r7, #28]
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	2b03      	cmp	r3, #3
 800d00e:	d9e7      	bls.n	800cfe0 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d002      	beq.n	800d01c <find_volume+0x6c>
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	3b01      	subs	r3, #1
 800d01a:	e000      	b.n	800d01e <find_volume+0x6e>
 800d01c:	2300      	movs	r3, #0
 800d01e:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	3320      	adds	r3, #32
 800d026:	443b      	add	r3, r7
 800d028:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00b      	beq.n	800d048 <find_volume+0x98>
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	3320      	adds	r3, #32
 800d036:	443b      	add	r3, r7
 800d038:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800d03c:	4619      	mov	r1, r3
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7ff ff12 	bl	800ce68 <check_fs>
 800d044:	4603      	mov	r3, r0
 800d046:	e000      	b.n	800d04a <find_volume+0x9a>
 800d048:	2303      	movs	r3, #3
 800d04a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d108      	bne.n	800d064 <find_volume+0xb4>
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	2b01      	cmp	r3, #1
 800d056:	d905      	bls.n	800d064 <find_volume+0xb4>
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	3301      	adds	r3, #1
 800d05c:	61fb      	str	r3, [r7, #28]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	2b03      	cmp	r3, #3
 800d062:	d9dd      	bls.n	800d020 <find_volume+0x70>
	return fmt;
 800d064:	69bb      	ldr	r3, [r7, #24]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3720      	adds	r7, #32
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
	...

0800d070 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b090      	sub	sp, #64	; 0x40
 800d074:	af00      	add	r7, sp, #0
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	4613      	mov	r3, r2
 800d07c:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	2200      	movs	r2, #0
 800d082:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f7ff feaa 	bl	800cdde <get_ldnumber>
 800d08a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	da01      	bge.n	800d096 <mount_volume+0x26>
 800d092:	230b      	movs	r3, #11
 800d094:	e1dc      	b.n	800d450 <mount_volume+0x3e0>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800d096:	4a9d      	ldr	r2, [pc, #628]	; (800d30c <mount_volume+0x29c>)
 800d098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d09e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <mount_volume+0x3a>
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	e1d2      	b.n	800d450 <mount_volume+0x3e0>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d0b0:	79fb      	ldrb	r3, [r7, #7]
 800d0b2:	f023 0301 	bic.w	r3, r3, #1
 800d0b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d01a      	beq.n	800d0f6 <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 800d0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c2:	785b      	ldrb	r3, [r3, #1]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fdc1 	bl	800bc4c <disk_status>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0d4:	f003 0301 	and.w	r3, r3, #1
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10c      	bne.n	800d0f6 <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d0dc:	79fb      	ldrb	r3, [r7, #7]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d007      	beq.n	800d0f2 <mount_volume+0x82>
 800d0e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e6:	f003 0304 	and.w	r3, r3, #4
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d0ee:	230a      	movs	r3, #10
 800d0f0:	e1ae      	b.n	800d450 <mount_volume+0x3e0>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	e1ac      	b.n	800d450 <mount_volume+0x3e0>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fe:	785b      	ldrb	r3, [r3, #1]
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe fdbd 	bl	800bc80 <disk_initialize>
 800d106:	4603      	mov	r3, r0
 800d108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d118:	2303      	movs	r3, #3
 800d11a:	e199      	b.n	800d450 <mount_volume+0x3e0>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d007      	beq.n	800d132 <mount_volume+0xc2>
 800d122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d126:	f003 0304 	and.w	r3, r3, #4
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800d12e:	230a      	movs	r3, #10
 800d130:	e18e      	b.n	800d450 <mount_volume+0x3e0>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800d132:	2100      	movs	r1, #0
 800d134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d136:	f7ff ff3b 	bl	800cfb0 <find_volume>
 800d13a:	6338      	str	r0, [r7, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800d13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13e:	2b04      	cmp	r3, #4
 800d140:	d101      	bne.n	800d146 <mount_volume+0xd6>
 800d142:	2301      	movs	r3, #1
 800d144:	e184      	b.n	800d450 <mount_volume+0x3e0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d901      	bls.n	800d150 <mount_volume+0xe0>
 800d14c:	230d      	movs	r3, #13
 800d14e:	e17f      	b.n	800d450 <mount_volume+0x3e0>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d154:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	3330      	adds	r3, #48	; 0x30
 800d15a:	330b      	adds	r3, #11
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe fe13 	bl	800bd88 <ld_word>
 800d162:	4603      	mov	r3, r0
 800d164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d168:	d001      	beq.n	800d16e <mount_volume+0xfe>
 800d16a:	230d      	movs	r3, #13
 800d16c:	e170      	b.n	800d450 <mount_volume+0x3e0>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	3330      	adds	r3, #48	; 0x30
 800d172:	3316      	adds	r3, #22
 800d174:	4618      	mov	r0, r3
 800d176:	f7fe fe07 	bl	800bd88 <ld_word>
 800d17a:	4603      	mov	r3, r0
 800d17c:	63bb      	str	r3, [r7, #56]	; 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d180:	2b00      	cmp	r3, #0
 800d182:	d106      	bne.n	800d192 <mount_volume+0x122>
 800d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d186:	3330      	adds	r3, #48	; 0x30
 800d188:	3324      	adds	r3, #36	; 0x24
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fe fe14 	bl	800bdb8 <ld_dword>
 800d190:	63b8      	str	r0, [r7, #56]	; 0x38
		fs->fsize = fasize;
 800d192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d196:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a0:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a4:	78db      	ldrb	r3, [r3, #3]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d005      	beq.n	800d1b6 <mount_volume+0x146>
 800d1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ac:	78db      	ldrb	r3, [r3, #3]
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d001      	beq.n	800d1b6 <mount_volume+0x146>
 800d1b2:	230d      	movs	r3, #13
 800d1b4:	e14c      	b.n	800d450 <mount_volume+0x3e0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	78db      	ldrb	r3, [r3, #3]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	fb02 f303 	mul.w	r3, r2, r3
 800d1c2:	63bb      	str	r3, [r7, #56]	; 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1ca:	b29a      	uxth	r2, r3
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d2:	895b      	ldrh	r3, [r3, #10]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d008      	beq.n	800d1ea <mount_volume+0x17a>
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	895b      	ldrh	r3, [r3, #10]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e0:	895b      	ldrh	r3, [r3, #10]
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d001      	beq.n	800d1ee <mount_volume+0x17e>
 800d1ea:	230d      	movs	r3, #13
 800d1ec:	e130      	b.n	800d450 <mount_volume+0x3e0>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f0:	3330      	adds	r3, #48	; 0x30
 800d1f2:	3311      	adds	r3, #17
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7fe fdc7 	bl	800bd88 <ld_word>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	891b      	ldrh	r3, [r3, #8]
 800d206:	f003 030f 	and.w	r3, r3, #15
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d001      	beq.n	800d214 <mount_volume+0x1a4>
 800d210:	230d      	movs	r3, #13
 800d212:	e11d      	b.n	800d450 <mount_volume+0x3e0>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	3330      	adds	r3, #48	; 0x30
 800d218:	3313      	adds	r3, #19
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fdb4 	bl	800bd88 <ld_word>
 800d220:	4603      	mov	r3, r0
 800d222:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d226:	2b00      	cmp	r3, #0
 800d228:	d106      	bne.n	800d238 <mount_volume+0x1c8>
 800d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22c:	3330      	adds	r3, #48	; 0x30
 800d22e:	3320      	adds	r3, #32
 800d230:	4618      	mov	r0, r3
 800d232:	f7fe fdc1 	bl	800bdb8 <ld_dword>
 800d236:	63f8      	str	r0, [r7, #60]	; 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	3330      	adds	r3, #48	; 0x30
 800d23c:	330e      	adds	r3, #14
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe fda2 	bl	800bd88 <ld_word>
 800d244:	4603      	mov	r3, r0
 800d246:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d248:	8bfb      	ldrh	r3, [r7, #30]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <mount_volume+0x1e2>
 800d24e:	230d      	movs	r3, #13
 800d250:	e0fe      	b.n	800d450 <mount_volume+0x3e0>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d252:	8bfa      	ldrh	r2, [r7, #30]
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	4413      	add	r3, r2
 800d258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d25a:	8912      	ldrh	r2, [r2, #8]
 800d25c:	0912      	lsrs	r2, r2, #4
 800d25e:	b292      	uxth	r2, r2
 800d260:	4413      	add	r3, r2
 800d262:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d264:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d201      	bcs.n	800d270 <mount_volume+0x200>
 800d26c:	230d      	movs	r3, #13
 800d26e:	e0ef      	b.n	800d450 <mount_volume+0x3e0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	1ad3      	subs	r3, r2, r3
 800d276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d278:	8952      	ldrh	r2, [r2, #10]
 800d27a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d27e:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d101      	bne.n	800d28a <mount_volume+0x21a>
 800d286:	230d      	movs	r3, #13
 800d288:	e0e2      	b.n	800d450 <mount_volume+0x3e0>
		fmt = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	4a1f      	ldr	r2, [pc, #124]	; (800d310 <mount_volume+0x2a0>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d801      	bhi.n	800d29a <mount_volume+0x22a>
 800d296:	2303      	movs	r3, #3
 800d298:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d801      	bhi.n	800d2a8 <mount_volume+0x238>
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d801      	bhi.n	800d2b6 <mount_volume+0x246>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	633b      	str	r3, [r7, #48]	; 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d101      	bne.n	800d2c0 <mount_volume+0x250>
 800d2bc:	230d      	movs	r3, #13
 800d2be:	e0c7      	b.n	800d450 <mount_volume+0x3e0>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	1c9a      	adds	r2, r3, #2
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ca:	6a3a      	ldr	r2, [r7, #32]
 800d2cc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d2ce:	8bfa      	ldrh	r2, [r7, #30]
 800d2d0:	6a3b      	ldr	r3, [r7, #32]
 800d2d2:	441a      	add	r2, r3
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d2d8:	6a3a      	ldr	r2, [r7, #32]
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	441a      	add	r2, r3
 800d2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d123      	bne.n	800d330 <mount_volume+0x2c0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ea:	3330      	adds	r3, #48	; 0x30
 800d2ec:	332a      	adds	r3, #42	; 0x2a
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fe fd4a 	bl	800bd88 <ld_word>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d001      	beq.n	800d2fe <mount_volume+0x28e>
 800d2fa:	230d      	movs	r3, #13
 800d2fc:	e0a8      	b.n	800d450 <mount_volume+0x3e0>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d300:	891b      	ldrh	r3, [r3, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d006      	beq.n	800d314 <mount_volume+0x2a4>
 800d306:	230d      	movs	r3, #13
 800d308:	e0a2      	b.n	800d450 <mount_volume+0x3e0>
 800d30a:	bf00      	nop
 800d30c:	24001aac 	.word	0x24001aac
 800d310:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	3330      	adds	r3, #48	; 0x30
 800d318:	332c      	adds	r3, #44	; 0x2c
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe fd4c 	bl	800bdb8 <ld_dword>
 800d320:	4602      	mov	r2, r0
 800d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d324:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d328:	695b      	ldr	r3, [r3, #20]
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	637b      	str	r3, [r7, #52]	; 0x34
 800d32e:	e01e      	b.n	800d36e <mount_volume+0x2fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800d330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d332:	891b      	ldrh	r3, [r3, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d101      	bne.n	800d33c <mount_volume+0x2cc>
 800d338:	230d      	movs	r3, #13
 800d33a:	e089      	b.n	800d450 <mount_volume+0x3e0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	6a1a      	ldr	r2, [r3, #32]
 800d340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d342:	441a      	add	r2, r3
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d103      	bne.n	800d356 <mount_volume+0x2e6>
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	e00a      	b.n	800d36c <mount_volume+0x2fc>
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	695a      	ldr	r2, [r3, #20]
 800d35a:	4613      	mov	r3, r2
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	4413      	add	r3, r2
 800d360:	085a      	lsrs	r2, r3, #1
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	695b      	ldr	r3, [r3, #20]
 800d366:	f003 0301 	and.w	r3, r3, #1
 800d36a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d36c:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	699a      	ldr	r2, [r3, #24]
 800d372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d374:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d378:	0a5b      	lsrs	r3, r3, #9
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d201      	bcs.n	800d382 <mount_volume+0x312>
 800d37e:	230d      	movs	r3, #13
 800d380:	e066      	b.n	800d450 <mount_volume+0x3e0>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d388:	611a      	str	r2, [r3, #16]
 800d38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38c:	691a      	ldr	r2, [r3, #16]
 800d38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d390:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d394:	2280      	movs	r2, #128	; 0x80
 800d396:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d149      	bne.n	800d432 <mount_volume+0x3c2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a0:	3330      	adds	r3, #48	; 0x30
 800d3a2:	3330      	adds	r3, #48	; 0x30
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fcef 	bl	800bd88 <ld_word>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d140      	bne.n	800d432 <mount_volume+0x3c2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3b8:	f7fe fdee 	bl	800bf98 <move_window>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d137      	bne.n	800d432 <mount_volume+0x3c2>
		{
			fs->fsi_flag = 0;
 800d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	3330      	adds	r3, #48	; 0x30
 800d3cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fe fcd9 	bl	800bd88 <ld_word>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	461a      	mov	r2, r3
 800d3da:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d127      	bne.n	800d432 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	3330      	adds	r3, #48	; 0x30
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe fce6 	bl	800bdb8 <ld_dword>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	4a1a      	ldr	r2, [pc, #104]	; (800d458 <mount_volume+0x3e8>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d11e      	bne.n	800d432 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f6:	3330      	adds	r3, #48	; 0x30
 800d3f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe fcdb 	bl	800bdb8 <ld_dword>
 800d402:	4603      	mov	r3, r0
 800d404:	4a15      	ldr	r2, [pc, #84]	; (800d45c <mount_volume+0x3ec>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d113      	bne.n	800d432 <mount_volume+0x3c2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40c:	3330      	adds	r3, #48	; 0x30
 800d40e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d412:	4618      	mov	r0, r3
 800d414:	f7fe fcd0 	bl	800bdb8 <ld_dword>
 800d418:	4602      	mov	r2, r0
 800d41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41c:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	3330      	adds	r3, #48	; 0x30
 800d422:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fcc6 	bl	800bdb8 <ld_dword>
 800d42c:	4602      	mov	r2, r0
 800d42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d430:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	b2da      	uxtb	r2, r3
 800d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d438:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800d43a:	4b09      	ldr	r3, [pc, #36]	; (800d460 <mount_volume+0x3f0>)
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	3301      	adds	r3, #1
 800d440:	b29a      	uxth	r2, r3
 800d442:	4b07      	ldr	r3, [pc, #28]	; (800d460 <mount_volume+0x3f0>)
 800d444:	801a      	strh	r2, [r3, #0]
 800d446:	4b06      	ldr	r3, [pc, #24]	; (800d460 <mount_volume+0x3f0>)
 800d448:	881a      	ldrh	r2, [r3, #0]
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3740      	adds	r7, #64	; 0x40
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	41615252 	.word	0x41615252
 800d45c:	61417272 	.word	0x61417272
 800d460:	24001ab0 	.word	0x24001ab0

0800d464 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d46e:	2309      	movs	r3, #9
 800d470:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01c      	beq.n	800d4b2 <validate+0x4e>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d018      	beq.n	800d4b2 <validate+0x4e>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d013      	beq.n	800d4b2 <validate+0x4e>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	889a      	ldrh	r2, [r3, #4]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	88db      	ldrh	r3, [r3, #6]
 800d494:	429a      	cmp	r2, r3
 800d496:	d10c      	bne.n	800d4b2 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	785b      	ldrb	r3, [r3, #1]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fe fbd4 	bl	800bc4c <disk_status>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <validate+0x4e>
			res = FR_OK;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d102      	bne.n	800d4be <validate+0x5a>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	e000      	b.n	800d4c0 <validate+0x5c>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	683a      	ldr	r2, [r7, #0]
 800d4c2:	6013      	str	r3, [r2, #0]
	return res;
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3710      	adds	r7, #16
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
	...

0800d4d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b088      	sub	sp, #32
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	4613      	mov	r3, r2
 800d4dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800d4e2:	f107 0310 	add.w	r3, r7, #16
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7ff fc79 	bl	800cdde <get_ldnumber>
 800d4ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	da01      	bge.n	800d4f8 <f_mount+0x28>
 800d4f4:	230b      	movs	r3, #11
 800d4f6:	e02e      	b.n	800d556 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800d4f8:	4a19      	ldr	r2, [pc, #100]	; (800d560 <f_mount+0x90>)
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d500:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d007      	beq.n	800d518 <f_mount+0x48>
		FatFs[vol] = 0;
 800d508:	4a15      	ldr	r2, [pc, #84]	; (800d560 <f_mount+0x90>)
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	2100      	movs	r1, #0
 800d50e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	2200      	movs	r2, #0
 800d516:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	69fa      	ldr	r2, [r7, #28]
 800d522:	b2d2      	uxtb	r2, r2
 800d524:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	490c      	ldr	r1, [pc, #48]	; (800d560 <f_mount+0x90>)
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d101      	bne.n	800d540 <f_mount+0x70>
 800d53c:	2300      	movs	r3, #0
 800d53e:	e00a      	b.n	800d556 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d540:	f107 010c 	add.w	r1, r7, #12
 800d544:	f107 0308 	add.w	r3, r7, #8
 800d548:	2200      	movs	r2, #0
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff fd90 	bl	800d070 <mount_volume>
 800d550:	4603      	mov	r3, r0
 800d552:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d554:	7dfb      	ldrb	r3, [r7, #23]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3720      	adds	r7, #32
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	24001aac 	.word	0x24001aac

0800d564 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b098      	sub	sp, #96	; 0x60
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	4613      	mov	r3, r2
 800d570:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d101      	bne.n	800d57c <f_open+0x18>
 800d578:	2309      	movs	r3, #9
 800d57a:	e177      	b.n	800d86c <f_open+0x308>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800d57c:	79fb      	ldrb	r3, [r7, #7]
 800d57e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d582:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 800d584:	79fa      	ldrb	r2, [r7, #7]
 800d586:	f107 0114 	add.w	r1, r7, #20
 800d58a:	f107 0308 	add.w	r3, r7, #8
 800d58e:	4618      	mov	r0, r3
 800d590:	f7ff fd6e 	bl	800d070 <mount_volume>
 800d594:	4603      	mov	r3, r0
 800d596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d59a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f040 815b 	bne.w	800d85a <f_open+0x2f6>
		dj.obj.fs = fs;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d5a8:	68ba      	ldr	r2, [r7, #8]
 800d5aa:	f107 0318 	add.w	r3, r7, #24
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff fba5 	bl	800cd00 <follow_path>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800d5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d107      	bne.n	800d5d4 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d5c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d5c8:	b25b      	sxtb	r3, r3
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	da02      	bge.n	800d5d4 <f_open+0x70>
				res = FR_INVALID_NAME;
 800d5ce:	2306      	movs	r3, #6
 800d5d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d5d4:	79fb      	ldrb	r3, [r7, #7]
 800d5d6:	f003 031c 	and.w	r3, r3, #28
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d078      	beq.n	800d6d0 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 800d5de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d010      	beq.n	800d608 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d5e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5ea:	2b04      	cmp	r3, #4
 800d5ec:	d107      	bne.n	800d5fe <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800d5ee:	f107 0318 	add.w	r3, r7, #24
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff fa89 	bl	800cb0a <dir_register>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d5fe:	79fb      	ldrb	r3, [r7, #7]
 800d600:	f043 0308 	orr.w	r3, r3, #8
 800d604:	71fb      	strb	r3, [r7, #7]
 800d606:	e010      	b.n	800d62a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d608:	7fbb      	ldrb	r3, [r7, #30]
 800d60a:	f003 0311 	and.w	r3, r3, #17
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d003      	beq.n	800d61a <f_open+0xb6>
					res = FR_DENIED;
 800d612:	2307      	movs	r3, #7
 800d614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d618:	e007      	b.n	800d62a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	f003 0304 	and.w	r3, r3, #4
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <f_open+0xc6>
 800d624:	2308      	movs	r3, #8
 800d626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800d62a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d168      	bne.n	800d704 <f_open+0x1a0>
 800d632:	79fb      	ldrb	r3, [r7, #7]
 800d634:	f003 0308 	and.w	r3, r3, #8
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d063      	beq.n	800d704 <f_open+0x1a0>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800d63c:	f7fd fa01 	bl	800aa42 <get_fattime>
 800d640:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 800d642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d644:	330e      	adds	r3, #14
 800d646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe fbf3 	bl	800be34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800d64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d650:	3316      	adds	r3, #22
 800d652:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d654:	4618      	mov	r0, r3
 800d656:	f7fe fbed 	bl	800be34 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d65e:	4611      	mov	r1, r2
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff f9be 	bl	800c9e2 <ld_clust>
 800d666:	64f8      	str	r0, [r7, #76]	; 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d66a:	330b      	adds	r3, #11
 800d66c:	2220      	movs	r2, #32
 800d66e:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d674:	2200      	movs	r2, #0
 800d676:	4618      	mov	r0, r3
 800d678:	f7ff f9d2 	bl	800ca20 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d67e:	331c      	adds	r3, #28
 800d680:	2100      	movs	r1, #0
 800d682:	4618      	mov	r0, r3
 800d684:	f7fe fbd6 	bl	800be34 <st_dword>
					fs->wflag = 1;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2201      	movs	r2, #1
 800d68c:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800d68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d037      	beq.n	800d704 <f_open+0x1a0>
						sc = fs->winsect;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d698:	64bb      	str	r3, [r7, #72]	; 0x48
						res = remove_chain(&dj.obj, cl, 0);
 800d69a:	f107 0318 	add.w	r3, r7, #24
 800d69e:	2200      	movs	r2, #0
 800d6a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fe fec7 	bl	800c436 <remove_chain>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d6ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d126      	bne.n	800d704 <f_open+0x1a0>
							res = move_window(fs, sc);
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fc6c 	bl	800bf98 <move_window>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d6ca:	3a01      	subs	r2, #1
 800d6cc:	60da      	str	r2, [r3, #12]
 800d6ce:	e019      	b.n	800d704 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800d6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d115      	bne.n	800d704 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800d6d8:	7fbb      	ldrb	r3, [r7, #30]
 800d6da:	f003 0310 	and.w	r3, r3, #16
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d003      	beq.n	800d6ea <f_open+0x186>
					res = FR_NO_FILE;
 800d6e2:	2304      	movs	r3, #4
 800d6e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6e8:	e00c      	b.n	800d704 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	f003 0302 	and.w	r3, r3, #2
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <f_open+0x1a0>
 800d6f4:	7fbb      	ldrb	r3, [r7, #30]
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <f_open+0x1a0>
						res = FR_DENIED;
 800d6fe:	2307      	movs	r3, #7
 800d700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10f      	bne.n	800d72c <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	f003 0308 	and.w	r3, r3, #8
 800d712:	2b00      	cmp	r3, #0
 800d714:	d003      	beq.n	800d71e <f_open+0x1ba>
 800d716:	79fb      	ldrb	r3, [r7, #7]
 800d718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d71c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800d726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d72c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d730:	2b00      	cmp	r3, #0
 800d732:	f040 8092 	bne.w	800d85a <f_open+0x2f6>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d73a:	4611      	mov	r1, r2
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7ff f950 	bl	800c9e2 <ld_clust>
 800d742:	4602      	mov	r2, r0
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d74a:	331c      	adds	r3, #28
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fe fb33 	bl	800bdb8 <ld_dword>
 800d752:	4602      	mov	r2, r0
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800d758:	697a      	ldr	r2, [r7, #20]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	88da      	ldrh	r2, [r3, #6]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	79fa      	ldrb	r2, [r7, #7]
 800d76a:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3328      	adds	r3, #40	; 0x28
 800d782:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d786:	2100      	movs	r1, #0
 800d788:	4618      	mov	r0, r3
 800d78a:	f012 f8e7 	bl	801f95c <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d78e:	79fb      	ldrb	r3, [r7, #7]
 800d790:	f003 0320 	and.w	r3, r3, #32
 800d794:	2b00      	cmp	r3, #0
 800d796:	d060      	beq.n	800d85a <f_open+0x2f6>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d05c      	beq.n	800d85a <f_open+0x2f6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	68da      	ldr	r2, [r3, #12]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	895b      	ldrh	r3, [r3, #10]
 800d7ac:	025b      	lsls	r3, r3, #9
 800d7ae:	647b      	str	r3, [r7, #68]	; 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	68db      	ldr	r3, [r3, #12]
 800d7ba:	657b      	str	r3, [r7, #84]	; 0x54
 800d7bc:	e016      	b.n	800d7ec <f_open+0x288>
					clst = get_fat(&fp->obj, clst);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fe fca3 	bl	800c10e <get_fat>
 800d7c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d7ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d802      	bhi.n	800d7d6 <f_open+0x272>
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d7d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7dc:	d102      	bne.n	800d7e4 <f_open+0x280>
 800d7de:	2301      	movs	r3, #1
 800d7e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d7e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e8:	1ad3      	subs	r3, r2, r3
 800d7ea:	657b      	str	r3, [r7, #84]	; 0x54
 800d7ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d103      	bne.n	800d7fc <f_open+0x298>
 800d7f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d8e0      	bhi.n	800d7be <f_open+0x25a>
				}
				fp->clust = clst;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d800:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d802:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d806:	2b00      	cmp	r3, #0
 800d808:	d127      	bne.n	800d85a <f_open+0x2f6>
 800d80a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d810:	2b00      	cmp	r3, #0
 800d812:	d022      	beq.n	800d85a <f_open+0x2f6>
					sc = clst2sect(fs, clst);
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d818:	4618      	mov	r0, r3
 800d81a:	f7fe fc59 	bl	800c0d0 <clst2sect>
 800d81e:	64b8      	str	r0, [r7, #72]	; 0x48
					if (sc == 0) {
 800d820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d822:	2b00      	cmp	r3, #0
 800d824:	d103      	bne.n	800d82e <f_open+0x2ca>
						res = FR_INT_ERR;
 800d826:	2302      	movs	r3, #2
 800d828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d82c:	e015      	b.n	800d85a <f_open+0x2f6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d82e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d830:	0a5a      	lsrs	r2, r3, #9
 800d832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d834:	441a      	add	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	7858      	ldrb	r0, [r3, #1]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	69da      	ldr	r2, [r3, #28]
 800d848:	2301      	movs	r3, #1
 800d84a:	f7fe fa3f 	bl	800bccc <disk_read>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <f_open+0x2f6>
 800d854:	2301      	movs	r3, #1
 800d856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d85a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d002      	beq.n	800d868 <f_open+0x304>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3760      	adds	r7, #96	; 0x60
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b08e      	sub	sp, #56	; 0x38
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	2200      	movs	r2, #0
 800d88a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f107 0214 	add.w	r2, r7, #20
 800d892:	4611      	mov	r1, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff fde5 	bl	800d464 <validate>
 800d89a:	4603      	mov	r3, r0
 800d89c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d8a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d107      	bne.n	800d8b8 <f_read+0x44>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	7c5b      	ldrb	r3, [r3, #17]
 800d8ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <f_read+0x4a>
 800d8b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8bc:	e109      	b.n	800dad2 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	7c1b      	ldrb	r3, [r3, #16]
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <f_read+0x5a>
 800d8ca:	2307      	movs	r3, #7
 800d8cc:	e101      	b.n	800dad2 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	68da      	ldr	r2, [r3, #12]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	1ad3      	subs	r3, r2, r3
 800d8d8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	6a3b      	ldr	r3, [r7, #32]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	f240 80f2 	bls.w	800dac8 <f_read+0x254>
 800d8e4:	6a3b      	ldr	r3, [r7, #32]
 800d8e6:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800d8e8:	e0ee      	b.n	800dac8 <f_read+0x254>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f040 80ba 	bne.w	800da6c <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	0a5b      	lsrs	r3, r3, #9
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	8952      	ldrh	r2, [r2, #10]
 800d902:	3a01      	subs	r2, #1
 800d904:	4013      	ands	r3, r2
 800d906:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d123      	bne.n	800d956 <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d103      	bne.n	800d91e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	633b      	str	r3, [r7, #48]	; 0x30
 800d91c:	e007      	b.n	800d92e <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7fe fbf1 	bl	800c10e <get_fat>
 800d92c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	2b01      	cmp	r3, #1
 800d932:	d804      	bhi.n	800d93e <f_read+0xca>
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2202      	movs	r2, #2
 800d938:	745a      	strb	r2, [r3, #17]
 800d93a:	2302      	movs	r3, #2
 800d93c:	e0c9      	b.n	800dad2 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d944:	d104      	bne.n	800d950 <f_read+0xdc>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2201      	movs	r2, #1
 800d94a:	745a      	strb	r2, [r3, #17]
 800d94c:	2301      	movs	r3, #1
 800d94e:	e0c0      	b.n	800dad2 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d954:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f7fe fbb6 	bl	800c0d0 <clst2sect>
 800d964:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d104      	bne.n	800d976 <f_read+0x102>
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2202      	movs	r2, #2
 800d970:	745a      	strb	r2, [r3, #17]
 800d972:	2302      	movs	r3, #2
 800d974:	e0ad      	b.n	800dad2 <f_read+0x25e>
			sect += csect;
 800d976:	69ba      	ldr	r2, [r7, #24]
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	4413      	add	r3, r2
 800d97c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	0a5b      	lsrs	r3, r3, #9
 800d982:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800d984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d986:	2b00      	cmp	r3, #0
 800d988:	d039      	beq.n	800d9fe <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d98a:	69fa      	ldr	r2, [r7, #28]
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	4413      	add	r3, r2
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	8952      	ldrh	r2, [r2, #10]
 800d994:	4293      	cmp	r3, r2
 800d996:	d905      	bls.n	800d9a4 <f_read+0x130>
					cc = fs->csize - csect;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	895b      	ldrh	r3, [r3, #10]
 800d99c:	461a      	mov	r2, r3
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	7858      	ldrb	r0, [r3, #1]
 800d9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9aa:	69ba      	ldr	r2, [r7, #24]
 800d9ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9ae:	f7fe f98d 	bl	800bccc <disk_read>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d004      	beq.n	800d9c2 <f_read+0x14e>
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2201      	movs	r2, #1
 800d9bc:	745a      	strb	r2, [r3, #17]
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e087      	b.n	800dad2 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	7c1b      	ldrb	r3, [r3, #16]
 800d9c6:	b25b      	sxtb	r3, r3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	da14      	bge.n	800d9f6 <f_read+0x182>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	69da      	ldr	r2, [r3, #28]
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	1ad3      	subs	r3, r2, r3
 800d9d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d90d      	bls.n	800d9f6 <f_read+0x182>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	69da      	ldr	r2, [r3, #28]
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	025b      	lsls	r3, r3, #9
 800d9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e6:	18d0      	adds	r0, r2, r3
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3328      	adds	r3, #40	; 0x28
 800d9ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	f011 ff8b 	bl	801f90c <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f8:	025b      	lsls	r3, r3, #9
 800d9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d9fc:	e050      	b.n	800daa0 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	69db      	ldr	r3, [r3, #28]
 800da02:	69ba      	ldr	r2, [r7, #24]
 800da04:	429a      	cmp	r2, r3
 800da06:	d02e      	beq.n	800da66 <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	7c1b      	ldrb	r3, [r3, #16]
 800da0c:	b25b      	sxtb	r3, r3
 800da0e:	2b00      	cmp	r3, #0
 800da10:	da18      	bge.n	800da44 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	7858      	ldrb	r0, [r3, #1]
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	69da      	ldr	r2, [r3, #28]
 800da20:	2301      	movs	r3, #1
 800da22:	f7fe f973 	bl	800bd0c <disk_write>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <f_read+0x1c2>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2201      	movs	r2, #1
 800da30:	745a      	strb	r2, [r3, #17]
 800da32:	2301      	movs	r3, #1
 800da34:	e04d      	b.n	800dad2 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	7c1b      	ldrb	r3, [r3, #16]
 800da3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	7858      	ldrb	r0, [r3, #1]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800da4e:	2301      	movs	r3, #1
 800da50:	69ba      	ldr	r2, [r7, #24]
 800da52:	f7fe f93b 	bl	800bccc <disk_read>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d004      	beq.n	800da66 <f_read+0x1f2>
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2201      	movs	r2, #1
 800da60:	745a      	strb	r2, [r3, #17]
 800da62:	2301      	movs	r3, #1
 800da64:	e035      	b.n	800dad2 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	69ba      	ldr	r2, [r7, #24]
 800da6a:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da74:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800da78:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800da7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d901      	bls.n	800da86 <f_read+0x212>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	695b      	ldr	r3, [r3, #20]
 800da90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da94:	4413      	add	r3, r2
 800da96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da98:	4619      	mov	r1, r3
 800da9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da9c:	f011 ff36 	bl	801f90c <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	607b      	str	r3, [r7, #4]
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daae:	441a      	add	r2, r3
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	4413      	add	r3, r2
 800daba:	627b      	str	r3, [r7, #36]	; 0x24
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	695a      	ldr	r2, [r3, #20]
 800dac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac2:	441a      	add	r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	615a      	str	r2, [r3, #20]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f47f af0d 	bne.w	800d8ea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3738      	adds	r7, #56	; 0x38
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b08c      	sub	sp, #48	; 0x30
 800dade:	af00      	add	r7, sp, #0
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	607a      	str	r2, [r7, #4]
 800dae6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	2200      	movs	r2, #0
 800daf0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f107 0210 	add.w	r2, r7, #16
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fcb2 	bl	800d464 <validate>
 800db00:	4603      	mov	r3, r0
 800db02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800db06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d107      	bne.n	800db1e <f_write+0x44>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	7c5b      	ldrb	r3, [r3, #17]
 800db12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800db16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d002      	beq.n	800db24 <f_write+0x4a>
 800db1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db22:	e13f      	b.n	800dda4 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	7c1b      	ldrb	r3, [r3, #16]
 800db28:	f003 0302 	and.w	r3, r3, #2
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <f_write+0x5a>
 800db30:	2307      	movs	r3, #7
 800db32:	e137      	b.n	800dda4 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	695a      	ldr	r2, [r3, #20]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	441a      	add	r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	695b      	ldr	r3, [r3, #20]
 800db40:	429a      	cmp	r2, r3
 800db42:	f080 8121 	bcs.w	800dd88 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	43db      	mvns	r3, r3
 800db4c:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800db4e:	e11b      	b.n	800dd88 <f_write+0x2ae>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	695b      	ldr	r3, [r3, #20]
 800db54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f040 80d7 	bne.w	800dd0c <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	695b      	ldr	r3, [r3, #20]
 800db62:	0a5b      	lsrs	r3, r3, #9
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	8952      	ldrh	r2, [r2, #10]
 800db68:	3a01      	subs	r2, #1
 800db6a:	4013      	ands	r3, r2
 800db6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d137      	bne.n	800dbe4 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10c      	bne.n	800db96 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800db82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db84:	2b00      	cmp	r3, #0
 800db86:	d10e      	bne.n	800dba6 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2100      	movs	r1, #0
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fe fcb7 	bl	800c500 <create_chain>
 800db92:	62b8      	str	r0, [r7, #40]	; 0x28
 800db94:	e007      	b.n	800dba6 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	4619      	mov	r1, r3
 800db9e:	4610      	mov	r0, r2
 800dba0:	f7fe fcae 	bl	800c500 <create_chain>
 800dba4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f000 80f2 	beq.w	800dd92 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d104      	bne.n	800dbbe <f_write+0xe4>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	745a      	strb	r2, [r3, #17]
 800dbba:	2302      	movs	r3, #2
 800dbbc:	e0f2      	b.n	800dda4 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbc4:	d104      	bne.n	800dbd0 <f_write+0xf6>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	745a      	strb	r2, [r3, #17]
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e0e9      	b.n	800dda4 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbd4:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d102      	bne.n	800dbe4 <f_write+0x10a>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbe2:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	7c1b      	ldrb	r3, [r3, #16]
 800dbe8:	b25b      	sxtb	r3, r3
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	da18      	bge.n	800dc20 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	7858      	ldrb	r0, [r3, #1]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	69da      	ldr	r2, [r3, #28]
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	f7fe f885 	bl	800bd0c <disk_write>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <f_write+0x138>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	745a      	strb	r2, [r3, #17]
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e0c8      	b.n	800dda4 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	7c1b      	ldrb	r3, [r3, #16]
 800dc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	699b      	ldr	r3, [r3, #24]
 800dc26:	4619      	mov	r1, r3
 800dc28:	4610      	mov	r0, r2
 800dc2a:	f7fe fa51 	bl	800c0d0 <clst2sect>
 800dc2e:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d104      	bne.n	800dc40 <f_write+0x166>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2202      	movs	r2, #2
 800dc3a:	745a      	strb	r2, [r3, #17]
 800dc3c:	2302      	movs	r3, #2
 800dc3e:	e0b1      	b.n	800dda4 <f_write+0x2ca>
			sect += csect;
 800dc40:	697a      	ldr	r2, [r7, #20]
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	4413      	add	r3, r2
 800dc46:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	0a5b      	lsrs	r3, r3, #9
 800dc4c:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d03c      	beq.n	800dcce <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dc54:	69ba      	ldr	r2, [r7, #24]
 800dc56:	6a3b      	ldr	r3, [r7, #32]
 800dc58:	4413      	add	r3, r2
 800dc5a:	693a      	ldr	r2, [r7, #16]
 800dc5c:	8952      	ldrh	r2, [r2, #10]
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d905      	bls.n	800dc6e <f_write+0x194>
					cc = fs->csize - csect;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	895b      	ldrh	r3, [r3, #10]
 800dc66:	461a      	mov	r2, r3
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	1ad3      	subs	r3, r2, r3
 800dc6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	7858      	ldrb	r0, [r3, #1]
 800dc72:	6a3b      	ldr	r3, [r7, #32]
 800dc74:	697a      	ldr	r2, [r7, #20]
 800dc76:	69f9      	ldr	r1, [r7, #28]
 800dc78:	f7fe f848 	bl	800bd0c <disk_write>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d004      	beq.n	800dc8c <f_write+0x1b2>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2201      	movs	r2, #1
 800dc86:	745a      	strb	r2, [r3, #17]
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e08b      	b.n	800dda4 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	69da      	ldr	r2, [r3, #28]
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	6a3a      	ldr	r2, [r7, #32]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d915      	bls.n	800dcc6 <f_write+0x1ec>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	69da      	ldr	r2, [r3, #28]
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	025b      	lsls	r3, r3, #9
 800dcaa:	69fa      	ldr	r2, [r7, #28]
 800dcac:	4413      	add	r3, r2
 800dcae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	f011 fe2a 	bl	801f90c <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	7c1b      	ldrb	r3, [r3, #16]
 800dcbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dcc6:	6a3b      	ldr	r3, [r7, #32]
 800dcc8:	025b      	lsls	r3, r3, #9
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800dccc:	e03f      	b.n	800dd4e <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	69db      	ldr	r3, [r3, #28]
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d016      	beq.n	800dd06 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	695a      	ldr	r2, [r3, #20]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d210      	bcs.n	800dd06 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	7858      	ldrb	r0, [r3, #1]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dcee:	2301      	movs	r3, #1
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	f7fd ffeb 	bl	800bccc <disk_read>
 800dcf6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d004      	beq.n	800dd06 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	745a      	strb	r2, [r3, #17]
 800dd02:	2301      	movs	r3, #1
 800dd04:	e04e      	b.n	800dda4 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	697a      	ldr	r2, [r7, #20]
 800dd0a:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	695b      	ldr	r3, [r3, #20]
 800dd10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800dd18:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d901      	bls.n	800dd26 <f_write+0x24c>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	695b      	ldr	r3, [r3, #20]
 800dd30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd34:	4413      	add	r3, r2
 800dd36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd38:	69f9      	ldr	r1, [r7, #28]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f011 fde6 	bl	801f90c <memcpy>
		fp->flag |= FA_DIRTY;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	7c1b      	ldrb	r3, [r3, #16]
 800dd44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	607b      	str	r3, [r7, #4]
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd5c:	441a      	add	r2, r3
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	69fa      	ldr	r2, [r7, #28]
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	4413      	add	r3, r2
 800dd68:	61fb      	str	r3, [r7, #28]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	695a      	ldr	r2, [r3, #20]
 800dd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd70:	441a      	add	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	615a      	str	r2, [r3, #20]
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	68da      	ldr	r2, [r3, #12]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	bf38      	it	cc
 800dd82:	461a      	movcc	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	60da      	str	r2, [r3, #12]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f47f aee0 	bne.w	800db50 <f_write+0x76>
 800dd90:	e000      	b.n	800dd94 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dd92:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	7c1b      	ldrb	r3, [r3, #16]
 800dd98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3730      	adds	r7, #48	; 0x30
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b086      	sub	sp, #24
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f107 0208 	add.w	r2, r7, #8
 800ddba:	4611      	mov	r1, r2
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7ff fb51 	bl	800d464 <validate>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ddc6:	7dfb      	ldrb	r3, [r7, #23]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d168      	bne.n	800de9e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	7c1b      	ldrb	r3, [r3, #16]
 800ddd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d062      	beq.n	800de9e <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	7c1b      	ldrb	r3, [r3, #16]
 800dddc:	b25b      	sxtb	r3, r3
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	da15      	bge.n	800de0e <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	7858      	ldrb	r0, [r3, #1]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	69da      	ldr	r2, [r3, #28]
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	f7fd ff8b 	bl	800bd0c <disk_write>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <f_sync+0x54>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e04f      	b.n	800dea0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7c1b      	ldrb	r3, [r3, #16]
 800de04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800de0e:	f7fc fe18 	bl	800aa42 <get_fattime>
 800de12:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	4619      	mov	r1, r3
 800de1c:	4610      	mov	r0, r2
 800de1e:	f7fe f8bb 	bl	800bf98 <move_window>
 800de22:	4603      	mov	r3, r0
 800de24:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d138      	bne.n	800de9e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de30:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	330b      	adds	r3, #11
 800de36:	781a      	ldrb	r2, [r3, #0]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	330b      	adds	r3, #11
 800de3c:	f042 0220 	orr.w	r2, r2, #32
 800de40:	b2d2      	uxtb	r2, r2
 800de42:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6818      	ldr	r0, [r3, #0]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	461a      	mov	r2, r3
 800de4e:	68f9      	ldr	r1, [r7, #12]
 800de50:	f7fe fde6 	bl	800ca20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f103 021c 	add.w	r2, r3, #28
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	4619      	mov	r1, r3
 800de60:	4610      	mov	r0, r2
 800de62:	f7fd ffe7 	bl	800be34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	3316      	adds	r3, #22
 800de6a:	6939      	ldr	r1, [r7, #16]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fd ffe1 	bl	800be34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	3312      	adds	r3, #18
 800de76:	2100      	movs	r1, #0
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fd ffc0 	bl	800bdfe <st_word>
					fs->wflag = 1;
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2201      	movs	r2, #1
 800de82:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	4618      	mov	r0, r3
 800de88:	f7fe f8b4 	bl	800bff4 <sync_fs>
 800de8c:	4603      	mov	r3, r0
 800de8e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	7c1b      	ldrb	r3, [r3, #16]
 800de94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800de9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7ff ff7b 	bl	800ddac <f_sync>
 800deb6:	4603      	mov	r3, r0
 800deb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800deba:	7bfb      	ldrb	r3, [r7, #15]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10e      	bne.n	800dede <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f107 0208 	add.w	r2, r7, #8
 800dec6:	4611      	mov	r1, r2
 800dec8:	4618      	mov	r0, r3
 800deca:	f7ff facb 	bl	800d464 <validate>
 800dece:	4603      	mov	r3, r0
 800ded0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ded2:	7bfb      	ldrb	r3, [r7, #15]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d102      	bne.n	800dede <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dede:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b08e      	sub	sp, #56	; 0x38
 800deec:	af00      	add	r7, sp, #0
 800deee:	60b9      	str	r1, [r7, #8]
 800def0:	607b      	str	r3, [r7, #4]
 800def2:	4603      	mov	r3, r0
 800def4:	73fb      	strb	r3, [r7, #15]
 800def6:	4613      	mov	r3, r2
 800def8:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800defa:	f107 0210 	add.w	r2, r7, #16
 800defe:	7bfb      	ldrb	r3, [r7, #15]
 800df00:	2101      	movs	r1, #1
 800df02:	4618      	mov	r0, r3
 800df04:	f7fd ff22 	bl	800bd4c <disk_ioctl>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d001      	beq.n	800df12 <create_partition+0x2a>
 800df0e:	2301      	movs	r3, #1
 800df10:	e108      	b.n	800e124 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800df16:	233f      	movs	r3, #63	; 0x3f
 800df18:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800df1a:	2308      	movs	r3, #8
 800df1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df20:	e004      	b.n	800df2c <create_partition+0x44>
 800df22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00a      	beq.n	800df4a <create_partition+0x62>
 800df34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df38:	6a3a      	ldr	r2, [r7, #32]
 800df3a:	fbb2 f2f3 	udiv	r2, r2, r3
 800df3e:	7ffb      	ldrb	r3, [r7, #31]
 800df40:	fbb2 f3f3 	udiv	r3, r2, r3
 800df44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df48:	d8eb      	bhi.n	800df22 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800df4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d102      	bne.n	800df58 <create_partition+0x70>
 800df52:	23ff      	movs	r3, #255	; 0xff
 800df54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800df58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df5c:	2100      	movs	r1, #0
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f011 fcfc 	bl	801f95c <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800df6a:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800df6c:	2300      	movs	r3, #0
 800df6e:	637b      	str	r3, [r7, #52]	; 0x34
 800df70:	7ffb      	ldrb	r3, [r7, #31]
 800df72:	633b      	str	r3, [r7, #48]	; 0x30
 800df74:	e0b5      	b.n	800e0e2 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800df76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	4413      	add	r3, r2
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800df82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df84:	2b64      	cmp	r3, #100	; 0x64
 800df86:	d80d      	bhi.n	800dfa4 <create_partition+0xbc>
 800df88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8a:	2b64      	cmp	r3, #100	; 0x64
 800df8c:	d008      	beq.n	800dfa0 <create_partition+0xb8>
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	4a66      	ldr	r2, [pc, #408]	; (800e12c <create_partition+0x244>)
 800df92:	fba2 2303 	umull	r2, r3, r2, r3
 800df96:	095b      	lsrs	r3, r3, #5
 800df98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df9a:	fb02 f303 	mul.w	r3, r2, r3
 800df9e:	e000      	b.n	800dfa2 <create_partition+0xba>
 800dfa0:	6a3b      	ldr	r3, [r7, #32]
 800dfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800dfa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa8:	4413      	add	r3, r2
 800dfaa:	6a3a      	ldr	r2, [r7, #32]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d305      	bcc.n	800dfbc <create_partition+0xd4>
 800dfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb4:	4413      	add	r3, r2
 800dfb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d903      	bls.n	800dfc4 <create_partition+0xdc>
 800dfbc:	6a3a      	ldr	r2, [r7, #32]
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f000 8097 	beq.w	800e0fa <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800dfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfce:	3308      	adds	r3, #8
 800dfd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fd ff2e 	bl	800be34 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	330c      	adds	r3, #12
 800dfdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fd ff28 	bl	800be34 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800dfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe6:	3304      	adds	r3, #4
 800dfe8:	7bba      	ldrb	r2, [r7, #14]
 800dfea:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800dfec:	7ffb      	ldrb	r3, [r7, #31]
 800dfee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff0:	fbb2 f2f3 	udiv	r2, r2, r3
 800dff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dffc:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800dffe:	7ffb      	ldrb	r3, [r7, #31]
 800e000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e002:	fbb2 f3f3 	udiv	r3, r2, r3
 800e006:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e00a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e00e:	fb01 f202 	mul.w	r2, r1, r2
 800e012:	1a9b      	subs	r3, r3, r2
 800e014:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800e016:	7ffa      	ldrb	r2, [r7, #31]
 800e018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e01e:	fb01 f202 	mul.w	r2, r1, r2
 800e022:	1a9b      	subs	r3, r3, r2
 800e024:	b2db      	uxtb	r3, r3
 800e026:	3301      	adds	r3, #1
 800e028:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	3301      	adds	r3, #1
 800e02e:	7dfa      	ldrb	r2, [r7, #23]
 800e030:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	089b      	lsrs	r3, r3, #2
 800e036:	b2db      	uxtb	r3, r3
 800e038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800e03c:	b2d9      	uxtb	r1, r3
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	3302      	adds	r3, #2
 800e042:	7dba      	ldrb	r2, [r7, #22]
 800e044:	430a      	orrs	r2, r1
 800e046:	b2d2      	uxtb	r2, r2
 800e048:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	3303      	adds	r3, #3
 800e04e:	69ba      	ldr	r2, [r7, #24]
 800e050:	b2d2      	uxtb	r2, r2
 800e052:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800e054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	4413      	add	r3, r2
 800e05a:	1e5a      	subs	r2, r3, #1
 800e05c:	7ffb      	ldrb	r3, [r7, #31]
 800e05e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e066:	fbb2 f3f3 	udiv	r3, r2, r3
 800e06a:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800e06c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e070:	4413      	add	r3, r2
 800e072:	1e5a      	subs	r2, r3, #1
 800e074:	7ffb      	ldrb	r3, [r7, #31]
 800e076:	fbb2 f3f3 	udiv	r3, r2, r3
 800e07a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e07e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e082:	fb01 f202 	mul.w	r2, r1, r2
 800e086:	1a9b      	subs	r3, r3, r2
 800e088:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800e08a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08e:	4413      	add	r3, r2
 800e090:	3b01      	subs	r3, #1
 800e092:	7ffa      	ldrb	r2, [r7, #31]
 800e094:	fbb3 f1f2 	udiv	r1, r3, r2
 800e098:	fb01 f202 	mul.w	r2, r1, r2
 800e09c:	1a9b      	subs	r3, r3, r2
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800e0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a6:	3305      	adds	r3, #5
 800e0a8:	7dfa      	ldrb	r2, [r7, #23]
 800e0aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	089b      	lsrs	r3, r3, #2
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800e0b6:	b2d9      	uxtb	r1, r3
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	3306      	adds	r3, #6
 800e0bc:	7dba      	ldrb	r2, [r7, #22]
 800e0be:	430a      	orrs	r2, r1
 800e0c0:	b2d2      	uxtb	r2, r2
 800e0c2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800e0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c6:	3307      	adds	r3, #7
 800e0c8:	69ba      	ldr	r2, [r7, #24]
 800e0ca:	b2d2      	uxtb	r2, r2
 800e0cc:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800e0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d0:	3310      	adds	r3, #16
 800e0d2:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800e0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	637b      	str	r3, [r7, #52]	; 0x34
 800e0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	4413      	add	r3, r2
 800e0e0:	633b      	str	r3, [r7, #48]	; 0x30
 800e0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0e4:	2b03      	cmp	r3, #3
 800e0e6:	d809      	bhi.n	800e0fc <create_partition+0x214>
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d006      	beq.n	800e0fc <create_partition+0x214>
 800e0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0f0:	6a3b      	ldr	r3, [r7, #32]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	f4ff af3f 	bcc.w	800df76 <create_partition+0x8e>
 800e0f8:	e000      	b.n	800e0fc <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800e0fa:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e102:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e106:	4618      	mov	r0, r3
 800e108:	f7fd fe79 	bl	800bdfe <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e10c:	7bf8      	ldrb	r0, [r7, #15]
 800e10e:	2301      	movs	r3, #1
 800e110:	2200      	movs	r2, #0
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	f7fd fdfa 	bl	800bd0c <disk_write>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <create_partition+0x23a>
 800e11e:	2301      	movs	r3, #1
 800e120:	e000      	b.n	800e124 <create_partition+0x23c>
	}

	return FR_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3738      	adds	r7, #56	; 0x38
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	51eb851f 	.word	0x51eb851f

0800e130 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b0a0      	sub	sp, #128	; 0x80
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
 800e13c:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e13e:	f107 030c 	add.w	r3, r7, #12
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe fe4b 	bl	800cdde <get_ldnumber>
 800e148:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	da02      	bge.n	800e156 <f_mkfs+0x26>
 800e150:	230b      	movs	r3, #11
 800e152:	f000 bc1b 	b.w	800e98c <f_mkfs+0x85c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800e156:	4aa2      	ldr	r2, [pc, #648]	; (800e3e0 <f_mkfs+0x2b0>)
 800e158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d005      	beq.n	800e16e <f_mkfs+0x3e>
 800e162:	4a9f      	ldr	r2, [pc, #636]	; (800e3e0 <f_mkfs+0x2b0>)
 800e164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e16a:	2200      	movs	r2, #0
 800e16c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800e16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e170:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800e174:	2300      	movs	r3, #0
 800e176:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800e17a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e17e:	4618      	mov	r0, r3
 800e180:	f7fd fd7e 	bl	800bc80 <disk_initialize>
 800e184:	4603      	mov	r3, r0
 800e186:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800e18a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800e18e:	f003 0301 	and.w	r3, r3, #1
 800e192:	2b00      	cmp	r3, #0
 800e194:	d001      	beq.n	800e19a <f_mkfs+0x6a>
 800e196:	2303      	movs	r3, #3
 800e198:	e3f8      	b.n	800e98c <f_mkfs+0x85c>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e19a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800e19e:	f003 0304 	and.w	r3, r3, #4
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <f_mkfs+0x7a>
 800e1a6:	230a      	movs	r3, #10
 800e1a8:	e3f0      	b.n	800e98c <f_mkfs+0x85c>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d101      	bne.n	800e1b4 <f_mkfs+0x84>
 800e1b0:	4b8c      	ldr	r3, [pc, #560]	; (800e3e4 <f_mkfs+0x2b4>)
 800e1b2:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	623b      	str	r3, [r7, #32]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800e1ba:	6a3b      	ldr	r3, [r7, #32]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d107      	bne.n	800e1d0 <f_mkfs+0xa0>
 800e1c0:	f107 0220 	add.w	r2, r7, #32
 800e1c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e1c8:	2103      	movs	r1, #3
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fd fdbe 	bl	800bd4c <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800e1d0:	6a3b      	ldr	r3, [r7, #32]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d009      	beq.n	800e1ea <f_mkfs+0xba>
 800e1d6:	6a3b      	ldr	r3, [r7, #32]
 800e1d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1dc:	d805      	bhi.n	800e1ea <f_mkfs+0xba>
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	1e5a      	subs	r2, r3, #1
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <f_mkfs+0xbe>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	623b      	str	r3, [r7, #32]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
 800e1ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e1f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	f003 030f 	and.w	r3, r3, #15
 800e1fe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	785b      	ldrb	r3, [r3, #1]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d006      	beq.n	800e218 <f_mkfs+0xe8>
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	785b      	ldrb	r3, [r3, #1]
 800e20e:	2b02      	cmp	r3, #2
 800e210:	d802      	bhi.n	800e218 <f_mkfs+0xe8>
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	785b      	ldrb	r3, [r3, #1]
 800e216:	e000      	b.n	800e21a <f_mkfs+0xea>
 800e218:	2301      	movs	r3, #1
 800e21a:	643b      	str	r3, [r7, #64]	; 0x40
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d014      	beq.n	800e24e <f_mkfs+0x11e>
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e22c:	d80f      	bhi.n	800e24e <f_mkfs+0x11e>
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e236:	0952      	lsrs	r2, r2, #5
 800e238:	b292      	uxth	r2, r2
 800e23a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e23e:	fb01 f202 	mul.w	r2, r1, r2
 800e242:	1a9b      	subs	r3, r3, r2
 800e244:	2b00      	cmp	r3, #0
 800e246:	d102      	bne.n	800e24e <f_mkfs+0x11e>
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	689b      	ldr	r3, [r3, #8]
 800e24c:	e001      	b.n	800e252 <f_mkfs+0x122>
 800e24e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e252:	63fb      	str	r3, [r7, #60]	; 0x3c
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e25c:	d80a      	bhi.n	800e274 <f_mkfs+0x144>
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	68da      	ldr	r2, [r3, #12]
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	3b01      	subs	r3, #1
 800e268:	4013      	ands	r3, r2
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d102      	bne.n	800e274 <f_mkfs+0x144>
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	e000      	b.n	800e276 <f_mkfs+0x146>
 800e274:	2300      	movs	r3, #0
 800e276:	657b      	str	r3, [r7, #84]	; 0x54
	sz_au /= ss;	/* Byte --> Sector */
 800e278:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e27c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e282:	657b      	str	r3, [r7, #84]	; 0x54

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800e284:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e288:	683a      	ldr	r2, [r7, #0]
 800e28a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e28e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	2b00      	cmp	r3, #0
 800e294:	d101      	bne.n	800e29a <f_mkfs+0x16a>
 800e296:	2311      	movs	r3, #17
 800e298:	e378      	b.n	800e98c <f_mkfs+0x85c>
	buf = (BYTE*)work;		/* Working buffer */
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800e29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d101      	bne.n	800e2a8 <f_mkfs+0x178>
 800e2a4:	2311      	movs	r3, #17
 800e2a6:	e371      	b.n	800e98c <f_mkfs+0x85c>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	61fb      	str	r3, [r7, #28]
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	677b      	str	r3, [r7, #116]	; 0x74
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e2b0:	f107 021c 	add.w	r2, r7, #28
 800e2b4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e2b8:	2101      	movs	r1, #1
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fd fd46 	bl	800bd4c <disk_ioctl>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <f_mkfs+0x19a>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e360      	b.n	800e98c <f_mkfs+0x85c>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800e2ca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e2ce:	f003 0308 	and.w	r3, r3, #8
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d108      	bne.n	800e2e8 <f_mkfs+0x1b8>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	2b3f      	cmp	r3, #63	; 0x3f
 800e2da:	d905      	bls.n	800e2e8 <f_mkfs+0x1b8>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800e2dc:	233f      	movs	r3, #63	; 0x3f
 800e2de:	677b      	str	r3, [r7, #116]	; 0x74
 800e2e0:	69fa      	ldr	r2, [r7, #28]
 800e2e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2e4:	1ad3      	subs	r3, r2, r3
 800e2e6:	61fb      	str	r3, [r7, #28]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	2b7f      	cmp	r3, #127	; 0x7f
 800e2ec:	d801      	bhi.n	800e2f2 <f_mkfs+0x1c2>
 800e2ee:	230e      	movs	r3, #14
 800e2f0:	e34c      	b.n	800e98c <f_mkfs+0x85c>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800e2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2f4:	2b80      	cmp	r3, #128	; 0x80
 800e2f6:	d901      	bls.n	800e2fc <f_mkfs+0x1cc>
 800e2f8:	2380      	movs	r3, #128	; 0x80
 800e2fa:	657b      	str	r3, [r7, #84]	; 0x54
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800e2fc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e300:	f003 0302 	and.w	r3, r3, #2
 800e304:	2b00      	cmp	r3, #0
 800e306:	d009      	beq.n	800e31c <f_mkfs+0x1ec>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800e308:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e30c:	f003 0301 	and.w	r3, r3, #1
 800e310:	2b00      	cmp	r3, #0
 800e312:	d103      	bne.n	800e31c <f_mkfs+0x1ec>
				fsty = FS_FAT32; break;
 800e314:	2303      	movs	r3, #3
 800e316:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800e31a:	e00a      	b.n	800e332 <f_mkfs+0x202>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800e31c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e320:	f003 0301 	and.w	r3, r3, #1
 800e324:	2b00      	cmp	r3, #0
 800e326:	d101      	bne.n	800e32c <f_mkfs+0x1fc>
 800e328:	2313      	movs	r3, #19
 800e32a:	e32f      	b.n	800e98c <f_mkfs+0x85c>
		fsty = FS_FAT16;
 800e32c:	2302      	movs	r3, #2
 800e32e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800e332:	f7fc fb86 	bl	800aa42 <get_fattime>
 800e336:	4602      	mov	r2, r0
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	4413      	add	r3, r2
 800e33c:	633b      	str	r3, [r7, #48]	; 0x30

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800e33e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e340:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800e342:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e346:	2b03      	cmp	r3, #3
 800e348:	d13e      	bne.n	800e3c8 <f_mkfs+0x298>
				if (pau == 0) {	/* AU auto-selection */
 800e34a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d11b      	bne.n	800e388 <f_mkfs+0x258>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	0c5b      	lsrs	r3, r3, #17
 800e354:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e356:	2300      	movs	r3, #0
 800e358:	653b      	str	r3, [r7, #80]	; 0x50
 800e35a:	2301      	movs	r3, #1
 800e35c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e35e:	e005      	b.n	800e36c <f_mkfs+0x23c>
 800e360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e362:	3301      	adds	r3, #1
 800e364:	653b      	str	r3, [r7, #80]	; 0x50
 800e366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e36c:	4a1e      	ldr	r2, [pc, #120]	; (800e3e8 <f_mkfs+0x2b8>)
 800e36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d007      	beq.n	800e388 <f_mkfs+0x258>
 800e378:	4a1b      	ldr	r2, [pc, #108]	; (800e3e8 <f_mkfs+0x2b8>)
 800e37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e37c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e380:	461a      	mov	r2, r3
 800e382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e384:	4293      	cmp	r3, r2
 800e386:	d2eb      	bcs.n	800e360 <f_mkfs+0x230>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800e388:	69fa      	ldr	r2, [r7, #28]
 800e38a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e390:	62fb      	str	r3, [r7, #44]	; 0x2c
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e394:	3302      	adds	r3, #2
 800e396:	009a      	lsls	r2, r3, #2
 800e398:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e39c:	4413      	add	r3, r2
 800e39e:	1e5a      	subs	r2, r3, #1
 800e3a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3a8:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 32;	/* Number of reserved sectors */
 800e3aa:	2320      	movs	r3, #32
 800e3ac:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = 0;		/* No static directory */
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	65bb      	str	r3, [r7, #88]	; 0x58
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d903      	bls.n	800e3c4 <f_mkfs+0x294>
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	4a0b      	ldr	r2, [pc, #44]	; (800e3ec <f_mkfs+0x2bc>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d956      	bls.n	800e472 <f_mkfs+0x342>
 800e3c4:	230e      	movs	r3, #14
 800e3c6:	e2e1      	b.n	800e98c <f_mkfs+0x85c>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800e3c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d124      	bne.n	800e418 <f_mkfs+0x2e8>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	0b1b      	lsrs	r3, r3, #12
 800e3d2:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	653b      	str	r3, [r7, #80]	; 0x50
 800e3d8:	2301      	movs	r3, #1
 800e3da:	66bb      	str	r3, [r7, #104]	; 0x68
 800e3dc:	e00e      	b.n	800e3fc <f_mkfs+0x2cc>
 800e3de:	bf00      	nop
 800e3e0:	24001aac 	.word	0x24001aac
 800e3e4:	08024a90 	.word	0x08024a90
 800e3e8:	08024aa0 	.word	0x08024aa0
 800e3ec:	0ffffff5 	.word	0x0ffffff5
 800e3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	653b      	str	r3, [r7, #80]	; 0x50
 800e3f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3f8:	005b      	lsls	r3, r3, #1
 800e3fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e3fc:	4a99      	ldr	r2, [pc, #612]	; (800e664 <f_mkfs+0x534>)
 800e3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d007      	beq.n	800e418 <f_mkfs+0x2e8>
 800e408:	4a96      	ldr	r2, [pc, #600]	; (800e664 <f_mkfs+0x534>)
 800e40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e410:	461a      	mov	r2, r3
 800e412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e414:	4293      	cmp	r3, r2
 800e416:	d2eb      	bcs.n	800e3f0 <f_mkfs+0x2c0>
				}
				n_clst = (DWORD)sz_vol / pau;
 800e418:	69fa      	ldr	r2, [r7, #28]
 800e41a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e420:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (n_clst > MAX_FAT12) {
 800e422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e424:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e428:	4293      	cmp	r3, r2
 800e42a:	d904      	bls.n	800e436 <f_mkfs+0x306>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	3302      	adds	r3, #2
 800e430:	005b      	lsls	r3, r3, #1
 800e432:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e434:	e00a      	b.n	800e44c <f_mkfs+0x31c>
				} else {
					fsty = FS_FAT12;
 800e436:	2301      	movs	r3, #1
 800e438:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e43e:	4613      	mov	r3, r2
 800e440:	005b      	lsls	r3, r3, #1
 800e442:	4413      	add	r3, r2
 800e444:	3301      	adds	r3, #1
 800e446:	085b      	lsrs	r3, r3, #1
 800e448:	3303      	adds	r3, #3
 800e44a:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e44c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e452:	4413      	add	r3, r2
 800e454:	1e5a      	subs	r2, r3, #1
 800e456:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e45a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e45e:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 1;						/* Number of reserved sectors */
 800e460:	2301      	movs	r3, #1
 800e462:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800e464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e466:	015a      	lsls	r2, r3, #5
 800e468:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e470:	65bb      	str	r3, [r7, #88]	; 0x58
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e472:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e474:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e476:	4413      	add	r3, r2
 800e478:	673b      	str	r3, [r7, #112]	; 0x70
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800e47a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e47c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e47e:	fb03 f202 	mul.w	r2, r3, r2
 800e482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e484:	4413      	add	r3, r2
 800e486:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e488:	4413      	add	r3, r2
 800e48a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800e48c:	6a3a      	ldr	r2, [r7, #32]
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	4413      	add	r3, r2
 800e492:	1e5a      	subs	r2, r3, #1
 800e494:	6a3b      	ldr	r3, [r7, #32]
 800e496:	425b      	negs	r3, r3
 800e498:	401a      	ands	r2, r3
 800e49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800e4a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e4a4:	2b03      	cmp	r3, #3
 800e4a6:	d108      	bne.n	800e4ba <f_mkfs+0x38a>
				sz_rsv += n; b_fat += n;
 800e4a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4ac:	4413      	add	r3, r2
 800e4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e4b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e4b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4b4:	4413      	add	r3, r2
 800e4b6:	673b      	str	r3, [r7, #112]	; 0x70
 800e4b8:	e019      	b.n	800e4ee <f_mkfs+0x3be>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800e4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4be:	fbb3 f2f2 	udiv	r2, r3, r2
 800e4c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4c4:	fb01 f202 	mul.w	r2, r1, r2
 800e4c8:	1a9b      	subs	r3, r3, r2
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d008      	beq.n	800e4e0 <f_mkfs+0x3b0>
					n--; sz_rsv++; b_fat++;
 800e4ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4d0:	3b01      	subs	r3, #1
 800e4d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e4da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4dc:	3301      	adds	r3, #1
 800e4de:	673b      	str	r3, [r7, #112]	; 0x70
				}
				sz_fat += n / n_fat;
 800e4e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4ea:	4413      	add	r3, r2
 800e4ec:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800e4ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4f0:	011a      	lsls	r2, r3, #4
 800e4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f4:	441a      	add	r2, r3
 800e4f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4f8:	1ad2      	subs	r2, r2, r3
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d901      	bls.n	800e504 <f_mkfs+0x3d4>
 800e500:	230e      	movs	r3, #14
 800e502:	e243      	b.n	800e98c <f_mkfs+0x85c>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800e504:	69fa      	ldr	r2, [r7, #28]
 800e506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e508:	1ad2      	subs	r2, r2, r3
 800e50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e50c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e50e:	fb01 f303 	mul.w	r3, r1, r3
 800e512:	1ad2      	subs	r2, r2, r3
 800e514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e516:	1ad2      	subs	r2, r2, r3
 800e518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e51e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (fsty == FS_FAT32) {
 800e520:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e524:	2b03      	cmp	r3, #3
 800e526:	d10f      	bne.n	800e548 <f_mkfs+0x418>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e52e:	4293      	cmp	r3, r2
 800e530:	d80a      	bhi.n	800e548 <f_mkfs+0x418>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e534:	2b00      	cmp	r3, #0
 800e536:	d105      	bne.n	800e544 <f_mkfs+0x414>
 800e538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e53a:	085b      	lsrs	r3, r3, #1
 800e53c:	657b      	str	r3, [r7, #84]	; 0x54
 800e53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e540:	2b00      	cmp	r3, #0
 800e542:	d145      	bne.n	800e5d0 <f_mkfs+0x4a0>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e544:	230e      	movs	r3, #14
 800e546:	e221      	b.n	800e98c <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT16) {
 800e548:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d134      	bne.n	800e5ba <f_mkfs+0x48a>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e552:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e556:	4293      	cmp	r3, r2
 800e558:	d91f      	bls.n	800e59a <f_mkfs+0x46a>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800e55a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d107      	bne.n	800e570 <f_mkfs+0x440>
 800e560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	2b40      	cmp	r3, #64	; 0x40
 800e566:	d803      	bhi.n	800e570 <f_mkfs+0x440>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800e568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e56a:	005b      	lsls	r3, r3, #1
 800e56c:	657b      	str	r3, [r7, #84]	; 0x54
 800e56e:	e034      	b.n	800e5da <f_mkfs+0x4aa>
					}
					if ((fsopt & FM_FAT32)) {
 800e570:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e574:	f003 0302 	and.w	r3, r3, #2
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d003      	beq.n	800e584 <f_mkfs+0x454>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e57c:	2303      	movs	r3, #3
 800e57e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800e582:	e02a      	b.n	800e5da <f_mkfs+0x4aa>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e586:	2b00      	cmp	r3, #0
 800e588:	d105      	bne.n	800e596 <f_mkfs+0x466>
 800e58a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e58c:	005b      	lsls	r3, r3, #1
 800e58e:	657b      	str	r3, [r7, #84]	; 0x54
 800e590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e592:	2b80      	cmp	r3, #128	; 0x80
 800e594:	d91e      	bls.n	800e5d4 <f_mkfs+0x4a4>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e596:	230e      	movs	r3, #14
 800e598:	e1f8      	b.n	800e98c <f_mkfs+0x85c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d80a      	bhi.n	800e5ba <f_mkfs+0x48a>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e5a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d105      	bne.n	800e5b6 <f_mkfs+0x486>
 800e5aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5ac:	005b      	lsls	r3, r3, #1
 800e5ae:	657b      	str	r3, [r7, #84]	; 0x54
 800e5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b2:	2b80      	cmp	r3, #128	; 0x80
 800e5b4:	d910      	bls.n	800e5d8 <f_mkfs+0x4a8>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800e5b6:	230e      	movs	r3, #14
 800e5b8:	e1e8      	b.n	800e98c <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800e5ba:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d10c      	bne.n	800e5dc <f_mkfs+0x4ac>
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d907      	bls.n	800e5dc <f_mkfs+0x4ac>
 800e5cc:	230e      	movs	r3, #14
 800e5ce:	e1dd      	b.n	800e98c <f_mkfs+0x85c>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e5d0:	bf00      	nop
 800e5d2:	e6b4      	b.n	800e33e <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e5d4:	bf00      	nop
 800e5d6:	e6b2      	b.n	800e33e <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e5d8:	bf00      	nop
			pau = sz_au;
 800e5da:	e6b0      	b.n	800e33e <f_mkfs+0x20e>

			/* Ok, it is the valid cluster configuration */
			break;
 800e5dc:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800e5de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5e8:	f011 f9b8 	bl	801f95c <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800e5ec:	220b      	movs	r2, #11
 800e5ee:	491e      	ldr	r1, [pc, #120]	; (800e668 <f_mkfs+0x538>)
 800e5f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e5f2:	f011 f98b 	bl	801f90c <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f8:	330b      	adds	r3, #11
 800e5fa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e5fe:	4611      	mov	r1, r2
 800e600:	4618      	mov	r0, r3
 800e602:	f7fd fbfc 	bl	800bdfe <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e608:	330d      	adds	r3, #13
 800e60a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e60c:	b2d2      	uxtb	r2, r2
 800e60e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e612:	330e      	adds	r3, #14
 800e614:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e616:	b292      	uxth	r2, r2
 800e618:	4611      	mov	r1, r2
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fd fbef 	bl	800bdfe <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800e620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e622:	3310      	adds	r3, #16
 800e624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e626:	b2d2      	uxtb	r2, r2
 800e628:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800e62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62c:	f103 0211 	add.w	r2, r3, #17
 800e630:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e634:	2b03      	cmp	r3, #3
 800e636:	d002      	beq.n	800e63e <f_mkfs+0x50e>
 800e638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	e000      	b.n	800e640 <f_mkfs+0x510>
 800e63e:	2300      	movs	r3, #0
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	f7fd fbdb 	bl	800bdfe <st_word>
		if (sz_vol < 0x10000) {
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e64e:	d20d      	bcs.n	800e66c <f_mkfs+0x53c>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e652:	3313      	adds	r3, #19
 800e654:	69fa      	ldr	r2, [r7, #28]
 800e656:	b292      	uxth	r2, r2
 800e658:	4611      	mov	r1, r2
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fd fbcf 	bl	800bdfe <st_word>
 800e660:	e00b      	b.n	800e67a <f_mkfs+0x54a>
 800e662:	bf00      	nop
 800e664:	08024ab0 	.word	0x08024ab0
 800e668:	080210a0 	.word	0x080210a0
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800e66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e66e:	3320      	adds	r3, #32
 800e670:	69fa      	ldr	r2, [r7, #28]
 800e672:	4611      	mov	r1, r2
 800e674:	4618      	mov	r0, r3
 800e676:	f7fd fbdd 	bl	800be34 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e67c:	3315      	adds	r3, #21
 800e67e:	22f8      	movs	r2, #248	; 0xf8
 800e680:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e684:	3318      	adds	r3, #24
 800e686:	213f      	movs	r1, #63	; 0x3f
 800e688:	4618      	mov	r0, r3
 800e68a:	f7fd fbb8 	bl	800bdfe <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e690:	331a      	adds	r3, #26
 800e692:	21ff      	movs	r1, #255	; 0xff
 800e694:	4618      	mov	r0, r3
 800e696:	f7fd fbb2 	bl	800bdfe <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800e69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69c:	331c      	adds	r3, #28
 800e69e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fd fbc7 	bl	800be34 <st_dword>
		if (fsty == FS_FAT32) {
 800e6a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	d12d      	bne.n	800e70a <f_mkfs+0x5da>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800e6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b0:	3343      	adds	r3, #67	; 0x43
 800e6b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fd fbbd 	bl	800be34 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6bc:	3324      	adds	r3, #36	; 0x24
 800e6be:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fd fbb7 	bl	800be34 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c8:	332c      	adds	r3, #44	; 0x2c
 800e6ca:	2102      	movs	r1, #2
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fd fbb1 	bl	800be34 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d4:	3330      	adds	r3, #48	; 0x30
 800e6d6:	2101      	movs	r1, #1
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fd fb90 	bl	800bdfe <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e0:	3332      	adds	r3, #50	; 0x32
 800e6e2:	2106      	movs	r1, #6
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7fd fb8a 	bl	800bdfe <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ec:	3340      	adds	r3, #64	; 0x40
 800e6ee:	2280      	movs	r2, #128	; 0x80
 800e6f0:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f4:	3342      	adds	r3, #66	; 0x42
 800e6f6:	2229      	movs	r2, #41	; 0x29
 800e6f8:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6fc:	3347      	adds	r3, #71	; 0x47
 800e6fe:	2213      	movs	r2, #19
 800e700:	49a4      	ldr	r1, [pc, #656]	; (800e994 <f_mkfs+0x864>)
 800e702:	4618      	mov	r0, r3
 800e704:	f011 f902 	bl	801f90c <memcpy>
 800e708:	e01c      	b.n	800e744 <f_mkfs+0x614>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800e70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70c:	3327      	adds	r3, #39	; 0x27
 800e70e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e710:	4618      	mov	r0, r3
 800e712:	f7fd fb8f 	bl	800be34 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e718:	3316      	adds	r3, #22
 800e71a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e71c:	b292      	uxth	r2, r2
 800e71e:	4611      	mov	r1, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f7fd fb6c 	bl	800bdfe <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e728:	3324      	adds	r3, #36	; 0x24
 800e72a:	2280      	movs	r2, #128	; 0x80
 800e72c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e730:	3326      	adds	r3, #38	; 0x26
 800e732:	2229      	movs	r2, #41	; 0x29
 800e734:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e738:	332b      	adds	r3, #43	; 0x2b
 800e73a:	2213      	movs	r2, #19
 800e73c:	4996      	ldr	r1, [pc, #600]	; (800e998 <f_mkfs+0x868>)
 800e73e:	4618      	mov	r0, r3
 800e740:	f011 f8e4 	bl	801f90c <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e746:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e74a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fd fb55 	bl	800bdfe <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800e754:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e758:	2301      	movs	r3, #1
 800e75a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e75c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e75e:	f7fd fad5 	bl	800bd0c <disk_write>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d001      	beq.n	800e76c <f_mkfs+0x63c>
 800e768:	2301      	movs	r3, #1
 800e76a:	e10f      	b.n	800e98c <f_mkfs+0x85c>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800e76c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e770:	2b03      	cmp	r3, #3
 800e772:	d141      	bne.n	800e7f8 <f_mkfs+0x6c8>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e776:	1d9a      	adds	r2, r3, #6
 800e778:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e77c:	2301      	movs	r3, #1
 800e77e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e780:	f7fd fac4 	bl	800bd0c <disk_write>
			memset(buf, 0, ss);
 800e784:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e788:	461a      	mov	r2, r3
 800e78a:	2100      	movs	r1, #0
 800e78c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e78e:	f011 f8e5 	bl	801f95c <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e792:	4982      	ldr	r1, [pc, #520]	; (800e99c <f_mkfs+0x86c>)
 800e794:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e796:	f7fd fb4d 	bl	800be34 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e79c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e7a0:	497f      	ldr	r1, [pc, #508]	; (800e9a0 <f_mkfs+0x870>)
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7fd fb46 	bl	800be34 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7aa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	f7fd fb3d 	bl	800be34 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7bc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e7c0:	2102      	movs	r1, #2
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fd fb36 	bl	800be34 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fd fb13 	bl	800bdfe <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e7d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7da:	1dda      	adds	r2, r3, #7
 800e7dc:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e7e4:	f7fd fa92 	bl	800bd0c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e7e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7ea:	1c5a      	adds	r2, r3, #1
 800e7ec:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e7f4:	f7fd fa8a 	bl	800bd0c <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800e7f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e7fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7fe:	fb02 f303 	mul.w	r3, r2, r3
 800e802:	461a      	mov	r2, r3
 800e804:	2100      	movs	r1, #0
 800e806:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e808:	f011 f8a8 	bl	801f95c <memset>
		sect = b_fat;		/* FAT start sector */
 800e80c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e80e:	67bb      	str	r3, [r7, #120]	; 0x78
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800e810:	2300      	movs	r3, #0
 800e812:	653b      	str	r3, [r7, #80]	; 0x50
 800e814:	e04c      	b.n	800e8b0 <f_mkfs+0x780>
			if (fsty == FS_FAT32) {
 800e816:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	d113      	bne.n	800e846 <f_mkfs+0x716>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800e81e:	f06f 0107 	mvn.w	r1, #7
 800e822:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e824:	f7fd fb06 	bl	800be34 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800e828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e82a:	3304      	adds	r3, #4
 800e82c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e830:	4618      	mov	r0, r3
 800e832:	f7fd faff 	bl	800be34 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e838:	3308      	adds	r3, #8
 800e83a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fd faf8 	bl	800be34 <st_dword>
 800e844:	e00b      	b.n	800e85e <f_mkfs+0x72e>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800e846:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d101      	bne.n	800e852 <f_mkfs+0x722>
 800e84e:	4b55      	ldr	r3, [pc, #340]	; (800e9a4 <f_mkfs+0x874>)
 800e850:	e001      	b.n	800e856 <f_mkfs+0x726>
 800e852:	f06f 0307 	mvn.w	r3, #7
 800e856:	4619      	mov	r1, r3
 800e858:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e85a:	f7fd faeb 	bl	800be34 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e85e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e860:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e862:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e866:	4293      	cmp	r3, r2
 800e868:	bf28      	it	cs
 800e86a:	4613      	movcs	r3, r2
 800e86c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e86e:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e874:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e876:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e878:	f7fd fa48 	bl	800bd0c <disk_write>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <f_mkfs+0x756>
 800e882:	2301      	movs	r3, #1
 800e884:	e082      	b.n	800e98c <f_mkfs+0x85c>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800e886:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e88a:	461a      	mov	r2, r3
 800e88c:	2100      	movs	r1, #0
 800e88e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e890:	f011 f864 	bl	801f95c <memset>
				sect += n; nsect -= n;
 800e894:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e898:	4413      	add	r3, r2
 800e89a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e89c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800e8a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1db      	bne.n	800e862 <f_mkfs+0x732>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800e8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	653b      	str	r3, [r7, #80]	; 0x50
 800e8b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d3ae      	bcc.n	800e816 <f_mkfs+0x6e6>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e8b8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e8bc:	2b03      	cmp	r3, #3
 800e8be:	d101      	bne.n	800e8c4 <f_mkfs+0x794>
 800e8c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8c2:	e000      	b.n	800e8c6 <f_mkfs+0x796>
 800e8c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8c6:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e8c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	bf28      	it	cs
 800e8d0:	4613      	movcs	r3, r2
 800e8d2:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e8d4:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e8dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8de:	f7fd fa15 	bl	800bd0c <disk_write>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <f_mkfs+0x7bc>
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e04f      	b.n	800e98c <f_mkfs+0x85c>
			sect += n; nsect -= n;
 800e8ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f0:	4413      	add	r3, r2
 800e8f2:	67bb      	str	r3, [r7, #120]	; 0x78
 800e8f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800e8fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1e2      	bne.n	800e8c8 <f_mkfs+0x798>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800e902:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e906:	2b03      	cmp	r3, #3
 800e908:	d103      	bne.n	800e912 <f_mkfs+0x7e2>
		sys = 0x0C;		/* FAT32X */
 800e90a:	230c      	movs	r3, #12
 800e90c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e910:	e012      	b.n	800e938 <f_mkfs+0x808>
	} else if (sz_vol >= 0x10000) {
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e918:	d303      	bcc.n	800e922 <f_mkfs+0x7f2>
		sys = 0x06;		/* FAT12/16 (large) */
 800e91a:	2306      	movs	r3, #6
 800e91c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e920:	e00a      	b.n	800e938 <f_mkfs+0x808>
	} else if (fsty == FS_FAT16) {
 800e922:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800e926:	2b02      	cmp	r3, #2
 800e928:	d103      	bne.n	800e932 <f_mkfs+0x802>
		sys = 0x04;		/* FAT16 */
 800e92a:	2304      	movs	r3, #4
 800e92c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800e930:	e002      	b.n	800e938 <f_mkfs+0x808>
	} else {
		sys = 0x01;		/* FAT12 */
 800e932:	2301      	movs	r3, #1
 800e934:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800e938:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800e93c:	f003 0308 	and.w	r3, r3, #8
 800e940:	2b00      	cmp	r3, #0
 800e942:	d116      	bne.n	800e972 <f_mkfs+0x842>
			lba[0] = sz_vol; lba[1] = 0;
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	617b      	str	r3, [r7, #20]
 800e948:	2300      	movs	r3, #0
 800e94a:	61bb      	str	r3, [r7, #24]
			res = create_partition(pdrv, lba, sys, buf);
 800e94c:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800e950:	f107 0114 	add.w	r1, r7, #20
 800e954:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800e958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e95a:	f7ff fac5 	bl	800dee8 <create_partition>
 800e95e:	4603      	mov	r3, r0
 800e960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) LEAVE_MKFS(res);
 800e964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d002      	beq.n	800e972 <f_mkfs+0x842>
 800e96c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e970:	e00c      	b.n	800e98c <f_mkfs+0x85c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800e972:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800e976:	2200      	movs	r2, #0
 800e978:	2100      	movs	r1, #0
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fd f9e6 	bl	800bd4c <disk_ioctl>
 800e980:	4603      	mov	r3, r0
 800e982:	2b00      	cmp	r3, #0
 800e984:	d001      	beq.n	800e98a <f_mkfs+0x85a>
 800e986:	2301      	movs	r3, #1
 800e988:	e000      	b.n	800e98c <f_mkfs+0x85c>

	LEAVE_MKFS(FR_OK);
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3780      	adds	r7, #128	; 0x80
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	080210ac 	.word	0x080210ac
 800e998:	080210c0 	.word	0x080210c0
 800e99c:	41615252 	.word	0x41615252
 800e9a0:	61417272 	.word	0x61417272
 800e9a4:	00fffff8 	.word	0x00fffff8

0800e9a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES)
 800e9be:	4b1f      	ldr	r3, [pc, #124]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9c0:	7a5b      	ldrb	r3, [r3, #9]
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d131      	bne.n	800ea2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e9c8:	4b1c      	ldr	r3, [pc, #112]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9ca:	7a5b      	ldrb	r3, [r3, #9]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e9d6:	4b19      	ldr	r3, [pc, #100]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9d8:	7a5b      	ldrb	r3, [r3, #9]
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	4a17      	ldr	r2, [pc, #92]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4413      	add	r3, r2
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e9e6:	4b15      	ldr	r3, [pc, #84]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9e8:	7a5b      	ldrb	r3, [r3, #9]
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4b13      	ldr	r3, [pc, #76]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9f0:	4413      	add	r3, r2
 800e9f2:	79fa      	ldrb	r2, [r7, #7]
 800e9f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e9f6:	4b11      	ldr	r3, [pc, #68]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9f8:	7a5b      	ldrb	r3, [r3, #9]
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	1c5a      	adds	r2, r3, #1
 800e9fe:	b2d1      	uxtb	r1, r2
 800ea00:	4a0e      	ldr	r2, [pc, #56]	; (800ea3c <FATFS_LinkDriverEx+0x94>)
 800ea02:	7251      	strb	r1, [r2, #9]
 800ea04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea06:	7dbb      	ldrb	r3, [r7, #22]
 800ea08:	3330      	adds	r3, #48	; 0x30
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	3301      	adds	r3, #1
 800ea14:	223a      	movs	r2, #58	; 0x3a
 800ea16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	3302      	adds	r3, #2
 800ea1c:	222f      	movs	r2, #47	; 0x2f
 800ea1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	3303      	adds	r3, #3
 800ea24:	2200      	movs	r2, #0
 800ea26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	371c      	adds	r7, #28
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	24001ab4 	.word	0x24001ab4

0800ea40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7ff ffaa 	bl	800e9a8 <FATFS_LinkDriverEx>
 800ea54:	4603      	mov	r3, r0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b085      	sub	sp, #20
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	4603      	mov	r3, r0
 800ea66:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ea6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea70:	2b84      	cmp	r3, #132	; 0x84
 800ea72:	d005      	beq.n	800ea80 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ea74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	3303      	adds	r3, #3
 800ea7e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ea80:	68fb      	ldr	r3, [r7, #12]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3714      	adds	r7, #20
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea94:	f3ef 8305 	mrs	r3, IPSR
 800ea98:	607b      	str	r3, [r7, #4]
  return(result);
 800ea9a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	bf14      	ite	ne
 800eaa0:	2301      	movne	r3, #1
 800eaa2:	2300      	moveq	r3, #0
 800eaa4:	b2db      	uxtb	r3, r3
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	370c      	adds	r7, #12
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eab6:	f002 fa8d 	bl	8010fd4 <vTaskStartScheduler>
  
  return osOK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800eac4:	f002 feca 	bl	801185c <xTaskGetSchedulerState>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d101      	bne.n	800ead2 <osKernelRunning+0x12>
    return 0;
 800eace:	2300      	movs	r3, #0
 800ead0:	e000      	b.n	800ead4 <osKernelRunning+0x14>
  else
    return 1;
 800ead2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800eadc:	f7ff ffd7 	bl	800ea8e <inHandlerMode>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d003      	beq.n	800eaee <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800eae6:	f002 fb99 	bl	801121c <xTaskGetTickCountFromISR>
 800eaea:	4603      	mov	r3, r0
 800eaec:	e002      	b.n	800eaf4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800eaee:	f002 fb85 	bl	80111fc <xTaskGetTickCount>
 800eaf2:	4603      	mov	r3, r0
  }
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eafa:	b089      	sub	sp, #36	; 0x24
 800eafc:	af04      	add	r7, sp, #16
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d020      	beq.n	800eb4c <osThreadCreate+0x54>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d01c      	beq.n	800eb4c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	685c      	ldr	r4, [r3, #4]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681d      	ldr	r5, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	691e      	ldr	r6, [r3, #16]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7ff ff9a 	bl	800ea5e <makeFreeRtosPriority>
 800eb2a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	695b      	ldr	r3, [r3, #20]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb34:	9202      	str	r2, [sp, #8]
 800eb36:	9301      	str	r3, [sp, #4]
 800eb38:	9100      	str	r1, [sp, #0]
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	4632      	mov	r2, r6
 800eb3e:	4629      	mov	r1, r5
 800eb40:	4620      	mov	r0, r4
 800eb42:	f001 ff5b 	bl	80109fc <xTaskCreateStatic>
 800eb46:	4603      	mov	r3, r0
 800eb48:	60fb      	str	r3, [r7, #12]
 800eb4a:	e01c      	b.n	800eb86 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685c      	ldr	r4, [r3, #4]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eb58:	b29e      	uxth	r6, r3
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7ff ff7c 	bl	800ea5e <makeFreeRtosPriority>
 800eb66:	4602      	mov	r2, r0
 800eb68:	f107 030c 	add.w	r3, r7, #12
 800eb6c:	9301      	str	r3, [sp, #4]
 800eb6e:	9200      	str	r2, [sp, #0]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	4632      	mov	r2, r6
 800eb74:	4629      	mov	r1, r5
 800eb76:	4620      	mov	r0, r4
 800eb78:	f001 ff9d 	bl	8010ab6 <xTaskCreate>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d001      	beq.n	800eb86 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eb82:	2300      	movs	r3, #0
 800eb84:	e000      	b.n	800eb88 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eb86:	68fb      	ldr	r3, [r7, #12]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb90 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <osDelay+0x16>
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	e000      	b.n	800eba8 <osDelay+0x18>
 800eba6:	2301      	movs	r3, #1
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f002 f9df 	bl	8010f6c <vTaskDelay>
  
  return osOK;
 800ebae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d007      	beq.n	800ebd8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	2001      	movs	r0, #1
 800ebd0:	f001 f8b5 	bl	800fd3e <xQueueCreateMutexStatic>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	e003      	b.n	800ebe0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ebd8:	2001      	movs	r0, #1
 800ebda:	f001 f898 	bl	800fd0e <xQueueCreateMutex>
 800ebde:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d101      	bne.n	800ec00 <osMutexWait+0x18>
    return osErrorParameter;
 800ebfc:	2380      	movs	r3, #128	; 0x80
 800ebfe:	e03a      	b.n	800ec76 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ec00:	2300      	movs	r3, #0
 800ec02:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec0a:	d103      	bne.n	800ec14 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ec0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec10:	60fb      	str	r3, [r7, #12]
 800ec12:	e009      	b.n	800ec28 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d006      	beq.n	800ec28 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d101      	bne.n	800ec28 <osMutexWait+0x40>
      ticks = 1;
 800ec24:	2301      	movs	r3, #1
 800ec26:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ec28:	f7ff ff31 	bl	800ea8e <inHandlerMode>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d017      	beq.n	800ec62 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ec32:	f107 0308 	add.w	r3, r7, #8
 800ec36:	461a      	mov	r2, r3
 800ec38:	2100      	movs	r1, #0
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f001 fcac 	bl	8010598 <xQueueReceiveFromISR>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b01      	cmp	r3, #1
 800ec44:	d001      	beq.n	800ec4a <osMutexWait+0x62>
      return osErrorOS;
 800ec46:	23ff      	movs	r3, #255	; 0xff
 800ec48:	e015      	b.n	800ec76 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d011      	beq.n	800ec74 <osMutexWait+0x8c>
 800ec50:	4b0b      	ldr	r3, [pc, #44]	; (800ec80 <osMutexWait+0x98>)
 800ec52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	e008      	b.n	800ec74 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ec62:	68f9      	ldr	r1, [r7, #12]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f001 fb8b 	bl	8010380 <xQueueSemaphoreTake>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d001      	beq.n	800ec74 <osMutexWait+0x8c>
    return osErrorOS;
 800ec70:	23ff      	movs	r3, #255	; 0xff
 800ec72:	e000      	b.n	800ec76 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	e000ed04 	.word	0xe000ed04

0800ec84 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ec90:	2300      	movs	r3, #0
 800ec92:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ec94:	f7ff fefb 	bl	800ea8e <inHandlerMode>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d016      	beq.n	800eccc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ec9e:	f107 0308 	add.w	r3, r7, #8
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f001 f9fe 	bl	80100a6 <xQueueGiveFromISR>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d001      	beq.n	800ecb4 <osMutexRelease+0x30>
      return osErrorOS;
 800ecb0:	23ff      	movs	r3, #255	; 0xff
 800ecb2:	e017      	b.n	800ece4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d013      	beq.n	800ece2 <osMutexRelease+0x5e>
 800ecba:	4b0c      	ldr	r3, [pc, #48]	; (800ecec <osMutexRelease+0x68>)
 800ecbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecc0:	601a      	str	r2, [r3, #0]
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	f3bf 8f6f 	isb	sy
 800ecca:	e00a      	b.n	800ece2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800eccc:	2300      	movs	r3, #0
 800ecce:	2200      	movs	r2, #0
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f001 f84e 	bl	800fd74 <xQueueGenericSend>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d001      	beq.n	800ece2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ecde:	23ff      	movs	r3, #255	; 0xff
 800ece0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ece2:	68fb      	ldr	r3, [r7, #12]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	e000ed04 	.word	0xe000ed04

0800ecf0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af02      	add	r7, sp, #8
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d00f      	beq.n	800ed22 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d10a      	bne.n	800ed1e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	2203      	movs	r2, #3
 800ed0e:	9200      	str	r2, [sp, #0]
 800ed10:	2200      	movs	r2, #0
 800ed12:	2100      	movs	r1, #0
 800ed14:	2001      	movs	r0, #1
 800ed16:	f000 ff0f 	bl	800fb38 <xQueueGenericCreateStatic>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	e016      	b.n	800ed4c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	e014      	b.n	800ed4c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d110      	bne.n	800ed4a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ed28:	2203      	movs	r2, #3
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	2001      	movs	r0, #1
 800ed2e:	f000 ff7b 	bl	800fc28 <xQueueGenericCreate>
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d005      	beq.n	800ed46 <osSemaphoreCreate+0x56>
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	2100      	movs	r1, #0
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f001 f817 	bl	800fd74 <xQueueGenericSend>
      return sema;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	e000      	b.n	800ed4c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ed4a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ed5e:	2300      	movs	r3, #0
 800ed60:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ed68:	2380      	movs	r3, #128	; 0x80
 800ed6a:	e03a      	b.n	800ede2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed76:	d103      	bne.n	800ed80 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ed78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed7c:	60fb      	str	r3, [r7, #12]
 800ed7e:	e009      	b.n	800ed94 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d006      	beq.n	800ed94 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <osSemaphoreWait+0x40>
      ticks = 1;
 800ed90:	2301      	movs	r3, #1
 800ed92:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ed94:	f7ff fe7b 	bl	800ea8e <inHandlerMode>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d017      	beq.n	800edce <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ed9e:	f107 0308 	add.w	r3, r7, #8
 800eda2:	461a      	mov	r2, r3
 800eda4:	2100      	movs	r1, #0
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f001 fbf6 	bl	8010598 <xQueueReceiveFromISR>
 800edac:	4603      	mov	r3, r0
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d001      	beq.n	800edb6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800edb2:	23ff      	movs	r3, #255	; 0xff
 800edb4:	e015      	b.n	800ede2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d011      	beq.n	800ede0 <osSemaphoreWait+0x8c>
 800edbc:	4b0b      	ldr	r3, [pc, #44]	; (800edec <osSemaphoreWait+0x98>)
 800edbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edc2:	601a      	str	r2, [r3, #0]
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	f3bf 8f6f 	isb	sy
 800edcc:	e008      	b.n	800ede0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800edce:	68f9      	ldr	r1, [r7, #12]
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f001 fad5 	bl	8010380 <xQueueSemaphoreTake>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d001      	beq.n	800ede0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800eddc:	23ff      	movs	r3, #255	; 0xff
 800edde:	e000      	b.n	800ede2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	e000ed04 	.word	0xe000ed04

0800edf0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800edf8:	2300      	movs	r3, #0
 800edfa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800edfc:	2300      	movs	r3, #0
 800edfe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ee00:	f7ff fe45 	bl	800ea8e <inHandlerMode>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d016      	beq.n	800ee38 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ee0a:	f107 0308 	add.w	r3, r7, #8
 800ee0e:	4619      	mov	r1, r3
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f001 f948 	bl	80100a6 <xQueueGiveFromISR>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d001      	beq.n	800ee20 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ee1c:	23ff      	movs	r3, #255	; 0xff
 800ee1e:	e017      	b.n	800ee50 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d013      	beq.n	800ee4e <osSemaphoreRelease+0x5e>
 800ee26:	4b0c      	ldr	r3, [pc, #48]	; (800ee58 <osSemaphoreRelease+0x68>)
 800ee28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee2c:	601a      	str	r2, [r3, #0]
 800ee2e:	f3bf 8f4f 	dsb	sy
 800ee32:	f3bf 8f6f 	isb	sy
 800ee36:	e00a      	b.n	800ee4e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ee38:	2300      	movs	r3, #0
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	2100      	movs	r1, #0
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 ff98 	bl	800fd74 <xQueueGenericSend>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d001      	beq.n	800ee4e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ee4a:	23ff      	movs	r3, #255	; 0xff
 800ee4c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3710      	adds	r7, #16
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	e000ed04 	.word	0xe000ed04

0800ee5c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800ee64:	f7ff fe13 	bl	800ea8e <inHandlerMode>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ee6e:	2382      	movs	r3, #130	; 0x82
 800ee70:	e003      	b.n	800ee7a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f001 fc4c 	bl	8010710 <vQueueDelete>

  return osOK; 
 800ee78:	2300      	movs	r3, #0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ee82:	b590      	push	{r4, r7, lr}
 800ee84:	b085      	sub	sp, #20
 800ee86:	af02      	add	r7, sp, #8
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d011      	beq.n	800eeb8 <osMessageCreate+0x36>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00d      	beq.n	800eeb8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6818      	ldr	r0, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6859      	ldr	r1, [r3, #4]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	689a      	ldr	r2, [r3, #8]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	2400      	movs	r4, #0
 800eeae:	9400      	str	r4, [sp, #0]
 800eeb0:	f000 fe42 	bl	800fb38 <xQueueGenericCreateStatic>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	e008      	b.n	800eeca <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6818      	ldr	r0, [r3, #0]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	4619      	mov	r1, r3
 800eec4:	f000 feb0 	bl	800fc28 <xQueueGenericCreate>
 800eec8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	370c      	adds	r7, #12
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd90      	pop	{r4, r7, pc}
	...

0800eed4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800eee0:	2300      	movs	r3, #0
 800eee2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <osMessagePut+0x1e>
    ticks = 1;
 800eeee:	2301      	movs	r3, #1
 800eef0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800eef2:	f7ff fdcc 	bl	800ea8e <inHandlerMode>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d018      	beq.n	800ef2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800eefc:	f107 0210 	add.w	r2, r7, #16
 800ef00:	f107 0108 	add.w	r1, r7, #8
 800ef04:	2300      	movs	r3, #0
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f001 f832 	bl	800ff70 <xQueueGenericSendFromISR>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d001      	beq.n	800ef16 <osMessagePut+0x42>
      return osErrorOS;
 800ef12:	23ff      	movs	r3, #255	; 0xff
 800ef14:	e018      	b.n	800ef48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d014      	beq.n	800ef46 <osMessagePut+0x72>
 800ef1c:	4b0c      	ldr	r3, [pc, #48]	; (800ef50 <osMessagePut+0x7c>)
 800ef1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	e00b      	b.n	800ef46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ef2e:	f107 0108 	add.w	r1, r7, #8
 800ef32:	2300      	movs	r3, #0
 800ef34:	697a      	ldr	r2, [r7, #20]
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f000 ff1c 	bl	800fd74 <xQueueGenericSend>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d001      	beq.n	800ef46 <osMessagePut+0x72>
      return osErrorOS;
 800ef42:	23ff      	movs	r3, #255	; 0xff
 800ef44:	e000      	b.n	800ef48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ef46:	2300      	movs	r3, #0
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3718      	adds	r7, #24
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	e000ed04 	.word	0xe000ed04

0800ef54 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ef54:	b590      	push	{r4, r7, lr}
 800ef56:	b08b      	sub	sp, #44	; 0x2c
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	60b9      	str	r1, [r7, #8]
 800ef5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ef64:	2300      	movs	r3, #0
 800ef66:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d10a      	bne.n	800ef84 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ef6e:	2380      	movs	r3, #128	; 0x80
 800ef70:	617b      	str	r3, [r7, #20]
    return event;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	461c      	mov	r4, r3
 800ef76:	f107 0314 	add.w	r3, r7, #20
 800ef7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ef7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ef82:	e054      	b.n	800f02e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ef84:	2300      	movs	r3, #0
 800ef86:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef92:	d103      	bne.n	800ef9c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ef94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef98:	627b      	str	r3, [r7, #36]	; 0x24
 800ef9a:	e009      	b.n	800efb0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d006      	beq.n	800efb0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800efa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d101      	bne.n	800efb0 <osMessageGet+0x5c>
      ticks = 1;
 800efac:	2301      	movs	r3, #1
 800efae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800efb0:	f7ff fd6d 	bl	800ea8e <inHandlerMode>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d01c      	beq.n	800eff4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800efba:	f107 0220 	add.w	r2, r7, #32
 800efbe:	f107 0314 	add.w	r3, r7, #20
 800efc2:	3304      	adds	r3, #4
 800efc4:	4619      	mov	r1, r3
 800efc6:	68b8      	ldr	r0, [r7, #8]
 800efc8:	f001 fae6 	bl	8010598 <xQueueReceiveFromISR>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d102      	bne.n	800efd8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800efd2:	2310      	movs	r3, #16
 800efd4:	617b      	str	r3, [r7, #20]
 800efd6:	e001      	b.n	800efdc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800efd8:	2300      	movs	r3, #0
 800efda:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800efdc:	6a3b      	ldr	r3, [r7, #32]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d01d      	beq.n	800f01e <osMessageGet+0xca>
 800efe2:	4b15      	ldr	r3, [pc, #84]	; (800f038 <osMessageGet+0xe4>)
 800efe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efe8:	601a      	str	r2, [r3, #0]
 800efea:	f3bf 8f4f 	dsb	sy
 800efee:	f3bf 8f6f 	isb	sy
 800eff2:	e014      	b.n	800f01e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800eff4:	f107 0314 	add.w	r3, r7, #20
 800eff8:	3304      	adds	r3, #4
 800effa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800effc:	4619      	mov	r1, r3
 800effe:	68b8      	ldr	r0, [r7, #8]
 800f000:	f001 f8de 	bl	80101c0 <xQueueReceive>
 800f004:	4603      	mov	r3, r0
 800f006:	2b01      	cmp	r3, #1
 800f008:	d102      	bne.n	800f010 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f00a:	2310      	movs	r3, #16
 800f00c:	617b      	str	r3, [r7, #20]
 800f00e:	e006      	b.n	800f01e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	2b00      	cmp	r3, #0
 800f014:	d101      	bne.n	800f01a <osMessageGet+0xc6>
 800f016:	2300      	movs	r3, #0
 800f018:	e000      	b.n	800f01c <osMessageGet+0xc8>
 800f01a:	2340      	movs	r3, #64	; 0x40
 800f01c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	461c      	mov	r4, r3
 800f022:	f107 0314 	add.w	r3, r7, #20
 800f026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f02a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	372c      	adds	r7, #44	; 0x2c
 800f032:	46bd      	mov	sp, r7
 800f034:	bd90      	pop	{r4, r7, pc}
 800f036:	bf00      	nop
 800f038:	e000ed04 	.word	0xe000ed04

0800f03c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f044:	f7ff fd23 	bl	800ea8e <inHandlerMode>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d004      	beq.n	800f058 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f001 fb40 	bl	80106d4 <uxQueueMessagesWaitingFromISR>
 800f054:	4603      	mov	r3, r0
 800f056:	e003      	b.n	800f060 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f001 fb1d 	bl	8010698 <uxQueueMessagesWaiting>
 800f05e:	4603      	mov	r3, r0
  }
}
 800f060:	4618      	mov	r0, r3
 800f062:	3708      	adds	r7, #8
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f070:	f7ff fd0d 	bl	800ea8e <inHandlerMode>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <osMessageDelete+0x16>
    return osErrorISR;
 800f07a:	2382      	movs	r3, #130	; 0x82
 800f07c:	e003      	b.n	800f086 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f001 fb46 	bl	8010710 <vQueueDelete>

  return osOK; 
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3708      	adds	r7, #8
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
	...

0800f090 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b08a      	sub	sp, #40	; 0x28
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f098:	2300      	movs	r3, #0
 800f09a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f09c:	f002 f804 	bl	80110a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f0a0:	4b5b      	ldr	r3, [pc, #364]	; (800f210 <pvPortMalloc+0x180>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d101      	bne.n	800f0ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f0a8:	f000 f920 	bl	800f2ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f0ac:	4b59      	ldr	r3, [pc, #356]	; (800f214 <pvPortMalloc+0x184>)
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f040 8093 	bne.w	800f1e0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d01d      	beq.n	800f0fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f0c0:	2208      	movs	r2, #8
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4413      	add	r3, r2
 800f0c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f003 0307 	and.w	r3, r3, #7
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d014      	beq.n	800f0fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f023 0307 	bic.w	r3, r3, #7
 800f0d8:	3308      	adds	r3, #8
 800f0da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f003 0307 	and.w	r3, r3, #7
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00a      	beq.n	800f0fc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ea:	f383 8811 	msr	BASEPRI, r3
 800f0ee:	f3bf 8f6f 	isb	sy
 800f0f2:	f3bf 8f4f 	dsb	sy
 800f0f6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f0f8:	bf00      	nop
 800f0fa:	e7fe      	b.n	800f0fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d06e      	beq.n	800f1e0 <pvPortMalloc+0x150>
 800f102:	4b45      	ldr	r3, [pc, #276]	; (800f218 <pvPortMalloc+0x188>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d869      	bhi.n	800f1e0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f10c:	4b43      	ldr	r3, [pc, #268]	; (800f21c <pvPortMalloc+0x18c>)
 800f10e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f110:	4b42      	ldr	r3, [pc, #264]	; (800f21c <pvPortMalloc+0x18c>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f116:	e004      	b.n	800f122 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d903      	bls.n	800f134 <pvPortMalloc+0xa4>
 800f12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1f1      	bne.n	800f118 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f134:	4b36      	ldr	r3, [pc, #216]	; (800f210 <pvPortMalloc+0x180>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d050      	beq.n	800f1e0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2208      	movs	r2, #8
 800f144:	4413      	add	r3, r2
 800f146:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	6a3b      	ldr	r3, [r7, #32]
 800f14e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f152:	685a      	ldr	r2, [r3, #4]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	1ad2      	subs	r2, r2, r3
 800f158:	2308      	movs	r3, #8
 800f15a:	005b      	lsls	r3, r3, #1
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d91f      	bls.n	800f1a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4413      	add	r3, r2
 800f166:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	f003 0307 	and.w	r3, r3, #7
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00a      	beq.n	800f188 <pvPortMalloc+0xf8>
	__asm volatile
 800f172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f176:	f383 8811 	msr	BASEPRI, r3
 800f17a:	f3bf 8f6f 	isb	sy
 800f17e:	f3bf 8f4f 	dsb	sy
 800f182:	613b      	str	r3, [r7, #16]
}
 800f184:	bf00      	nop
 800f186:	e7fe      	b.n	800f186 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18a:	685a      	ldr	r2, [r3, #4]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	1ad2      	subs	r2, r2, r3
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f19a:	69b8      	ldr	r0, [r7, #24]
 800f19c:	f000 f908 	bl	800f3b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f1a0:	4b1d      	ldr	r3, [pc, #116]	; (800f218 <pvPortMalloc+0x188>)
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	4a1b      	ldr	r2, [pc, #108]	; (800f218 <pvPortMalloc+0x188>)
 800f1ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1ae:	4b1a      	ldr	r3, [pc, #104]	; (800f218 <pvPortMalloc+0x188>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	4b1b      	ldr	r3, [pc, #108]	; (800f220 <pvPortMalloc+0x190>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d203      	bcs.n	800f1c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1ba:	4b17      	ldr	r3, [pc, #92]	; (800f218 <pvPortMalloc+0x188>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a18      	ldr	r2, [pc, #96]	; (800f220 <pvPortMalloc+0x190>)
 800f1c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	4b13      	ldr	r3, [pc, #76]	; (800f214 <pvPortMalloc+0x184>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	431a      	orrs	r2, r3
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f1d6:	4b13      	ldr	r3, [pc, #76]	; (800f224 <pvPortMalloc+0x194>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	4a11      	ldr	r2, [pc, #68]	; (800f224 <pvPortMalloc+0x194>)
 800f1de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f1e0:	f001 ff70 	bl	80110c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	f003 0307 	and.w	r3, r3, #7
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00a      	beq.n	800f204 <pvPortMalloc+0x174>
	__asm volatile
 800f1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f2:	f383 8811 	msr	BASEPRI, r3
 800f1f6:	f3bf 8f6f 	isb	sy
 800f1fa:	f3bf 8f4f 	dsb	sy
 800f1fe:	60fb      	str	r3, [r7, #12]
}
 800f200:	bf00      	nop
 800f202:	e7fe      	b.n	800f202 <pvPortMalloc+0x172>
	return pvReturn;
 800f204:	69fb      	ldr	r3, [r7, #28]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3728      	adds	r7, #40	; 0x28
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	240092c8 	.word	0x240092c8
 800f214:	240092dc 	.word	0x240092dc
 800f218:	240092cc 	.word	0x240092cc
 800f21c:	240092c0 	.word	0x240092c0
 800f220:	240092d0 	.word	0x240092d0
 800f224:	240092d4 	.word	0x240092d4

0800f228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b086      	sub	sp, #24
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d04d      	beq.n	800f2d6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f23a:	2308      	movs	r3, #8
 800f23c:	425b      	negs	r3, r3
 800f23e:	697a      	ldr	r2, [r7, #20]
 800f240:	4413      	add	r3, r2
 800f242:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	685a      	ldr	r2, [r3, #4]
 800f24c:	4b24      	ldr	r3, [pc, #144]	; (800f2e0 <vPortFree+0xb8>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4013      	ands	r3, r2
 800f252:	2b00      	cmp	r3, #0
 800f254:	d10a      	bne.n	800f26c <vPortFree+0x44>
	__asm volatile
 800f256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25a:	f383 8811 	msr	BASEPRI, r3
 800f25e:	f3bf 8f6f 	isb	sy
 800f262:	f3bf 8f4f 	dsb	sy
 800f266:	60fb      	str	r3, [r7, #12]
}
 800f268:	bf00      	nop
 800f26a:	e7fe      	b.n	800f26a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00a      	beq.n	800f28a <vPortFree+0x62>
	__asm volatile
 800f274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f278:	f383 8811 	msr	BASEPRI, r3
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	f3bf 8f4f 	dsb	sy
 800f284:	60bb      	str	r3, [r7, #8]
}
 800f286:	bf00      	nop
 800f288:	e7fe      	b.n	800f288 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	685a      	ldr	r2, [r3, #4]
 800f28e:	4b14      	ldr	r3, [pc, #80]	; (800f2e0 <vPortFree+0xb8>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	4013      	ands	r3, r2
 800f294:	2b00      	cmp	r3, #0
 800f296:	d01e      	beq.n	800f2d6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d11a      	bne.n	800f2d6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	685a      	ldr	r2, [r3, #4]
 800f2a4:	4b0e      	ldr	r3, [pc, #56]	; (800f2e0 <vPortFree+0xb8>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	43db      	mvns	r3, r3
 800f2aa:	401a      	ands	r2, r3
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f2b0:	f001 fefa 	bl	80110a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	685a      	ldr	r2, [r3, #4]
 800f2b8:	4b0a      	ldr	r3, [pc, #40]	; (800f2e4 <vPortFree+0xbc>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4413      	add	r3, r2
 800f2be:	4a09      	ldr	r2, [pc, #36]	; (800f2e4 <vPortFree+0xbc>)
 800f2c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f2c2:	6938      	ldr	r0, [r7, #16]
 800f2c4:	f000 f874 	bl	800f3b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f2c8:	4b07      	ldr	r3, [pc, #28]	; (800f2e8 <vPortFree+0xc0>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	4a06      	ldr	r2, [pc, #24]	; (800f2e8 <vPortFree+0xc0>)
 800f2d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f2d2:	f001 fef7 	bl	80110c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f2d6:	bf00      	nop
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	240092dc 	.word	0x240092dc
 800f2e4:	240092cc 	.word	0x240092cc
 800f2e8:	240092d8 	.word	0x240092d8

0800f2ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b085      	sub	sp, #20
 800f2f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2f2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800f2f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2f8:	4b27      	ldr	r3, [pc, #156]	; (800f398 <prvHeapInit+0xac>)
 800f2fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f003 0307 	and.w	r3, r3, #7
 800f302:	2b00      	cmp	r3, #0
 800f304:	d00c      	beq.n	800f320 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	3307      	adds	r3, #7
 800f30a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f023 0307 	bic.w	r3, r3, #7
 800f312:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	1ad3      	subs	r3, r2, r3
 800f31a:	4a1f      	ldr	r2, [pc, #124]	; (800f398 <prvHeapInit+0xac>)
 800f31c:	4413      	add	r3, r2
 800f31e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f324:	4a1d      	ldr	r2, [pc, #116]	; (800f39c <prvHeapInit+0xb0>)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f32a:	4b1c      	ldr	r3, [pc, #112]	; (800f39c <prvHeapInit+0xb0>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	4413      	add	r3, r2
 800f336:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f338:	2208      	movs	r2, #8
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	1a9b      	subs	r3, r3, r2
 800f33e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	f023 0307 	bic.w	r3, r3, #7
 800f346:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	4a15      	ldr	r2, [pc, #84]	; (800f3a0 <prvHeapInit+0xb4>)
 800f34c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f34e:	4b14      	ldr	r3, [pc, #80]	; (800f3a0 <prvHeapInit+0xb4>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2200      	movs	r2, #0
 800f354:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f356:	4b12      	ldr	r3, [pc, #72]	; (800f3a0 <prvHeapInit+0xb4>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2200      	movs	r2, #0
 800f35c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	68fa      	ldr	r2, [r7, #12]
 800f366:	1ad2      	subs	r2, r2, r3
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f36c:	4b0c      	ldr	r3, [pc, #48]	; (800f3a0 <prvHeapInit+0xb4>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	4a0a      	ldr	r2, [pc, #40]	; (800f3a4 <prvHeapInit+0xb8>)
 800f37a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	4a09      	ldr	r2, [pc, #36]	; (800f3a8 <prvHeapInit+0xbc>)
 800f382:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f384:	4b09      	ldr	r3, [pc, #36]	; (800f3ac <prvHeapInit+0xc0>)
 800f386:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f38a:	601a      	str	r2, [r3, #0]
}
 800f38c:	bf00      	nop
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr
 800f398:	24001ac0 	.word	0x24001ac0
 800f39c:	240092c0 	.word	0x240092c0
 800f3a0:	240092c8 	.word	0x240092c8
 800f3a4:	240092d0 	.word	0x240092d0
 800f3a8:	240092cc 	.word	0x240092cc
 800f3ac:	240092dc 	.word	0x240092dc

0800f3b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b085      	sub	sp, #20
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f3b8:	4b28      	ldr	r3, [pc, #160]	; (800f45c <prvInsertBlockIntoFreeList+0xac>)
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	e002      	b.n	800f3c4 <prvInsertBlockIntoFreeList+0x14>
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	60fb      	str	r3, [r7, #12]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d8f7      	bhi.n	800f3be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	68ba      	ldr	r2, [r7, #8]
 800f3d8:	4413      	add	r3, r2
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d108      	bne.n	800f3f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	685a      	ldr	r2, [r3, #4]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	441a      	add	r2, r3
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	441a      	add	r2, r3
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	429a      	cmp	r2, r3
 800f404:	d118      	bne.n	800f438 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681a      	ldr	r2, [r3, #0]
 800f40a:	4b15      	ldr	r3, [pc, #84]	; (800f460 <prvInsertBlockIntoFreeList+0xb0>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d00d      	beq.n	800f42e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	441a      	add	r2, r3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	601a      	str	r2, [r3, #0]
 800f42c:	e008      	b.n	800f440 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f42e:	4b0c      	ldr	r3, [pc, #48]	; (800f460 <prvInsertBlockIntoFreeList+0xb0>)
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	601a      	str	r2, [r3, #0]
 800f436:	e003      	b.n	800f440 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f440:	68fa      	ldr	r2, [r7, #12]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	429a      	cmp	r2, r3
 800f446:	d002      	beq.n	800f44e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f44e:	bf00      	nop
 800f450:	3714      	adds	r7, #20
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	240092c0 	.word	0x240092c0
 800f460:	240092c8 	.word	0x240092c8

0800f464 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f103 0208 	add.w	r2, r3, #8
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f47c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f103 0208 	add.w	r2, r3, #8
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f103 0208 	add.w	r2, r3, #8
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f498:	bf00      	nop
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f4b2:	bf00      	nop
 800f4b4:	370c      	adds	r7, #12
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr

0800f4be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f4be:	b480      	push	{r7}
 800f4c0:	b085      	sub	sp, #20
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	689a      	ldr	r2, [r3, #8]
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	683a      	ldr	r2, [r7, #0]
 800f4e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	1c5a      	adds	r2, r3, #1
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	601a      	str	r2, [r3, #0]
}
 800f4fa:	bf00      	nop
 800f4fc:	3714      	adds	r7, #20
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr

0800f506 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f506:	b480      	push	{r7}
 800f508:	b085      	sub	sp, #20
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
 800f50e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f51c:	d103      	bne.n	800f526 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	60fb      	str	r3, [r7, #12]
 800f524:	e00c      	b.n	800f540 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	3308      	adds	r3, #8
 800f52a:	60fb      	str	r3, [r7, #12]
 800f52c:	e002      	b.n	800f534 <vListInsert+0x2e>
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d2f6      	bcs.n	800f52e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	685b      	ldr	r3, [r3, #4]
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	683a      	ldr	r2, [r7, #0]
 800f55a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	687a      	ldr	r2, [r7, #4]
 800f560:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	601a      	str	r2, [r3, #0]
}
 800f56c:	bf00      	nop
 800f56e:	3714      	adds	r7, #20
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f578:	b480      	push	{r7}
 800f57a:	b085      	sub	sp, #20
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	691b      	ldr	r3, [r3, #16]
 800f584:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	6892      	ldr	r2, [r2, #8]
 800f58e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	6852      	ldr	r2, [r2, #4]
 800f598:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	d103      	bne.n	800f5ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	689a      	ldr	r2, [r3, #8]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	1e5a      	subs	r2, r3, #1
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3714      	adds	r7, #20
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3b04      	subs	r3, #4
 800f5dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f5e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	3b04      	subs	r3, #4
 800f5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	f023 0201 	bic.w	r2, r3, #1
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	3b04      	subs	r3, #4
 800f5fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f5fc:	4a0c      	ldr	r2, [pc, #48]	; (800f630 <pxPortInitialiseStack+0x64>)
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	3b14      	subs	r3, #20
 800f606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f608:	687a      	ldr	r2, [r7, #4]
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3b04      	subs	r3, #4
 800f612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f06f 0202 	mvn.w	r2, #2
 800f61a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	3b20      	subs	r3, #32
 800f620:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f622:	68fb      	ldr	r3, [r7, #12]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	0800f635 	.word	0x0800f635

0800f634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f634:	b480      	push	{r7}
 800f636:	b085      	sub	sp, #20
 800f638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f63a:	2300      	movs	r3, #0
 800f63c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f63e:	4b12      	ldr	r3, [pc, #72]	; (800f688 <prvTaskExitError+0x54>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f646:	d00a      	beq.n	800f65e <prvTaskExitError+0x2a>
	__asm volatile
 800f648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f64c:	f383 8811 	msr	BASEPRI, r3
 800f650:	f3bf 8f6f 	isb	sy
 800f654:	f3bf 8f4f 	dsb	sy
 800f658:	60fb      	str	r3, [r7, #12]
}
 800f65a:	bf00      	nop
 800f65c:	e7fe      	b.n	800f65c <prvTaskExitError+0x28>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	60bb      	str	r3, [r7, #8]
}
 800f670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f672:	bf00      	nop
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d0fc      	beq.n	800f674 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f67a:	bf00      	nop
 800f67c:	bf00      	nop
 800f67e:	3714      	adds	r7, #20
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr
 800f688:	24000024 	.word	0x24000024
 800f68c:	00000000 	.word	0x00000000

0800f690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f690:	4b07      	ldr	r3, [pc, #28]	; (800f6b0 <pxCurrentTCBConst2>)
 800f692:	6819      	ldr	r1, [r3, #0]
 800f694:	6808      	ldr	r0, [r1, #0]
 800f696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f69a:	f380 8809 	msr	PSP, r0
 800f69e:	f3bf 8f6f 	isb	sy
 800f6a2:	f04f 0000 	mov.w	r0, #0
 800f6a6:	f380 8811 	msr	BASEPRI, r0
 800f6aa:	4770      	bx	lr
 800f6ac:	f3af 8000 	nop.w

0800f6b0 <pxCurrentTCBConst2>:
 800f6b0:	24009328 	.word	0x24009328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop

0800f6b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f6b8:	4808      	ldr	r0, [pc, #32]	; (800f6dc <prvPortStartFirstTask+0x24>)
 800f6ba:	6800      	ldr	r0, [r0, #0]
 800f6bc:	6800      	ldr	r0, [r0, #0]
 800f6be:	f380 8808 	msr	MSP, r0
 800f6c2:	f04f 0000 	mov.w	r0, #0
 800f6c6:	f380 8814 	msr	CONTROL, r0
 800f6ca:	b662      	cpsie	i
 800f6cc:	b661      	cpsie	f
 800f6ce:	f3bf 8f4f 	dsb	sy
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	df00      	svc	0
 800f6d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f6da:	bf00      	nop
 800f6dc:	e000ed08 	.word	0xe000ed08

0800f6e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f6e6:	4b46      	ldr	r3, [pc, #280]	; (800f800 <xPortStartScheduler+0x120>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4a46      	ldr	r2, [pc, #280]	; (800f804 <xPortStartScheduler+0x124>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d10a      	bne.n	800f706 <xPortStartScheduler+0x26>
	__asm volatile
 800f6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f4:	f383 8811 	msr	BASEPRI, r3
 800f6f8:	f3bf 8f6f 	isb	sy
 800f6fc:	f3bf 8f4f 	dsb	sy
 800f700:	613b      	str	r3, [r7, #16]
}
 800f702:	bf00      	nop
 800f704:	e7fe      	b.n	800f704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f706:	4b3e      	ldr	r3, [pc, #248]	; (800f800 <xPortStartScheduler+0x120>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a3f      	ldr	r2, [pc, #252]	; (800f808 <xPortStartScheduler+0x128>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d10a      	bne.n	800f726 <xPortStartScheduler+0x46>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	f383 8811 	msr	BASEPRI, r3
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	60fb      	str	r3, [r7, #12]
}
 800f722:	bf00      	nop
 800f724:	e7fe      	b.n	800f724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f726:	4b39      	ldr	r3, [pc, #228]	; (800f80c <xPortStartScheduler+0x12c>)
 800f728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	22ff      	movs	r2, #255	; 0xff
 800f736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f740:	78fb      	ldrb	r3, [r7, #3]
 800f742:	b2db      	uxtb	r3, r3
 800f744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f748:	b2da      	uxtb	r2, r3
 800f74a:	4b31      	ldr	r3, [pc, #196]	; (800f810 <xPortStartScheduler+0x130>)
 800f74c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f74e:	4b31      	ldr	r3, [pc, #196]	; (800f814 <xPortStartScheduler+0x134>)
 800f750:	2207      	movs	r2, #7
 800f752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f754:	e009      	b.n	800f76a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f756:	4b2f      	ldr	r3, [pc, #188]	; (800f814 <xPortStartScheduler+0x134>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	3b01      	subs	r3, #1
 800f75c:	4a2d      	ldr	r2, [pc, #180]	; (800f814 <xPortStartScheduler+0x134>)
 800f75e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f760:	78fb      	ldrb	r3, [r7, #3]
 800f762:	b2db      	uxtb	r3, r3
 800f764:	005b      	lsls	r3, r3, #1
 800f766:	b2db      	uxtb	r3, r3
 800f768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f76a:	78fb      	ldrb	r3, [r7, #3]
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f772:	2b80      	cmp	r3, #128	; 0x80
 800f774:	d0ef      	beq.n	800f756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f776:	4b27      	ldr	r3, [pc, #156]	; (800f814 <xPortStartScheduler+0x134>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f1c3 0307 	rsb	r3, r3, #7
 800f77e:	2b04      	cmp	r3, #4
 800f780:	d00a      	beq.n	800f798 <xPortStartScheduler+0xb8>
	__asm volatile
 800f782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f786:	f383 8811 	msr	BASEPRI, r3
 800f78a:	f3bf 8f6f 	isb	sy
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	60bb      	str	r3, [r7, #8]
}
 800f794:	bf00      	nop
 800f796:	e7fe      	b.n	800f796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f798:	4b1e      	ldr	r3, [pc, #120]	; (800f814 <xPortStartScheduler+0x134>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	021b      	lsls	r3, r3, #8
 800f79e:	4a1d      	ldr	r2, [pc, #116]	; (800f814 <xPortStartScheduler+0x134>)
 800f7a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f7a2:	4b1c      	ldr	r3, [pc, #112]	; (800f814 <xPortStartScheduler+0x134>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f7aa:	4a1a      	ldr	r2, [pc, #104]	; (800f814 <xPortStartScheduler+0x134>)
 800f7ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	b2da      	uxtb	r2, r3
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f7b6:	4b18      	ldr	r3, [pc, #96]	; (800f818 <xPortStartScheduler+0x138>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4a17      	ldr	r2, [pc, #92]	; (800f818 <xPortStartScheduler+0x138>)
 800f7bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f7c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f7c2:	4b15      	ldr	r3, [pc, #84]	; (800f818 <xPortStartScheduler+0x138>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a14      	ldr	r2, [pc, #80]	; (800f818 <xPortStartScheduler+0x138>)
 800f7c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f7cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f7ce:	f000 f8dd 	bl	800f98c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f7d2:	4b12      	ldr	r3, [pc, #72]	; (800f81c <xPortStartScheduler+0x13c>)
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f7d8:	f000 f8fc 	bl	800f9d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f7dc:	4b10      	ldr	r3, [pc, #64]	; (800f820 <xPortStartScheduler+0x140>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a0f      	ldr	r2, [pc, #60]	; (800f820 <xPortStartScheduler+0x140>)
 800f7e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f7e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f7e8:	f7ff ff66 	bl	800f6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f7ec:	f001 fde0 	bl	80113b0 <vTaskSwitchContext>
	prvTaskExitError();
 800f7f0:	f7ff ff20 	bl	800f634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f7f4:	2300      	movs	r3, #0
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3718      	adds	r7, #24
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop
 800f800:	e000ed00 	.word	0xe000ed00
 800f804:	410fc271 	.word	0x410fc271
 800f808:	410fc270 	.word	0x410fc270
 800f80c:	e000e400 	.word	0xe000e400
 800f810:	240092e0 	.word	0x240092e0
 800f814:	240092e4 	.word	0x240092e4
 800f818:	e000ed20 	.word	0xe000ed20
 800f81c:	24000024 	.word	0x24000024
 800f820:	e000ef34 	.word	0xe000ef34

0800f824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
	__asm volatile
 800f82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82e:	f383 8811 	msr	BASEPRI, r3
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	f3bf 8f4f 	dsb	sy
 800f83a:	607b      	str	r3, [r7, #4]
}
 800f83c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f83e:	4b0f      	ldr	r3, [pc, #60]	; (800f87c <vPortEnterCritical+0x58>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	3301      	adds	r3, #1
 800f844:	4a0d      	ldr	r2, [pc, #52]	; (800f87c <vPortEnterCritical+0x58>)
 800f846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f848:	4b0c      	ldr	r3, [pc, #48]	; (800f87c <vPortEnterCritical+0x58>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d10f      	bne.n	800f870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f850:	4b0b      	ldr	r3, [pc, #44]	; (800f880 <vPortEnterCritical+0x5c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	b2db      	uxtb	r3, r3
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00a      	beq.n	800f870 <vPortEnterCritical+0x4c>
	__asm volatile
 800f85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	603b      	str	r3, [r7, #0]
}
 800f86c:	bf00      	nop
 800f86e:	e7fe      	b.n	800f86e <vPortEnterCritical+0x4a>
	}
}
 800f870:	bf00      	nop
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	24000024 	.word	0x24000024
 800f880:	e000ed04 	.word	0xe000ed04

0800f884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f88a:	4b12      	ldr	r3, [pc, #72]	; (800f8d4 <vPortExitCritical+0x50>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d10a      	bne.n	800f8a8 <vPortExitCritical+0x24>
	__asm volatile
 800f892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f896:	f383 8811 	msr	BASEPRI, r3
 800f89a:	f3bf 8f6f 	isb	sy
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	607b      	str	r3, [r7, #4]
}
 800f8a4:	bf00      	nop
 800f8a6:	e7fe      	b.n	800f8a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f8a8:	4b0a      	ldr	r3, [pc, #40]	; (800f8d4 <vPortExitCritical+0x50>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	4a09      	ldr	r2, [pc, #36]	; (800f8d4 <vPortExitCritical+0x50>)
 800f8b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f8b2:	4b08      	ldr	r3, [pc, #32]	; (800f8d4 <vPortExitCritical+0x50>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d105      	bne.n	800f8c6 <vPortExitCritical+0x42>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f8c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f8c6:	bf00      	nop
 800f8c8:	370c      	adds	r7, #12
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	24000024 	.word	0x24000024
	...

0800f8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f8e0:	f3ef 8009 	mrs	r0, PSP
 800f8e4:	f3bf 8f6f 	isb	sy
 800f8e8:	4b15      	ldr	r3, [pc, #84]	; (800f940 <pxCurrentTCBConst>)
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	f01e 0f10 	tst.w	lr, #16
 800f8f0:	bf08      	it	eq
 800f8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fa:	6010      	str	r0, [r2, #0]
 800f8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f900:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f904:	f380 8811 	msr	BASEPRI, r0
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	f3bf 8f6f 	isb	sy
 800f910:	f001 fd4e 	bl	80113b0 <vTaskSwitchContext>
 800f914:	f04f 0000 	mov.w	r0, #0
 800f918:	f380 8811 	msr	BASEPRI, r0
 800f91c:	bc09      	pop	{r0, r3}
 800f91e:	6819      	ldr	r1, [r3, #0]
 800f920:	6808      	ldr	r0, [r1, #0]
 800f922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f926:	f01e 0f10 	tst.w	lr, #16
 800f92a:	bf08      	it	eq
 800f92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f930:	f380 8809 	msr	PSP, r0
 800f934:	f3bf 8f6f 	isb	sy
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	f3af 8000 	nop.w

0800f940 <pxCurrentTCBConst>:
 800f940:	24009328 	.word	0x24009328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f944:	bf00      	nop
 800f946:	bf00      	nop

0800f948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	607b      	str	r3, [r7, #4]
}
 800f960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f962:	f001 fc6d 	bl	8011240 <xTaskIncrementTick>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d003      	beq.n	800f974 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f96c:	4b06      	ldr	r3, [pc, #24]	; (800f988 <SysTick_Handler+0x40>)
 800f96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	2300      	movs	r3, #0
 800f976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	f383 8811 	msr	BASEPRI, r3
}
 800f97e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f980:	bf00      	nop
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	e000ed04 	.word	0xe000ed04

0800f98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f98c:	b480      	push	{r7}
 800f98e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f990:	4b0b      	ldr	r3, [pc, #44]	; (800f9c0 <vPortSetupTimerInterrupt+0x34>)
 800f992:	2200      	movs	r2, #0
 800f994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f996:	4b0b      	ldr	r3, [pc, #44]	; (800f9c4 <vPortSetupTimerInterrupt+0x38>)
 800f998:	2200      	movs	r2, #0
 800f99a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f99c:	4b0a      	ldr	r3, [pc, #40]	; (800f9c8 <vPortSetupTimerInterrupt+0x3c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a0a      	ldr	r2, [pc, #40]	; (800f9cc <vPortSetupTimerInterrupt+0x40>)
 800f9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9a6:	099b      	lsrs	r3, r3, #6
 800f9a8:	4a09      	ldr	r2, [pc, #36]	; (800f9d0 <vPortSetupTimerInterrupt+0x44>)
 800f9aa:	3b01      	subs	r3, #1
 800f9ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f9ae:	4b04      	ldr	r3, [pc, #16]	; (800f9c0 <vPortSetupTimerInterrupt+0x34>)
 800f9b0:	2207      	movs	r2, #7
 800f9b2:	601a      	str	r2, [r3, #0]
}
 800f9b4:	bf00      	nop
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	e000e010 	.word	0xe000e010
 800f9c4:	e000e018 	.word	0xe000e018
 800f9c8:	24000000 	.word	0x24000000
 800f9cc:	10624dd3 	.word	0x10624dd3
 800f9d0:	e000e014 	.word	0xe000e014

0800f9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f9e4 <vPortEnableVFP+0x10>
 800f9d8:	6801      	ldr	r1, [r0, #0]
 800f9da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f9de:	6001      	str	r1, [r0, #0]
 800f9e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f9e2:	bf00      	nop
 800f9e4:	e000ed88 	.word	0xe000ed88

0800f9e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b085      	sub	sp, #20
 800f9ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f9ee:	f3ef 8305 	mrs	r3, IPSR
 800f9f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2b0f      	cmp	r3, #15
 800f9f8:	d914      	bls.n	800fa24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f9fa:	4a17      	ldr	r2, [pc, #92]	; (800fa58 <vPortValidateInterruptPriority+0x70>)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	4413      	add	r3, r2
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fa04:	4b15      	ldr	r3, [pc, #84]	; (800fa5c <vPortValidateInterruptPriority+0x74>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	7afa      	ldrb	r2, [r7, #11]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d20a      	bcs.n	800fa24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa12:	f383 8811 	msr	BASEPRI, r3
 800fa16:	f3bf 8f6f 	isb	sy
 800fa1a:	f3bf 8f4f 	dsb	sy
 800fa1e:	607b      	str	r3, [r7, #4]
}
 800fa20:	bf00      	nop
 800fa22:	e7fe      	b.n	800fa22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fa24:	4b0e      	ldr	r3, [pc, #56]	; (800fa60 <vPortValidateInterruptPriority+0x78>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fa2c:	4b0d      	ldr	r3, [pc, #52]	; (800fa64 <vPortValidateInterruptPriority+0x7c>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d90a      	bls.n	800fa4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa38:	f383 8811 	msr	BASEPRI, r3
 800fa3c:	f3bf 8f6f 	isb	sy
 800fa40:	f3bf 8f4f 	dsb	sy
 800fa44:	603b      	str	r3, [r7, #0]
}
 800fa46:	bf00      	nop
 800fa48:	e7fe      	b.n	800fa48 <vPortValidateInterruptPriority+0x60>
	}
 800fa4a:	bf00      	nop
 800fa4c:	3714      	adds	r7, #20
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
 800fa56:	bf00      	nop
 800fa58:	e000e3f0 	.word	0xe000e3f0
 800fa5c:	240092e0 	.word	0x240092e0
 800fa60:	e000ed0c 	.word	0xe000ed0c
 800fa64:	240092e4 	.word	0x240092e4

0800fa68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d10a      	bne.n	800fa92 <xQueueGenericReset+0x2a>
	__asm volatile
 800fa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa80:	f383 8811 	msr	BASEPRI, r3
 800fa84:	f3bf 8f6f 	isb	sy
 800fa88:	f3bf 8f4f 	dsb	sy
 800fa8c:	60bb      	str	r3, [r7, #8]
}
 800fa8e:	bf00      	nop
 800fa90:	e7fe      	b.n	800fa90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fa92:	f7ff fec7 	bl	800f824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa9e:	68f9      	ldr	r1, [r7, #12]
 800faa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800faa2:	fb01 f303 	mul.w	r3, r1, r3
 800faa6:	441a      	add	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2200      	movs	r2, #0
 800fab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681a      	ldr	r2, [r3, #0]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fac2:	3b01      	subs	r3, #1
 800fac4:	68f9      	ldr	r1, [r7, #12]
 800fac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fac8:	fb01 f303 	mul.w	r3, r1, r3
 800facc:	441a      	add	r2, r3
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	22ff      	movs	r2, #255	; 0xff
 800fad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	22ff      	movs	r2, #255	; 0xff
 800fade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d114      	bne.n	800fb12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	691b      	ldr	r3, [r3, #16]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d01a      	beq.n	800fb26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3310      	adds	r3, #16
 800faf4:	4618      	mov	r0, r3
 800faf6:	f001 fcf1 	bl	80114dc <xTaskRemoveFromEventList>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d012      	beq.n	800fb26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fb00:	4b0c      	ldr	r3, [pc, #48]	; (800fb34 <xQueueGenericReset+0xcc>)
 800fb02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb06:	601a      	str	r2, [r3, #0]
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	e009      	b.n	800fb26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	3310      	adds	r3, #16
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7ff fca4 	bl	800f464 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	3324      	adds	r3, #36	; 0x24
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7ff fc9f 	bl	800f464 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fb26:	f7ff fead 	bl	800f884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fb2a:	2301      	movs	r3, #1
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3710      	adds	r7, #16
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	e000ed04 	.word	0xe000ed04

0800fb38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08e      	sub	sp, #56	; 0x38
 800fb3c:	af02      	add	r7, sp, #8
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d10a      	bne.n	800fb62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb5e:	bf00      	nop
 800fb60:	e7fe      	b.n	800fb60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d10a      	bne.n	800fb7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb6c:	f383 8811 	msr	BASEPRI, r3
 800fb70:	f3bf 8f6f 	isb	sy
 800fb74:	f3bf 8f4f 	dsb	sy
 800fb78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb7a:	bf00      	nop
 800fb7c:	e7fe      	b.n	800fb7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d002      	beq.n	800fb8a <xQueueGenericCreateStatic+0x52>
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d001      	beq.n	800fb8e <xQueueGenericCreateStatic+0x56>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	e000      	b.n	800fb90 <xQueueGenericCreateStatic+0x58>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d10a      	bne.n	800fbaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb98:	f383 8811 	msr	BASEPRI, r3
 800fb9c:	f3bf 8f6f 	isb	sy
 800fba0:	f3bf 8f4f 	dsb	sy
 800fba4:	623b      	str	r3, [r7, #32]
}
 800fba6:	bf00      	nop
 800fba8:	e7fe      	b.n	800fba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d102      	bne.n	800fbb6 <xQueueGenericCreateStatic+0x7e>
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d101      	bne.n	800fbba <xQueueGenericCreateStatic+0x82>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	e000      	b.n	800fbbc <xQueueGenericCreateStatic+0x84>
 800fbba:	2300      	movs	r3, #0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d10a      	bne.n	800fbd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc4:	f383 8811 	msr	BASEPRI, r3
 800fbc8:	f3bf 8f6f 	isb	sy
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	61fb      	str	r3, [r7, #28]
}
 800fbd2:	bf00      	nop
 800fbd4:	e7fe      	b.n	800fbd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fbd6:	2348      	movs	r3, #72	; 0x48
 800fbd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	2b48      	cmp	r3, #72	; 0x48
 800fbde:	d00a      	beq.n	800fbf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	f383 8811 	msr	BASEPRI, r3
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	f3bf 8f4f 	dsb	sy
 800fbf0:	61bb      	str	r3, [r7, #24]
}
 800fbf2:	bf00      	nop
 800fbf4:	e7fe      	b.n	800fbf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fbf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d00d      	beq.n	800fc1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc04:	2201      	movs	r2, #1
 800fc06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fc0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc10:	9300      	str	r3, [sp, #0]
 800fc12:	4613      	mov	r3, r2
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	68b9      	ldr	r1, [r7, #8]
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 f83f 	bl	800fc9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3730      	adds	r7, #48	; 0x30
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b08a      	sub	sp, #40	; 0x28
 800fc2c:	af02      	add	r7, sp, #8
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	4613      	mov	r3, r2
 800fc34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d10a      	bne.n	800fc52 <xQueueGenericCreate+0x2a>
	__asm volatile
 800fc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc40:	f383 8811 	msr	BASEPRI, r3
 800fc44:	f3bf 8f6f 	isb	sy
 800fc48:	f3bf 8f4f 	dsb	sy
 800fc4c:	613b      	str	r3, [r7, #16]
}
 800fc4e:	bf00      	nop
 800fc50:	e7fe      	b.n	800fc50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	68ba      	ldr	r2, [r7, #8]
 800fc56:	fb02 f303 	mul.w	r3, r2, r3
 800fc5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	3348      	adds	r3, #72	; 0x48
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7ff fa15 	bl	800f090 <pvPortMalloc>
 800fc66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d011      	beq.n	800fc92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fc6e:	69bb      	ldr	r3, [r7, #24]
 800fc70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	3348      	adds	r3, #72	; 0x48
 800fc76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fc80:	79fa      	ldrb	r2, [r7, #7]
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	4613      	mov	r3, r2
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	68b9      	ldr	r1, [r7, #8]
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	f000 f805 	bl	800fc9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fc92:	69bb      	ldr	r3, [r7, #24]
	}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3720      	adds	r7, #32
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
 800fca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d103      	bne.n	800fcb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	69ba      	ldr	r2, [r7, #24]
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	e002      	b.n	800fcbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	68fa      	ldr	r2, [r7, #12]
 800fcc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fcca:	2101      	movs	r1, #1
 800fccc:	69b8      	ldr	r0, [r7, #24]
 800fcce:	f7ff fecb 	bl	800fa68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fcd2:	bf00      	nop
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b082      	sub	sp, #8
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00e      	beq.n	800fd06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2200      	movs	r2, #0
 800fcec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	2100      	movs	r1, #0
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f837 	bl	800fd74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fd06:	bf00      	nop
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b086      	sub	sp, #24
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	4603      	mov	r3, r0
 800fd16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	617b      	str	r3, [r7, #20]
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fd20:	79fb      	ldrb	r3, [r7, #7]
 800fd22:	461a      	mov	r2, r3
 800fd24:	6939      	ldr	r1, [r7, #16]
 800fd26:	6978      	ldr	r0, [r7, #20]
 800fd28:	f7ff ff7e 	bl	800fc28 <xQueueGenericCreate>
 800fd2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f7ff ffd3 	bl	800fcda <prvInitialiseMutex>

		return xNewQueue;
 800fd34:	68fb      	ldr	r3, [r7, #12]
	}
 800fd36:	4618      	mov	r0, r3
 800fd38:	3718      	adds	r7, #24
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}

0800fd3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b088      	sub	sp, #32
 800fd42:	af02      	add	r7, sp, #8
 800fd44:	4603      	mov	r3, r0
 800fd46:	6039      	str	r1, [r7, #0]
 800fd48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	617b      	str	r3, [r7, #20]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	6939      	ldr	r1, [r7, #16]
 800fd5c:	6978      	ldr	r0, [r7, #20]
 800fd5e:	f7ff feeb 	bl	800fb38 <xQueueGenericCreateStatic>
 800fd62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f7ff ffb8 	bl	800fcda <prvInitialiseMutex>

		return xNewQueue;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
	}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3718      	adds	r7, #24
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b08e      	sub	sp, #56	; 0x38
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fd82:	2300      	movs	r3, #0
 800fd84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10a      	bne.n	800fda6 <xQueueGenericSend+0x32>
	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fda2:	bf00      	nop
 800fda4:	e7fe      	b.n	800fda4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d103      	bne.n	800fdb4 <xQueueGenericSend+0x40>
 800fdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <xQueueGenericSend+0x44>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e000      	b.n	800fdba <xQueueGenericSend+0x46>
 800fdb8:	2300      	movs	r3, #0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d10a      	bne.n	800fdd4 <xQueueGenericSend+0x60>
	__asm volatile
 800fdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fdd0:	bf00      	nop
 800fdd2:	e7fe      	b.n	800fdd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	d103      	bne.n	800fde2 <xQueueGenericSend+0x6e>
 800fdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d101      	bne.n	800fde6 <xQueueGenericSend+0x72>
 800fde2:	2301      	movs	r3, #1
 800fde4:	e000      	b.n	800fde8 <xQueueGenericSend+0x74>
 800fde6:	2300      	movs	r3, #0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10a      	bne.n	800fe02 <xQueueGenericSend+0x8e>
	__asm volatile
 800fdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf0:	f383 8811 	msr	BASEPRI, r3
 800fdf4:	f3bf 8f6f 	isb	sy
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	623b      	str	r3, [r7, #32]
}
 800fdfe:	bf00      	nop
 800fe00:	e7fe      	b.n	800fe00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe02:	f001 fd2b 	bl	801185c <xTaskGetSchedulerState>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d102      	bne.n	800fe12 <xQueueGenericSend+0x9e>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d101      	bne.n	800fe16 <xQueueGenericSend+0xa2>
 800fe12:	2301      	movs	r3, #1
 800fe14:	e000      	b.n	800fe18 <xQueueGenericSend+0xa4>
 800fe16:	2300      	movs	r3, #0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10a      	bne.n	800fe32 <xQueueGenericSend+0xbe>
	__asm volatile
 800fe1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe20:	f383 8811 	msr	BASEPRI, r3
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	f3bf 8f4f 	dsb	sy
 800fe2c:	61fb      	str	r3, [r7, #28]
}
 800fe2e:	bf00      	nop
 800fe30:	e7fe      	b.n	800fe30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe32:	f7ff fcf7 	bl	800f824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d302      	bcc.n	800fe48 <xQueueGenericSend+0xd4>
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	2b02      	cmp	r3, #2
 800fe46:	d129      	bne.n	800fe9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	68b9      	ldr	r1, [r7, #8]
 800fe4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe4e:	f000 fc9a 	bl	8010786 <prvCopyDataToQueue>
 800fe52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d010      	beq.n	800fe7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe5e:	3324      	adds	r3, #36	; 0x24
 800fe60:	4618      	mov	r0, r3
 800fe62:	f001 fb3b 	bl	80114dc <xTaskRemoveFromEventList>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d013      	beq.n	800fe94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fe6c:	4b3f      	ldr	r3, [pc, #252]	; (800ff6c <xQueueGenericSend+0x1f8>)
 800fe6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe72:	601a      	str	r2, [r3, #0]
 800fe74:	f3bf 8f4f 	dsb	sy
 800fe78:	f3bf 8f6f 	isb	sy
 800fe7c:	e00a      	b.n	800fe94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fe7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d007      	beq.n	800fe94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fe84:	4b39      	ldr	r3, [pc, #228]	; (800ff6c <xQueueGenericSend+0x1f8>)
 800fe86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe8a:	601a      	str	r2, [r3, #0]
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fe94:	f7ff fcf6 	bl	800f884 <vPortExitCritical>
				return pdPASS;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e063      	b.n	800ff64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d103      	bne.n	800feaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fea2:	f7ff fcef 	bl	800f884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fea6:	2300      	movs	r3, #0
 800fea8:	e05c      	b.n	800ff64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800feaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feac:	2b00      	cmp	r3, #0
 800feae:	d106      	bne.n	800febe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800feb0:	f107 0314 	add.w	r3, r7, #20
 800feb4:	4618      	mov	r0, r3
 800feb6:	f001 fb73 	bl	80115a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800feba:	2301      	movs	r3, #1
 800febc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800febe:	f7ff fce1 	bl	800f884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fec2:	f001 f8f1 	bl	80110a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fec6:	f7ff fcad 	bl	800f824 <vPortEnterCritical>
 800feca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fed0:	b25b      	sxtb	r3, r3
 800fed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fed6:	d103      	bne.n	800fee0 <xQueueGenericSend+0x16c>
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feda:	2200      	movs	r2, #0
 800fedc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fee6:	b25b      	sxtb	r3, r3
 800fee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800feec:	d103      	bne.n	800fef6 <xQueueGenericSend+0x182>
 800feee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef0:	2200      	movs	r2, #0
 800fef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fef6:	f7ff fcc5 	bl	800f884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fefa:	1d3a      	adds	r2, r7, #4
 800fefc:	f107 0314 	add.w	r3, r7, #20
 800ff00:	4611      	mov	r1, r2
 800ff02:	4618      	mov	r0, r3
 800ff04:	f001 fb62 	bl	80115cc <xTaskCheckForTimeOut>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d124      	bne.n	800ff58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ff0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff10:	f000 fd31 	bl	8010976 <prvIsQueueFull>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d018      	beq.n	800ff4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1c:	3310      	adds	r3, #16
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	4611      	mov	r1, r2
 800ff22:	4618      	mov	r0, r3
 800ff24:	f001 fab6 	bl	8011494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ff28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff2a:	f000 fcbc 	bl	80108a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ff2e:	f001 f8c9 	bl	80110c4 <xTaskResumeAll>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	f47f af7c 	bne.w	800fe32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ff3a:	4b0c      	ldr	r3, [pc, #48]	; (800ff6c <xQueueGenericSend+0x1f8>)
 800ff3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff40:	601a      	str	r2, [r3, #0]
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	e772      	b.n	800fe32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ff4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff4e:	f000 fcaa 	bl	80108a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff52:	f001 f8b7 	bl	80110c4 <xTaskResumeAll>
 800ff56:	e76c      	b.n	800fe32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ff58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff5a:	f000 fca4 	bl	80108a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff5e:	f001 f8b1 	bl	80110c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ff62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3738      	adds	r7, #56	; 0x38
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	e000ed04 	.word	0xe000ed04

0800ff70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b090      	sub	sp, #64	; 0x40
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
 800ff7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10a      	bne.n	800ff9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ff88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ff9a:	bf00      	nop
 800ff9c:	e7fe      	b.n	800ff9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d103      	bne.n	800ffac <xQueueGenericSendFromISR+0x3c>
 800ffa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d101      	bne.n	800ffb0 <xQueueGenericSendFromISR+0x40>
 800ffac:	2301      	movs	r3, #1
 800ffae:	e000      	b.n	800ffb2 <xQueueGenericSendFromISR+0x42>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d10a      	bne.n	800ffcc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ffb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffba:	f383 8811 	msr	BASEPRI, r3
 800ffbe:	f3bf 8f6f 	isb	sy
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ffc8:	bf00      	nop
 800ffca:	e7fe      	b.n	800ffca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	d103      	bne.n	800ffda <xQueueGenericSendFromISR+0x6a>
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d101      	bne.n	800ffde <xQueueGenericSendFromISR+0x6e>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	e000      	b.n	800ffe0 <xQueueGenericSendFromISR+0x70>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d10a      	bne.n	800fffa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ffe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe8:	f383 8811 	msr	BASEPRI, r3
 800ffec:	f3bf 8f6f 	isb	sy
 800fff0:	f3bf 8f4f 	dsb	sy
 800fff4:	623b      	str	r3, [r7, #32]
}
 800fff6:	bf00      	nop
 800fff8:	e7fe      	b.n	800fff8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fffa:	f7ff fcf5 	bl	800f9e8 <vPortValidateInterruptPriority>
	__asm volatile
 800fffe:	f3ef 8211 	mrs	r2, BASEPRI
 8010002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010006:	f383 8811 	msr	BASEPRI, r3
 801000a:	f3bf 8f6f 	isb	sy
 801000e:	f3bf 8f4f 	dsb	sy
 8010012:	61fa      	str	r2, [r7, #28]
 8010014:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8010016:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010018:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801001a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801001e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010022:	429a      	cmp	r2, r3
 8010024:	d302      	bcc.n	801002c <xQueueGenericSendFromISR+0xbc>
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	2b02      	cmp	r3, #2
 801002a:	d12f      	bne.n	801008c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801002c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801003a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801003c:	683a      	ldr	r2, [r7, #0]
 801003e:	68b9      	ldr	r1, [r7, #8]
 8010040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010042:	f000 fba0 	bl	8010786 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010046:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801004a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801004e:	d112      	bne.n	8010076 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010054:	2b00      	cmp	r3, #0
 8010056:	d016      	beq.n	8010086 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005a:	3324      	adds	r3, #36	; 0x24
 801005c:	4618      	mov	r0, r3
 801005e:	f001 fa3d 	bl	80114dc <xTaskRemoveFromEventList>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d00e      	beq.n	8010086 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00b      	beq.n	8010086 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2201      	movs	r2, #1
 8010072:	601a      	str	r2, [r3, #0]
 8010074:	e007      	b.n	8010086 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010076:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801007a:	3301      	adds	r3, #1
 801007c:	b2db      	uxtb	r3, r3
 801007e:	b25a      	sxtb	r2, r3
 8010080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010086:	2301      	movs	r3, #1
 8010088:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801008a:	e001      	b.n	8010090 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801008c:	2300      	movs	r3, #0
 801008e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010092:	617b      	str	r3, [r7, #20]
	__asm volatile
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	f383 8811 	msr	BASEPRI, r3
}
 801009a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801009c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3740      	adds	r7, #64	; 0x40
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b08e      	sub	sp, #56	; 0x38
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
 80100ae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80100b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d10a      	bne.n	80100d0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80100ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100be:	f383 8811 	msr	BASEPRI, r3
 80100c2:	f3bf 8f6f 	isb	sy
 80100c6:	f3bf 8f4f 	dsb	sy
 80100ca:	623b      	str	r3, [r7, #32]
}
 80100cc:	bf00      	nop
 80100ce:	e7fe      	b.n	80100ce <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80100d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00a      	beq.n	80100ee <xQueueGiveFromISR+0x48>
	__asm volatile
 80100d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100dc:	f383 8811 	msr	BASEPRI, r3
 80100e0:	f3bf 8f6f 	isb	sy
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	61fb      	str	r3, [r7, #28]
}
 80100ea:	bf00      	nop
 80100ec:	e7fe      	b.n	80100ec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80100ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d103      	bne.n	80100fe <xQueueGiveFromISR+0x58>
 80100f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f8:	689b      	ldr	r3, [r3, #8]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d101      	bne.n	8010102 <xQueueGiveFromISR+0x5c>
 80100fe:	2301      	movs	r3, #1
 8010100:	e000      	b.n	8010104 <xQueueGiveFromISR+0x5e>
 8010102:	2300      	movs	r3, #0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d10a      	bne.n	801011e <xQueueGiveFromISR+0x78>
	__asm volatile
 8010108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010c:	f383 8811 	msr	BASEPRI, r3
 8010110:	f3bf 8f6f 	isb	sy
 8010114:	f3bf 8f4f 	dsb	sy
 8010118:	61bb      	str	r3, [r7, #24]
}
 801011a:	bf00      	nop
 801011c:	e7fe      	b.n	801011c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801011e:	f7ff fc63 	bl	800f9e8 <vPortValidateInterruptPriority>
	__asm volatile
 8010122:	f3ef 8211 	mrs	r2, BASEPRI
 8010126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	617a      	str	r2, [r7, #20]
 8010138:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801013a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801013c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801013e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010142:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801014a:	429a      	cmp	r2, r3
 801014c:	d22b      	bcs.n	80101a6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010168:	d112      	bne.n	8010190 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801016a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016e:	2b00      	cmp	r3, #0
 8010170:	d016      	beq.n	80101a0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010174:	3324      	adds	r3, #36	; 0x24
 8010176:	4618      	mov	r0, r3
 8010178:	f001 f9b0 	bl	80114dc <xTaskRemoveFromEventList>
 801017c:	4603      	mov	r3, r0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00e      	beq.n	80101a0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d00b      	beq.n	80101a0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	2201      	movs	r2, #1
 801018c:	601a      	str	r2, [r3, #0]
 801018e:	e007      	b.n	80101a0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010194:	3301      	adds	r3, #1
 8010196:	b2db      	uxtb	r3, r3
 8010198:	b25a      	sxtb	r2, r3
 801019a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80101a0:	2301      	movs	r3, #1
 80101a2:	637b      	str	r3, [r7, #52]	; 0x34
 80101a4:	e001      	b.n	80101aa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80101a6:	2300      	movs	r3, #0
 80101a8:	637b      	str	r3, [r7, #52]	; 0x34
 80101aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f383 8811 	msr	BASEPRI, r3
}
 80101b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80101b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3738      	adds	r7, #56	; 0x38
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b08c      	sub	sp, #48	; 0x30
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80101cc:	2300      	movs	r3, #0
 80101ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80101d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d10a      	bne.n	80101f0 <xQueueReceive+0x30>
	__asm volatile
 80101da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
 80101ea:	623b      	str	r3, [r7, #32]
}
 80101ec:	bf00      	nop
 80101ee:	e7fe      	b.n	80101ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d103      	bne.n	80101fe <xQueueReceive+0x3e>
 80101f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d101      	bne.n	8010202 <xQueueReceive+0x42>
 80101fe:	2301      	movs	r3, #1
 8010200:	e000      	b.n	8010204 <xQueueReceive+0x44>
 8010202:	2300      	movs	r3, #0
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10a      	bne.n	801021e <xQueueReceive+0x5e>
	__asm volatile
 8010208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020c:	f383 8811 	msr	BASEPRI, r3
 8010210:	f3bf 8f6f 	isb	sy
 8010214:	f3bf 8f4f 	dsb	sy
 8010218:	61fb      	str	r3, [r7, #28]
}
 801021a:	bf00      	nop
 801021c:	e7fe      	b.n	801021c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801021e:	f001 fb1d 	bl	801185c <xTaskGetSchedulerState>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d102      	bne.n	801022e <xQueueReceive+0x6e>
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d101      	bne.n	8010232 <xQueueReceive+0x72>
 801022e:	2301      	movs	r3, #1
 8010230:	e000      	b.n	8010234 <xQueueReceive+0x74>
 8010232:	2300      	movs	r3, #0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d10a      	bne.n	801024e <xQueueReceive+0x8e>
	__asm volatile
 8010238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023c:	f383 8811 	msr	BASEPRI, r3
 8010240:	f3bf 8f6f 	isb	sy
 8010244:	f3bf 8f4f 	dsb	sy
 8010248:	61bb      	str	r3, [r7, #24]
}
 801024a:	bf00      	nop
 801024c:	e7fe      	b.n	801024c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801024e:	f7ff fae9 	bl	800f824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010256:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025a:	2b00      	cmp	r3, #0
 801025c:	d01f      	beq.n	801029e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801025e:	68b9      	ldr	r1, [r7, #8]
 8010260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010262:	f000 fafa 	bl	801085a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	1e5a      	subs	r2, r3, #1
 801026a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801026e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010270:	691b      	ldr	r3, [r3, #16]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d00f      	beq.n	8010296 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010278:	3310      	adds	r3, #16
 801027a:	4618      	mov	r0, r3
 801027c:	f001 f92e 	bl	80114dc <xTaskRemoveFromEventList>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d007      	beq.n	8010296 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010286:	4b3d      	ldr	r3, [pc, #244]	; (801037c <xQueueReceive+0x1bc>)
 8010288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	f3bf 8f4f 	dsb	sy
 8010292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010296:	f7ff faf5 	bl	800f884 <vPortExitCritical>
				return pdPASS;
 801029a:	2301      	movs	r3, #1
 801029c:	e069      	b.n	8010372 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d103      	bne.n	80102ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102a4:	f7ff faee 	bl	800f884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102a8:	2300      	movs	r3, #0
 80102aa:	e062      	b.n	8010372 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d106      	bne.n	80102c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102b2:	f107 0310 	add.w	r3, r7, #16
 80102b6:	4618      	mov	r0, r3
 80102b8:	f001 f972 	bl	80115a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102bc:	2301      	movs	r3, #1
 80102be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102c0:	f7ff fae0 	bl	800f884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102c4:	f000 fef0 	bl	80110a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102c8:	f7ff faac 	bl	800f824 <vPortEnterCritical>
 80102cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102d2:	b25b      	sxtb	r3, r3
 80102d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102d8:	d103      	bne.n	80102e2 <xQueueReceive+0x122>
 80102da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102dc:	2200      	movs	r2, #0
 80102de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102e8:	b25b      	sxtb	r3, r3
 80102ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102ee:	d103      	bne.n	80102f8 <xQueueReceive+0x138>
 80102f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f2:	2200      	movs	r2, #0
 80102f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102f8:	f7ff fac4 	bl	800f884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102fc:	1d3a      	adds	r2, r7, #4
 80102fe:	f107 0310 	add.w	r3, r7, #16
 8010302:	4611      	mov	r1, r2
 8010304:	4618      	mov	r0, r3
 8010306:	f001 f961 	bl	80115cc <xTaskCheckForTimeOut>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d123      	bne.n	8010358 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010312:	f000 fb1a 	bl	801094a <prvIsQueueEmpty>
 8010316:	4603      	mov	r3, r0
 8010318:	2b00      	cmp	r3, #0
 801031a:	d017      	beq.n	801034c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801031c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031e:	3324      	adds	r3, #36	; 0x24
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	4611      	mov	r1, r2
 8010324:	4618      	mov	r0, r3
 8010326:	f001 f8b5 	bl	8011494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801032a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801032c:	f000 fabb 	bl	80108a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010330:	f000 fec8 	bl	80110c4 <xTaskResumeAll>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d189      	bne.n	801024e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801033a:	4b10      	ldr	r3, [pc, #64]	; (801037c <xQueueReceive+0x1bc>)
 801033c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010340:	601a      	str	r2, [r3, #0]
 8010342:	f3bf 8f4f 	dsb	sy
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	e780      	b.n	801024e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801034c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801034e:	f000 faaa 	bl	80108a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010352:	f000 feb7 	bl	80110c4 <xTaskResumeAll>
 8010356:	e77a      	b.n	801024e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801035a:	f000 faa4 	bl	80108a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801035e:	f000 feb1 	bl	80110c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010364:	f000 faf1 	bl	801094a <prvIsQueueEmpty>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	f43f af6f 	beq.w	801024e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010372:	4618      	mov	r0, r3
 8010374:	3730      	adds	r7, #48	; 0x30
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	e000ed04 	.word	0xe000ed04

08010380 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b08e      	sub	sp, #56	; 0x38
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801038a:	2300      	movs	r3, #0
 801038c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010392:	2300      	movs	r3, #0
 8010394:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010398:	2b00      	cmp	r3, #0
 801039a:	d10a      	bne.n	80103b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801039c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a0:	f383 8811 	msr	BASEPRI, r3
 80103a4:	f3bf 8f6f 	isb	sy
 80103a8:	f3bf 8f4f 	dsb	sy
 80103ac:	623b      	str	r3, [r7, #32]
}
 80103ae:	bf00      	nop
 80103b0:	e7fe      	b.n	80103b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80103b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00a      	beq.n	80103d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80103ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103be:	f383 8811 	msr	BASEPRI, r3
 80103c2:	f3bf 8f6f 	isb	sy
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	61fb      	str	r3, [r7, #28]
}
 80103cc:	bf00      	nop
 80103ce:	e7fe      	b.n	80103ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103d0:	f001 fa44 	bl	801185c <xTaskGetSchedulerState>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d102      	bne.n	80103e0 <xQueueSemaphoreTake+0x60>
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d101      	bne.n	80103e4 <xQueueSemaphoreTake+0x64>
 80103e0:	2301      	movs	r3, #1
 80103e2:	e000      	b.n	80103e6 <xQueueSemaphoreTake+0x66>
 80103e4:	2300      	movs	r3, #0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d10a      	bne.n	8010400 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	61bb      	str	r3, [r7, #24]
}
 80103fc:	bf00      	nop
 80103fe:	e7fe      	b.n	80103fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010400:	f7ff fa10 	bl	800f824 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010408:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801040a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040c:	2b00      	cmp	r3, #0
 801040e:	d024      	beq.n	801045a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	1e5a      	subs	r2, r3, #1
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d104      	bne.n	801042a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010420:	f001 fbc4 	bl	8011bac <pvTaskIncrementMutexHeldCount>
 8010424:	4602      	mov	r2, r0
 8010426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010428:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801042a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00f      	beq.n	8010452 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010434:	3310      	adds	r3, #16
 8010436:	4618      	mov	r0, r3
 8010438:	f001 f850 	bl	80114dc <xTaskRemoveFromEventList>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d007      	beq.n	8010452 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010442:	4b54      	ldr	r3, [pc, #336]	; (8010594 <xQueueSemaphoreTake+0x214>)
 8010444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010448:	601a      	str	r2, [r3, #0]
 801044a:	f3bf 8f4f 	dsb	sy
 801044e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010452:	f7ff fa17 	bl	800f884 <vPortExitCritical>
				return pdPASS;
 8010456:	2301      	movs	r3, #1
 8010458:	e097      	b.n	801058a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d111      	bne.n	8010484 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00a      	beq.n	801047c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046a:	f383 8811 	msr	BASEPRI, r3
 801046e:	f3bf 8f6f 	isb	sy
 8010472:	f3bf 8f4f 	dsb	sy
 8010476:	617b      	str	r3, [r7, #20]
}
 8010478:	bf00      	nop
 801047a:	e7fe      	b.n	801047a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801047c:	f7ff fa02 	bl	800f884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010480:	2300      	movs	r3, #0
 8010482:	e082      	b.n	801058a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010486:	2b00      	cmp	r3, #0
 8010488:	d106      	bne.n	8010498 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801048a:	f107 030c 	add.w	r3, r7, #12
 801048e:	4618      	mov	r0, r3
 8010490:	f001 f886 	bl	80115a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010494:	2301      	movs	r3, #1
 8010496:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010498:	f7ff f9f4 	bl	800f884 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801049c:	f000 fe04 	bl	80110a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104a0:	f7ff f9c0 	bl	800f824 <vPortEnterCritical>
 80104a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104aa:	b25b      	sxtb	r3, r3
 80104ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104b0:	d103      	bne.n	80104ba <xQueueSemaphoreTake+0x13a>
 80104b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b4:	2200      	movs	r2, #0
 80104b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104c0:	b25b      	sxtb	r3, r3
 80104c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104c6:	d103      	bne.n	80104d0 <xQueueSemaphoreTake+0x150>
 80104c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ca:	2200      	movs	r2, #0
 80104cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104d0:	f7ff f9d8 	bl	800f884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80104d4:	463a      	mov	r2, r7
 80104d6:	f107 030c 	add.w	r3, r7, #12
 80104da:	4611      	mov	r1, r2
 80104dc:	4618      	mov	r0, r3
 80104de:	f001 f875 	bl	80115cc <xTaskCheckForTimeOut>
 80104e2:	4603      	mov	r3, r0
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d132      	bne.n	801054e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104ea:	f000 fa2e 	bl	801094a <prvIsQueueEmpty>
 80104ee:	4603      	mov	r3, r0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d026      	beq.n	8010542 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d109      	bne.n	8010510 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80104fc:	f7ff f992 	bl	800f824 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	4618      	mov	r0, r3
 8010506:	f001 f9c7 	bl	8011898 <xTaskPriorityInherit>
 801050a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801050c:	f7ff f9ba 	bl	800f884 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010512:	3324      	adds	r3, #36	; 0x24
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	4611      	mov	r1, r2
 8010518:	4618      	mov	r0, r3
 801051a:	f000 ffbb 	bl	8011494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801051e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010520:	f000 f9c1 	bl	80108a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010524:	f000 fdce 	bl	80110c4 <xTaskResumeAll>
 8010528:	4603      	mov	r3, r0
 801052a:	2b00      	cmp	r3, #0
 801052c:	f47f af68 	bne.w	8010400 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010530:	4b18      	ldr	r3, [pc, #96]	; (8010594 <xQueueSemaphoreTake+0x214>)
 8010532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010536:	601a      	str	r2, [r3, #0]
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	f3bf 8f6f 	isb	sy
 8010540:	e75e      	b.n	8010400 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010544:	f000 f9af 	bl	80108a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010548:	f000 fdbc 	bl	80110c4 <xTaskResumeAll>
 801054c:	e758      	b.n	8010400 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801054e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010550:	f000 f9a9 	bl	80108a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010554:	f000 fdb6 	bl	80110c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801055a:	f000 f9f6 	bl	801094a <prvIsQueueEmpty>
 801055e:	4603      	mov	r3, r0
 8010560:	2b00      	cmp	r3, #0
 8010562:	f43f af4d 	beq.w	8010400 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00d      	beq.n	8010588 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801056c:	f7ff f95a 	bl	800f824 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010572:	f000 f8f0 	bl	8010756 <prvGetDisinheritPriorityAfterTimeout>
 8010576:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801057e:	4618      	mov	r0, r3
 8010580:	f001 fa86 	bl	8011a90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010584:	f7ff f97e 	bl	800f884 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010588:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801058a:	4618      	mov	r0, r3
 801058c:	3738      	adds	r7, #56	; 0x38
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	e000ed04 	.word	0xe000ed04

08010598 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b08e      	sub	sp, #56	; 0x38
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80105a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d10a      	bne.n	80105c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80105ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b2:	f383 8811 	msr	BASEPRI, r3
 80105b6:	f3bf 8f6f 	isb	sy
 80105ba:	f3bf 8f4f 	dsb	sy
 80105be:	623b      	str	r3, [r7, #32]
}
 80105c0:	bf00      	nop
 80105c2:	e7fe      	b.n	80105c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d103      	bne.n	80105d2 <xQueueReceiveFromISR+0x3a>
 80105ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d101      	bne.n	80105d6 <xQueueReceiveFromISR+0x3e>
 80105d2:	2301      	movs	r3, #1
 80105d4:	e000      	b.n	80105d8 <xQueueReceiveFromISR+0x40>
 80105d6:	2300      	movs	r3, #0
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d10a      	bne.n	80105f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80105dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e0:	f383 8811 	msr	BASEPRI, r3
 80105e4:	f3bf 8f6f 	isb	sy
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	61fb      	str	r3, [r7, #28]
}
 80105ee:	bf00      	nop
 80105f0:	e7fe      	b.n	80105f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80105f2:	f7ff f9f9 	bl	800f9e8 <vPortValidateInterruptPriority>
	__asm volatile
 80105f6:	f3ef 8211 	mrs	r2, BASEPRI
 80105fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fe:	f383 8811 	msr	BASEPRI, r3
 8010602:	f3bf 8f6f 	isb	sy
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	61ba      	str	r2, [r7, #24]
 801060c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801060e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010616:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061a:	2b00      	cmp	r3, #0
 801061c:	d02f      	beq.n	801067e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010628:	68b9      	ldr	r1, [r7, #8]
 801062a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801062c:	f000 f915 	bl	801085a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010632:	1e5a      	subs	r2, r3, #1
 8010634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010636:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801063c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010640:	d112      	bne.n	8010668 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d016      	beq.n	8010678 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801064a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064c:	3310      	adds	r3, #16
 801064e:	4618      	mov	r0, r3
 8010650:	f000 ff44 	bl	80114dc <xTaskRemoveFromEventList>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d00e      	beq.n	8010678 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00b      	beq.n	8010678 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2201      	movs	r2, #1
 8010664:	601a      	str	r2, [r3, #0]
 8010666:	e007      	b.n	8010678 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801066c:	3301      	adds	r3, #1
 801066e:	b2db      	uxtb	r3, r3
 8010670:	b25a      	sxtb	r2, r3
 8010672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010678:	2301      	movs	r3, #1
 801067a:	637b      	str	r3, [r7, #52]	; 0x34
 801067c:	e001      	b.n	8010682 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801067e:	2300      	movs	r3, #0
 8010680:	637b      	str	r3, [r7, #52]	; 0x34
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010684:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	f383 8811 	msr	BASEPRI, r3
}
 801068c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801068e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010690:	4618      	mov	r0, r3
 8010692:	3738      	adds	r7, #56	; 0x38
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d10a      	bne.n	80106bc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80106a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	60bb      	str	r3, [r7, #8]
}
 80106b8:	bf00      	nop
 80106ba:	e7fe      	b.n	80106ba <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80106bc:	f7ff f8b2 	bl	800f824 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80106c6:	f7ff f8dd 	bl	800f884 <vPortExitCritical>

	return uxReturn;
 80106ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80106d4:	b480      	push	{r7}
 80106d6:	b087      	sub	sp, #28
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d10a      	bne.n	80106fc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80106e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ea:	f383 8811 	msr	BASEPRI, r3
 80106ee:	f3bf 8f6f 	isb	sy
 80106f2:	f3bf 8f4f 	dsb	sy
 80106f6:	60fb      	str	r3, [r7, #12]
}
 80106f8:	bf00      	nop
 80106fa:	e7fe      	b.n	80106fa <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010700:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010702:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010704:	4618      	mov	r0, r3
 8010706:	371c      	adds	r7, #28
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d10a      	bne.n	8010738 <vQueueDelete+0x28>
	__asm volatile
 8010722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010726:	f383 8811 	msr	BASEPRI, r3
 801072a:	f3bf 8f6f 	isb	sy
 801072e:	f3bf 8f4f 	dsb	sy
 8010732:	60bb      	str	r3, [r7, #8]
}
 8010734:	bf00      	nop
 8010736:	e7fe      	b.n	8010736 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f000 f935 	bl	80109a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010744:	2b00      	cmp	r3, #0
 8010746:	d102      	bne.n	801074e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f7fe fd6d 	bl	800f228 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801074e:	bf00      	nop
 8010750:	3710      	adds	r7, #16
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010756:	b480      	push	{r7}
 8010758:	b085      	sub	sp, #20
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010762:	2b00      	cmp	r3, #0
 8010764:	d006      	beq.n	8010774 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f1c3 0307 	rsb	r3, r3, #7
 8010770:	60fb      	str	r3, [r7, #12]
 8010772:	e001      	b.n	8010778 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010774:	2300      	movs	r3, #0
 8010776:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010778:	68fb      	ldr	r3, [r7, #12]
	}
 801077a:	4618      	mov	r0, r3
 801077c:	3714      	adds	r7, #20
 801077e:	46bd      	mov	sp, r7
 8010780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010784:	4770      	bx	lr

08010786 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b086      	sub	sp, #24
 801078a:	af00      	add	r7, sp, #0
 801078c:	60f8      	str	r0, [r7, #12]
 801078e:	60b9      	str	r1, [r7, #8]
 8010790:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010792:	2300      	movs	r3, #0
 8010794:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801079a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d10d      	bne.n	80107c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d14d      	bne.n	8010848 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	689b      	ldr	r3, [r3, #8]
 80107b0:	4618      	mov	r0, r3
 80107b2:	f001 f8e7 	bl	8011984 <xTaskPriorityDisinherit>
 80107b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2200      	movs	r2, #0
 80107bc:	609a      	str	r2, [r3, #8]
 80107be:	e043      	b.n	8010848 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d119      	bne.n	80107fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	6858      	ldr	r0, [r3, #4]
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ce:	461a      	mov	r2, r3
 80107d0:	68b9      	ldr	r1, [r7, #8]
 80107d2:	f00f f89b 	bl	801f90c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	685a      	ldr	r2, [r3, #4]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107de:	441a      	add	r2, r3
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	685a      	ldr	r2, [r3, #4]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d32b      	bcc.n	8010848 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	605a      	str	r2, [r3, #4]
 80107f8:	e026      	b.n	8010848 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	68d8      	ldr	r0, [r3, #12]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010802:	461a      	mov	r2, r3
 8010804:	68b9      	ldr	r1, [r7, #8]
 8010806:	f00f f881 	bl	801f90c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	68da      	ldr	r2, [r3, #12]
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010812:	425b      	negs	r3, r3
 8010814:	441a      	add	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	68da      	ldr	r2, [r3, #12]
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	429a      	cmp	r2, r3
 8010824:	d207      	bcs.n	8010836 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	689a      	ldr	r2, [r3, #8]
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082e:	425b      	negs	r3, r3
 8010830:	441a      	add	r2, r3
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b02      	cmp	r3, #2
 801083a:	d105      	bne.n	8010848 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d002      	beq.n	8010848 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	3b01      	subs	r3, #1
 8010846:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	1c5a      	adds	r2, r3, #1
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010850:	697b      	ldr	r3, [r7, #20]
}
 8010852:	4618      	mov	r0, r3
 8010854:	3718      	adds	r7, #24
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b082      	sub	sp, #8
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
 8010862:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010868:	2b00      	cmp	r3, #0
 801086a:	d018      	beq.n	801089e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	68da      	ldr	r2, [r3, #12]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010874:	441a      	add	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	68da      	ldr	r2, [r3, #12]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	689b      	ldr	r3, [r3, #8]
 8010882:	429a      	cmp	r2, r3
 8010884:	d303      	bcc.n	801088e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	68d9      	ldr	r1, [r3, #12]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010896:	461a      	mov	r2, r3
 8010898:	6838      	ldr	r0, [r7, #0]
 801089a:	f00f f837 	bl	801f90c <memcpy>
	}
}
 801089e:	bf00      	nop
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b084      	sub	sp, #16
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80108ae:	f7fe ffb9 	bl	800f824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108ba:	e011      	b.n	80108e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d012      	beq.n	80108ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	3324      	adds	r3, #36	; 0x24
 80108c8:	4618      	mov	r0, r3
 80108ca:	f000 fe07 	bl	80114dc <xTaskRemoveFromEventList>
 80108ce:	4603      	mov	r3, r0
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d001      	beq.n	80108d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80108d4:	f000 fedc 	bl	8011690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80108d8:	7bfb      	ldrb	r3, [r7, #15]
 80108da:	3b01      	subs	r3, #1
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	dce9      	bgt.n	80108bc <prvUnlockQueue+0x16>
 80108e8:	e000      	b.n	80108ec <prvUnlockQueue+0x46>
					break;
 80108ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	22ff      	movs	r2, #255	; 0xff
 80108f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80108f4:	f7fe ffc6 	bl	800f884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80108f8:	f7fe ff94 	bl	800f824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010902:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010904:	e011      	b.n	801092a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	691b      	ldr	r3, [r3, #16]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d012      	beq.n	8010934 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3310      	adds	r3, #16
 8010912:	4618      	mov	r0, r3
 8010914:	f000 fde2 	bl	80114dc <xTaskRemoveFromEventList>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d001      	beq.n	8010922 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801091e:	f000 feb7 	bl	8011690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010922:	7bbb      	ldrb	r3, [r7, #14]
 8010924:	3b01      	subs	r3, #1
 8010926:	b2db      	uxtb	r3, r3
 8010928:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801092a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801092e:	2b00      	cmp	r3, #0
 8010930:	dce9      	bgt.n	8010906 <prvUnlockQueue+0x60>
 8010932:	e000      	b.n	8010936 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010934:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	22ff      	movs	r2, #255	; 0xff
 801093a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801093e:	f7fe ffa1 	bl	800f884 <vPortExitCritical>
}
 8010942:	bf00      	nop
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b084      	sub	sp, #16
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010952:	f7fe ff67 	bl	800f824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801095a:	2b00      	cmp	r3, #0
 801095c:	d102      	bne.n	8010964 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801095e:	2301      	movs	r3, #1
 8010960:	60fb      	str	r3, [r7, #12]
 8010962:	e001      	b.n	8010968 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010964:	2300      	movs	r3, #0
 8010966:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010968:	f7fe ff8c 	bl	800f884 <vPortExitCritical>

	return xReturn;
 801096c:	68fb      	ldr	r3, [r7, #12]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b084      	sub	sp, #16
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801097e:	f7fe ff51 	bl	800f824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801098a:	429a      	cmp	r2, r3
 801098c:	d102      	bne.n	8010994 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801098e:	2301      	movs	r3, #1
 8010990:	60fb      	str	r3, [r7, #12]
 8010992:	e001      	b.n	8010998 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010994:	2300      	movs	r3, #0
 8010996:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010998:	f7fe ff74 	bl	800f884 <vPortExitCritical>

	return xReturn;
 801099c:	68fb      	ldr	r3, [r7, #12]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
	...

080109a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80109a8:	b480      	push	{r7}
 80109aa:	b085      	sub	sp, #20
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109b0:	2300      	movs	r3, #0
 80109b2:	60fb      	str	r3, [r7, #12]
 80109b4:	e016      	b.n	80109e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80109b6:	4a10      	ldr	r2, [pc, #64]	; (80109f8 <vQueueUnregisterQueue+0x50>)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	00db      	lsls	r3, r3, #3
 80109bc:	4413      	add	r3, r2
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d10b      	bne.n	80109de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80109c6:	4a0c      	ldr	r2, [pc, #48]	; (80109f8 <vQueueUnregisterQueue+0x50>)
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2100      	movs	r1, #0
 80109cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80109d0:	4a09      	ldr	r2, [pc, #36]	; (80109f8 <vQueueUnregisterQueue+0x50>)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	00db      	lsls	r3, r3, #3
 80109d6:	4413      	add	r3, r2
 80109d8:	2200      	movs	r2, #0
 80109da:	605a      	str	r2, [r3, #4]
				break;
 80109dc:	e006      	b.n	80109ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	3301      	adds	r3, #1
 80109e2:	60fb      	str	r3, [r7, #12]
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2b07      	cmp	r3, #7
 80109e8:	d9e5      	bls.n	80109b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80109ea:	bf00      	nop
 80109ec:	bf00      	nop
 80109ee:	3714      	adds	r7, #20
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr
 80109f8:	240092e8 	.word	0x240092e8

080109fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b08e      	sub	sp, #56	; 0x38
 8010a00:	af04      	add	r7, sp, #16
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
 8010a08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d10a      	bne.n	8010a26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	f383 8811 	msr	BASEPRI, r3
 8010a18:	f3bf 8f6f 	isb	sy
 8010a1c:	f3bf 8f4f 	dsb	sy
 8010a20:	623b      	str	r3, [r7, #32]
}
 8010a22:	bf00      	nop
 8010a24:	e7fe      	b.n	8010a24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d10a      	bne.n	8010a42 <xTaskCreateStatic+0x46>
	__asm volatile
 8010a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a30:	f383 8811 	msr	BASEPRI, r3
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	61fb      	str	r3, [r7, #28]
}
 8010a3e:	bf00      	nop
 8010a40:	e7fe      	b.n	8010a40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010a42:	23b4      	movs	r3, #180	; 0xb4
 8010a44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	2bb4      	cmp	r3, #180	; 0xb4
 8010a4a:	d00a      	beq.n	8010a62 <xTaskCreateStatic+0x66>
	__asm volatile
 8010a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a50:	f383 8811 	msr	BASEPRI, r3
 8010a54:	f3bf 8f6f 	isb	sy
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	61bb      	str	r3, [r7, #24]
}
 8010a5e:	bf00      	nop
 8010a60:	e7fe      	b.n	8010a60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010a62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d01e      	beq.n	8010aa8 <xTaskCreateStatic+0xac>
 8010a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d01b      	beq.n	8010aa8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7c:	2202      	movs	r2, #2
 8010a7e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010a82:	2300      	movs	r3, #0
 8010a84:	9303      	str	r3, [sp, #12]
 8010a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a88:	9302      	str	r3, [sp, #8]
 8010a8a:	f107 0314 	add.w	r3, r7, #20
 8010a8e:	9301      	str	r3, [sp, #4]
 8010a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	68b9      	ldr	r1, [r7, #8]
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f000 f850 	bl	8010b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aa2:	f000 f8eb 	bl	8010c7c <prvAddNewTaskToReadyList>
 8010aa6:	e001      	b.n	8010aac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010aac:	697b      	ldr	r3, [r7, #20]
	}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3728      	adds	r7, #40	; 0x28
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b08c      	sub	sp, #48	; 0x30
 8010aba:	af04      	add	r7, sp, #16
 8010abc:	60f8      	str	r0, [r7, #12]
 8010abe:	60b9      	str	r1, [r7, #8]
 8010ac0:	603b      	str	r3, [r7, #0]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ac6:	88fb      	ldrh	r3, [r7, #6]
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe fae0 	bl	800f090 <pvPortMalloc>
 8010ad0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00e      	beq.n	8010af6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010ad8:	20b4      	movs	r0, #180	; 0xb4
 8010ada:	f7fe fad9 	bl	800f090 <pvPortMalloc>
 8010ade:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d003      	beq.n	8010aee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	697a      	ldr	r2, [r7, #20]
 8010aea:	631a      	str	r2, [r3, #48]	; 0x30
 8010aec:	e005      	b.n	8010afa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010aee:	6978      	ldr	r0, [r7, #20]
 8010af0:	f7fe fb9a 	bl	800f228 <vPortFree>
 8010af4:	e001      	b.n	8010afa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010af6:	2300      	movs	r3, #0
 8010af8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d017      	beq.n	8010b30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	2200      	movs	r2, #0
 8010b04:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b08:	88fa      	ldrh	r2, [r7, #6]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	9303      	str	r3, [sp, #12]
 8010b0e:	69fb      	ldr	r3, [r7, #28]
 8010b10:	9302      	str	r3, [sp, #8]
 8010b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b14:	9301      	str	r3, [sp, #4]
 8010b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b18:	9300      	str	r3, [sp, #0]
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	68b9      	ldr	r1, [r7, #8]
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f000 f80e 	bl	8010b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b24:	69f8      	ldr	r0, [r7, #28]
 8010b26:	f000 f8a9 	bl	8010c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	61bb      	str	r3, [r7, #24]
 8010b2e:	e002      	b.n	8010b36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010b36:	69bb      	ldr	r3, [r7, #24]
	}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3720      	adds	r7, #32
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b088      	sub	sp, #32
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
 8010b4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b52:	6879      	ldr	r1, [r7, #4]
 8010b54:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010b58:	440b      	add	r3, r1
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	4413      	add	r3, r2
 8010b5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	f023 0307 	bic.w	r3, r3, #7
 8010b66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	f003 0307 	and.w	r3, r3, #7
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d00a      	beq.n	8010b88 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b76:	f383 8811 	msr	BASEPRI, r3
 8010b7a:	f3bf 8f6f 	isb	sy
 8010b7e:	f3bf 8f4f 	dsb	sy
 8010b82:	617b      	str	r3, [r7, #20]
}
 8010b84:	bf00      	nop
 8010b86:	e7fe      	b.n	8010b86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d01f      	beq.n	8010bce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b8e:	2300      	movs	r3, #0
 8010b90:	61fb      	str	r3, [r7, #28]
 8010b92:	e012      	b.n	8010bba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010b94:	68ba      	ldr	r2, [r7, #8]
 8010b96:	69fb      	ldr	r3, [r7, #28]
 8010b98:	4413      	add	r3, r2
 8010b9a:	7819      	ldrb	r1, [r3, #0]
 8010b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	3334      	adds	r3, #52	; 0x34
 8010ba4:	460a      	mov	r2, r1
 8010ba6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	4413      	add	r3, r2
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d006      	beq.n	8010bc2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	61fb      	str	r3, [r7, #28]
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	2b0f      	cmp	r3, #15
 8010bbe:	d9e9      	bls.n	8010b94 <prvInitialiseNewTask+0x54>
 8010bc0:	e000      	b.n	8010bc4 <prvInitialiseNewTask+0x84>
			{
				break;
 8010bc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010bcc:	e003      	b.n	8010bd6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd8:	2b06      	cmp	r3, #6
 8010bda:	d901      	bls.n	8010be0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010bdc:	2306      	movs	r3, #6
 8010bde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010be4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bee:	2200      	movs	r2, #0
 8010bf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf4:	3304      	adds	r3, #4
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7fe fc54 	bl	800f4a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfe:	3318      	adds	r3, #24
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fe fc4f 	bl	800f4a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0e:	f1c3 0207 	rsb	r2, r3, #7
 8010c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1e:	2200      	movs	r2, #0
 8010c20:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c26:	2200      	movs	r2, #0
 8010c28:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2e:	334c      	adds	r3, #76	; 0x4c
 8010c30:	2260      	movs	r2, #96	; 0x60
 8010c32:	2100      	movs	r1, #0
 8010c34:	4618      	mov	r0, r3
 8010c36:	f00e fe91 	bl	801f95c <memset>
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3c:	4a0c      	ldr	r2, [pc, #48]	; (8010c70 <prvInitialiseNewTask+0x130>)
 8010c3e:	651a      	str	r2, [r3, #80]	; 0x50
 8010c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c42:	4a0c      	ldr	r2, [pc, #48]	; (8010c74 <prvInitialiseNewTask+0x134>)
 8010c44:	655a      	str	r2, [r3, #84]	; 0x54
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	4a0b      	ldr	r2, [pc, #44]	; (8010c78 <prvInitialiseNewTask+0x138>)
 8010c4a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010c4c:	683a      	ldr	r2, [r7, #0]
 8010c4e:	68f9      	ldr	r1, [r7, #12]
 8010c50:	69b8      	ldr	r0, [r7, #24]
 8010c52:	f7fe fcbb 	bl	800f5cc <pxPortInitialiseStack>
 8010c56:	4602      	mov	r2, r0
 8010c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d002      	beq.n	8010c68 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c68:	bf00      	nop
 8010c6a:	3720      	adds	r7, #32
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	08024c90 	.word	0x08024c90
 8010c74:	08024cb0 	.word	0x08024cb0
 8010c78:	08024c70 	.word	0x08024c70

08010c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010c84:	f7fe fdce 	bl	800f824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010c88:	4b2a      	ldr	r3, [pc, #168]	; (8010d34 <prvAddNewTaskToReadyList+0xb8>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	4a29      	ldr	r2, [pc, #164]	; (8010d34 <prvAddNewTaskToReadyList+0xb8>)
 8010c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010c92:	4b29      	ldr	r3, [pc, #164]	; (8010d38 <prvAddNewTaskToReadyList+0xbc>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d109      	bne.n	8010cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010c9a:	4a27      	ldr	r2, [pc, #156]	; (8010d38 <prvAddNewTaskToReadyList+0xbc>)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ca0:	4b24      	ldr	r3, [pc, #144]	; (8010d34 <prvAddNewTaskToReadyList+0xb8>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d110      	bne.n	8010cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ca8:	f000 fd16 	bl	80116d8 <prvInitialiseTaskLists>
 8010cac:	e00d      	b.n	8010cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010cae:	4b23      	ldr	r3, [pc, #140]	; (8010d3c <prvAddNewTaskToReadyList+0xc0>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d109      	bne.n	8010cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010cb6:	4b20      	ldr	r3, [pc, #128]	; (8010d38 <prvAddNewTaskToReadyList+0xbc>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d802      	bhi.n	8010cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010cc4:	4a1c      	ldr	r2, [pc, #112]	; (8010d38 <prvAddNewTaskToReadyList+0xbc>)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010cca:	4b1d      	ldr	r3, [pc, #116]	; (8010d40 <prvAddNewTaskToReadyList+0xc4>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	3301      	adds	r3, #1
 8010cd0:	4a1b      	ldr	r2, [pc, #108]	; (8010d40 <prvAddNewTaskToReadyList+0xc4>)
 8010cd2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd8:	2201      	movs	r2, #1
 8010cda:	409a      	lsls	r2, r3
 8010cdc:	4b19      	ldr	r3, [pc, #100]	; (8010d44 <prvAddNewTaskToReadyList+0xc8>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4313      	orrs	r3, r2
 8010ce2:	4a18      	ldr	r2, [pc, #96]	; (8010d44 <prvAddNewTaskToReadyList+0xc8>)
 8010ce4:	6013      	str	r3, [r2, #0]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cea:	4613      	mov	r3, r2
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	4a15      	ldr	r2, [pc, #84]	; (8010d48 <prvAddNewTaskToReadyList+0xcc>)
 8010cf4:	441a      	add	r2, r3
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	3304      	adds	r3, #4
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	4610      	mov	r0, r2
 8010cfe:	f7fe fbde 	bl	800f4be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d02:	f7fe fdbf 	bl	800f884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d06:	4b0d      	ldr	r3, [pc, #52]	; (8010d3c <prvAddNewTaskToReadyList+0xc0>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00e      	beq.n	8010d2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d0e:	4b0a      	ldr	r3, [pc, #40]	; (8010d38 <prvAddNewTaskToReadyList+0xbc>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d207      	bcs.n	8010d2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d1c:	4b0b      	ldr	r3, [pc, #44]	; (8010d4c <prvAddNewTaskToReadyList+0xd0>)
 8010d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d22:	601a      	str	r2, [r3, #0]
 8010d24:	f3bf 8f4f 	dsb	sy
 8010d28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d2c:	bf00      	nop
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	24009428 	.word	0x24009428
 8010d38:	24009328 	.word	0x24009328
 8010d3c:	24009434 	.word	0x24009434
 8010d40:	24009444 	.word	0x24009444
 8010d44:	24009430 	.word	0x24009430
 8010d48:	2400932c 	.word	0x2400932c
 8010d4c:	e000ed04 	.word	0xe000ed04

08010d50 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010d58:	f7fe fd64 	bl	800f824 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d102      	bne.n	8010d68 <vTaskDelete+0x18>
 8010d62:	4b39      	ldr	r3, [pc, #228]	; (8010e48 <vTaskDelete+0xf8>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	e000      	b.n	8010d6a <vTaskDelete+0x1a>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fe fc01 	bl	800f578 <uxListRemove>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d115      	bne.n	8010da8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d80:	4932      	ldr	r1, [pc, #200]	; (8010e4c <vTaskDelete+0xfc>)
 8010d82:	4613      	mov	r3, r2
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4413      	add	r3, r2
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	440b      	add	r3, r1
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d10a      	bne.n	8010da8 <vTaskDelete+0x58>
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d96:	2201      	movs	r2, #1
 8010d98:	fa02 f303 	lsl.w	r3, r2, r3
 8010d9c:	43da      	mvns	r2, r3
 8010d9e:	4b2c      	ldr	r3, [pc, #176]	; (8010e50 <vTaskDelete+0x100>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	4013      	ands	r3, r2
 8010da4:	4a2a      	ldr	r2, [pc, #168]	; (8010e50 <vTaskDelete+0x100>)
 8010da6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d004      	beq.n	8010dba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	3318      	adds	r3, #24
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fe fbdf 	bl	800f578 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010dba:	4b26      	ldr	r3, [pc, #152]	; (8010e54 <vTaskDelete+0x104>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	4a24      	ldr	r2, [pc, #144]	; (8010e54 <vTaskDelete+0x104>)
 8010dc2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010dc4:	4b20      	ldr	r3, [pc, #128]	; (8010e48 <vTaskDelete+0xf8>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d10b      	bne.n	8010de6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	4820      	ldr	r0, [pc, #128]	; (8010e58 <vTaskDelete+0x108>)
 8010dd6:	f7fe fb72 	bl	800f4be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010dda:	4b20      	ldr	r3, [pc, #128]	; (8010e5c <vTaskDelete+0x10c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	3301      	adds	r3, #1
 8010de0:	4a1e      	ldr	r2, [pc, #120]	; (8010e5c <vTaskDelete+0x10c>)
 8010de2:	6013      	str	r3, [r2, #0]
 8010de4:	e009      	b.n	8010dfa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010de6:	4b1e      	ldr	r3, [pc, #120]	; (8010e60 <vTaskDelete+0x110>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	3b01      	subs	r3, #1
 8010dec:	4a1c      	ldr	r2, [pc, #112]	; (8010e60 <vTaskDelete+0x110>)
 8010dee:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f000 fcdf 	bl	80117b4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010df6:	f000 fd11 	bl	801181c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8010dfa:	f7fe fd43 	bl	800f884 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010dfe:	4b19      	ldr	r3, [pc, #100]	; (8010e64 <vTaskDelete+0x114>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d01b      	beq.n	8010e3e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8010e06:	4b10      	ldr	r3, [pc, #64]	; (8010e48 <vTaskDelete+0xf8>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	68fa      	ldr	r2, [r7, #12]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d116      	bne.n	8010e3e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010e10:	4b15      	ldr	r3, [pc, #84]	; (8010e68 <vTaskDelete+0x118>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d00a      	beq.n	8010e2e <vTaskDelete+0xde>
	__asm volatile
 8010e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1c:	f383 8811 	msr	BASEPRI, r3
 8010e20:	f3bf 8f6f 	isb	sy
 8010e24:	f3bf 8f4f 	dsb	sy
 8010e28:	60bb      	str	r3, [r7, #8]
}
 8010e2a:	bf00      	nop
 8010e2c:	e7fe      	b.n	8010e2c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8010e2e:	4b0f      	ldr	r3, [pc, #60]	; (8010e6c <vTaskDelete+0x11c>)
 8010e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010e3e:	bf00      	nop
 8010e40:	3710      	adds	r7, #16
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	24009328 	.word	0x24009328
 8010e4c:	2400932c 	.word	0x2400932c
 8010e50:	24009430 	.word	0x24009430
 8010e54:	24009444 	.word	0x24009444
 8010e58:	240093fc 	.word	0x240093fc
 8010e5c:	24009410 	.word	0x24009410
 8010e60:	24009428 	.word	0x24009428
 8010e64:	24009434 	.word	0x24009434
 8010e68:	24009450 	.word	0x24009450
 8010e6c:	e000ed04 	.word	0xe000ed04

08010e70 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b08a      	sub	sp, #40	; 0x28
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d10a      	bne.n	8010e9a <vTaskDelayUntil+0x2a>
	__asm volatile
 8010e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e88:	f383 8811 	msr	BASEPRI, r3
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f3bf 8f4f 	dsb	sy
 8010e94:	617b      	str	r3, [r7, #20]
}
 8010e96:	bf00      	nop
 8010e98:	e7fe      	b.n	8010e98 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d10a      	bne.n	8010eb6 <vTaskDelayUntil+0x46>
	__asm volatile
 8010ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea4:	f383 8811 	msr	BASEPRI, r3
 8010ea8:	f3bf 8f6f 	isb	sy
 8010eac:	f3bf 8f4f 	dsb	sy
 8010eb0:	613b      	str	r3, [r7, #16]
}
 8010eb2:	bf00      	nop
 8010eb4:	e7fe      	b.n	8010eb4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8010eb6:	4b2a      	ldr	r3, [pc, #168]	; (8010f60 <vTaskDelayUntil+0xf0>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d00a      	beq.n	8010ed4 <vTaskDelayUntil+0x64>
	__asm volatile
 8010ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec2:	f383 8811 	msr	BASEPRI, r3
 8010ec6:	f3bf 8f6f 	isb	sy
 8010eca:	f3bf 8f4f 	dsb	sy
 8010ece:	60fb      	str	r3, [r7, #12]
}
 8010ed0:	bf00      	nop
 8010ed2:	e7fe      	b.n	8010ed2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8010ed4:	f000 f8e8 	bl	80110a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010ed8:	4b22      	ldr	r3, [pc, #136]	; (8010f64 <vTaskDelayUntil+0xf4>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	683a      	ldr	r2, [r7, #0]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	6a3a      	ldr	r2, [r7, #32]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d20b      	bcs.n	8010f0a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	69fa      	ldr	r2, [r7, #28]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d211      	bcs.n	8010f20 <vTaskDelayUntil+0xb0>
 8010efc:	69fa      	ldr	r2, [r7, #28]
 8010efe:	6a3b      	ldr	r3, [r7, #32]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d90d      	bls.n	8010f20 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8010f04:	2301      	movs	r3, #1
 8010f06:	627b      	str	r3, [r7, #36]	; 0x24
 8010f08:	e00a      	b.n	8010f20 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	69fa      	ldr	r2, [r7, #28]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d303      	bcc.n	8010f1c <vTaskDelayUntil+0xac>
 8010f14:	69fa      	ldr	r2, [r7, #28]
 8010f16:	6a3b      	ldr	r3, [r7, #32]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d901      	bls.n	8010f20 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	69fa      	ldr	r2, [r7, #28]
 8010f24:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d006      	beq.n	8010f3a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010f2c:	69fa      	ldr	r2, [r7, #28]
 8010f2e:	6a3b      	ldr	r3, [r7, #32]
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	2100      	movs	r1, #0
 8010f34:	4618      	mov	r0, r3
 8010f36:	f000 fe4d 	bl	8011bd4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010f3a:	f000 f8c3 	bl	80110c4 <xTaskResumeAll>
 8010f3e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d107      	bne.n	8010f56 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8010f46:	4b08      	ldr	r3, [pc, #32]	; (8010f68 <vTaskDelayUntil+0xf8>)
 8010f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f4c:	601a      	str	r2, [r3, #0]
 8010f4e:	f3bf 8f4f 	dsb	sy
 8010f52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010f56:	bf00      	nop
 8010f58:	3728      	adds	r7, #40	; 0x28
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	24009450 	.word	0x24009450
 8010f64:	2400942c 	.word	0x2400942c
 8010f68:	e000ed04 	.word	0xe000ed04

08010f6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010f74:	2300      	movs	r3, #0
 8010f76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d017      	beq.n	8010fae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010f7e:	4b13      	ldr	r3, [pc, #76]	; (8010fcc <vTaskDelay+0x60>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d00a      	beq.n	8010f9c <vTaskDelay+0x30>
	__asm volatile
 8010f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8a:	f383 8811 	msr	BASEPRI, r3
 8010f8e:	f3bf 8f6f 	isb	sy
 8010f92:	f3bf 8f4f 	dsb	sy
 8010f96:	60bb      	str	r3, [r7, #8]
}
 8010f98:	bf00      	nop
 8010f9a:	e7fe      	b.n	8010f9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010f9c:	f000 f884 	bl	80110a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fa0:	2100      	movs	r1, #0
 8010fa2:	6878      	ldr	r0, [r7, #4]
 8010fa4:	f000 fe16 	bl	8011bd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fa8:	f000 f88c 	bl	80110c4 <xTaskResumeAll>
 8010fac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d107      	bne.n	8010fc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010fb4:	4b06      	ldr	r3, [pc, #24]	; (8010fd0 <vTaskDelay+0x64>)
 8010fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fba:	601a      	str	r2, [r3, #0]
 8010fbc:	f3bf 8f4f 	dsb	sy
 8010fc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010fc4:	bf00      	nop
 8010fc6:	3710      	adds	r7, #16
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	24009450 	.word	0x24009450
 8010fd0:	e000ed04 	.word	0xe000ed04

08010fd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08a      	sub	sp, #40	; 0x28
 8010fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010fe2:	463a      	mov	r2, r7
 8010fe4:	1d39      	adds	r1, r7, #4
 8010fe6:	f107 0308 	add.w	r3, r7, #8
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7ef fde8 	bl	8000bc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	9202      	str	r2, [sp, #8]
 8010ff8:	9301      	str	r3, [sp, #4]
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	2300      	movs	r3, #0
 8011000:	460a      	mov	r2, r1
 8011002:	4921      	ldr	r1, [pc, #132]	; (8011088 <vTaskStartScheduler+0xb4>)
 8011004:	4821      	ldr	r0, [pc, #132]	; (801108c <vTaskStartScheduler+0xb8>)
 8011006:	f7ff fcf9 	bl	80109fc <xTaskCreateStatic>
 801100a:	4603      	mov	r3, r0
 801100c:	4a20      	ldr	r2, [pc, #128]	; (8011090 <vTaskStartScheduler+0xbc>)
 801100e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011010:	4b1f      	ldr	r3, [pc, #124]	; (8011090 <vTaskStartScheduler+0xbc>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d002      	beq.n	801101e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011018:	2301      	movs	r3, #1
 801101a:	617b      	str	r3, [r7, #20]
 801101c:	e001      	b.n	8011022 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801101e:	2300      	movs	r3, #0
 8011020:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	2b01      	cmp	r3, #1
 8011026:	d11b      	bne.n	8011060 <vTaskStartScheduler+0x8c>
	__asm volatile
 8011028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102c:	f383 8811 	msr	BASEPRI, r3
 8011030:	f3bf 8f6f 	isb	sy
 8011034:	f3bf 8f4f 	dsb	sy
 8011038:	613b      	str	r3, [r7, #16]
}
 801103a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801103c:	4b15      	ldr	r3, [pc, #84]	; (8011094 <vTaskStartScheduler+0xc0>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	334c      	adds	r3, #76	; 0x4c
 8011042:	4a15      	ldr	r2, [pc, #84]	; (8011098 <vTaskStartScheduler+0xc4>)
 8011044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011046:	4b15      	ldr	r3, [pc, #84]	; (801109c <vTaskStartScheduler+0xc8>)
 8011048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801104c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801104e:	4b14      	ldr	r3, [pc, #80]	; (80110a0 <vTaskStartScheduler+0xcc>)
 8011050:	2201      	movs	r2, #1
 8011052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011054:	4b13      	ldr	r3, [pc, #76]	; (80110a4 <vTaskStartScheduler+0xd0>)
 8011056:	2200      	movs	r2, #0
 8011058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801105a:	f7fe fb41 	bl	800f6e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801105e:	e00e      	b.n	801107e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011066:	d10a      	bne.n	801107e <vTaskStartScheduler+0xaa>
	__asm volatile
 8011068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	60fb      	str	r3, [r7, #12]
}
 801107a:	bf00      	nop
 801107c:	e7fe      	b.n	801107c <vTaskStartScheduler+0xa8>
}
 801107e:	bf00      	nop
 8011080:	3718      	adds	r7, #24
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	080210d4 	.word	0x080210d4
 801108c:	080116a9 	.word	0x080116a9
 8011090:	2400944c 	.word	0x2400944c
 8011094:	24009328 	.word	0x24009328
 8011098:	24000034 	.word	0x24000034
 801109c:	24009448 	.word	0x24009448
 80110a0:	24009434 	.word	0x24009434
 80110a4:	2400942c 	.word	0x2400942c

080110a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110a8:	b480      	push	{r7}
 80110aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110ac:	4b04      	ldr	r3, [pc, #16]	; (80110c0 <vTaskSuspendAll+0x18>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	3301      	adds	r3, #1
 80110b2:	4a03      	ldr	r2, [pc, #12]	; (80110c0 <vTaskSuspendAll+0x18>)
 80110b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110b6:	bf00      	nop
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr
 80110c0:	24009450 	.word	0x24009450

080110c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80110ca:	2300      	movs	r3, #0
 80110cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80110ce:	2300      	movs	r3, #0
 80110d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80110d2:	4b41      	ldr	r3, [pc, #260]	; (80111d8 <xTaskResumeAll+0x114>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d10a      	bne.n	80110f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80110da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110de:	f383 8811 	msr	BASEPRI, r3
 80110e2:	f3bf 8f6f 	isb	sy
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	603b      	str	r3, [r7, #0]
}
 80110ec:	bf00      	nop
 80110ee:	e7fe      	b.n	80110ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80110f0:	f7fe fb98 	bl	800f824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80110f4:	4b38      	ldr	r3, [pc, #224]	; (80111d8 <xTaskResumeAll+0x114>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	3b01      	subs	r3, #1
 80110fa:	4a37      	ldr	r2, [pc, #220]	; (80111d8 <xTaskResumeAll+0x114>)
 80110fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110fe:	4b36      	ldr	r3, [pc, #216]	; (80111d8 <xTaskResumeAll+0x114>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d161      	bne.n	80111ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011106:	4b35      	ldr	r3, [pc, #212]	; (80111dc <xTaskResumeAll+0x118>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d05d      	beq.n	80111ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801110e:	e02e      	b.n	801116e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011110:	4b33      	ldr	r3, [pc, #204]	; (80111e0 <xTaskResumeAll+0x11c>)
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	3318      	adds	r3, #24
 801111c:	4618      	mov	r0, r3
 801111e:	f7fe fa2b 	bl	800f578 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	3304      	adds	r3, #4
 8011126:	4618      	mov	r0, r3
 8011128:	f7fe fa26 	bl	800f578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011130:	2201      	movs	r2, #1
 8011132:	409a      	lsls	r2, r3
 8011134:	4b2b      	ldr	r3, [pc, #172]	; (80111e4 <xTaskResumeAll+0x120>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	4313      	orrs	r3, r2
 801113a:	4a2a      	ldr	r2, [pc, #168]	; (80111e4 <xTaskResumeAll+0x120>)
 801113c:	6013      	str	r3, [r2, #0]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011142:	4613      	mov	r3, r2
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	4413      	add	r3, r2
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	4a27      	ldr	r2, [pc, #156]	; (80111e8 <xTaskResumeAll+0x124>)
 801114c:	441a      	add	r2, r3
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	3304      	adds	r3, #4
 8011152:	4619      	mov	r1, r3
 8011154:	4610      	mov	r0, r2
 8011156:	f7fe f9b2 	bl	800f4be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801115e:	4b23      	ldr	r3, [pc, #140]	; (80111ec <xTaskResumeAll+0x128>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011164:	429a      	cmp	r2, r3
 8011166:	d302      	bcc.n	801116e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011168:	4b21      	ldr	r3, [pc, #132]	; (80111f0 <xTaskResumeAll+0x12c>)
 801116a:	2201      	movs	r2, #1
 801116c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801116e:	4b1c      	ldr	r3, [pc, #112]	; (80111e0 <xTaskResumeAll+0x11c>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1cc      	bne.n	8011110 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d001      	beq.n	8011180 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801117c:	f000 fb4e 	bl	801181c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011180:	4b1c      	ldr	r3, [pc, #112]	; (80111f4 <xTaskResumeAll+0x130>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d010      	beq.n	80111ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801118c:	f000 f858 	bl	8011240 <xTaskIncrementTick>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d002      	beq.n	801119c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011196:	4b16      	ldr	r3, [pc, #88]	; (80111f0 <xTaskResumeAll+0x12c>)
 8011198:	2201      	movs	r2, #1
 801119a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	3b01      	subs	r3, #1
 80111a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1f1      	bne.n	801118c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80111a8:	4b12      	ldr	r3, [pc, #72]	; (80111f4 <xTaskResumeAll+0x130>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111ae:	4b10      	ldr	r3, [pc, #64]	; (80111f0 <xTaskResumeAll+0x12c>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d009      	beq.n	80111ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111b6:	2301      	movs	r3, #1
 80111b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111ba:	4b0f      	ldr	r3, [pc, #60]	; (80111f8 <xTaskResumeAll+0x134>)
 80111bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111c0:	601a      	str	r2, [r3, #0]
 80111c2:	f3bf 8f4f 	dsb	sy
 80111c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111ca:	f7fe fb5b 	bl	800f884 <vPortExitCritical>

	return xAlreadyYielded;
 80111ce:	68bb      	ldr	r3, [r7, #8]
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3710      	adds	r7, #16
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	24009450 	.word	0x24009450
 80111dc:	24009428 	.word	0x24009428
 80111e0:	240093e8 	.word	0x240093e8
 80111e4:	24009430 	.word	0x24009430
 80111e8:	2400932c 	.word	0x2400932c
 80111ec:	24009328 	.word	0x24009328
 80111f0:	2400943c 	.word	0x2400943c
 80111f4:	24009438 	.word	0x24009438
 80111f8:	e000ed04 	.word	0xe000ed04

080111fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011202:	4b05      	ldr	r3, [pc, #20]	; (8011218 <xTaskGetTickCount+0x1c>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011208:	687b      	ldr	r3, [r7, #4]
}
 801120a:	4618      	mov	r0, r3
 801120c:	370c      	adds	r7, #12
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop
 8011218:	2400942c 	.word	0x2400942c

0801121c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011222:	f7fe fbe1 	bl	800f9e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011226:	2300      	movs	r3, #0
 8011228:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801122a:	4b04      	ldr	r3, [pc, #16]	; (801123c <xTaskGetTickCountFromISR+0x20>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011230:	683b      	ldr	r3, [r7, #0]
}
 8011232:	4618      	mov	r0, r3
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	2400942c 	.word	0x2400942c

08011240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b086      	sub	sp, #24
 8011244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011246:	2300      	movs	r3, #0
 8011248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801124a:	4b4e      	ldr	r3, [pc, #312]	; (8011384 <xTaskIncrementTick+0x144>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	f040 808e 	bne.w	8011370 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011254:	4b4c      	ldr	r3, [pc, #304]	; (8011388 <xTaskIncrementTick+0x148>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	3301      	adds	r3, #1
 801125a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801125c:	4a4a      	ldr	r2, [pc, #296]	; (8011388 <xTaskIncrementTick+0x148>)
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d120      	bne.n	80112aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011268:	4b48      	ldr	r3, [pc, #288]	; (801138c <xTaskIncrementTick+0x14c>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d00a      	beq.n	8011288 <xTaskIncrementTick+0x48>
	__asm volatile
 8011272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	603b      	str	r3, [r7, #0]
}
 8011284:	bf00      	nop
 8011286:	e7fe      	b.n	8011286 <xTaskIncrementTick+0x46>
 8011288:	4b40      	ldr	r3, [pc, #256]	; (801138c <xTaskIncrementTick+0x14c>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	60fb      	str	r3, [r7, #12]
 801128e:	4b40      	ldr	r3, [pc, #256]	; (8011390 <xTaskIncrementTick+0x150>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4a3e      	ldr	r2, [pc, #248]	; (801138c <xTaskIncrementTick+0x14c>)
 8011294:	6013      	str	r3, [r2, #0]
 8011296:	4a3e      	ldr	r2, [pc, #248]	; (8011390 <xTaskIncrementTick+0x150>)
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	6013      	str	r3, [r2, #0]
 801129c:	4b3d      	ldr	r3, [pc, #244]	; (8011394 <xTaskIncrementTick+0x154>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	3301      	adds	r3, #1
 80112a2:	4a3c      	ldr	r2, [pc, #240]	; (8011394 <xTaskIncrementTick+0x154>)
 80112a4:	6013      	str	r3, [r2, #0]
 80112a6:	f000 fab9 	bl	801181c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112aa:	4b3b      	ldr	r3, [pc, #236]	; (8011398 <xTaskIncrementTick+0x158>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	693a      	ldr	r2, [r7, #16]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d348      	bcc.n	8011346 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112b4:	4b35      	ldr	r3, [pc, #212]	; (801138c <xTaskIncrementTick+0x14c>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d104      	bne.n	80112c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112be:	4b36      	ldr	r3, [pc, #216]	; (8011398 <xTaskIncrementTick+0x158>)
 80112c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112c4:	601a      	str	r2, [r3, #0]
					break;
 80112c6:	e03e      	b.n	8011346 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112c8:	4b30      	ldr	r3, [pc, #192]	; (801138c <xTaskIncrementTick+0x14c>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	68db      	ldr	r3, [r3, #12]
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80112d8:	693a      	ldr	r2, [r7, #16]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d203      	bcs.n	80112e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80112e0:	4a2d      	ldr	r2, [pc, #180]	; (8011398 <xTaskIncrementTick+0x158>)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80112e6:	e02e      	b.n	8011346 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	3304      	adds	r3, #4
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fe f943 	bl	800f578 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d004      	beq.n	8011304 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	3318      	adds	r3, #24
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fe f93a 	bl	800f578 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011308:	2201      	movs	r2, #1
 801130a:	409a      	lsls	r2, r3
 801130c:	4b23      	ldr	r3, [pc, #140]	; (801139c <xTaskIncrementTick+0x15c>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	4313      	orrs	r3, r2
 8011312:	4a22      	ldr	r2, [pc, #136]	; (801139c <xTaskIncrementTick+0x15c>)
 8011314:	6013      	str	r3, [r2, #0]
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801131a:	4613      	mov	r3, r2
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	4413      	add	r3, r2
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	4a1f      	ldr	r2, [pc, #124]	; (80113a0 <xTaskIncrementTick+0x160>)
 8011324:	441a      	add	r2, r3
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	3304      	adds	r3, #4
 801132a:	4619      	mov	r1, r3
 801132c:	4610      	mov	r0, r2
 801132e:	f7fe f8c6 	bl	800f4be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011336:	4b1b      	ldr	r3, [pc, #108]	; (80113a4 <xTaskIncrementTick+0x164>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133c:	429a      	cmp	r2, r3
 801133e:	d3b9      	bcc.n	80112b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011340:	2301      	movs	r3, #1
 8011342:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011344:	e7b6      	b.n	80112b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011346:	4b17      	ldr	r3, [pc, #92]	; (80113a4 <xTaskIncrementTick+0x164>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801134c:	4914      	ldr	r1, [pc, #80]	; (80113a0 <xTaskIncrementTick+0x160>)
 801134e:	4613      	mov	r3, r2
 8011350:	009b      	lsls	r3, r3, #2
 8011352:	4413      	add	r3, r2
 8011354:	009b      	lsls	r3, r3, #2
 8011356:	440b      	add	r3, r1
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	2b01      	cmp	r3, #1
 801135c:	d901      	bls.n	8011362 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801135e:	2301      	movs	r3, #1
 8011360:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011362:	4b11      	ldr	r3, [pc, #68]	; (80113a8 <xTaskIncrementTick+0x168>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d007      	beq.n	801137a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801136a:	2301      	movs	r3, #1
 801136c:	617b      	str	r3, [r7, #20]
 801136e:	e004      	b.n	801137a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011370:	4b0e      	ldr	r3, [pc, #56]	; (80113ac <xTaskIncrementTick+0x16c>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	3301      	adds	r3, #1
 8011376:	4a0d      	ldr	r2, [pc, #52]	; (80113ac <xTaskIncrementTick+0x16c>)
 8011378:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801137a:	697b      	ldr	r3, [r7, #20]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3718      	adds	r7, #24
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	24009450 	.word	0x24009450
 8011388:	2400942c 	.word	0x2400942c
 801138c:	240093e0 	.word	0x240093e0
 8011390:	240093e4 	.word	0x240093e4
 8011394:	24009440 	.word	0x24009440
 8011398:	24009448 	.word	0x24009448
 801139c:	24009430 	.word	0x24009430
 80113a0:	2400932c 	.word	0x2400932c
 80113a4:	24009328 	.word	0x24009328
 80113a8:	2400943c 	.word	0x2400943c
 80113ac:	24009438 	.word	0x24009438

080113b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113b6:	4b31      	ldr	r3, [pc, #196]	; (801147c <vTaskSwitchContext+0xcc>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d003      	beq.n	80113c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113be:	4b30      	ldr	r3, [pc, #192]	; (8011480 <vTaskSwitchContext+0xd0>)
 80113c0:	2201      	movs	r2, #1
 80113c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113c4:	e055      	b.n	8011472 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 80113c6:	4b2e      	ldr	r3, [pc, #184]	; (8011480 <vTaskSwitchContext+0xd0>)
 80113c8:	2200      	movs	r2, #0
 80113ca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80113cc:	4b2d      	ldr	r3, [pc, #180]	; (8011484 <vTaskSwitchContext+0xd4>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	681a      	ldr	r2, [r3, #0]
 80113d2:	4b2c      	ldr	r3, [pc, #176]	; (8011484 <vTaskSwitchContext+0xd4>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113d8:	429a      	cmp	r2, r3
 80113da:	d808      	bhi.n	80113ee <vTaskSwitchContext+0x3e>
 80113dc:	4b29      	ldr	r3, [pc, #164]	; (8011484 <vTaskSwitchContext+0xd4>)
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	4b28      	ldr	r3, [pc, #160]	; (8011484 <vTaskSwitchContext+0xd4>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	3334      	adds	r3, #52	; 0x34
 80113e6:	4619      	mov	r1, r3
 80113e8:	4610      	mov	r0, r2
 80113ea:	f7ef fbdd 	bl	8000ba8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113ee:	4b26      	ldr	r3, [pc, #152]	; (8011488 <vTaskSwitchContext+0xd8>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	fab3 f383 	clz	r3, r3
 80113fa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80113fc:	7afb      	ldrb	r3, [r7, #11]
 80113fe:	f1c3 031f 	rsb	r3, r3, #31
 8011402:	617b      	str	r3, [r7, #20]
 8011404:	4921      	ldr	r1, [pc, #132]	; (801148c <vTaskSwitchContext+0xdc>)
 8011406:	697a      	ldr	r2, [r7, #20]
 8011408:	4613      	mov	r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	4413      	add	r3, r2
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	440b      	add	r3, r1
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d10a      	bne.n	801142e <vTaskSwitchContext+0x7e>
	__asm volatile
 8011418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141c:	f383 8811 	msr	BASEPRI, r3
 8011420:	f3bf 8f6f 	isb	sy
 8011424:	f3bf 8f4f 	dsb	sy
 8011428:	607b      	str	r3, [r7, #4]
}
 801142a:	bf00      	nop
 801142c:	e7fe      	b.n	801142c <vTaskSwitchContext+0x7c>
 801142e:	697a      	ldr	r2, [r7, #20]
 8011430:	4613      	mov	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	4413      	add	r3, r2
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4a14      	ldr	r2, [pc, #80]	; (801148c <vTaskSwitchContext+0xdc>)
 801143a:	4413      	add	r3, r2
 801143c:	613b      	str	r3, [r7, #16]
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	685a      	ldr	r2, [r3, #4]
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	605a      	str	r2, [r3, #4]
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	685a      	ldr	r2, [r3, #4]
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	3308      	adds	r3, #8
 8011450:	429a      	cmp	r2, r3
 8011452:	d104      	bne.n	801145e <vTaskSwitchContext+0xae>
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	685a      	ldr	r2, [r3, #4]
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	605a      	str	r2, [r3, #4]
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	4a07      	ldr	r2, [pc, #28]	; (8011484 <vTaskSwitchContext+0xd4>)
 8011466:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011468:	4b06      	ldr	r3, [pc, #24]	; (8011484 <vTaskSwitchContext+0xd4>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	334c      	adds	r3, #76	; 0x4c
 801146e:	4a08      	ldr	r2, [pc, #32]	; (8011490 <vTaskSwitchContext+0xe0>)
 8011470:	6013      	str	r3, [r2, #0]
}
 8011472:	bf00      	nop
 8011474:	3718      	adds	r7, #24
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	24009450 	.word	0x24009450
 8011480:	2400943c 	.word	0x2400943c
 8011484:	24009328 	.word	0x24009328
 8011488:	24009430 	.word	0x24009430
 801148c:	2400932c 	.word	0x2400932c
 8011490:	24000034 	.word	0x24000034

08011494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b084      	sub	sp, #16
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d10a      	bne.n	80114ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80114a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a8:	f383 8811 	msr	BASEPRI, r3
 80114ac:	f3bf 8f6f 	isb	sy
 80114b0:	f3bf 8f4f 	dsb	sy
 80114b4:	60fb      	str	r3, [r7, #12]
}
 80114b6:	bf00      	nop
 80114b8:	e7fe      	b.n	80114b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114ba:	4b07      	ldr	r3, [pc, #28]	; (80114d8 <vTaskPlaceOnEventList+0x44>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	3318      	adds	r3, #24
 80114c0:	4619      	mov	r1, r3
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7fe f81f 	bl	800f506 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114c8:	2101      	movs	r1, #1
 80114ca:	6838      	ldr	r0, [r7, #0]
 80114cc:	f000 fb82 	bl	8011bd4 <prvAddCurrentTaskToDelayedList>
}
 80114d0:	bf00      	nop
 80114d2:	3710      	adds	r7, #16
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	24009328 	.word	0x24009328

080114dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b086      	sub	sp, #24
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	68db      	ldr	r3, [r3, #12]
 80114ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d10a      	bne.n	8011508 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80114f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f6:	f383 8811 	msr	BASEPRI, r3
 80114fa:	f3bf 8f6f 	isb	sy
 80114fe:	f3bf 8f4f 	dsb	sy
 8011502:	60fb      	str	r3, [r7, #12]
}
 8011504:	bf00      	nop
 8011506:	e7fe      	b.n	8011506 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	3318      	adds	r3, #24
 801150c:	4618      	mov	r0, r3
 801150e:	f7fe f833 	bl	800f578 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011512:	4b1d      	ldr	r3, [pc, #116]	; (8011588 <xTaskRemoveFromEventList+0xac>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d11c      	bne.n	8011554 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	3304      	adds	r3, #4
 801151e:	4618      	mov	r0, r3
 8011520:	f7fe f82a 	bl	800f578 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011528:	2201      	movs	r2, #1
 801152a:	409a      	lsls	r2, r3
 801152c:	4b17      	ldr	r3, [pc, #92]	; (801158c <xTaskRemoveFromEventList+0xb0>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	4313      	orrs	r3, r2
 8011532:	4a16      	ldr	r2, [pc, #88]	; (801158c <xTaskRemoveFromEventList+0xb0>)
 8011534:	6013      	str	r3, [r2, #0]
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801153a:	4613      	mov	r3, r2
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4413      	add	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4a13      	ldr	r2, [pc, #76]	; (8011590 <xTaskRemoveFromEventList+0xb4>)
 8011544:	441a      	add	r2, r3
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	3304      	adds	r3, #4
 801154a:	4619      	mov	r1, r3
 801154c:	4610      	mov	r0, r2
 801154e:	f7fd ffb6 	bl	800f4be <vListInsertEnd>
 8011552:	e005      	b.n	8011560 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	3318      	adds	r3, #24
 8011558:	4619      	mov	r1, r3
 801155a:	480e      	ldr	r0, [pc, #56]	; (8011594 <xTaskRemoveFromEventList+0xb8>)
 801155c:	f7fd ffaf 	bl	800f4be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011564:	4b0c      	ldr	r3, [pc, #48]	; (8011598 <xTaskRemoveFromEventList+0xbc>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801156a:	429a      	cmp	r2, r3
 801156c:	d905      	bls.n	801157a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801156e:	2301      	movs	r3, #1
 8011570:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011572:	4b0a      	ldr	r3, [pc, #40]	; (801159c <xTaskRemoveFromEventList+0xc0>)
 8011574:	2201      	movs	r2, #1
 8011576:	601a      	str	r2, [r3, #0]
 8011578:	e001      	b.n	801157e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801157a:	2300      	movs	r3, #0
 801157c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801157e:	697b      	ldr	r3, [r7, #20]
}
 8011580:	4618      	mov	r0, r3
 8011582:	3718      	adds	r7, #24
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	24009450 	.word	0x24009450
 801158c:	24009430 	.word	0x24009430
 8011590:	2400932c 	.word	0x2400932c
 8011594:	240093e8 	.word	0x240093e8
 8011598:	24009328 	.word	0x24009328
 801159c:	2400943c 	.word	0x2400943c

080115a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80115a8:	4b06      	ldr	r3, [pc, #24]	; (80115c4 <vTaskInternalSetTimeOutState+0x24>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80115b0:	4b05      	ldr	r3, [pc, #20]	; (80115c8 <vTaskInternalSetTimeOutState+0x28>)
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	605a      	str	r2, [r3, #4]
}
 80115b8:	bf00      	nop
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	24009440 	.word	0x24009440
 80115c8:	2400942c 	.word	0x2400942c

080115cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b088      	sub	sp, #32
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d10a      	bne.n	80115f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80115dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e0:	f383 8811 	msr	BASEPRI, r3
 80115e4:	f3bf 8f6f 	isb	sy
 80115e8:	f3bf 8f4f 	dsb	sy
 80115ec:	613b      	str	r3, [r7, #16]
}
 80115ee:	bf00      	nop
 80115f0:	e7fe      	b.n	80115f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d10a      	bne.n	801160e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80115f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fc:	f383 8811 	msr	BASEPRI, r3
 8011600:	f3bf 8f6f 	isb	sy
 8011604:	f3bf 8f4f 	dsb	sy
 8011608:	60fb      	str	r3, [r7, #12]
}
 801160a:	bf00      	nop
 801160c:	e7fe      	b.n	801160c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801160e:	f7fe f909 	bl	800f824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011612:	4b1d      	ldr	r3, [pc, #116]	; (8011688 <xTaskCheckForTimeOut+0xbc>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	69ba      	ldr	r2, [r7, #24]
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801162a:	d102      	bne.n	8011632 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801162c:	2300      	movs	r3, #0
 801162e:	61fb      	str	r3, [r7, #28]
 8011630:	e023      	b.n	801167a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	4b15      	ldr	r3, [pc, #84]	; (801168c <xTaskCheckForTimeOut+0xc0>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	429a      	cmp	r2, r3
 801163c:	d007      	beq.n	801164e <xTaskCheckForTimeOut+0x82>
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	69ba      	ldr	r2, [r7, #24]
 8011644:	429a      	cmp	r2, r3
 8011646:	d302      	bcc.n	801164e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011648:	2301      	movs	r3, #1
 801164a:	61fb      	str	r3, [r7, #28]
 801164c:	e015      	b.n	801167a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	697a      	ldr	r2, [r7, #20]
 8011654:	429a      	cmp	r2, r3
 8011656:	d20b      	bcs.n	8011670 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	1ad2      	subs	r2, r2, r3
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7ff ff9b 	bl	80115a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801166a:	2300      	movs	r3, #0
 801166c:	61fb      	str	r3, [r7, #28]
 801166e:	e004      	b.n	801167a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	2200      	movs	r2, #0
 8011674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011676:	2301      	movs	r3, #1
 8011678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801167a:	f7fe f903 	bl	800f884 <vPortExitCritical>

	return xReturn;
 801167e:	69fb      	ldr	r3, [r7, #28]
}
 8011680:	4618      	mov	r0, r3
 8011682:	3720      	adds	r7, #32
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	2400942c 	.word	0x2400942c
 801168c:	24009440 	.word	0x24009440

08011690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011690:	b480      	push	{r7}
 8011692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011694:	4b03      	ldr	r3, [pc, #12]	; (80116a4 <vTaskMissedYield+0x14>)
 8011696:	2201      	movs	r2, #1
 8011698:	601a      	str	r2, [r3, #0]
}
 801169a:	bf00      	nop
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr
 80116a4:	2400943c 	.word	0x2400943c

080116a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80116b0:	f000 f852 	bl	8011758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80116b4:	4b06      	ldr	r3, [pc, #24]	; (80116d0 <prvIdleTask+0x28>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d9f9      	bls.n	80116b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80116bc:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <prvIdleTask+0x2c>)
 80116be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116c2:	601a      	str	r2, [r3, #0]
 80116c4:	f3bf 8f4f 	dsb	sy
 80116c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80116cc:	e7f0      	b.n	80116b0 <prvIdleTask+0x8>
 80116ce:	bf00      	nop
 80116d0:	2400932c 	.word	0x2400932c
 80116d4:	e000ed04 	.word	0xe000ed04

080116d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116de:	2300      	movs	r3, #0
 80116e0:	607b      	str	r3, [r7, #4]
 80116e2:	e00c      	b.n	80116fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	4613      	mov	r3, r2
 80116e8:	009b      	lsls	r3, r3, #2
 80116ea:	4413      	add	r3, r2
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4a12      	ldr	r2, [pc, #72]	; (8011738 <prvInitialiseTaskLists+0x60>)
 80116f0:	4413      	add	r3, r2
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fd feb6 	bl	800f464 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3301      	adds	r3, #1
 80116fc:	607b      	str	r3, [r7, #4]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2b06      	cmp	r3, #6
 8011702:	d9ef      	bls.n	80116e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011704:	480d      	ldr	r0, [pc, #52]	; (801173c <prvInitialiseTaskLists+0x64>)
 8011706:	f7fd fead 	bl	800f464 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801170a:	480d      	ldr	r0, [pc, #52]	; (8011740 <prvInitialiseTaskLists+0x68>)
 801170c:	f7fd feaa 	bl	800f464 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011710:	480c      	ldr	r0, [pc, #48]	; (8011744 <prvInitialiseTaskLists+0x6c>)
 8011712:	f7fd fea7 	bl	800f464 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011716:	480c      	ldr	r0, [pc, #48]	; (8011748 <prvInitialiseTaskLists+0x70>)
 8011718:	f7fd fea4 	bl	800f464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801171c:	480b      	ldr	r0, [pc, #44]	; (801174c <prvInitialiseTaskLists+0x74>)
 801171e:	f7fd fea1 	bl	800f464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011722:	4b0b      	ldr	r3, [pc, #44]	; (8011750 <prvInitialiseTaskLists+0x78>)
 8011724:	4a05      	ldr	r2, [pc, #20]	; (801173c <prvInitialiseTaskLists+0x64>)
 8011726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011728:	4b0a      	ldr	r3, [pc, #40]	; (8011754 <prvInitialiseTaskLists+0x7c>)
 801172a:	4a05      	ldr	r2, [pc, #20]	; (8011740 <prvInitialiseTaskLists+0x68>)
 801172c:	601a      	str	r2, [r3, #0]
}
 801172e:	bf00      	nop
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	2400932c 	.word	0x2400932c
 801173c:	240093b8 	.word	0x240093b8
 8011740:	240093cc 	.word	0x240093cc
 8011744:	240093e8 	.word	0x240093e8
 8011748:	240093fc 	.word	0x240093fc
 801174c:	24009414 	.word	0x24009414
 8011750:	240093e0 	.word	0x240093e0
 8011754:	240093e4 	.word	0x240093e4

08011758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801175e:	e019      	b.n	8011794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011760:	f7fe f860 	bl	800f824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011764:	4b10      	ldr	r3, [pc, #64]	; (80117a8 <prvCheckTasksWaitingTermination+0x50>)
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	3304      	adds	r3, #4
 8011770:	4618      	mov	r0, r3
 8011772:	f7fd ff01 	bl	800f578 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011776:	4b0d      	ldr	r3, [pc, #52]	; (80117ac <prvCheckTasksWaitingTermination+0x54>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	3b01      	subs	r3, #1
 801177c:	4a0b      	ldr	r2, [pc, #44]	; (80117ac <prvCheckTasksWaitingTermination+0x54>)
 801177e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011780:	4b0b      	ldr	r3, [pc, #44]	; (80117b0 <prvCheckTasksWaitingTermination+0x58>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	3b01      	subs	r3, #1
 8011786:	4a0a      	ldr	r2, [pc, #40]	; (80117b0 <prvCheckTasksWaitingTermination+0x58>)
 8011788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801178a:	f7fe f87b 	bl	800f884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f000 f810 	bl	80117b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011794:	4b06      	ldr	r3, [pc, #24]	; (80117b0 <prvCheckTasksWaitingTermination+0x58>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d1e1      	bne.n	8011760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801179c:	bf00      	nop
 801179e:	bf00      	nop
 80117a0:	3708      	adds	r7, #8
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	240093fc 	.word	0x240093fc
 80117ac:	24009428 	.word	0x24009428
 80117b0:	24009410 	.word	0x24009410

080117b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	334c      	adds	r3, #76	; 0x4c
 80117c0:	4618      	mov	r0, r3
 80117c2:	f00e fd7b 	bl	80202bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d108      	bne.n	80117e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7fd fd27 	bl	800f228 <vPortFree>
				vPortFree( pxTCB );
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7fd fd24 	bl	800f228 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80117e0:	e018      	b.n	8011814 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80117e8:	2b01      	cmp	r3, #1
 80117ea:	d103      	bne.n	80117f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f7fd fd1b 	bl	800f228 <vPortFree>
	}
 80117f2:	e00f      	b.n	8011814 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80117fa:	2b02      	cmp	r3, #2
 80117fc:	d00a      	beq.n	8011814 <prvDeleteTCB+0x60>
	__asm volatile
 80117fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011802:	f383 8811 	msr	BASEPRI, r3
 8011806:	f3bf 8f6f 	isb	sy
 801180a:	f3bf 8f4f 	dsb	sy
 801180e:	60fb      	str	r3, [r7, #12]
}
 8011810:	bf00      	nop
 8011812:	e7fe      	b.n	8011812 <prvDeleteTCB+0x5e>
	}
 8011814:	bf00      	nop
 8011816:	3710      	adds	r7, #16
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801181c:	b480      	push	{r7}
 801181e:	b083      	sub	sp, #12
 8011820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011822:	4b0c      	ldr	r3, [pc, #48]	; (8011854 <prvResetNextTaskUnblockTime+0x38>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d104      	bne.n	8011836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801182c:	4b0a      	ldr	r3, [pc, #40]	; (8011858 <prvResetNextTaskUnblockTime+0x3c>)
 801182e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011834:	e008      	b.n	8011848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011836:	4b07      	ldr	r3, [pc, #28]	; (8011854 <prvResetNextTaskUnblockTime+0x38>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	68db      	ldr	r3, [r3, #12]
 801183c:	68db      	ldr	r3, [r3, #12]
 801183e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	4a04      	ldr	r2, [pc, #16]	; (8011858 <prvResetNextTaskUnblockTime+0x3c>)
 8011846:	6013      	str	r3, [r2, #0]
}
 8011848:	bf00      	nop
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr
 8011854:	240093e0 	.word	0x240093e0
 8011858:	24009448 	.word	0x24009448

0801185c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801185c:	b480      	push	{r7}
 801185e:	b083      	sub	sp, #12
 8011860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011862:	4b0b      	ldr	r3, [pc, #44]	; (8011890 <xTaskGetSchedulerState+0x34>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d102      	bne.n	8011870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801186a:	2301      	movs	r3, #1
 801186c:	607b      	str	r3, [r7, #4]
 801186e:	e008      	b.n	8011882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011870:	4b08      	ldr	r3, [pc, #32]	; (8011894 <xTaskGetSchedulerState+0x38>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d102      	bne.n	801187e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011878:	2302      	movs	r3, #2
 801187a:	607b      	str	r3, [r7, #4]
 801187c:	e001      	b.n	8011882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801187e:	2300      	movs	r3, #0
 8011880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011882:	687b      	ldr	r3, [r7, #4]
	}
 8011884:	4618      	mov	r0, r3
 8011886:	370c      	adds	r7, #12
 8011888:	46bd      	mov	sp, r7
 801188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188e:	4770      	bx	lr
 8011890:	24009434 	.word	0x24009434
 8011894:	24009450 	.word	0x24009450

08011898 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011898:	b580      	push	{r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80118a4:	2300      	movs	r3, #0
 80118a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d05e      	beq.n	801196c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118b2:	4b31      	ldr	r3, [pc, #196]	; (8011978 <xTaskPriorityInherit+0xe0>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d24e      	bcs.n	801195a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	699b      	ldr	r3, [r3, #24]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	db06      	blt.n	80118d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118c4:	4b2c      	ldr	r3, [pc, #176]	; (8011978 <xTaskPriorityInherit+0xe0>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ca:	f1c3 0207 	rsb	r2, r3, #7
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	6959      	ldr	r1, [r3, #20]
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118da:	4613      	mov	r3, r2
 80118dc:	009b      	lsls	r3, r3, #2
 80118de:	4413      	add	r3, r2
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	4a26      	ldr	r2, [pc, #152]	; (801197c <xTaskPriorityInherit+0xe4>)
 80118e4:	4413      	add	r3, r2
 80118e6:	4299      	cmp	r1, r3
 80118e8:	d12f      	bne.n	801194a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	3304      	adds	r3, #4
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fd fe42 	bl	800f578 <uxListRemove>
 80118f4:	4603      	mov	r3, r0
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d10a      	bne.n	8011910 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fe:	2201      	movs	r2, #1
 8011900:	fa02 f303 	lsl.w	r3, r2, r3
 8011904:	43da      	mvns	r2, r3
 8011906:	4b1e      	ldr	r3, [pc, #120]	; (8011980 <xTaskPriorityInherit+0xe8>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	4013      	ands	r3, r2
 801190c:	4a1c      	ldr	r2, [pc, #112]	; (8011980 <xTaskPriorityInherit+0xe8>)
 801190e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011910:	4b19      	ldr	r3, [pc, #100]	; (8011978 <xTaskPriorityInherit+0xe0>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801191e:	2201      	movs	r2, #1
 8011920:	409a      	lsls	r2, r3
 8011922:	4b17      	ldr	r3, [pc, #92]	; (8011980 <xTaskPriorityInherit+0xe8>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	4313      	orrs	r3, r2
 8011928:	4a15      	ldr	r2, [pc, #84]	; (8011980 <xTaskPriorityInherit+0xe8>)
 801192a:	6013      	str	r3, [r2, #0]
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011930:	4613      	mov	r3, r2
 8011932:	009b      	lsls	r3, r3, #2
 8011934:	4413      	add	r3, r2
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	4a10      	ldr	r2, [pc, #64]	; (801197c <xTaskPriorityInherit+0xe4>)
 801193a:	441a      	add	r2, r3
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	3304      	adds	r3, #4
 8011940:	4619      	mov	r1, r3
 8011942:	4610      	mov	r0, r2
 8011944:	f7fd fdbb 	bl	800f4be <vListInsertEnd>
 8011948:	e004      	b.n	8011954 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801194a:	4b0b      	ldr	r3, [pc, #44]	; (8011978 <xTaskPriorityInherit+0xe0>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011954:	2301      	movs	r3, #1
 8011956:	60fb      	str	r3, [r7, #12]
 8011958:	e008      	b.n	801196c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801195e:	4b06      	ldr	r3, [pc, #24]	; (8011978 <xTaskPriorityInherit+0xe0>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011964:	429a      	cmp	r2, r3
 8011966:	d201      	bcs.n	801196c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011968:	2301      	movs	r3, #1
 801196a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801196c:	68fb      	ldr	r3, [r7, #12]
	}
 801196e:	4618      	mov	r0, r3
 8011970:	3710      	adds	r7, #16
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	24009328 	.word	0x24009328
 801197c:	2400932c 	.word	0x2400932c
 8011980:	24009430 	.word	0x24009430

08011984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011984:	b580      	push	{r7, lr}
 8011986:	b086      	sub	sp, #24
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011990:	2300      	movs	r3, #0
 8011992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d06e      	beq.n	8011a78 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801199a:	4b3a      	ldr	r3, [pc, #232]	; (8011a84 <xTaskPriorityDisinherit+0x100>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	693a      	ldr	r2, [r7, #16]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d00a      	beq.n	80119ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80119a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a8:	f383 8811 	msr	BASEPRI, r3
 80119ac:	f3bf 8f6f 	isb	sy
 80119b0:	f3bf 8f4f 	dsb	sy
 80119b4:	60fb      	str	r3, [r7, #12]
}
 80119b6:	bf00      	nop
 80119b8:	e7fe      	b.n	80119b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d10a      	bne.n	80119d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80119c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c6:	f383 8811 	msr	BASEPRI, r3
 80119ca:	f3bf 8f6f 	isb	sy
 80119ce:	f3bf 8f4f 	dsb	sy
 80119d2:	60bb      	str	r3, [r7, #8]
}
 80119d4:	bf00      	nop
 80119d6:	e7fe      	b.n	80119d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119dc:	1e5a      	subs	r2, r3, #1
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d044      	beq.n	8011a78 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d140      	bne.n	8011a78 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	3304      	adds	r3, #4
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fd fdbc 	bl	800f578 <uxListRemove>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d115      	bne.n	8011a32 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a0a:	491f      	ldr	r1, [pc, #124]	; (8011a88 <xTaskPriorityDisinherit+0x104>)
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4413      	add	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	440b      	add	r3, r1
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d10a      	bne.n	8011a32 <xTaskPriorityDisinherit+0xae>
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a20:	2201      	movs	r2, #1
 8011a22:	fa02 f303 	lsl.w	r3, r2, r3
 8011a26:	43da      	mvns	r2, r3
 8011a28:	4b18      	ldr	r3, [pc, #96]	; (8011a8c <xTaskPriorityDisinherit+0x108>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4013      	ands	r3, r2
 8011a2e:	4a17      	ldr	r2, [pc, #92]	; (8011a8c <xTaskPriorityDisinherit+0x108>)
 8011a30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a3e:	f1c3 0207 	rsb	r2, r3, #7
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	409a      	lsls	r2, r3
 8011a4e:	4b0f      	ldr	r3, [pc, #60]	; (8011a8c <xTaskPriorityDisinherit+0x108>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	4313      	orrs	r3, r2
 8011a54:	4a0d      	ldr	r2, [pc, #52]	; (8011a8c <xTaskPriorityDisinherit+0x108>)
 8011a56:	6013      	str	r3, [r2, #0]
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	4413      	add	r3, r2
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	4a08      	ldr	r2, [pc, #32]	; (8011a88 <xTaskPriorityDisinherit+0x104>)
 8011a66:	441a      	add	r2, r3
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	3304      	adds	r3, #4
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	4610      	mov	r0, r2
 8011a70:	f7fd fd25 	bl	800f4be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a74:	2301      	movs	r3, #1
 8011a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a78:	697b      	ldr	r3, [r7, #20]
	}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3718      	adds	r7, #24
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	24009328 	.word	0x24009328
 8011a88:	2400932c 	.word	0x2400932c
 8011a8c:	24009430 	.word	0x24009430

08011a90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b088      	sub	sp, #32
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d077      	beq.n	8011b98 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011aa8:	69bb      	ldr	r3, [r7, #24]
 8011aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10a      	bne.n	8011ac6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab4:	f383 8811 	msr	BASEPRI, r3
 8011ab8:	f3bf 8f6f 	isb	sy
 8011abc:	f3bf 8f4f 	dsb	sy
 8011ac0:	60fb      	str	r3, [r7, #12]
}
 8011ac2:	bf00      	nop
 8011ac4:	e7fe      	b.n	8011ac4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aca:	683a      	ldr	r2, [r7, #0]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d902      	bls.n	8011ad6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	61fb      	str	r3, [r7, #28]
 8011ad4:	e002      	b.n	8011adc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ada:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae0:	69fa      	ldr	r2, [r7, #28]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d058      	beq.n	8011b98 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011ae6:	69bb      	ldr	r3, [r7, #24]
 8011ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011aea:	697a      	ldr	r2, [r7, #20]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d153      	bne.n	8011b98 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011af0:	4b2b      	ldr	r3, [pc, #172]	; (8011ba0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	69ba      	ldr	r2, [r7, #24]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d10a      	bne.n	8011b10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afe:	f383 8811 	msr	BASEPRI, r3
 8011b02:	f3bf 8f6f 	isb	sy
 8011b06:	f3bf 8f4f 	dsb	sy
 8011b0a:	60bb      	str	r3, [r7, #8]
}
 8011b0c:	bf00      	nop
 8011b0e:	e7fe      	b.n	8011b0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	69fa      	ldr	r2, [r7, #28]
 8011b1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	699b      	ldr	r3, [r3, #24]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	db04      	blt.n	8011b2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	f1c3 0207 	rsb	r2, r3, #7
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	6959      	ldr	r1, [r3, #20]
 8011b32:	693a      	ldr	r2, [r7, #16]
 8011b34:	4613      	mov	r3, r2
 8011b36:	009b      	lsls	r3, r3, #2
 8011b38:	4413      	add	r3, r2
 8011b3a:	009b      	lsls	r3, r3, #2
 8011b3c:	4a19      	ldr	r2, [pc, #100]	; (8011ba4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011b3e:	4413      	add	r3, r2
 8011b40:	4299      	cmp	r1, r3
 8011b42:	d129      	bne.n	8011b98 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	3304      	adds	r3, #4
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7fd fd15 	bl	800f578 <uxListRemove>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d10a      	bne.n	8011b6a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b58:	2201      	movs	r2, #1
 8011b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b5e:	43da      	mvns	r2, r3
 8011b60:	4b11      	ldr	r3, [pc, #68]	; (8011ba8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4013      	ands	r3, r2
 8011b66:	4a10      	ldr	r2, [pc, #64]	; (8011ba8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011b68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b6e:	2201      	movs	r2, #1
 8011b70:	409a      	lsls	r2, r3
 8011b72:	4b0d      	ldr	r3, [pc, #52]	; (8011ba8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	4313      	orrs	r3, r2
 8011b78:	4a0b      	ldr	r2, [pc, #44]	; (8011ba8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011b7a:	6013      	str	r3, [r2, #0]
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b80:	4613      	mov	r3, r2
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	4413      	add	r3, r2
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4a06      	ldr	r2, [pc, #24]	; (8011ba4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011b8a:	441a      	add	r2, r3
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	3304      	adds	r3, #4
 8011b90:	4619      	mov	r1, r3
 8011b92:	4610      	mov	r0, r2
 8011b94:	f7fd fc93 	bl	800f4be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b98:	bf00      	nop
 8011b9a:	3720      	adds	r7, #32
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	24009328 	.word	0x24009328
 8011ba4:	2400932c 	.word	0x2400932c
 8011ba8:	24009430 	.word	0x24009430

08011bac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011bac:	b480      	push	{r7}
 8011bae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011bb0:	4b07      	ldr	r3, [pc, #28]	; (8011bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d004      	beq.n	8011bc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011bb8:	4b05      	ldr	r3, [pc, #20]	; (8011bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011bbe:	3201      	adds	r2, #1
 8011bc0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011bc2:	4b03      	ldr	r3, [pc, #12]	; (8011bd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
	}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr
 8011bd0:	24009328 	.word	0x24009328

08011bd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b084      	sub	sp, #16
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011bde:	4b29      	ldr	r3, [pc, #164]	; (8011c84 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011be4:	4b28      	ldr	r3, [pc, #160]	; (8011c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	3304      	adds	r3, #4
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fd fcc4 	bl	800f578 <uxListRemove>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d10b      	bne.n	8011c0e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011bf6:	4b24      	ldr	r3, [pc, #144]	; (8011c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8011c02:	43da      	mvns	r2, r3
 8011c04:	4b21      	ldr	r3, [pc, #132]	; (8011c8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	4013      	ands	r3, r2
 8011c0a:	4a20      	ldr	r2, [pc, #128]	; (8011c8c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011c0c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c14:	d10a      	bne.n	8011c2c <prvAddCurrentTaskToDelayedList+0x58>
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d007      	beq.n	8011c2c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c1c:	4b1a      	ldr	r3, [pc, #104]	; (8011c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	3304      	adds	r3, #4
 8011c22:	4619      	mov	r1, r3
 8011c24:	481a      	ldr	r0, [pc, #104]	; (8011c90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011c26:	f7fd fc4a 	bl	800f4be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c2a:	e026      	b.n	8011c7a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	4413      	add	r3, r2
 8011c32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c34:	4b14      	ldr	r3, [pc, #80]	; (8011c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	68ba      	ldr	r2, [r7, #8]
 8011c3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d209      	bcs.n	8011c58 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c44:	4b13      	ldr	r3, [pc, #76]	; (8011c94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	4b0f      	ldr	r3, [pc, #60]	; (8011c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	4619      	mov	r1, r3
 8011c50:	4610      	mov	r0, r2
 8011c52:	f7fd fc58 	bl	800f506 <vListInsert>
}
 8011c56:	e010      	b.n	8011c7a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c58:	4b0f      	ldr	r3, [pc, #60]	; (8011c98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	4b0a      	ldr	r3, [pc, #40]	; (8011c88 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	3304      	adds	r3, #4
 8011c62:	4619      	mov	r1, r3
 8011c64:	4610      	mov	r0, r2
 8011c66:	f7fd fc4e 	bl	800f506 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c6a:	4b0c      	ldr	r3, [pc, #48]	; (8011c9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d202      	bcs.n	8011c7a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011c74:	4a09      	ldr	r2, [pc, #36]	; (8011c9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	6013      	str	r3, [r2, #0]
}
 8011c7a:	bf00      	nop
 8011c7c:	3710      	adds	r7, #16
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
 8011c82:	bf00      	nop
 8011c84:	2400942c 	.word	0x2400942c
 8011c88:	24009328 	.word	0x24009328
 8011c8c:	24009430 	.word	0x24009430
 8011c90:	24009414 	.word	0x24009414
 8011c94:	240093e4 	.word	0x240093e4
 8011c98:	240093e0 	.word	0x240093e0
 8011c9c:	24009448 	.word	0x24009448

08011ca0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	330c      	adds	r3, #12
 8011cb0:	461a      	mov	r2, r3
 8011cb2:	6839      	ldr	r1, [r7, #0]
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f00c fec5 	bl	801ea44 <tcpip_send_msg_wait_sem>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d103      	bne.n	8011cce <netconn_apimsg+0x2e>
    return apimsg->err;
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011ccc:	e001      	b.n	8011cd2 <netconn_apimsg+0x32>
  }
  return err;
 8011cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
	...

08011cdc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b08c      	sub	sp, #48	; 0x30
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	603a      	str	r2, [r7, #0]
 8011ce6:	71fb      	strb	r3, [r7, #7]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011cec:	79fb      	ldrb	r3, [r7, #7]
 8011cee:	6839      	ldr	r1, [r7, #0]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f001 f927 	bl	8012f44 <netconn_alloc>
 8011cf6:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8011cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d054      	beq.n	8011da8 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8011cfe:	79bb      	ldrb	r3, [r7, #6]
 8011d00:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8011d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d04:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8011d06:	f107 0308 	add.w	r3, r7, #8
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	4829      	ldr	r0, [pc, #164]	; (8011db4 <netconn_new_with_proto_and_callback+0xd8>)
 8011d0e:	f7ff ffc7 	bl	8011ca0 <netconn_apimsg>
 8011d12:	4603      	mov	r3, r0
 8011d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8011d18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d043      	beq.n	8011da8 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8011d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d005      	beq.n	8011d34 <netconn_new_with_proto_and_callback+0x58>
 8011d28:	4b23      	ldr	r3, [pc, #140]	; (8011db8 <netconn_new_with_proto_and_callback+0xdc>)
 8011d2a:	22a3      	movs	r2, #163	; 0xa3
 8011d2c:	4923      	ldr	r1, [pc, #140]	; (8011dbc <netconn_new_with_proto_and_callback+0xe0>)
 8011d2e:	4824      	ldr	r0, [pc, #144]	; (8011dc0 <netconn_new_with_proto_and_callback+0xe4>)
 8011d30:	f00e f9ea 	bl	8020108 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8011d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d36:	3310      	adds	r3, #16
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f006 fb8c 	bl	8018456 <sys_mbox_valid>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d105      	bne.n	8011d50 <netconn_new_with_proto_and_callback+0x74>
 8011d44:	4b1c      	ldr	r3, [pc, #112]	; (8011db8 <netconn_new_with_proto_and_callback+0xdc>)
 8011d46:	22a4      	movs	r2, #164	; 0xa4
 8011d48:	491e      	ldr	r1, [pc, #120]	; (8011dc4 <netconn_new_with_proto_and_callback+0xe8>)
 8011d4a:	481d      	ldr	r0, [pc, #116]	; (8011dc0 <netconn_new_with_proto_and_callback+0xe4>)
 8011d4c:	f00e f9dc 	bl	8020108 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8011d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d52:	3314      	adds	r3, #20
 8011d54:	4618      	mov	r0, r3
 8011d56:	f006 fb7e 	bl	8018456 <sys_mbox_valid>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d005      	beq.n	8011d6c <netconn_new_with_proto_and_callback+0x90>
 8011d60:	4b15      	ldr	r3, [pc, #84]	; (8011db8 <netconn_new_with_proto_and_callback+0xdc>)
 8011d62:	22a6      	movs	r2, #166	; 0xa6
 8011d64:	4918      	ldr	r1, [pc, #96]	; (8011dc8 <netconn_new_with_proto_and_callback+0xec>)
 8011d66:	4816      	ldr	r0, [pc, #88]	; (8011dc0 <netconn_new_with_proto_and_callback+0xe4>)
 8011d68:	f00e f9ce 	bl	8020108 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8011d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d6e:	330c      	adds	r3, #12
 8011d70:	4618      	mov	r0, r3
 8011d72:	f006 fc01 	bl	8018578 <sys_sem_valid>
 8011d76:	4603      	mov	r3, r0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d105      	bne.n	8011d88 <netconn_new_with_proto_and_callback+0xac>
 8011d7c:	4b0e      	ldr	r3, [pc, #56]	; (8011db8 <netconn_new_with_proto_and_callback+0xdc>)
 8011d7e:	22a9      	movs	r2, #169	; 0xa9
 8011d80:	4912      	ldr	r1, [pc, #72]	; (8011dcc <netconn_new_with_proto_and_callback+0xf0>)
 8011d82:	480f      	ldr	r0, [pc, #60]	; (8011dc0 <netconn_new_with_proto_and_callback+0xe4>)
 8011d84:	f00e f9c0 	bl	8020108 <iprintf>
      sys_sem_free(&conn->op_completed);
 8011d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8a:	330c      	adds	r3, #12
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f006 fbe6 	bl	801855e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8011d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d94:	3310      	adds	r3, #16
 8011d96:	4618      	mov	r0, r3
 8011d98:	f006 fad6 	bl	8018348 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d9e:	2007      	movs	r0, #7
 8011da0:	f005 f922 	bl	8016fe8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011da4:	2300      	movs	r3, #0
 8011da6:	e000      	b.n	8011daa <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8011da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3730      	adds	r7, #48	; 0x30
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	08012f19 	.word	0x08012f19
 8011db8:	080210dc 	.word	0x080210dc
 8011dbc:	08021154 	.word	0x08021154
 8011dc0:	08021178 	.word	0x08021178
 8011dc4:	080211a0 	.word	0x080211a0
 8011dc8:	080211b8 	.word	0x080211b8
 8011dcc:	080211dc 	.word	0x080211dc

08011dd0 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b08c      	sub	sp, #48	; 0x30
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d101      	bne.n	8011de2 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011dde:	2300      	movs	r3, #0
 8011de0:	e014      	b.n	8011e0c <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8011de6:	2329      	movs	r3, #41	; 0x29
 8011de8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8011dea:	f107 030c 	add.w	r3, r7, #12
 8011dee:	4619      	mov	r1, r3
 8011df0:	4808      	ldr	r0, [pc, #32]	; (8011e14 <netconn_prepare_delete+0x44>)
 8011df2:	f7ff ff55 	bl	8011ca0 <netconn_apimsg>
 8011df6:	4603      	mov	r3, r0
 8011df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011dfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d002      	beq.n	8011e0a <netconn_prepare_delete+0x3a>
    return err;
 8011e04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8011e08:	e000      	b.n	8011e0c <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3730      	adds	r7, #48	; 0x30
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	08013485 	.word	0x08013485

08011e18 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d101      	bne.n	8011e2a <netconn_delete+0x12>
    return ERR_OK;
 8011e26:	2300      	movs	r3, #0
 8011e28:	e00d      	b.n	8011e46 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7ff ffd0 	bl	8011dd0 <netconn_prepare_delete>
 8011e30:	4603      	mov	r3, r0
 8011e32:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8011e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d102      	bne.n	8011e42 <netconn_delete+0x2a>
    netconn_free(conn);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f001 f8ef 	bl	8013020 <netconn_free>
  }
  return err;
 8011e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3710      	adds	r7, #16
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}
	...

08011e50 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b08e      	sub	sp, #56	; 0x38
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d109      	bne.n	8011e78 <netconn_bind+0x28>
 8011e64:	4b11      	ldr	r3, [pc, #68]	; (8011eac <netconn_bind+0x5c>)
 8011e66:	f44f 729c 	mov.w	r2, #312	; 0x138
 8011e6a:	4911      	ldr	r1, [pc, #68]	; (8011eb0 <netconn_bind+0x60>)
 8011e6c:	4811      	ldr	r0, [pc, #68]	; (8011eb4 <netconn_bind+0x64>)
 8011e6e:	f00e f94b 	bl	8020108 <iprintf>
 8011e72:	f06f 030f 	mvn.w	r3, #15
 8011e76:	e015      	b.n	8011ea4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d101      	bne.n	8011e82 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8011e7e:	4b0e      	ldr	r3, [pc, #56]	; (8011eb8 <netconn_bind+0x68>)
 8011e80:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011e8a:	88fb      	ldrh	r3, [r7, #6]
 8011e8c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011e8e:	f107 0314 	add.w	r3, r7, #20
 8011e92:	4619      	mov	r1, r3
 8011e94:	4809      	ldr	r0, [pc, #36]	; (8011ebc <netconn_bind+0x6c>)
 8011e96:	f7ff ff03 	bl	8011ca0 <netconn_apimsg>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011ea0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3738      	adds	r7, #56	; 0x38
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	080210dc 	.word	0x080210dc
 8011eb0:	08021258 	.word	0x08021258
 8011eb4:	08021178 	.word	0x08021178
 8011eb8:	08024ad4 	.word	0x08024ad4
 8011ebc:	0801364d 	.word	0x0801364d

08011ec0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b08c      	sub	sp, #48	; 0x30
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	460b      	mov	r3, r1
 8011eca:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d109      	bne.n	8011ee6 <netconn_listen_with_backlog+0x26>
 8011ed2:	4b0d      	ldr	r3, [pc, #52]	; (8011f08 <netconn_listen_with_backlog+0x48>)
 8011ed4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8011ed8:	490c      	ldr	r1, [pc, #48]	; (8011f0c <netconn_listen_with_backlog+0x4c>)
 8011eda:	480d      	ldr	r0, [pc, #52]	; (8011f10 <netconn_listen_with_backlog+0x50>)
 8011edc:	f00e f914 	bl	8020108 <iprintf>
 8011ee0:	f06f 030f 	mvn.w	r3, #15
 8011ee4:	e00c      	b.n	8011f00 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8011eea:	f107 030c 	add.w	r3, r7, #12
 8011eee:	4619      	mov	r1, r3
 8011ef0:	4808      	ldr	r0, [pc, #32]	; (8011f14 <netconn_listen_with_backlog+0x54>)
 8011ef2:	f7ff fed5 	bl	8011ca0 <netconn_apimsg>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011efc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3730      	adds	r7, #48	; 0x30
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	080210dc 	.word	0x080210dc
 8011f0c:	080212d8 	.word	0x080212d8
 8011f10:	08021178 	.word	0x08021178
 8011f14:	080136c1 	.word	0x080136c1

08011f18 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b086      	sub	sp, #24
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d109      	bne.n	8011f3c <netconn_accept+0x24>
 8011f28:	4b3d      	ldr	r3, [pc, #244]	; (8012020 <netconn_accept+0x108>)
 8011f2a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011f2e:	493d      	ldr	r1, [pc, #244]	; (8012024 <netconn_accept+0x10c>)
 8011f30:	483d      	ldr	r0, [pc, #244]	; (8012028 <netconn_accept+0x110>)
 8011f32:	f00e f8e9 	bl	8020108 <iprintf>
 8011f36:	f06f 030f 	mvn.w	r3, #15
 8011f3a:	e06c      	b.n	8012016 <netconn_accept+0xfe>
  *new_conn = NULL;
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d109      	bne.n	8011f5c <netconn_accept+0x44>
 8011f48:	4b35      	ldr	r3, [pc, #212]	; (8012020 <netconn_accept+0x108>)
 8011f4a:	f240 12e3 	movw	r2, #483	; 0x1e3
 8011f4e:	4937      	ldr	r1, [pc, #220]	; (801202c <netconn_accept+0x114>)
 8011f50:	4835      	ldr	r0, [pc, #212]	; (8012028 <netconn_accept+0x110>)
 8011f52:	f00e f8d9 	bl	8020108 <iprintf>
 8011f56:	f06f 030f 	mvn.w	r3, #15
 8011f5a:	e05c      	b.n	8012016 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 fb6c 	bl	801263a <netconn_err>
 8011f62:	4603      	mov	r3, r0
 8011f64:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8011f66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8011f6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f72:	e050      	b.n	8012016 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	3314      	adds	r3, #20
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f006 fa6c 	bl	8018456 <sys_mbox_valid>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d005      	beq.n	8011f90 <netconn_accept+0x78>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	7f1b      	ldrb	r3, [r3, #28]
 8011f88:	f003 0301 	and.w	r3, r3, #1
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d002      	beq.n	8011f96 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8011f90:	f06f 030e 	mvn.w	r3, #14
 8011f94:	e03f      	b.n	8012016 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	7f1b      	ldrb	r3, [r3, #28]
 8011f9a:	f003 0302 	and.w	r3, r3, #2
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d00e      	beq.n	8011fc0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	3314      	adds	r3, #20
 8011fa6:	f107 020c 	add.w	r2, r7, #12
 8011faa:	4611      	mov	r1, r2
 8011fac:	4618      	mov	r0, r3
 8011fae:	f006 fa36 	bl	801841e <sys_arch_mbox_tryfetch>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fb8:	d10a      	bne.n	8011fd0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8011fba:	f06f 0306 	mvn.w	r3, #6
 8011fbe:	e02a      	b.n	8012016 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	3314      	adds	r3, #20
 8011fc4:	f107 010c 	add.w	r1, r7, #12
 8011fc8:	2200      	movs	r2, #0
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f006 f9e8 	bl	80183a0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d005      	beq.n	8011fe4 <netconn_accept+0xcc>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fdc:	2200      	movs	r2, #0
 8011fde:	2101      	movs	r1, #1
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f107 0213 	add.w	r2, r7, #19
 8011fea:	4611      	mov	r1, r2
 8011fec:	4618      	mov	r0, r3
 8011fee:	f000 fb75 	bl	80126dc <lwip_netconn_is_err_msg>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d002      	beq.n	8011ffe <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8011ff8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ffc:	e00b      	b.n	8012016 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d102      	bne.n	801200a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8012004:	f06f 030e 	mvn.w	r3, #14
 8012008:	e005      	b.n	8012016 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	697a      	ldr	r2, [r7, #20]
 8012012:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8012014:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8012016:	4618      	mov	r0, r3
 8012018:	3718      	adds	r7, #24
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	080210dc 	.word	0x080210dc
 8012024:	080212f8 	.word	0x080212f8
 8012028:	08021178 	.word	0x08021178
 801202c:	08021318 	.word	0x08021318

08012030 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b088      	sub	sp, #32
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	4613      	mov	r3, r2
 801203c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801203e:	2300      	movs	r3, #0
 8012040:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d109      	bne.n	801205c <netconn_recv_data+0x2c>
 8012048:	4b58      	ldr	r3, [pc, #352]	; (80121ac <netconn_recv_data+0x17c>)
 801204a:	f44f 7212 	mov.w	r2, #584	; 0x248
 801204e:	4958      	ldr	r1, [pc, #352]	; (80121b0 <netconn_recv_data+0x180>)
 8012050:	4858      	ldr	r0, [pc, #352]	; (80121b4 <netconn_recv_data+0x184>)
 8012052:	f00e f859 	bl	8020108 <iprintf>
 8012056:	f06f 030f 	mvn.w	r3, #15
 801205a:	e0a2      	b.n	80121a2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	2200      	movs	r2, #0
 8012060:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d109      	bne.n	801207c <netconn_recv_data+0x4c>
 8012068:	4b50      	ldr	r3, [pc, #320]	; (80121ac <netconn_recv_data+0x17c>)
 801206a:	f240 224a 	movw	r2, #586	; 0x24a
 801206e:	4952      	ldr	r1, [pc, #328]	; (80121b8 <netconn_recv_data+0x188>)
 8012070:	4850      	ldr	r0, [pc, #320]	; (80121b4 <netconn_recv_data+0x184>)
 8012072:	f00e f849 	bl	8020108 <iprintf>
 8012076:	f06f 030f 	mvn.w	r3, #15
 801207a:	e092      	b.n	80121a2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	3310      	adds	r3, #16
 8012080:	4618      	mov	r0, r3
 8012082:	f006 f9e8 	bl	8018456 <sys_mbox_valid>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d10e      	bne.n	80120aa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 fad4 	bl	801263a <netconn_err>
 8012092:	4603      	mov	r3, r0
 8012094:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8012096:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d002      	beq.n	80120a4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801209e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80120a2:	e07e      	b.n	80121a2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80120a4:	f06f 030a 	mvn.w	r3, #10
 80120a8:	e07b      	b.n	80121a2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	7f1b      	ldrb	r3, [r3, #28]
 80120ae:	f003 0302 	and.w	r3, r3, #2
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d10f      	bne.n	80120d6 <netconn_recv_data+0xa6>
 80120b6:	79fb      	ldrb	r3, [r7, #7]
 80120b8:	f003 0304 	and.w	r3, r3, #4
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d10a      	bne.n	80120d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	7f1b      	ldrb	r3, [r3, #28]
 80120c4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d104      	bne.n	80120d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d023      	beq.n	801211e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	3310      	adds	r3, #16
 80120da:	f107 0218 	add.w	r2, r7, #24
 80120de:	4611      	mov	r1, r2
 80120e0:	4618      	mov	r0, r3
 80120e2:	f006 f99c 	bl	801841e <sys_arch_mbox_tryfetch>
 80120e6:	4603      	mov	r3, r0
 80120e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120ec:	d11f      	bne.n	801212e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80120ee:	68f8      	ldr	r0, [r7, #12]
 80120f0:	f000 faa3 	bl	801263a <netconn_err>
 80120f4:	4603      	mov	r3, r0
 80120f6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80120f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d002      	beq.n	8012106 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8012100:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012104:	e04d      	b.n	80121a2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	7f1b      	ldrb	r3, [r3, #28]
 801210a:	f003 0301 	and.w	r3, r3, #1
 801210e:	2b00      	cmp	r3, #0
 8012110:	d002      	beq.n	8012118 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8012112:	f06f 030a 	mvn.w	r3, #10
 8012116:	e044      	b.n	80121a2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8012118:	f06f 0306 	mvn.w	r3, #6
 801211c:	e041      	b.n	80121a2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	3310      	adds	r3, #16
 8012122:	f107 0118 	add.w	r1, r7, #24
 8012126:	2200      	movs	r2, #0
 8012128:	4618      	mov	r0, r3
 801212a:	f006 f939 	bl	80183a0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012136:	2b10      	cmp	r3, #16
 8012138:	d117      	bne.n	801216a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	f107 0217 	add.w	r2, r7, #23
 8012140:	4611      	mov	r1, r2
 8012142:	4618      	mov	r0, r3
 8012144:	f000 faca 	bl	80126dc <lwip_netconn_is_err_msg>
 8012148:	4603      	mov	r3, r0
 801214a:	2b00      	cmp	r3, #0
 801214c:	d009      	beq.n	8012162 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801214e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012152:	f113 0f0f 	cmn.w	r3, #15
 8012156:	d101      	bne.n	801215c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8012158:	2300      	movs	r3, #0
 801215a:	e022      	b.n	80121a2 <netconn_recv_data+0x172>
      }
      return err;
 801215c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012160:	e01f      	b.n	80121a2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8012162:	69bb      	ldr	r3, [r7, #24]
 8012164:	891b      	ldrh	r3, [r3, #8]
 8012166:	83fb      	strh	r3, [r7, #30]
 8012168:	e00d      	b.n	8012186 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d106      	bne.n	801217e <netconn_recv_data+0x14e>
 8012170:	4b0e      	ldr	r3, [pc, #56]	; (80121ac <netconn_recv_data+0x17c>)
 8012172:	f240 2291 	movw	r2, #657	; 0x291
 8012176:	4911      	ldr	r1, [pc, #68]	; (80121bc <netconn_recv_data+0x18c>)
 8012178:	480e      	ldr	r0, [pc, #56]	; (80121b4 <netconn_recv_data+0x184>)
 801217a:	f00d ffc5 	bl	8020108 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	891b      	ldrh	r3, [r3, #8]
 8012184:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801218a:	2b00      	cmp	r3, #0
 801218c:	d005      	beq.n	801219a <netconn_recv_data+0x16a>
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012192:	8bfa      	ldrh	r2, [r7, #30]
 8012194:	2101      	movs	r1, #1
 8012196:	68f8      	ldr	r0, [r7, #12]
 8012198:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801219a:	69ba      	ldr	r2, [r7, #24]
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80121a0:	2300      	movs	r3, #0
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3720      	adds	r7, #32
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	080210dc 	.word	0x080210dc
 80121b0:	08021338 	.word	0x08021338
 80121b4:	08021178 	.word	0x08021178
 80121b8:	08021358 	.word	0x08021358
 80121bc:	08021374 	.word	0x08021374

080121c0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d005      	beq.n	80121de <netconn_tcp_recvd_msg+0x1e>
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121da:	2b10      	cmp	r3, #16
 80121dc:	d009      	beq.n	80121f2 <netconn_tcp_recvd_msg+0x32>
 80121de:	4b0c      	ldr	r3, [pc, #48]	; (8012210 <netconn_tcp_recvd_msg+0x50>)
 80121e0:	f240 22a7 	movw	r2, #679	; 0x2a7
 80121e4:	490b      	ldr	r1, [pc, #44]	; (8012214 <netconn_tcp_recvd_msg+0x54>)
 80121e6:	480c      	ldr	r0, [pc, #48]	; (8012218 <netconn_tcp_recvd_msg+0x58>)
 80121e8:	f00d ff8e 	bl	8020108 <iprintf>
 80121ec:	f06f 030f 	mvn.w	r3, #15
 80121f0:	e00a      	b.n	8012208 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	68fa      	ldr	r2, [r7, #12]
 80121f6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	68ba      	ldr	r2, [r7, #8]
 80121fc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80121fe:	6879      	ldr	r1, [r7, #4]
 8012200:	4806      	ldr	r0, [pc, #24]	; (801221c <netconn_tcp_recvd_msg+0x5c>)
 8012202:	f7ff fd4d 	bl	8011ca0 <netconn_apimsg>
 8012206:	4603      	mov	r3, r0
}
 8012208:	4618      	mov	r0, r3
 801220a:	3710      	adds	r7, #16
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	080210dc 	.word	0x080210dc
 8012214:	08021380 	.word	0x08021380
 8012218:	08021178 	.word	0x08021178
 801221c:	080137f1 	.word	0x080137f1

08012220 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b090      	sub	sp, #64	; 0x40
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	4613      	mov	r3, r2
 801222c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	3310      	adds	r3, #16
 8012232:	4618      	mov	r0, r3
 8012234:	f006 f90f 	bl	8018456 <sys_mbox_valid>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d102      	bne.n	8012244 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801223e:	f06f 030a 	mvn.w	r3, #10
 8012242:	e06d      	b.n	8012320 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	7f1b      	ldrb	r3, [r3, #28]
 8012248:	b25b      	sxtb	r3, r3
 801224a:	2b00      	cmp	r3, #0
 801224c:	da07      	bge.n	801225e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	7f1b      	ldrb	r3, [r3, #28]
 8012252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012256:	b2da      	uxtb	r2, r3
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 801225c:	e039      	b.n	80122d2 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 801225e:	79fb      	ldrb	r3, [r7, #7]
 8012260:	461a      	mov	r2, r3
 8012262:	68b9      	ldr	r1, [r7, #8]
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f7ff fee3 	bl	8012030 <netconn_recv_data>
 801226a:	4603      	mov	r3, r0
 801226c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8012270:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012274:	2b00      	cmp	r3, #0
 8012276:	d002      	beq.n	801227e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8012278:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801227c:	e050      	b.n	8012320 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8012284:	79fb      	ldrb	r3, [r7, #7]
 8012286:	f003 0308 	and.w	r3, r3, #8
 801228a:	2b00      	cmp	r3, #0
 801228c:	d10e      	bne.n	80122ac <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012290:	2b00      	cmp	r3, #0
 8012292:	d002      	beq.n	801229a <netconn_recv_data_tcp+0x7a>
 8012294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012296:	891b      	ldrh	r3, [r3, #8]
 8012298:	e000      	b.n	801229c <netconn_recv_data_tcp+0x7c>
 801229a:	2301      	movs	r3, #1
 801229c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801229e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80122a0:	f107 0214 	add.w	r2, r7, #20
 80122a4:	4619      	mov	r1, r3
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f7ff ff8a 	bl	80121c0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80122ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d134      	bne.n	801231c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	f003 0310 	and.w	r3, r3, #16
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d009      	beq.n	80122d0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	7f1b      	ldrb	r3, [r3, #28]
 80122c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80122c4:	b2da      	uxtb	r2, r3
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80122ca:	f06f 0306 	mvn.w	r3, #6
 80122ce:	e027      	b.n	8012320 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80122d0:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d005      	beq.n	80122e6 <netconn_recv_data_tcp+0xc6>
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122de:	2200      	movs	r2, #0
 80122e0:	2101      	movs	r1, #1
 80122e2:	68f8      	ldr	r0, [r7, #12]
 80122e4:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d10f      	bne.n	801230e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f000 f9a3 	bl	801263a <netconn_err>
 80122f4:	4603      	mov	r3, r0
 80122f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80122fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d002      	beq.n	8012308 <netconn_recv_data_tcp+0xe8>
          return err;
 8012302:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012306:	e00b      	b.n	8012320 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8012308:	f06f 030d 	mvn.w	r3, #13
 801230c:	e008      	b.n	8012320 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801230e:	2101      	movs	r1, #1
 8012310:	68f8      	ldr	r0, [r7, #12]
 8012312:	f000 f955 	bl	80125c0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8012316:	f06f 030e 	mvn.w	r3, #14
 801231a:	e001      	b.n	8012320 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 801231c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8012320:	4618      	mov	r0, r3
 8012322:	3740      	adds	r7, #64	; 0x40
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b086      	sub	sp, #24
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8012332:	2300      	movs	r3, #0
 8012334:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d109      	bne.n	8012350 <netconn_recv+0x28>
 801233c:	4b32      	ldr	r3, [pc, #200]	; (8012408 <netconn_recv+0xe0>)
 801233e:	f240 3263 	movw	r2, #867	; 0x363
 8012342:	4932      	ldr	r1, [pc, #200]	; (801240c <netconn_recv+0xe4>)
 8012344:	4832      	ldr	r0, [pc, #200]	; (8012410 <netconn_recv+0xe8>)
 8012346:	f00d fedf 	bl	8020108 <iprintf>
 801234a:	f06f 030f 	mvn.w	r3, #15
 801234e:	e056      	b.n	80123fe <netconn_recv+0xd6>
  *new_buf = NULL;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	2200      	movs	r2, #0
 8012354:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d109      	bne.n	8012370 <netconn_recv+0x48>
 801235c:	4b2a      	ldr	r3, [pc, #168]	; (8012408 <netconn_recv+0xe0>)
 801235e:	f240 3265 	movw	r2, #869	; 0x365
 8012362:	492c      	ldr	r1, [pc, #176]	; (8012414 <netconn_recv+0xec>)
 8012364:	482a      	ldr	r0, [pc, #168]	; (8012410 <netconn_recv+0xe8>)
 8012366:	f00d fecf 	bl	8020108 <iprintf>
 801236a:	f06f 030f 	mvn.w	r3, #15
 801236e:	e046      	b.n	80123fe <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012378:	2b10      	cmp	r3, #16
 801237a:	d13a      	bne.n	80123f2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 801237c:	2300      	movs	r3, #0
 801237e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012380:	2006      	movs	r0, #6
 8012382:	f004 fdbb 	bl	8016efc <memp_malloc>
 8012386:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d102      	bne.n	8012394 <netconn_recv+0x6c>
      return ERR_MEM;
 801238e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012392:	e034      	b.n	80123fe <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8012394:	f107 030c 	add.w	r3, r7, #12
 8012398:	2200      	movs	r2, #0
 801239a:	4619      	mov	r1, r3
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f7ff ff3f 	bl	8012220 <netconn_recv_data_tcp>
 80123a2:	4603      	mov	r3, r0
 80123a4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80123a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d006      	beq.n	80123bc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80123ae:	6979      	ldr	r1, [r7, #20]
 80123b0:	2006      	movs	r0, #6
 80123b2:	f004 fe19 	bl	8016fe8 <memp_free>
      return err;
 80123b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123ba:	e020      	b.n	80123fe <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d106      	bne.n	80123d0 <netconn_recv+0xa8>
 80123c2:	4b11      	ldr	r3, [pc, #68]	; (8012408 <netconn_recv+0xe0>)
 80123c4:	f240 3279 	movw	r2, #889	; 0x379
 80123c8:	4913      	ldr	r1, [pc, #76]	; (8012418 <netconn_recv+0xf0>)
 80123ca:	4811      	ldr	r0, [pc, #68]	; (8012410 <netconn_recv+0xe8>)
 80123cc:	f00d fe9c 	bl	8020108 <iprintf>

    buf->p = p;
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80123d6:	68fa      	ldr	r2, [r7, #12]
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	2200      	movs	r2, #0
 80123e0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	2200      	movs	r2, #0
 80123e6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	697a      	ldr	r2, [r7, #20]
 80123ec:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80123ee:	2300      	movs	r3, #0
 80123f0:	e005      	b.n	80123fe <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80123f2:	2200      	movs	r2, #0
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f7ff fe1a 	bl	8012030 <netconn_recv_data>
 80123fc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3718      	adds	r7, #24
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	080210dc 	.word	0x080210dc
 801240c:	08021338 	.word	0x08021338
 8012410:	08021178 	.word	0x08021178
 8012414:	08021358 	.word	0x08021358
 8012418:	080213d0 	.word	0x080213d0

0801241c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b088      	sub	sp, #32
 8012420:	af02      	add	r7, sp, #8
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
 8012428:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8012432:	78fa      	ldrb	r2, [r7, #3]
 8012434:	f107 0110 	add.w	r1, r7, #16
 8012438:	6a3b      	ldr	r3, [r7, #32]
 801243a:	9300      	str	r3, [sp, #0]
 801243c:	4613      	mov	r3, r2
 801243e:	2201      	movs	r2, #1
 8012440:	68f8      	ldr	r0, [r7, #12]
 8012442:	f000 f805 	bl	8012450 <netconn_write_vectors_partly>
 8012446:	4603      	mov	r3, r0
}
 8012448:	4618      	mov	r0, r3
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b092      	sub	sp, #72	; 0x48
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	4611      	mov	r1, r2
 801245c:	461a      	mov	r2, r3
 801245e:	460b      	mov	r3, r1
 8012460:	80fb      	strh	r3, [r7, #6]
 8012462:	4613      	mov	r3, r2
 8012464:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d109      	bne.n	8012480 <netconn_write_vectors_partly+0x30>
 801246c:	4b4e      	ldr	r3, [pc, #312]	; (80125a8 <netconn_write_vectors_partly+0x158>)
 801246e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012472:	494e      	ldr	r1, [pc, #312]	; (80125ac <netconn_write_vectors_partly+0x15c>)
 8012474:	484e      	ldr	r0, [pc, #312]	; (80125b0 <netconn_write_vectors_partly+0x160>)
 8012476:	f00d fe47 	bl	8020108 <iprintf>
 801247a:	f06f 030f 	mvn.w	r3, #15
 801247e:	e08e      	b.n	801259e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012488:	2b10      	cmp	r3, #16
 801248a:	d009      	beq.n	80124a0 <netconn_write_vectors_partly+0x50>
 801248c:	4b46      	ldr	r3, [pc, #280]	; (80125a8 <netconn_write_vectors_partly+0x158>)
 801248e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8012492:	4948      	ldr	r1, [pc, #288]	; (80125b4 <netconn_write_vectors_partly+0x164>)
 8012494:	4846      	ldr	r0, [pc, #280]	; (80125b0 <netconn_write_vectors_partly+0x160>)
 8012496:	f00d fe37 	bl	8020108 <iprintf>
 801249a:	f06f 0305 	mvn.w	r3, #5
 801249e:	e07e      	b.n	801259e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	7f1b      	ldrb	r3, [r3, #28]
 80124a4:	f003 0302 	and.w	r3, r3, #2
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d104      	bne.n	80124b6 <netconn_write_vectors_partly+0x66>
 80124ac:	797b      	ldrb	r3, [r7, #5]
 80124ae:	f003 0304 	and.w	r3, r3, #4
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d001      	beq.n	80124ba <netconn_write_vectors_partly+0x6a>
 80124b6:	2301      	movs	r3, #1
 80124b8:	e000      	b.n	80124bc <netconn_write_vectors_partly+0x6c>
 80124ba:	2300      	movs	r3, #0
 80124bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80124c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d005      	beq.n	80124d4 <netconn_write_vectors_partly+0x84>
 80124c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d102      	bne.n	80124d4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80124ce:	f06f 0305 	mvn.w	r3, #5
 80124d2:	e064      	b.n	801259e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80124d4:	2300      	movs	r3, #0
 80124d6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80124d8:	2300      	movs	r3, #0
 80124da:	643b      	str	r3, [r7, #64]	; 0x40
 80124dc:	e015      	b.n	801250a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80124de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124e0:	00db      	lsls	r3, r3, #3
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	4413      	add	r3, r2
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124ea:	4413      	add	r3, r2
 80124ec:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80124ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124f0:	00db      	lsls	r3, r3, #3
 80124f2:	68ba      	ldr	r2, [r7, #8]
 80124f4:	4413      	add	r3, r2
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d202      	bcs.n	8012504 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80124fe:	f06f 0305 	mvn.w	r3, #5
 8012502:	e04c      	b.n	801259e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8012504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012506:	3301      	adds	r3, #1
 8012508:	643b      	str	r3, [r7, #64]	; 0x40
 801250a:	88fb      	ldrh	r3, [r7, #6]
 801250c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801250e:	429a      	cmp	r2, r3
 8012510:	dbe5      	blt.n	80124de <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8012512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012514:	2b00      	cmp	r3, #0
 8012516:	d101      	bne.n	801251c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8012518:	2300      	movs	r3, #0
 801251a:	e040      	b.n	801259e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 801251c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801251e:	2b00      	cmp	r3, #0
 8012520:	da0a      	bge.n	8012538 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8012522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012524:	2b00      	cmp	r3, #0
 8012526:	d102      	bne.n	801252e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8012528:	f06f 0305 	mvn.w	r3, #5
 801252c:	e037      	b.n	801259e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 801252e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012532:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8012534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012536:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8012540:	88fb      	ldrh	r3, [r7, #6]
 8012542:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8012544:	2300      	movs	r3, #0
 8012546:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8012548:	797b      	ldrb	r3, [r7, #5]
 801254a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801254e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012550:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8012556:	f107 0314 	add.w	r3, r7, #20
 801255a:	4619      	mov	r1, r3
 801255c:	4816      	ldr	r0, [pc, #88]	; (80125b8 <netconn_write_vectors_partly+0x168>)
 801255e:	f7ff fb9f 	bl	8011ca0 <netconn_apimsg>
 8012562:	4603      	mov	r3, r0
 8012564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8012568:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801256c:	2b00      	cmp	r3, #0
 801256e:	d114      	bne.n	801259a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8012570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012572:	2b00      	cmp	r3, #0
 8012574:	d002      	beq.n	801257c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8012576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801257a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801257c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012580:	2b00      	cmp	r3, #0
 8012582:	d10a      	bne.n	801259a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8012584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012588:	429a      	cmp	r2, r3
 801258a:	d006      	beq.n	801259a <netconn_write_vectors_partly+0x14a>
 801258c:	4b06      	ldr	r3, [pc, #24]	; (80125a8 <netconn_write_vectors_partly+0x158>)
 801258e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012592:	490a      	ldr	r1, [pc, #40]	; (80125bc <netconn_write_vectors_partly+0x16c>)
 8012594:	4806      	ldr	r0, [pc, #24]	; (80125b0 <netconn_write_vectors_partly+0x160>)
 8012596:	f00d fdb7 	bl	8020108 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801259a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3748      	adds	r7, #72	; 0x48
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	080210dc 	.word	0x080210dc
 80125ac:	080213f8 	.word	0x080213f8
 80125b0:	08021178 	.word	0x08021178
 80125b4:	08021414 	.word	0x08021414
 80125b8:	08013bf9 	.word	0x08013bf9
 80125bc:	08021438 	.word	0x08021438

080125c0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b08c      	sub	sp, #48	; 0x30
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	460b      	mov	r3, r1
 80125ca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d109      	bne.n	80125e6 <netconn_close_shutdown+0x26>
 80125d2:	4b0f      	ldr	r3, [pc, #60]	; (8012610 <netconn_close_shutdown+0x50>)
 80125d4:	f240 4247 	movw	r2, #1095	; 0x447
 80125d8:	490e      	ldr	r1, [pc, #56]	; (8012614 <netconn_close_shutdown+0x54>)
 80125da:	480f      	ldr	r0, [pc, #60]	; (8012618 <netconn_close_shutdown+0x58>)
 80125dc:	f00d fd94 	bl	8020108 <iprintf>
 80125e0:	f06f 030f 	mvn.w	r3, #15
 80125e4:	e010      	b.n	8012608 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80125ea:	78fb      	ldrb	r3, [r7, #3]
 80125ec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80125ee:	2329      	movs	r3, #41	; 0x29
 80125f0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80125f2:	f107 030c 	add.w	r3, r7, #12
 80125f6:	4619      	mov	r1, r3
 80125f8:	4808      	ldr	r0, [pc, #32]	; (801261c <netconn_close_shutdown+0x5c>)
 80125fa:	f7ff fb51 	bl	8011ca0 <netconn_apimsg>
 80125fe:	4603      	mov	r3, r0
 8012600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8012604:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8012608:	4618      	mov	r0, r3
 801260a:	3730      	adds	r7, #48	; 0x30
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	080210dc 	.word	0x080210dc
 8012614:	0802145c 	.word	0x0802145c
 8012618:	08021178 	.word	0x08021178
 801261c:	08013d11 	.word	0x08013d11

08012620 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8012628:	2103      	movs	r1, #3
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff ffc8 	bl	80125c0 <netconn_close_shutdown>
 8012630:	4603      	mov	r3, r0
}
 8012632:	4618      	mov	r0, r3
 8012634:	3708      	adds	r7, #8
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801263a:	b580      	push	{r7, lr}
 801263c:	b084      	sub	sp, #16
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d101      	bne.n	801264c <netconn_err+0x12>
    return ERR_OK;
 8012648:	2300      	movs	r3, #0
 801264a:	e00d      	b.n	8012668 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 801264c:	f006 f81e 	bl	801868c <sys_arch_protect>
 8012650:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	7a1b      	ldrb	r3, [r3, #8]
 8012656:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2200      	movs	r2, #0
 801265c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f006 f822 	bl	80186a8 <sys_arch_unprotect>
  return err;
 8012664:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012668:	4618      	mov	r0, r3
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
 8012676:	4603      	mov	r3, r0
 8012678:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801267e:	f113 0f0d 	cmn.w	r3, #13
 8012682:	d009      	beq.n	8012698 <lwip_netconn_err_to_msg+0x28>
 8012684:	f113 0f0d 	cmn.w	r3, #13
 8012688:	dc0c      	bgt.n	80126a4 <lwip_netconn_err_to_msg+0x34>
 801268a:	f113 0f0f 	cmn.w	r3, #15
 801268e:	d007      	beq.n	80126a0 <lwip_netconn_err_to_msg+0x30>
 8012690:	f113 0f0e 	cmn.w	r3, #14
 8012694:	d002      	beq.n	801269c <lwip_netconn_err_to_msg+0x2c>
 8012696:	e005      	b.n	80126a4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8012698:	4b0a      	ldr	r3, [pc, #40]	; (80126c4 <lwip_netconn_err_to_msg+0x54>)
 801269a:	e00e      	b.n	80126ba <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 801269c:	4b0a      	ldr	r3, [pc, #40]	; (80126c8 <lwip_netconn_err_to_msg+0x58>)
 801269e:	e00c      	b.n	80126ba <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80126a0:	4b0a      	ldr	r3, [pc, #40]	; (80126cc <lwip_netconn_err_to_msg+0x5c>)
 80126a2:	e00a      	b.n	80126ba <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80126a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d005      	beq.n	80126b8 <lwip_netconn_err_to_msg+0x48>
 80126ac:	4b08      	ldr	r3, [pc, #32]	; (80126d0 <lwip_netconn_err_to_msg+0x60>)
 80126ae:	227d      	movs	r2, #125	; 0x7d
 80126b0:	4908      	ldr	r1, [pc, #32]	; (80126d4 <lwip_netconn_err_to_msg+0x64>)
 80126b2:	4809      	ldr	r0, [pc, #36]	; (80126d8 <lwip_netconn_err_to_msg+0x68>)
 80126b4:	f00d fd28 	bl	8020108 <iprintf>
      return NULL;
 80126b8:	2300      	movs	r3, #0
  }
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3708      	adds	r7, #8
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	08024abe 	.word	0x08024abe
 80126c8:	08024abf 	.word	0x08024abf
 80126cc:	08024ac0 	.word	0x08024ac0
 80126d0:	08021478 	.word	0x08021478
 80126d4:	080214f0 	.word	0x080214f0
 80126d8:	08021500 	.word	0x08021500

080126dc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d105      	bne.n	80126f8 <lwip_netconn_is_err_msg+0x1c>
 80126ec:	4b12      	ldr	r3, [pc, #72]	; (8012738 <lwip_netconn_is_err_msg+0x5c>)
 80126ee:	2285      	movs	r2, #133	; 0x85
 80126f0:	4912      	ldr	r1, [pc, #72]	; (801273c <lwip_netconn_is_err_msg+0x60>)
 80126f2:	4813      	ldr	r0, [pc, #76]	; (8012740 <lwip_netconn_is_err_msg+0x64>)
 80126f4:	f00d fd08 	bl	8020108 <iprintf>

  if (msg == &netconn_aborted) {
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4a12      	ldr	r2, [pc, #72]	; (8012744 <lwip_netconn_is_err_msg+0x68>)
 80126fc:	4293      	cmp	r3, r2
 80126fe:	d104      	bne.n	801270a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	22f3      	movs	r2, #243	; 0xf3
 8012704:	701a      	strb	r2, [r3, #0]
    return 1;
 8012706:	2301      	movs	r3, #1
 8012708:	e012      	b.n	8012730 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4a0e      	ldr	r2, [pc, #56]	; (8012748 <lwip_netconn_is_err_msg+0x6c>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d104      	bne.n	801271c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	22f2      	movs	r2, #242	; 0xf2
 8012716:	701a      	strb	r2, [r3, #0]
    return 1;
 8012718:	2301      	movs	r3, #1
 801271a:	e009      	b.n	8012730 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	4a0b      	ldr	r2, [pc, #44]	; (801274c <lwip_netconn_is_err_msg+0x70>)
 8012720:	4293      	cmp	r3, r2
 8012722:	d104      	bne.n	801272e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	22f1      	movs	r2, #241	; 0xf1
 8012728:	701a      	strb	r2, [r3, #0]
    return 1;
 801272a:	2301      	movs	r3, #1
 801272c:	e000      	b.n	8012730 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	3708      	adds	r7, #8
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}
 8012738:	08021478 	.word	0x08021478
 801273c:	08021528 	.word	0x08021528
 8012740:	08021500 	.word	0x08021500
 8012744:	08024abe 	.word	0x08024abe
 8012748:	08024abf 	.word	0x08024abf
 801274c:	08024ac0 	.word	0x08024ac0

08012750 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b088      	sub	sp, #32
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
 801275c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d105      	bne.n	8012770 <recv_udp+0x20>
 8012764:	4b34      	ldr	r3, [pc, #208]	; (8012838 <recv_udp+0xe8>)
 8012766:	22e5      	movs	r2, #229	; 0xe5
 8012768:	4934      	ldr	r1, [pc, #208]	; (801283c <recv_udp+0xec>)
 801276a:	4835      	ldr	r0, [pc, #212]	; (8012840 <recv_udp+0xf0>)
 801276c:	f00d fccc 	bl	8020108 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d105      	bne.n	8012782 <recv_udp+0x32>
 8012776:	4b30      	ldr	r3, [pc, #192]	; (8012838 <recv_udp+0xe8>)
 8012778:	22e6      	movs	r2, #230	; 0xe6
 801277a:	4932      	ldr	r1, [pc, #200]	; (8012844 <recv_udp+0xf4>)
 801277c:	4830      	ldr	r0, [pc, #192]	; (8012840 <recv_udp+0xf0>)
 801277e:	f00d fcc3 	bl	8020108 <iprintf>
  conn = (struct netconn *)arg;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d103      	bne.n	8012794 <recv_udp+0x44>
    pbuf_free(p);
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f005 fb1f 	bl	8017dd0 <pbuf_free>
    return;
 8012792:	e04d      	b.n	8012830 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	68ba      	ldr	r2, [r7, #8]
 801279a:	429a      	cmp	r2, r3
 801279c:	d005      	beq.n	80127aa <recv_udp+0x5a>
 801279e:	4b26      	ldr	r3, [pc, #152]	; (8012838 <recv_udp+0xe8>)
 80127a0:	22ee      	movs	r2, #238	; 0xee
 80127a2:	4929      	ldr	r1, [pc, #164]	; (8012848 <recv_udp+0xf8>)
 80127a4:	4826      	ldr	r0, [pc, #152]	; (8012840 <recv_udp+0xf0>)
 80127a6:	f00d fcaf 	bl	8020108 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	3310      	adds	r3, #16
 80127ae:	4618      	mov	r0, r3
 80127b0:	f005 fe51 	bl	8018456 <sys_mbox_valid>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d103      	bne.n	80127c2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f005 fb08 	bl	8017dd0 <pbuf_free>
    return;
 80127c0:	e036      	b.n	8012830 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80127c2:	2006      	movs	r0, #6
 80127c4:	f004 fb9a 	bl	8016efc <memp_malloc>
 80127c8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80127ca:	69bb      	ldr	r3, [r7, #24]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d103      	bne.n	80127d8 <recv_udp+0x88>
    pbuf_free(p);
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f005 fafd 	bl	8017dd0 <pbuf_free>
    return;
 80127d6:	e02b      	b.n	8012830 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	687a      	ldr	r2, [r7, #4]
 80127dc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d002      	beq.n	80127f0 <recv_udp+0xa0>
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	e000      	b.n	80127f2 <recv_udp+0xa2>
 80127f0:	2300      	movs	r3, #0
 80127f2:	69ba      	ldr	r2, [r7, #24]
 80127f4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80127f6:	69bb      	ldr	r3, [r7, #24]
 80127f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80127fa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	891b      	ldrh	r3, [r3, #8]
 8012800:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	3310      	adds	r3, #16
 8012806:	69b9      	ldr	r1, [r7, #24]
 8012808:	4618      	mov	r0, r3
 801280a:	f005 fdaf 	bl	801836c <sys_mbox_trypost>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d003      	beq.n	801281c <recv_udp+0xcc>
    netbuf_delete(buf);
 8012814:	69b8      	ldr	r0, [r7, #24]
 8012816:	f004 fc11 	bl	801703c <netbuf_delete>
    return;
 801281a:	e009      	b.n	8012830 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012820:	2b00      	cmp	r3, #0
 8012822:	d005      	beq.n	8012830 <recv_udp+0xe0>
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012828:	8afa      	ldrh	r2, [r7, #22]
 801282a:	2100      	movs	r1, #0
 801282c:	69f8      	ldr	r0, [r7, #28]
 801282e:	4798      	blx	r3
  }
}
 8012830:	3720      	adds	r7, #32
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	08021478 	.word	0x08021478
 801283c:	08021534 	.word	0x08021534
 8012840:	08021500 	.word	0x08021500
 8012844:	08021558 	.word	0x08021558
 8012848:	08021578 	.word	0x08021578

0801284c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b088      	sub	sp, #32
 8012850:	af00      	add	r7, sp, #0
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
 8012858:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d106      	bne.n	801286e <recv_tcp+0x22>
 8012860:	4b36      	ldr	r3, [pc, #216]	; (801293c <recv_tcp+0xf0>)
 8012862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012866:	4936      	ldr	r1, [pc, #216]	; (8012940 <recv_tcp+0xf4>)
 8012868:	4836      	ldr	r0, [pc, #216]	; (8012944 <recv_tcp+0xf8>)
 801286a:	f00d fc4d 	bl	8020108 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d106      	bne.n	8012882 <recv_tcp+0x36>
 8012874:	4b31      	ldr	r3, [pc, #196]	; (801293c <recv_tcp+0xf0>)
 8012876:	f240 122d 	movw	r2, #301	; 0x12d
 801287a:	4933      	ldr	r1, [pc, #204]	; (8012948 <recv_tcp+0xfc>)
 801287c:	4831      	ldr	r0, [pc, #196]	; (8012944 <recv_tcp+0xf8>)
 801287e:	f00d fc43 	bl	8020108 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8012882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d006      	beq.n	8012898 <recv_tcp+0x4c>
 801288a:	4b2c      	ldr	r3, [pc, #176]	; (801293c <recv_tcp+0xf0>)
 801288c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8012890:	492e      	ldr	r1, [pc, #184]	; (801294c <recv_tcp+0x100>)
 8012892:	482c      	ldr	r0, [pc, #176]	; (8012944 <recv_tcp+0xf8>)
 8012894:	f00d fc38 	bl	8020108 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d102      	bne.n	80128a8 <recv_tcp+0x5c>
    return ERR_VAL;
 80128a2:	f06f 0305 	mvn.w	r3, #5
 80128a6:	e045      	b.n	8012934 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	68ba      	ldr	r2, [r7, #8]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d006      	beq.n	80128c0 <recv_tcp+0x74>
 80128b2:	4b22      	ldr	r3, [pc, #136]	; (801293c <recv_tcp+0xf0>)
 80128b4:	f240 1235 	movw	r2, #309	; 0x135
 80128b8:	4925      	ldr	r1, [pc, #148]	; (8012950 <recv_tcp+0x104>)
 80128ba:	4822      	ldr	r0, [pc, #136]	; (8012944 <recv_tcp+0xf8>)
 80128bc:	f00d fc24 	bl	8020108 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	3310      	adds	r3, #16
 80128c4:	4618      	mov	r0, r3
 80128c6:	f005 fdc6 	bl	8018456 <sys_mbox_valid>
 80128ca:	4603      	mov	r3, r0
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d10d      	bne.n	80128ec <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d008      	beq.n	80128e8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	891b      	ldrh	r3, [r3, #8]
 80128da:	4619      	mov	r1, r3
 80128dc:	68b8      	ldr	r0, [r7, #8]
 80128de:	f006 fc11 	bl	8019104 <tcp_recved>
      pbuf_free(p);
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f005 fa74 	bl	8017dd0 <pbuf_free>
    }
    return ERR_OK;
 80128e8:	2300      	movs	r3, #0
 80128ea:	e023      	b.n	8012934 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d005      	beq.n	80128fe <recv_tcp+0xb2>
    msg = p;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	891b      	ldrh	r3, [r3, #8]
 80128fa:	83fb      	strh	r3, [r7, #30]
 80128fc:	e003      	b.n	8012906 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80128fe:	4b15      	ldr	r3, [pc, #84]	; (8012954 <recv_tcp+0x108>)
 8012900:	61bb      	str	r3, [r7, #24]
    len = 0;
 8012902:	2300      	movs	r3, #0
 8012904:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	3310      	adds	r3, #16
 801290a:	69b9      	ldr	r1, [r7, #24]
 801290c:	4618      	mov	r0, r3
 801290e:	f005 fd2d 	bl	801836c <sys_mbox_trypost>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	d002      	beq.n	801291e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8012918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801291c:	e00a      	b.n	8012934 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012922:	2b00      	cmp	r3, #0
 8012924:	d005      	beq.n	8012932 <recv_tcp+0xe6>
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801292a:	8bfa      	ldrh	r2, [r7, #30]
 801292c:	2100      	movs	r1, #0
 801292e:	6978      	ldr	r0, [r7, #20]
 8012930:	4798      	blx	r3
  }

  return ERR_OK;
 8012932:	2300      	movs	r3, #0
}
 8012934:	4618      	mov	r0, r3
 8012936:	3720      	adds	r7, #32
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}
 801293c:	08021478 	.word	0x08021478
 8012940:	08021598 	.word	0x08021598
 8012944:	08021500 	.word	0x08021500
 8012948:	080215bc 	.word	0x080215bc
 801294c:	080215dc 	.word	0x080215dc
 8012950:	080215f4 	.word	0x080215f4
 8012954:	08024ac0 	.word	0x08024ac0

08012958 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d106      	bne.n	801297a <poll_tcp+0x22>
 801296c:	4b2a      	ldr	r3, [pc, #168]	; (8012a18 <poll_tcp+0xc0>)
 801296e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8012972:	492a      	ldr	r1, [pc, #168]	; (8012a1c <poll_tcp+0xc4>)
 8012974:	482a      	ldr	r0, [pc, #168]	; (8012a20 <poll_tcp+0xc8>)
 8012976:	f00d fbc7 	bl	8020108 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	785b      	ldrb	r3, [r3, #1]
 801297e:	2b01      	cmp	r3, #1
 8012980:	d104      	bne.n	801298c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8012982:	2101      	movs	r1, #1
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f000 ff69 	bl	801385c <lwip_netconn_do_writemore>
 801298a:	e016      	b.n	80129ba <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	785b      	ldrb	r3, [r3, #1]
 8012990:	2b04      	cmp	r3, #4
 8012992:	d112      	bne.n	80129ba <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	6a1b      	ldr	r3, [r3, #32]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00a      	beq.n	80129b2 <poll_tcp+0x5a>
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	6a1b      	ldr	r3, [r3, #32]
 80129a0:	7a5b      	ldrb	r3, [r3, #9]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d005      	beq.n	80129b2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	6a1b      	ldr	r3, [r3, #32]
 80129aa:	7a5a      	ldrb	r2, [r3, #9]
 80129ac:	3a01      	subs	r2, #1
 80129ae:	b2d2      	uxtb	r2, r2
 80129b0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80129b2:	2101      	movs	r1, #1
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	f000 fbfb 	bl	80131b0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	7f1b      	ldrb	r3, [r3, #28]
 80129be:	f003 0310 	and.w	r3, r3, #16
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d022      	beq.n	8012a0c <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d01e      	beq.n	8012a0c <poll_tcp+0xb4>
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80129d6:	f640 3269 	movw	r2, #2921	; 0xb69
 80129da:	4293      	cmp	r3, r2
 80129dc:	d916      	bls.n	8012a0c <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	685b      	ldr	r3, [r3, #4]
 80129e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80129e6:	2b07      	cmp	r3, #7
 80129e8:	d810      	bhi.n	8012a0c <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	7f1b      	ldrb	r3, [r3, #28]
 80129ee:	f023 0310 	bic.w	r3, r3, #16
 80129f2:	b2da      	uxtb	r2, r3
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d005      	beq.n	8012a0c <poll_tcp+0xb4>
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a04:	2200      	movs	r2, #0
 8012a06:	2102      	movs	r1, #2
 8012a08:	68f8      	ldr	r0, [r7, #12]
 8012a0a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8012a0c:	2300      	movs	r3, #0
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3710      	adds	r7, #16
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	08021478 	.word	0x08021478
 8012a1c:	08021614 	.word	0x08021614
 8012a20:	08021500 	.word	0x08021500

08012a24 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b086      	sub	sp, #24
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	4613      	mov	r3, r2
 8012a30:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d106      	bne.n	8012a4a <sent_tcp+0x26>
 8012a3c:	4b21      	ldr	r3, [pc, #132]	; (8012ac4 <sent_tcp+0xa0>)
 8012a3e:	f240 1293 	movw	r2, #403	; 0x193
 8012a42:	4921      	ldr	r1, [pc, #132]	; (8012ac8 <sent_tcp+0xa4>)
 8012a44:	4821      	ldr	r0, [pc, #132]	; (8012acc <sent_tcp+0xa8>)
 8012a46:	f00d fb5f 	bl	8020108 <iprintf>

  if (conn) {
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d033      	beq.n	8012ab8 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	785b      	ldrb	r3, [r3, #1]
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d104      	bne.n	8012a62 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8012a58:	2101      	movs	r1, #1
 8012a5a:	6978      	ldr	r0, [r7, #20]
 8012a5c:	f000 fefe 	bl	801385c <lwip_netconn_do_writemore>
 8012a60:	e007      	b.n	8012a72 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	785b      	ldrb	r3, [r3, #1]
 8012a66:	2b04      	cmp	r3, #4
 8012a68:	d103      	bne.n	8012a72 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8012a6a:	2101      	movs	r1, #1
 8012a6c:	6978      	ldr	r0, [r7, #20]
 8012a6e:	f000 fb9f 	bl	80131b0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d01e      	beq.n	8012ab8 <sent_tcp+0x94>
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012a82:	f640 3269 	movw	r2, #2921	; 0xb69
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d916      	bls.n	8012ab8 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	685b      	ldr	r3, [r3, #4]
 8012a8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012a92:	2b07      	cmp	r3, #7
 8012a94:	d810      	bhi.n	8012ab8 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	7f1b      	ldrb	r3, [r3, #28]
 8012a9a:	f023 0310 	bic.w	r3, r3, #16
 8012a9e:	b2da      	uxtb	r2, r3
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d005      	beq.n	8012ab8 <sent_tcp+0x94>
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ab0:	88fa      	ldrh	r2, [r7, #6]
 8012ab2:	2102      	movs	r1, #2
 8012ab4:	6978      	ldr	r0, [r7, #20]
 8012ab6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8012ab8:	2300      	movs	r3, #0
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3718      	adds	r7, #24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	08021478 	.word	0x08021478
 8012ac8:	08021614 	.word	0x08021614
 8012acc:	08021500 	.word	0x08021500

08012ad0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b088      	sub	sp, #32
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	460b      	mov	r3, r1
 8012ada:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d106      	bne.n	8012af4 <err_tcp+0x24>
 8012ae6:	4b5f      	ldr	r3, [pc, #380]	; (8012c64 <err_tcp+0x194>)
 8012ae8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012aec:	495e      	ldr	r1, [pc, #376]	; (8012c68 <err_tcp+0x198>)
 8012aee:	485f      	ldr	r0, [pc, #380]	; (8012c6c <err_tcp+0x19c>)
 8012af0:	f00d fb0a 	bl	8020108 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8012af4:	f005 fdca 	bl	801868c <sys_arch_protect>
 8012af8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	2200      	movs	r2, #0
 8012afe:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	78fa      	ldrb	r2, [r7, #3]
 8012b04:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8012b06:	69fb      	ldr	r3, [r7, #28]
 8012b08:	7f1b      	ldrb	r3, [r3, #28]
 8012b0a:	f043 0301 	orr.w	r3, r3, #1
 8012b0e:	b2da      	uxtb	r2, r3
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	785b      	ldrb	r3, [r3, #1]
 8012b18:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8012b20:	69b8      	ldr	r0, [r7, #24]
 8012b22:	f005 fdc1 	bl	80186a8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012b26:	69fb      	ldr	r3, [r7, #28]
 8012b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d005      	beq.n	8012b3a <err_tcp+0x6a>
 8012b2e:	69fb      	ldr	r3, [r7, #28]
 8012b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b32:	2200      	movs	r2, #0
 8012b34:	2104      	movs	r1, #4
 8012b36:	69f8      	ldr	r0, [r7, #28]
 8012b38:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d005      	beq.n	8012b4e <err_tcp+0x7e>
 8012b42:	69fb      	ldr	r3, [r7, #28]
 8012b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b46:	2200      	movs	r2, #0
 8012b48:	2100      	movs	r1, #0
 8012b4a:	69f8      	ldr	r0, [r7, #28]
 8012b4c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d005      	beq.n	8012b62 <err_tcp+0x92>
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	2102      	movs	r1, #2
 8012b5e:	69f8      	ldr	r0, [r7, #28]
 8012b60:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8012b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7ff fd82 	bl	8012670 <lwip_netconn_err_to_msg>
 8012b6c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	3310      	adds	r3, #16
 8012b72:	4618      	mov	r0, r3
 8012b74:	f005 fc6f 	bl	8018456 <sys_mbox_valid>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d005      	beq.n	8012b8a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	3310      	adds	r3, #16
 8012b82:	6939      	ldr	r1, [r7, #16]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f005 fbf1 	bl	801836c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	3314      	adds	r3, #20
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f005 fc61 	bl	8018456 <sys_mbox_valid>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d005      	beq.n	8012ba6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	3314      	adds	r3, #20
 8012b9e:	6939      	ldr	r1, [r7, #16]
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f005 fbe3 	bl	801836c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8012ba6:	7dfb      	ldrb	r3, [r7, #23]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d005      	beq.n	8012bb8 <err_tcp+0xe8>
 8012bac:	7dfb      	ldrb	r3, [r7, #23]
 8012bae:	2b04      	cmp	r3, #4
 8012bb0:	d002      	beq.n	8012bb8 <err_tcp+0xe8>
 8012bb2:	7dfb      	ldrb	r3, [r7, #23]
 8012bb4:	2b03      	cmp	r3, #3
 8012bb6:	d143      	bne.n	8012c40 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	7f1b      	ldrb	r3, [r3, #28]
 8012bbc:	f003 0304 	and.w	r3, r3, #4
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	bf14      	ite	ne
 8012bc4:	2301      	movne	r3, #1
 8012bc6:	2300      	moveq	r3, #0
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	7f1b      	ldrb	r3, [r3, #28]
 8012bd0:	f023 0304 	bic.w	r3, r3, #4
 8012bd4:	b2da      	uxtb	r2, r3
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d13b      	bne.n	8012c58 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	6a1b      	ldr	r3, [r3, #32]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d106      	bne.n	8012bf6 <err_tcp+0x126>
 8012be8:	4b1e      	ldr	r3, [pc, #120]	; (8012c64 <err_tcp+0x194>)
 8012bea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012bee:	4920      	ldr	r1, [pc, #128]	; (8012c70 <err_tcp+0x1a0>)
 8012bf0:	481e      	ldr	r0, [pc, #120]	; (8012c6c <err_tcp+0x19c>)
 8012bf2:	f00d fa89 	bl	8020108 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8012bf6:	7dfb      	ldrb	r3, [r7, #23]
 8012bf8:	2b04      	cmp	r3, #4
 8012bfa:	d104      	bne.n	8012c06 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	6a1b      	ldr	r3, [r3, #32]
 8012c00:	2200      	movs	r2, #0
 8012c02:	711a      	strb	r2, [r3, #4]
 8012c04:	e003      	b.n	8012c0e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	6a1b      	ldr	r3, [r3, #32]
 8012c0a:	78fa      	ldrb	r2, [r7, #3]
 8012c0c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012c0e:	69fb      	ldr	r3, [r7, #28]
 8012c10:	6a1b      	ldr	r3, [r3, #32]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	330c      	adds	r3, #12
 8012c16:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8012c18:	68b8      	ldr	r0, [r7, #8]
 8012c1a:	f005 fcad 	bl	8018578 <sys_sem_valid>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d106      	bne.n	8012c32 <err_tcp+0x162>
 8012c24:	4b0f      	ldr	r3, [pc, #60]	; (8012c64 <err_tcp+0x194>)
 8012c26:	f240 12ef 	movw	r2, #495	; 0x1ef
 8012c2a:	4912      	ldr	r1, [pc, #72]	; (8012c74 <err_tcp+0x1a4>)
 8012c2c:	480f      	ldr	r0, [pc, #60]	; (8012c6c <err_tcp+0x19c>)
 8012c2e:	f00d fa6b 	bl	8020108 <iprintf>
      conn->current_msg = NULL;
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	2200      	movs	r2, #0
 8012c36:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8012c38:	68b8      	ldr	r0, [r7, #8]
 8012c3a:	f005 fc83 	bl	8018544 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8012c3e:	e00b      	b.n	8012c58 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8012c40:	69fb      	ldr	r3, [r7, #28]
 8012c42:	6a1b      	ldr	r3, [r3, #32]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d008      	beq.n	8012c5a <err_tcp+0x18a>
 8012c48:	4b06      	ldr	r3, [pc, #24]	; (8012c64 <err_tcp+0x194>)
 8012c4a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8012c4e:	490a      	ldr	r1, [pc, #40]	; (8012c78 <err_tcp+0x1a8>)
 8012c50:	4806      	ldr	r0, [pc, #24]	; (8012c6c <err_tcp+0x19c>)
 8012c52:	f00d fa59 	bl	8020108 <iprintf>
  }
}
 8012c56:	e000      	b.n	8012c5a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8012c58:	bf00      	nop
}
 8012c5a:	bf00      	nop
 8012c5c:	3720      	adds	r7, #32
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	08021478 	.word	0x08021478
 8012c68:	08021614 	.word	0x08021614
 8012c6c:	08021500 	.word	0x08021500
 8012c70:	08021624 	.word	0x08021624
 8012c74:	08021640 	.word	0x08021640
 8012c78:	0802165c 	.word	0x0802165c

08012c7c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8012c8a:	6879      	ldr	r1, [r7, #4]
 8012c8c:	68f8      	ldr	r0, [r7, #12]
 8012c8e:	f007 f903 	bl	8019e98 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8012c92:	490a      	ldr	r1, [pc, #40]	; (8012cbc <setup_tcp+0x40>)
 8012c94:	68f8      	ldr	r0, [r7, #12]
 8012c96:	f007 f911 	bl	8019ebc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8012c9a:	4909      	ldr	r1, [pc, #36]	; (8012cc0 <setup_tcp+0x44>)
 8012c9c:	68f8      	ldr	r0, [r7, #12]
 8012c9e:	f007 f92f 	bl	8019f00 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8012ca2:	2202      	movs	r2, #2
 8012ca4:	4907      	ldr	r1, [pc, #28]	; (8012cc4 <setup_tcp+0x48>)
 8012ca6:	68f8      	ldr	r0, [r7, #12]
 8012ca8:	f007 f986 	bl	8019fb8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8012cac:	4906      	ldr	r1, [pc, #24]	; (8012cc8 <setup_tcp+0x4c>)
 8012cae:	68f8      	ldr	r0, [r7, #12]
 8012cb0:	f007 f948 	bl	8019f44 <tcp_err>
}
 8012cb4:	bf00      	nop
 8012cb6:	3710      	adds	r7, #16
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	0801284d 	.word	0x0801284d
 8012cc0:	08012a25 	.word	0x08012a25
 8012cc4:	08012959 	.word	0x08012959
 8012cc8:	08012ad1 	.word	0x08012ad1

08012ccc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8012ccc:	b590      	push	{r4, r7, lr}
 8012cce:	b089      	sub	sp, #36	; 0x24
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	4613      	mov	r3, r2
 8012cd8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d102      	bne.n	8012cea <accept_function+0x1e>
    return ERR_VAL;
 8012ce4:	f06f 0305 	mvn.w	r3, #5
 8012ce8:	e0a1      	b.n	8012e2e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8012cea:	69fb      	ldr	r3, [r7, #28]
 8012cec:	3314      	adds	r3, #20
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f005 fbb1 	bl	8018456 <sys_mbox_valid>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d102      	bne.n	8012d00 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8012cfa:	f06f 0305 	mvn.w	r3, #5
 8012cfe:	e096      	b.n	8012e2e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d11b      	bne.n	8012d3e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	f103 0414 	add.w	r4, r3, #20
 8012d0c:	f06f 000c 	mvn.w	r0, #12
 8012d10:	f7ff fcae 	bl	8012670 <lwip_netconn_err_to_msg>
 8012d14:	4603      	mov	r3, r0
 8012d16:	4619      	mov	r1, r3
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f005 fb27 	bl	801836c <sys_mbox_trypost>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d109      	bne.n	8012d38 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d005      	beq.n	8012d38 <accept_function+0x6c>
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d30:	2200      	movs	r2, #0
 8012d32:	2100      	movs	r1, #0
 8012d34:	69f8      	ldr	r0, [r7, #28]
 8012d36:	4798      	blx	r3
    }
    return ERR_VAL;
 8012d38:	f06f 0305 	mvn.w	r3, #5
 8012d3c:	e077      	b.n	8012e2e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8012d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d006      	beq.n	8012d54 <accept_function+0x88>
 8012d46:	4b3c      	ldr	r3, [pc, #240]	; (8012e38 <accept_function+0x16c>)
 8012d48:	f240 222a 	movw	r2, #554	; 0x22a
 8012d4c:	493b      	ldr	r1, [pc, #236]	; (8012e3c <accept_function+0x170>)
 8012d4e:	483c      	ldr	r0, [pc, #240]	; (8012e40 <accept_function+0x174>)
 8012d50:	f00d f9da 	bl	8020108 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	781a      	ldrb	r2, [r3, #0]
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	4610      	mov	r0, r2
 8012d60:	f000 f8f0 	bl	8012f44 <netconn_alloc>
 8012d64:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d11b      	bne.n	8012da4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8012d6c:	69fb      	ldr	r3, [r7, #28]
 8012d6e:	f103 0414 	add.w	r4, r3, #20
 8012d72:	f06f 000c 	mvn.w	r0, #12
 8012d76:	f7ff fc7b 	bl	8012670 <lwip_netconn_err_to_msg>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	4620      	mov	r0, r4
 8012d80:	f005 faf4 	bl	801836c <sys_mbox_trypost>
 8012d84:	4603      	mov	r3, r0
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d109      	bne.n	8012d9e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d005      	beq.n	8012d9e <accept_function+0xd2>
 8012d92:	69fb      	ldr	r3, [r7, #28]
 8012d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d96:	2200      	movs	r2, #0
 8012d98:	2100      	movs	r1, #0
 8012d9a:	69f8      	ldr	r0, [r7, #28]
 8012d9c:	4798      	blx	r3
    }
    return ERR_MEM;
 8012d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012da2:	e044      	b.n	8012e2e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8012daa:	69b8      	ldr	r0, [r7, #24]
 8012dac:	f7ff ff66 	bl	8012c7c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	3314      	adds	r3, #20
 8012db4:	69b9      	ldr	r1, [r7, #24]
 8012db6:	4618      	mov	r0, r3
 8012db8:	f005 fad8 	bl	801836c <sys_mbox_trypost>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d02a      	beq.n	8012e18 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8012dc8:	2100      	movs	r1, #0
 8012dca:	6978      	ldr	r0, [r7, #20]
 8012dcc:	f007 f864 	bl	8019e98 <tcp_arg>
    tcp_recv(pcb, NULL);
 8012dd0:	2100      	movs	r1, #0
 8012dd2:	6978      	ldr	r0, [r7, #20]
 8012dd4:	f007 f872 	bl	8019ebc <tcp_recv>
    tcp_sent(pcb, NULL);
 8012dd8:	2100      	movs	r1, #0
 8012dda:	6978      	ldr	r0, [r7, #20]
 8012ddc:	f007 f890 	bl	8019f00 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8012de0:	2200      	movs	r2, #0
 8012de2:	2100      	movs	r1, #0
 8012de4:	6978      	ldr	r0, [r7, #20]
 8012de6:	f007 f8e7 	bl	8019fb8 <tcp_poll>
    tcp_err(pcb, NULL);
 8012dea:	2100      	movs	r1, #0
 8012dec:	6978      	ldr	r0, [r7, #20]
 8012dee:	f007 f8a9 	bl	8019f44 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8012df2:	69bb      	ldr	r3, [r7, #24]
 8012df4:	2200      	movs	r2, #0
 8012df6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8012df8:	69bb      	ldr	r3, [r7, #24]
 8012dfa:	3310      	adds	r3, #16
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f005 faa3 	bl	8018348 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	3310      	adds	r3, #16
 8012e06:	4618      	mov	r0, r3
 8012e08:	f005 fb36 	bl	8018478 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8012e0c:	69b8      	ldr	r0, [r7, #24]
 8012e0e:	f000 f907 	bl	8013020 <netconn_free>
    return ERR_MEM;
 8012e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e16:	e00a      	b.n	8012e2e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d005      	beq.n	8012e2c <accept_function+0x160>
 8012e20:	69fb      	ldr	r3, [r7, #28]
 8012e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e24:	2200      	movs	r2, #0
 8012e26:	2100      	movs	r1, #0
 8012e28:	69f8      	ldr	r0, [r7, #28]
 8012e2a:	4798      	blx	r3
  }

  return ERR_OK;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3724      	adds	r7, #36	; 0x24
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd90      	pop	{r4, r7, pc}
 8012e36:	bf00      	nop
 8012e38:	08021478 	.word	0x08021478
 8012e3c:	08021678 	.word	0x08021678
 8012e40:	08021500 	.word	0x08021500

08012e44 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8012e44:	b590      	push	{r4, r7, lr}
 8012e46:	b085      	sub	sp, #20
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d006      	beq.n	8012e68 <pcb_new+0x24>
 8012e5a:	4b2b      	ldr	r3, [pc, #172]	; (8012f08 <pcb_new+0xc4>)
 8012e5c:	f240 2265 	movw	r2, #613	; 0x265
 8012e60:	492a      	ldr	r1, [pc, #168]	; (8012f0c <pcb_new+0xc8>)
 8012e62:	482b      	ldr	r0, [pc, #172]	; (8012f10 <pcb_new+0xcc>)
 8012e64:	f00d f950 	bl	8020108 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e72:	2b10      	cmp	r3, #16
 8012e74:	d022      	beq.n	8012ebc <pcb_new+0x78>
 8012e76:	2b20      	cmp	r3, #32
 8012e78:	d133      	bne.n	8012ee2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681c      	ldr	r4, [r3, #0]
 8012e7e:	7bfb      	ldrb	r3, [r7, #15]
 8012e80:	4618      	mov	r0, r3
 8012e82:	f00c faa0 	bl	801f3c6 <udp_new_ip_type>
 8012e86:	4603      	mov	r3, r0
 8012e88:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	685b      	ldr	r3, [r3, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d02a      	beq.n	8012eea <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	2b22      	cmp	r3, #34	; 0x22
 8012e9c:	d104      	bne.n	8012ea8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	6858      	ldr	r0, [r3, #4]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	4917      	ldr	r1, [pc, #92]	; (8012f14 <pcb_new+0xd0>)
 8012eb6:	f00c fa0d 	bl	801f2d4 <udp_recv>
      }
      break;
 8012eba:	e016      	b.n	8012eea <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681c      	ldr	r4, [r3, #0]
 8012ec0:	7bfb      	ldrb	r3, [r7, #15]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f006 ffda 	bl	8019e7c <tcp_new_ip_type>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d00b      	beq.n	8012eee <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7ff fece 	bl	8012c7c <setup_tcp>
      }
      break;
 8012ee0:	e005      	b.n	8012eee <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	22fa      	movs	r2, #250	; 0xfa
 8012ee6:	711a      	strb	r2, [r3, #4]
      return;
 8012ee8:	e00a      	b.n	8012f00 <pcb_new+0xbc>
      break;
 8012eea:	bf00      	nop
 8012eec:	e000      	b.n	8012ef0 <pcb_new+0xac>
      break;
 8012eee:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	685b      	ldr	r3, [r3, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d102      	bne.n	8012f00 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	22ff      	movs	r2, #255	; 0xff
 8012efe:	711a      	strb	r2, [r3, #4]
  }
}
 8012f00:	3714      	adds	r7, #20
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd90      	pop	{r4, r7, pc}
 8012f06:	bf00      	nop
 8012f08:	08021478 	.word	0x08021478
 8012f0c:	080216a0 	.word	0x080216a0
 8012f10:	08021500 	.word	0x08021500
 8012f14:	08012751 	.word	0x08012751

08012f18 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	2200      	movs	r2, #0
 8012f28:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d102      	bne.n	8012f3a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f7ff ff85 	bl	8012e44 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8012f3a:	bf00      	nop
 8012f3c:	3710      	adds	r7, #16
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
	...

08012f44 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b086      	sub	sp, #24
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	6039      	str	r1, [r7, #0]
 8012f4e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8012f50:	2300      	movs	r3, #0
 8012f52:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8012f54:	2007      	movs	r0, #7
 8012f56:	f003 ffd1 	bl	8016efc <memp_malloc>
 8012f5a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d101      	bne.n	8012f66 <netconn_alloc+0x22>
    return NULL;
 8012f62:	2300      	movs	r3, #0
 8012f64:	e052      	b.n	801300c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	79fa      	ldrb	r2, [r7, #7]
 8012f70:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2200      	movs	r2, #0
 8012f76:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8012f78:	79fb      	ldrb	r3, [r7, #7]
 8012f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f7e:	2b10      	cmp	r3, #16
 8012f80:	d004      	beq.n	8012f8c <netconn_alloc+0x48>
 8012f82:	2b20      	cmp	r3, #32
 8012f84:	d105      	bne.n	8012f92 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8012f86:	2306      	movs	r3, #6
 8012f88:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8012f8a:	e00a      	b.n	8012fa2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8012f8c:	2306      	movs	r3, #6
 8012f8e:	617b      	str	r3, [r7, #20]
      break;
 8012f90:	e007      	b.n	8012fa2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8012f92:	4b20      	ldr	r3, [pc, #128]	; (8013014 <netconn_alloc+0xd0>)
 8012f94:	f240 22e5 	movw	r2, #741	; 0x2e5
 8012f98:	491f      	ldr	r1, [pc, #124]	; (8013018 <netconn_alloc+0xd4>)
 8012f9a:	4820      	ldr	r0, [pc, #128]	; (801301c <netconn_alloc+0xd8>)
 8012f9c:	f00d f8b4 	bl	8020108 <iprintf>
      goto free_and_return;
 8012fa0:	e02f      	b.n	8013002 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	3310      	adds	r3, #16
 8012fa6:	6979      	ldr	r1, [r7, #20]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f005 f9ab 	bl	8018304 <sys_mbox_new>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d125      	bne.n	8013000 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	330c      	adds	r3, #12
 8012fb8:	2100      	movs	r1, #0
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f005 fa69 	bl	8018492 <sys_sem_new>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d005      	beq.n	8012fd2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	3310      	adds	r3, #16
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f005 f9bc 	bl	8018348 <sys_mbox_free>
    goto free_and_return;
 8012fd0:	e017      	b.n	8013002 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	3314      	adds	r3, #20
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f005 fa4e 	bl	8018478 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fe8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	683a      	ldr	r2, [r7, #0]
 8012fee:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	7cfa      	ldrb	r2, [r7, #19]
 8012ffa:	771a      	strb	r2, [r3, #28]
  return conn;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	e005      	b.n	801300c <netconn_alloc+0xc8>
    goto free_and_return;
 8013000:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8013002:	68f9      	ldr	r1, [r7, #12]
 8013004:	2007      	movs	r0, #7
 8013006:	f003 ffef 	bl	8016fe8 <memp_free>
  return NULL;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	3718      	adds	r7, #24
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}
 8013014:	08021478 	.word	0x08021478
 8013018:	080216c0 	.word	0x080216c0
 801301c:	08021500 	.word	0x08021500

08013020 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d006      	beq.n	801303e <netconn_free+0x1e>
 8013030:	4b1b      	ldr	r3, [pc, #108]	; (80130a0 <netconn_free+0x80>)
 8013032:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013036:	491b      	ldr	r1, [pc, #108]	; (80130a4 <netconn_free+0x84>)
 8013038:	481b      	ldr	r0, [pc, #108]	; (80130a8 <netconn_free+0x88>)
 801303a:	f00d f865 	bl	8020108 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	3310      	adds	r3, #16
 8013042:	4618      	mov	r0, r3
 8013044:	f005 fa07 	bl	8018456 <sys_mbox_valid>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	d006      	beq.n	801305c <netconn_free+0x3c>
 801304e:	4b14      	ldr	r3, [pc, #80]	; (80130a0 <netconn_free+0x80>)
 8013050:	f240 3223 	movw	r2, #803	; 0x323
 8013054:	4915      	ldr	r1, [pc, #84]	; (80130ac <netconn_free+0x8c>)
 8013056:	4814      	ldr	r0, [pc, #80]	; (80130a8 <netconn_free+0x88>)
 8013058:	f00d f856 	bl	8020108 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	3314      	adds	r3, #20
 8013060:	4618      	mov	r0, r3
 8013062:	f005 f9f8 	bl	8018456 <sys_mbox_valid>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d006      	beq.n	801307a <netconn_free+0x5a>
 801306c:	4b0c      	ldr	r3, [pc, #48]	; (80130a0 <netconn_free+0x80>)
 801306e:	f240 3226 	movw	r2, #806	; 0x326
 8013072:	490f      	ldr	r1, [pc, #60]	; (80130b0 <netconn_free+0x90>)
 8013074:	480c      	ldr	r0, [pc, #48]	; (80130a8 <netconn_free+0x88>)
 8013076:	f00d f847 	bl	8020108 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	330c      	adds	r3, #12
 801307e:	4618      	mov	r0, r3
 8013080:	f005 fa6d 	bl	801855e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	330c      	adds	r3, #12
 8013088:	4618      	mov	r0, r3
 801308a:	f005 fa86 	bl	801859a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801308e:	6879      	ldr	r1, [r7, #4]
 8013090:	2007      	movs	r0, #7
 8013092:	f003 ffa9 	bl	8016fe8 <memp_free>
}
 8013096:	bf00      	nop
 8013098:	3708      	adds	r7, #8
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	08021478 	.word	0x08021478
 80130a4:	080216e8 	.word	0x080216e8
 80130a8:	08021500 	.word	0x08021500
 80130ac:	08021718 	.word	0x08021718
 80130b0:	08021754 	.word	0x08021754

080130b4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b086      	sub	sp, #24
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	3310      	adds	r3, #16
 80130c0:	4618      	mov	r0, r3
 80130c2:	f005 f9c8 	bl	8018456 <sys_mbox_valid>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d02f      	beq.n	801312c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80130cc:	e018      	b.n	8013100 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130d6:	2b10      	cmp	r3, #16
 80130d8:	d10e      	bne.n	80130f8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	f107 020f 	add.w	r2, r7, #15
 80130e0:	4611      	mov	r1, r2
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7ff fafa 	bl	80126dc <lwip_netconn_is_err_msg>
 80130e8:	4603      	mov	r3, r0
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d108      	bne.n	8013100 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	4618      	mov	r0, r3
 80130f2:	f004 fe6d 	bl	8017dd0 <pbuf_free>
 80130f6:	e003      	b.n	8013100 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f003 ff9e 	bl	801703c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	3310      	adds	r3, #16
 8013104:	f107 0210 	add.w	r2, r7, #16
 8013108:	4611      	mov	r1, r2
 801310a:	4618      	mov	r0, r3
 801310c:	f005 f987 	bl	801841e <sys_arch_mbox_tryfetch>
 8013110:	4603      	mov	r3, r0
 8013112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013116:	d1da      	bne.n	80130ce <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	3310      	adds	r3, #16
 801311c:	4618      	mov	r0, r3
 801311e:	f005 f913 	bl	8018348 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	3310      	adds	r3, #16
 8013126:	4618      	mov	r0, r3
 8013128:	f005 f9a6 	bl	8018478 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	3314      	adds	r3, #20
 8013130:	4618      	mov	r0, r3
 8013132:	f005 f990 	bl	8018456 <sys_mbox_valid>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d034      	beq.n	80131a6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801313c:	e01d      	b.n	801317a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	f107 020e 	add.w	r2, r7, #14
 8013144:	4611      	mov	r1, r2
 8013146:	4618      	mov	r0, r3
 8013148:	f7ff fac8 	bl	80126dc <lwip_netconn_is_err_msg>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d113      	bne.n	801317a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8013152:	693b      	ldr	r3, [r7, #16]
 8013154:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8013156:	6978      	ldr	r0, [r7, #20]
 8013158:	f7ff ffac 	bl	80130b4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	685b      	ldr	r3, [r3, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d007      	beq.n	8013174 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	4618      	mov	r0, r3
 801316a:	f005 fe03 	bl	8018d74 <tcp_abort>
            newconn->pcb.tcp = NULL;
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2200      	movs	r2, #0
 8013172:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8013174:	6978      	ldr	r0, [r7, #20]
 8013176:	f7ff ff53 	bl	8013020 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	3314      	adds	r3, #20
 801317e:	f107 0210 	add.w	r2, r7, #16
 8013182:	4611      	mov	r1, r2
 8013184:	4618      	mov	r0, r3
 8013186:	f005 f94a 	bl	801841e <sys_arch_mbox_tryfetch>
 801318a:	4603      	mov	r3, r0
 801318c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013190:	d1d5      	bne.n	801313e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	3314      	adds	r3, #20
 8013196:	4618      	mov	r0, r3
 8013198:	f005 f8d6 	bl	8018348 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	3314      	adds	r3, #20
 80131a0:	4618      	mov	r0, r3
 80131a2:	f005 f969 	bl	8018478 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80131a6:	bf00      	nop
 80131a8:	3718      	adds	r7, #24
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
	...

080131b0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b086      	sub	sp, #24
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	460b      	mov	r3, r1
 80131ba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80131bc:	2300      	movs	r3, #0
 80131be:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <lwip_netconn_do_close_internal+0x24>
 80131c6:	4b87      	ldr	r3, [pc, #540]	; (80133e4 <lwip_netconn_do_close_internal+0x234>)
 80131c8:	f240 32a2 	movw	r2, #930	; 0x3a2
 80131cc:	4986      	ldr	r1, [pc, #536]	; (80133e8 <lwip_netconn_do_close_internal+0x238>)
 80131ce:	4887      	ldr	r0, [pc, #540]	; (80133ec <lwip_netconn_do_close_internal+0x23c>)
 80131d0:	f00c ff9a 	bl	8020108 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131dc:	2b10      	cmp	r3, #16
 80131de:	d006      	beq.n	80131ee <lwip_netconn_do_close_internal+0x3e>
 80131e0:	4b80      	ldr	r3, [pc, #512]	; (80133e4 <lwip_netconn_do_close_internal+0x234>)
 80131e2:	f240 32a3 	movw	r2, #931	; 0x3a3
 80131e6:	4982      	ldr	r1, [pc, #520]	; (80133f0 <lwip_netconn_do_close_internal+0x240>)
 80131e8:	4880      	ldr	r0, [pc, #512]	; (80133ec <lwip_netconn_do_close_internal+0x23c>)
 80131ea:	f00c ff8d 	bl	8020108 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	785b      	ldrb	r3, [r3, #1]
 80131f2:	2b04      	cmp	r3, #4
 80131f4:	d006      	beq.n	8013204 <lwip_netconn_do_close_internal+0x54>
 80131f6:	4b7b      	ldr	r3, [pc, #492]	; (80133e4 <lwip_netconn_do_close_internal+0x234>)
 80131f8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80131fc:	497d      	ldr	r1, [pc, #500]	; (80133f4 <lwip_netconn_do_close_internal+0x244>)
 80131fe:	487b      	ldr	r0, [pc, #492]	; (80133ec <lwip_netconn_do_close_internal+0x23c>)
 8013200:	f00c ff82 	bl	8020108 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d106      	bne.n	801321a <lwip_netconn_do_close_internal+0x6a>
 801320c:	4b75      	ldr	r3, [pc, #468]	; (80133e4 <lwip_netconn_do_close_internal+0x234>)
 801320e:	f240 32a5 	movw	r2, #933	; 0x3a5
 8013212:	4979      	ldr	r1, [pc, #484]	; (80133f8 <lwip_netconn_do_close_internal+0x248>)
 8013214:	4875      	ldr	r0, [pc, #468]	; (80133ec <lwip_netconn_do_close_internal+0x23c>)
 8013216:	f00c ff77 	bl	8020108 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6a1b      	ldr	r3, [r3, #32]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d106      	bne.n	8013230 <lwip_netconn_do_close_internal+0x80>
 8013222:	4b70      	ldr	r3, [pc, #448]	; (80133e4 <lwip_netconn_do_close_internal+0x234>)
 8013224:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013228:	4974      	ldr	r1, [pc, #464]	; (80133fc <lwip_netconn_do_close_internal+0x24c>)
 801322a:	4870      	ldr	r0, [pc, #448]	; (80133ec <lwip_netconn_do_close_internal+0x23c>)
 801322c:	f00c ff6c 	bl	8020108 <iprintf>

  tpcb = conn->pcb.tcp;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6a1b      	ldr	r3, [r3, #32]
 801323a:	7a1b      	ldrb	r3, [r3, #8]
 801323c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801323e:	7bfb      	ldrb	r3, [r7, #15]
 8013240:	f003 0301 	and.w	r3, r3, #1
 8013244:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8013246:	7bfb      	ldrb	r3, [r7, #15]
 8013248:	f003 0302 	and.w	r3, r3, #2
 801324c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801324e:	7bfb      	ldrb	r3, [r7, #15]
 8013250:	2b03      	cmp	r3, #3
 8013252:	d102      	bne.n	801325a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8013254:	2301      	movs	r3, #1
 8013256:	75bb      	strb	r3, [r7, #22]
 8013258:	e01f      	b.n	801329a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 801325a:	7bbb      	ldrb	r3, [r7, #14]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d00e      	beq.n	801327e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8013264:	2b05      	cmp	r3, #5
 8013266:	d007      	beq.n	8013278 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 801326c:	2b06      	cmp	r3, #6
 801326e:	d003      	beq.n	8013278 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8013274:	2b08      	cmp	r3, #8
 8013276:	d102      	bne.n	801327e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8013278:	2301      	movs	r3, #1
 801327a:	75bb      	strb	r3, [r7, #22]
 801327c:	e00d      	b.n	801329a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801327e:	7b7b      	ldrb	r3, [r7, #13]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d008      	beq.n	8013296 <lwip_netconn_do_close_internal+0xe6>
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	8b5b      	ldrh	r3, [r3, #26]
 8013288:	f003 0310 	and.w	r3, r3, #16
 801328c:	2b00      	cmp	r3, #0
 801328e:	d002      	beq.n	8013296 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8013290:	2301      	movs	r3, #1
 8013292:	75bb      	strb	r3, [r7, #22]
 8013294:	e001      	b.n	801329a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8013296:	2300      	movs	r3, #0
 8013298:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801329a:	7dbb      	ldrb	r3, [r7, #22]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d003      	beq.n	80132a8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80132a0:	2100      	movs	r1, #0
 80132a2:	6938      	ldr	r0, [r7, #16]
 80132a4:	f006 fdf8 	bl	8019e98 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	7d1b      	ldrb	r3, [r3, #20]
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	d104      	bne.n	80132ba <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80132b0:	2100      	movs	r1, #0
 80132b2:	6938      	ldr	r0, [r7, #16]
 80132b4:	f006 fe68 	bl	8019f88 <tcp_accept>
 80132b8:	e01d      	b.n	80132f6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80132ba:	7bbb      	ldrb	r3, [r7, #14]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d007      	beq.n	80132d0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80132c0:	2100      	movs	r1, #0
 80132c2:	6938      	ldr	r0, [r7, #16]
 80132c4:	f006 fdfa 	bl	8019ebc <tcp_recv>
      tcp_accept(tpcb, NULL);
 80132c8:	2100      	movs	r1, #0
 80132ca:	6938      	ldr	r0, [r7, #16]
 80132cc:	f006 fe5c 	bl	8019f88 <tcp_accept>
    }
    if (shut_tx) {
 80132d0:	7b7b      	ldrb	r3, [r7, #13]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d003      	beq.n	80132de <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80132d6:	2100      	movs	r1, #0
 80132d8:	6938      	ldr	r0, [r7, #16]
 80132da:	f006 fe11 	bl	8019f00 <tcp_sent>
    }
    if (shut_close) {
 80132de:	7dbb      	ldrb	r3, [r7, #22]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d008      	beq.n	80132f6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80132e4:	2200      	movs	r2, #0
 80132e6:	2100      	movs	r1, #0
 80132e8:	6938      	ldr	r0, [r7, #16]
 80132ea:	f006 fe65 	bl	8019fb8 <tcp_poll>
      tcp_err(tpcb, NULL);
 80132ee:	2100      	movs	r1, #0
 80132f0:	6938      	ldr	r0, [r7, #16]
 80132f2:	f006 fe27 	bl	8019f44 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80132f6:	7dbb      	ldrb	r3, [r7, #22]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d005      	beq.n	8013308 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80132fc:	6938      	ldr	r0, [r7, #16]
 80132fe:	f005 fbf3 	bl	8018ae8 <tcp_close>
 8013302:	4603      	mov	r3, r0
 8013304:	75fb      	strb	r3, [r7, #23]
 8013306:	e007      	b.n	8013318 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8013308:	7bbb      	ldrb	r3, [r7, #14]
 801330a:	7b7a      	ldrb	r2, [r7, #13]
 801330c:	4619      	mov	r1, r3
 801330e:	6938      	ldr	r0, [r7, #16]
 8013310:	f005 fc16 	bl	8018b40 <tcp_shutdown>
 8013314:	4603      	mov	r3, r0
 8013316:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8013318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d102      	bne.n	8013326 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8013320:	2301      	movs	r3, #1
 8013322:	757b      	strb	r3, [r7, #21]
 8013324:	e016      	b.n	8013354 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8013326:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801332a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801332e:	d10f      	bne.n	8013350 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6a1b      	ldr	r3, [r3, #32]
 8013334:	7a5b      	ldrb	r3, [r3, #9]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d10c      	bne.n	8013354 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 801333a:	2301      	movs	r3, #1
 801333c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801333e:	7dbb      	ldrb	r3, [r7, #22]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d007      	beq.n	8013354 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8013344:	6938      	ldr	r0, [r7, #16]
 8013346:	f005 fd15 	bl	8018d74 <tcp_abort>
          err = ERR_OK;
 801334a:	2300      	movs	r3, #0
 801334c:	75fb      	strb	r3, [r7, #23]
 801334e:	e001      	b.n	8013354 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8013350:	2301      	movs	r3, #1
 8013352:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8013354:	7d7b      	ldrb	r3, [r7, #21]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d052      	beq.n	8013400 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6a1b      	ldr	r3, [r3, #32]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	330c      	adds	r3, #12
 8013362:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6a1b      	ldr	r3, [r3, #32]
 8013368:	7dfa      	ldrb	r2, [r7, #23]
 801336a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2200      	movs	r2, #0
 8013370:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2200      	movs	r2, #0
 8013376:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8013378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d129      	bne.n	80133d4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8013380:	7dbb      	ldrb	r3, [r7, #22]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d00c      	beq.n	80133a0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2200      	movs	r2, #0
 801338a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013390:	2b00      	cmp	r3, #0
 8013392:	d005      	beq.n	80133a0 <lwip_netconn_do_close_internal+0x1f0>
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013398:	2200      	movs	r2, #0
 801339a:	2104      	movs	r1, #4
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	4798      	blx	r3
      }
      if (shut_rx) {
 80133a0:	7bbb      	ldrb	r3, [r7, #14]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d009      	beq.n	80133ba <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d005      	beq.n	80133ba <lwip_netconn_do_close_internal+0x20a>
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b2:	2200      	movs	r2, #0
 80133b4:	2100      	movs	r1, #0
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	4798      	blx	r3
      }
      if (shut_tx) {
 80133ba:	7b7b      	ldrb	r3, [r7, #13]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d009      	beq.n	80133d4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d005      	beq.n	80133d4 <lwip_netconn_do_close_internal+0x224>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133cc:	2200      	movs	r2, #0
 80133ce:	2102      	movs	r1, #2
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80133d4:	78fb      	ldrb	r3, [r7, #3]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d002      	beq.n	80133e0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80133da:	68b8      	ldr	r0, [r7, #8]
 80133dc:	f005 f8b2 	bl	8018544 <sys_sem_signal>
    }
    return ERR_OK;
 80133e0:	2300      	movs	r3, #0
 80133e2:	e03c      	b.n	801345e <lwip_netconn_do_close_internal+0x2ae>
 80133e4:	08021478 	.word	0x08021478
 80133e8:	08021790 	.word	0x08021790
 80133ec:	08021500 	.word	0x08021500
 80133f0:	080217a0 	.word	0x080217a0
 80133f4:	080217c0 	.word	0x080217c0
 80133f8:	080217e4 	.word	0x080217e4
 80133fc:	08021624 	.word	0x08021624
  }
  if (!close_finished) {
 8013400:	7d7b      	ldrb	r3, [r7, #21]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d11e      	bne.n	8013444 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	7d1b      	ldrb	r3, [r3, #20]
 801340a:	2b01      	cmp	r3, #1
 801340c:	d106      	bne.n	801341c <lwip_netconn_do_close_internal+0x26c>
 801340e:	4b16      	ldr	r3, [pc, #88]	; (8013468 <lwip_netconn_do_close_internal+0x2b8>)
 8013410:	f240 4241 	movw	r2, #1089	; 0x441
 8013414:	4915      	ldr	r1, [pc, #84]	; (801346c <lwip_netconn_do_close_internal+0x2bc>)
 8013416:	4816      	ldr	r0, [pc, #88]	; (8013470 <lwip_netconn_do_close_internal+0x2c0>)
 8013418:	f00c fe76 	bl	8020108 <iprintf>
    if (shut_tx) {
 801341c:	7b7b      	ldrb	r3, [r7, #13]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d003      	beq.n	801342a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8013422:	4914      	ldr	r1, [pc, #80]	; (8013474 <lwip_netconn_do_close_internal+0x2c4>)
 8013424:	6938      	ldr	r0, [r7, #16]
 8013426:	f006 fd6b 	bl	8019f00 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801342a:	2201      	movs	r2, #1
 801342c:	4912      	ldr	r1, [pc, #72]	; (8013478 <lwip_netconn_do_close_internal+0x2c8>)
 801342e:	6938      	ldr	r0, [r7, #16]
 8013430:	f006 fdc2 	bl	8019fb8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8013434:	4911      	ldr	r1, [pc, #68]	; (801347c <lwip_netconn_do_close_internal+0x2cc>)
 8013436:	6938      	ldr	r0, [r7, #16]
 8013438:	f006 fd84 	bl	8019f44 <tcp_err>
    tcp_arg(tpcb, conn);
 801343c:	6879      	ldr	r1, [r7, #4]
 801343e:	6938      	ldr	r0, [r7, #16]
 8013440:	f006 fd2a 	bl	8019e98 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8013444:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d106      	bne.n	801345a <lwip_netconn_do_close_internal+0x2aa>
 801344c:	4b06      	ldr	r3, [pc, #24]	; (8013468 <lwip_netconn_do_close_internal+0x2b8>)
 801344e:	f240 424d 	movw	r2, #1101	; 0x44d
 8013452:	490b      	ldr	r1, [pc, #44]	; (8013480 <lwip_netconn_do_close_internal+0x2d0>)
 8013454:	4806      	ldr	r0, [pc, #24]	; (8013470 <lwip_netconn_do_close_internal+0x2c0>)
 8013456:	f00c fe57 	bl	8020108 <iprintf>
  return err;
 801345a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801345e:	4618      	mov	r0, r3
 8013460:	3718      	adds	r7, #24
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	08021478 	.word	0x08021478
 801346c:	080217f8 	.word	0x080217f8
 8013470:	08021500 	.word	0x08021500
 8013474:	08012a25 	.word	0x08012a25
 8013478:	08012959 	.word	0x08012959
 801347c:	08012ad1 	.word	0x08012ad1
 8013480:	0802181c 	.word	0x0802181c

08013484 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b084      	sub	sp, #16
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	785b      	ldrb	r3, [r3, #1]
 8013496:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8013498:	7afb      	ldrb	r3, [r7, #11]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d00d      	beq.n	80134ba <lwip_netconn_do_delconn+0x36>
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80134a8:	2b10      	cmp	r3, #16
 80134aa:	d006      	beq.n	80134ba <lwip_netconn_do_delconn+0x36>
 80134ac:	4b60      	ldr	r3, [pc, #384]	; (8013630 <lwip_netconn_do_delconn+0x1ac>)
 80134ae:	f240 425e 	movw	r2, #1118	; 0x45e
 80134b2:	4960      	ldr	r1, [pc, #384]	; (8013634 <lwip_netconn_do_delconn+0x1b0>)
 80134b4:	4860      	ldr	r0, [pc, #384]	; (8013638 <lwip_netconn_do_delconn+0x1b4>)
 80134b6:	f00c fe27 	bl	8020108 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80134ba:	7afb      	ldrb	r3, [r7, #11]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d005      	beq.n	80134cc <lwip_netconn_do_delconn+0x48>
 80134c0:	7afb      	ldrb	r3, [r7, #11]
 80134c2:	2b02      	cmp	r3, #2
 80134c4:	d002      	beq.n	80134cc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80134c6:	7afb      	ldrb	r3, [r7, #11]
 80134c8:	2b03      	cmp	r3, #3
 80134ca:	d109      	bne.n	80134e0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80134cc:	7afb      	ldrb	r3, [r7, #11]
 80134ce:	2b03      	cmp	r3, #3
 80134d0:	d10a      	bne.n	80134e8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	7f1b      	ldrb	r3, [r3, #28]
 80134d8:	f003 0304 	and.w	r3, r3, #4
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d103      	bne.n	80134e8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	22fb      	movs	r2, #251	; 0xfb
 80134e4:	711a      	strb	r2, [r3, #4]
 80134e6:	e097      	b.n	8013618 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80134e8:	7afb      	ldrb	r3, [r7, #11]
 80134ea:	2b03      	cmp	r3, #3
 80134ec:	d10d      	bne.n	801350a <lwip_netconn_do_delconn+0x86>
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	7f1b      	ldrb	r3, [r3, #28]
 80134f4:	f003 0304 	and.w	r3, r3, #4
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d106      	bne.n	801350a <lwip_netconn_do_delconn+0x86>
 80134fc:	4b4c      	ldr	r3, [pc, #304]	; (8013630 <lwip_netconn_do_delconn+0x1ac>)
 80134fe:	f240 427a 	movw	r2, #1146	; 0x47a
 8013502:	494e      	ldr	r1, [pc, #312]	; (801363c <lwip_netconn_do_delconn+0x1b8>)
 8013504:	484c      	ldr	r0, [pc, #304]	; (8013638 <lwip_netconn_do_delconn+0x1b4>)
 8013506:	f00c fdff 	bl	8020108 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	2200      	movs	r2, #0
 801350e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	4618      	mov	r0, r3
 8013516:	f7ff fdcd 	bl	80130b4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d05f      	beq.n	80135e4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801352e:	2b10      	cmp	r3, #16
 8013530:	d00d      	beq.n	801354e <lwip_netconn_do_delconn+0xca>
 8013532:	2b20      	cmp	r3, #32
 8013534:	d151      	bne.n	80135da <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	2200      	movs	r2, #0
 801353e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	4618      	mov	r0, r3
 8013548:	f00b fee4 	bl	801f314 <udp_remove>
          break;
 801354c:	e046      	b.n	80135dc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	6a1b      	ldr	r3, [r3, #32]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d006      	beq.n	8013566 <lwip_netconn_do_delconn+0xe2>
 8013558:	4b35      	ldr	r3, [pc, #212]	; (8013630 <lwip_netconn_do_delconn+0x1ac>)
 801355a:	f240 4294 	movw	r2, #1172	; 0x494
 801355e:	4938      	ldr	r1, [pc, #224]	; (8013640 <lwip_netconn_do_delconn+0x1bc>)
 8013560:	4835      	ldr	r0, [pc, #212]	; (8013638 <lwip_netconn_do_delconn+0x1b4>)
 8013562:	f00c fdd1 	bl	8020108 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	2204      	movs	r2, #4
 801356c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2203      	movs	r2, #3
 8013572:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	68fa      	ldr	r2, [r7, #12]
 801357a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	2100      	movs	r1, #0
 8013582:	4618      	mov	r0, r3
 8013584:	f7ff fe14 	bl	80131b0 <lwip_netconn_do_close_internal>
 8013588:	4603      	mov	r3, r0
 801358a:	2b00      	cmp	r3, #0
 801358c:	d04b      	beq.n	8013626 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	785b      	ldrb	r3, [r3, #1]
 8013594:	2b04      	cmp	r3, #4
 8013596:	d006      	beq.n	80135a6 <lwip_netconn_do_delconn+0x122>
 8013598:	4b25      	ldr	r3, [pc, #148]	; (8013630 <lwip_netconn_do_delconn+0x1ac>)
 801359a:	f240 429a 	movw	r2, #1178	; 0x49a
 801359e:	4929      	ldr	r1, [pc, #164]	; (8013644 <lwip_netconn_do_delconn+0x1c0>)
 80135a0:	4825      	ldr	r0, [pc, #148]	; (8013638 <lwip_netconn_do_delconn+0x1b4>)
 80135a2:	f00c fdb1 	bl	8020108 <iprintf>
            UNLOCK_TCPIP_CORE();
 80135a6:	4828      	ldr	r0, [pc, #160]	; (8013648 <lwip_netconn_do_delconn+0x1c4>)
 80135a8:	f005 f83d 	bl	8018626 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	330c      	adds	r3, #12
 80135b2:	2100      	movs	r1, #0
 80135b4:	4618      	mov	r0, r3
 80135b6:	f004 ff94 	bl	80184e2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80135ba:	4823      	ldr	r0, [pc, #140]	; (8013648 <lwip_netconn_do_delconn+0x1c4>)
 80135bc:	f005 f824 	bl	8018608 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	785b      	ldrb	r3, [r3, #1]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d02d      	beq.n	8013626 <lwip_netconn_do_delconn+0x1a2>
 80135ca:	4b19      	ldr	r3, [pc, #100]	; (8013630 <lwip_netconn_do_delconn+0x1ac>)
 80135cc:	f240 429e 	movw	r2, #1182	; 0x49e
 80135d0:	491c      	ldr	r1, [pc, #112]	; (8013644 <lwip_netconn_do_delconn+0x1c0>)
 80135d2:	4819      	ldr	r0, [pc, #100]	; (8013638 <lwip_netconn_do_delconn+0x1b4>)
 80135d4:	f00c fd98 	bl	8020108 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80135d8:	e025      	b.n	8013626 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80135da:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2200      	movs	r2, #0
 80135e2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d007      	beq.n	80135fe <lwip_netconn_do_delconn+0x17a>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135f4:	68fa      	ldr	r2, [r7, #12]
 80135f6:	6810      	ldr	r0, [r2, #0]
 80135f8:	2200      	movs	r2, #0
 80135fa:	2100      	movs	r1, #0
 80135fc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013604:	2b00      	cmp	r3, #0
 8013606:	d007      	beq.n	8013618 <lwip_netconn_do_delconn+0x194>
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801360e:	68fa      	ldr	r2, [r7, #12]
 8013610:	6810      	ldr	r0, [r2, #0]
 8013612:	2200      	movs	r2, #0
 8013614:	2102      	movs	r1, #2
 8013616:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	330c      	adds	r3, #12
 801361e:	4618      	mov	r0, r3
 8013620:	f004 ffaa 	bl	8018578 <sys_sem_valid>
 8013624:	e000      	b.n	8013628 <lwip_netconn_do_delconn+0x1a4>
          return;
 8013626:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	08021478 	.word	0x08021478
 8013634:	0802182c 	.word	0x0802182c
 8013638:	08021500 	.word	0x08021500
 801363c:	08021840 	.word	0x08021840
 8013640:	08021860 	.word	0x08021860
 8013644:	0802187c 	.word	0x0802187c
 8013648:	24010074 	.word	0x24010074

0801364c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b084      	sub	sp, #16
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d025      	beq.n	80136ae <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801366c:	2b10      	cmp	r3, #16
 801366e:	d00e      	beq.n	801368e <lwip_netconn_do_bind+0x42>
 8013670:	2b20      	cmp	r3, #32
 8013672:	d119      	bne.n	80136a8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	6858      	ldr	r0, [r3, #4]
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	6899      	ldr	r1, [r3, #8]
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	899b      	ldrh	r3, [r3, #12]
 8013682:	461a      	mov	r2, r3
 8013684:	f00b fd9e 	bl	801f1c4 <udp_bind>
 8013688:	4603      	mov	r3, r0
 801368a:	73fb      	strb	r3, [r7, #15]
        break;
 801368c:	e011      	b.n	80136b2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	6858      	ldr	r0, [r3, #4]
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	6899      	ldr	r1, [r3, #8]
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	899b      	ldrh	r3, [r3, #12]
 801369c:	461a      	mov	r2, r3
 801369e:	f005 fb75 	bl	8018d8c <tcp_bind>
 80136a2:	4603      	mov	r3, r0
 80136a4:	73fb      	strb	r3, [r7, #15]
        break;
 80136a6:	e004      	b.n	80136b2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80136a8:	23fa      	movs	r3, #250	; 0xfa
 80136aa:	73fb      	strb	r3, [r7, #15]
        break;
 80136ac:	e001      	b.n	80136b2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80136ae:	23fa      	movs	r3, #250	; 0xfa
 80136b0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	7bfa      	ldrb	r2, [r7, #15]
 80136b6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80136b8:	bf00      	nop
 80136ba:	3710      	adds	r7, #16
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b086      	sub	sp, #24
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d07f      	beq.n	80137d6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	781b      	ldrb	r3, [r3, #0]
 80136dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80136e0:	2b10      	cmp	r3, #16
 80136e2:	d175      	bne.n	80137d0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	785b      	ldrb	r3, [r3, #1]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d165      	bne.n	80137ba <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	685b      	ldr	r3, [r3, #4]
 80136f4:	7d1b      	ldrb	r3, [r3, #20]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d002      	beq.n	8013700 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80136fa:	23fa      	movs	r3, #250	; 0xfa
 80136fc:	72fb      	strb	r3, [r7, #11]
 80136fe:	e06c      	b.n	80137da <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8013700:	23ff      	movs	r3, #255	; 0xff
 8013702:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	f107 020b 	add.w	r2, r7, #11
 801370e:	7cf9      	ldrb	r1, [r7, #19]
 8013710:	4618      	mov	r0, r3
 8013712:	f005 fbf3 	bl	8018efc <tcp_listen_with_backlog_and_err>
 8013716:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d05d      	beq.n	80137da <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	3310      	adds	r3, #16
 8013724:	4618      	mov	r0, r3
 8013726:	f004 fe96 	bl	8018456 <sys_mbox_valid>
 801372a:	4603      	mov	r3, r0
 801372c:	2b00      	cmp	r3, #0
 801372e:	d00b      	beq.n	8013748 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	3310      	adds	r3, #16
 8013736:	4618      	mov	r0, r3
 8013738:	f004 fe06 	bl	8018348 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	3310      	adds	r3, #16
 8013742:	4618      	mov	r0, r3
 8013744:	f004 fe98 	bl	8018478 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8013748:	2300      	movs	r3, #0
 801374a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	3314      	adds	r3, #20
 8013752:	4618      	mov	r0, r3
 8013754:	f004 fe7f 	bl	8018456 <sys_mbox_valid>
 8013758:	4603      	mov	r3, r0
 801375a:	2b00      	cmp	r3, #0
 801375c:	d108      	bne.n	8013770 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	3314      	adds	r3, #20
 8013764:	2106      	movs	r1, #6
 8013766:	4618      	mov	r0, r3
 8013768:	f004 fdcc 	bl	8018304 <sys_mbox_new>
 801376c:	4603      	mov	r3, r0
 801376e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8013770:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d118      	bne.n	80137aa <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	2202      	movs	r2, #2
 801377e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	685a      	ldr	r2, [r3, #4]
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	4619      	mov	r1, r3
 8013794:	4610      	mov	r0, r2
 8013796:	f006 fb7f 	bl	8019e98 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	685b      	ldr	r3, [r3, #4]
 80137a0:	4912      	ldr	r1, [pc, #72]	; (80137ec <lwip_netconn_do_listen+0x12c>)
 80137a2:	4618      	mov	r0, r3
 80137a4:	f006 fbf0 	bl	8019f88 <tcp_accept>
 80137a8:	e017      	b.n	80137da <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	f005 f99c 	bl	8018ae8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2200      	movs	r2, #0
 80137b6:	605a      	str	r2, [r3, #4]
 80137b8:	e00f      	b.n	80137da <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	785b      	ldrb	r3, [r3, #1]
 80137c0:	2b02      	cmp	r3, #2
 80137c2:	d102      	bne.n	80137ca <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80137c4:	2300      	movs	r3, #0
 80137c6:	72fb      	strb	r3, [r7, #11]
 80137c8:	e007      	b.n	80137da <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80137ca:	23f5      	movs	r3, #245	; 0xf5
 80137cc:	72fb      	strb	r3, [r7, #11]
 80137ce:	e004      	b.n	80137da <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80137d0:	23f0      	movs	r3, #240	; 0xf0
 80137d2:	72fb      	strb	r3, [r7, #11]
 80137d4:	e001      	b.n	80137da <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80137d6:	23f5      	movs	r3, #245	; 0xf5
 80137d8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80137da:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80137e2:	bf00      	nop
 80137e4:	3718      	adds	r7, #24
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	08012ccd 	.word	0x08012ccd

080137f0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b086      	sub	sp, #24
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	2200      	movs	r2, #0
 8013800:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	685b      	ldr	r3, [r3, #4]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d022      	beq.n	8013852 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013816:	2b10      	cmp	r3, #16
 8013818:	d11b      	bne.n	8013852 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	689b      	ldr	r3, [r3, #8]
 801381e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013826:	d202      	bcs.n	801382e <lwip_netconn_do_recv+0x3e>
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	b29b      	uxth	r3, r3
 801382c:	e001      	b.n	8013832 <lwip_netconn_do_recv+0x42>
 801382e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013832:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	89fa      	ldrh	r2, [r7, #14]
 801383c:	4611      	mov	r1, r2
 801383e:	4618      	mov	r0, r3
 8013840:	f005 fc60 	bl	8019104 <tcp_recved>
        remaining -= recved;
 8013844:	89fb      	ldrh	r3, [r7, #14]
 8013846:	697a      	ldr	r2, [r7, #20]
 8013848:	1ad3      	subs	r3, r2, r3
 801384a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d1e6      	bne.n	8013820 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8013852:	bf00      	nop
 8013854:	3718      	adds	r7, #24
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
	...

0801385c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b088      	sub	sp, #32
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
 8013864:	460b      	mov	r3, r1
 8013866:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8013868:	2300      	movs	r3, #0
 801386a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d106      	bne.n	8013880 <lwip_netconn_do_writemore+0x24>
 8013872:	4b96      	ldr	r3, [pc, #600]	; (8013acc <lwip_netconn_do_writemore+0x270>)
 8013874:	f240 6273 	movw	r2, #1651	; 0x673
 8013878:	4995      	ldr	r1, [pc, #596]	; (8013ad0 <lwip_netconn_do_writemore+0x274>)
 801387a:	4896      	ldr	r0, [pc, #600]	; (8013ad4 <lwip_netconn_do_writemore+0x278>)
 801387c:	f00c fc44 	bl	8020108 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	785b      	ldrb	r3, [r3, #1]
 8013884:	2b01      	cmp	r3, #1
 8013886:	d006      	beq.n	8013896 <lwip_netconn_do_writemore+0x3a>
 8013888:	4b90      	ldr	r3, [pc, #576]	; (8013acc <lwip_netconn_do_writemore+0x270>)
 801388a:	f240 6274 	movw	r2, #1652	; 0x674
 801388e:	4992      	ldr	r1, [pc, #584]	; (8013ad8 <lwip_netconn_do_writemore+0x27c>)
 8013890:	4890      	ldr	r0, [pc, #576]	; (8013ad4 <lwip_netconn_do_writemore+0x278>)
 8013892:	f00c fc39 	bl	8020108 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6a1b      	ldr	r3, [r3, #32]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d106      	bne.n	80138ac <lwip_netconn_do_writemore+0x50>
 801389e:	4b8b      	ldr	r3, [pc, #556]	; (8013acc <lwip_netconn_do_writemore+0x270>)
 80138a0:	f240 6275 	movw	r2, #1653	; 0x675
 80138a4:	498d      	ldr	r1, [pc, #564]	; (8013adc <lwip_netconn_do_writemore+0x280>)
 80138a6:	488b      	ldr	r0, [pc, #556]	; (8013ad4 <lwip_netconn_do_writemore+0x278>)
 80138a8:	f00c fc2e 	bl	8020108 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d106      	bne.n	80138c2 <lwip_netconn_do_writemore+0x66>
 80138b4:	4b85      	ldr	r3, [pc, #532]	; (8013acc <lwip_netconn_do_writemore+0x270>)
 80138b6:	f240 6276 	movw	r2, #1654	; 0x676
 80138ba:	4989      	ldr	r1, [pc, #548]	; (8013ae0 <lwip_netconn_do_writemore+0x284>)
 80138bc:	4885      	ldr	r0, [pc, #532]	; (8013ad4 <lwip_netconn_do_writemore+0x278>)
 80138be:	f00c fc23 	bl	8020108 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6a1b      	ldr	r3, [r3, #32]
 80138c6:	699a      	ldr	r2, [r3, #24]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6a1b      	ldr	r3, [r3, #32]
 80138cc:	695b      	ldr	r3, [r3, #20]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d306      	bcc.n	80138e0 <lwip_netconn_do_writemore+0x84>
 80138d2:	4b7e      	ldr	r3, [pc, #504]	; (8013acc <lwip_netconn_do_writemore+0x270>)
 80138d4:	f240 6277 	movw	r2, #1655	; 0x677
 80138d8:	4982      	ldr	r1, [pc, #520]	; (8013ae4 <lwip_netconn_do_writemore+0x288>)
 80138da:	487e      	ldr	r0, [pc, #504]	; (8013ad4 <lwip_netconn_do_writemore+0x278>)
 80138dc:	f00c fc14 	bl	8020108 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6a1b      	ldr	r3, [r3, #32]
 80138e4:	899b      	ldrh	r3, [r3, #12]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d106      	bne.n	80138f8 <lwip_netconn_do_writemore+0x9c>
 80138ea:	4b78      	ldr	r3, [pc, #480]	; (8013acc <lwip_netconn_do_writemore+0x270>)
 80138ec:	f240 6279 	movw	r2, #1657	; 0x679
 80138f0:	497d      	ldr	r1, [pc, #500]	; (8013ae8 <lwip_netconn_do_writemore+0x28c>)
 80138f2:	4878      	ldr	r0, [pc, #480]	; (8013ad4 <lwip_netconn_do_writemore+0x278>)
 80138f4:	f00c fc08 	bl	8020108 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6a1b      	ldr	r3, [r3, #32]
 80138fc:	7f1b      	ldrb	r3, [r3, #28]
 80138fe:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	7f1b      	ldrb	r3, [r3, #28]
 8013904:	f003 0302 	and.w	r3, r3, #2
 8013908:	2b00      	cmp	r3, #0
 801390a:	d104      	bne.n	8013916 <lwip_netconn_do_writemore+0xba>
 801390c:	7ebb      	ldrb	r3, [r7, #26]
 801390e:	f003 0304 	and.w	r3, r3, #4
 8013912:	2b00      	cmp	r3, #0
 8013914:	d001      	beq.n	801391a <lwip_netconn_do_writemore+0xbe>
 8013916:	2301      	movs	r3, #1
 8013918:	e000      	b.n	801391c <lwip_netconn_do_writemore+0xc0>
 801391a:	2300      	movs	r3, #0
 801391c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6a1b      	ldr	r3, [r3, #32]
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6a1b      	ldr	r3, [r3, #32]
 801392a:	691b      	ldr	r3, [r3, #16]
 801392c:	4413      	add	r3, r2
 801392e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6a1b      	ldr	r3, [r3, #32]
 8013934:	689b      	ldr	r3, [r3, #8]
 8013936:	685a      	ldr	r2, [r3, #4]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6a1b      	ldr	r3, [r3, #32]
 801393c:	691b      	ldr	r3, [r3, #16]
 801393e:	1ad3      	subs	r3, r2, r3
 8013940:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8013942:	693b      	ldr	r3, [r7, #16]
 8013944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013948:	d307      	bcc.n	801395a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801394a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801394e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8013950:	7ebb      	ldrb	r3, [r7, #26]
 8013952:	f043 0302 	orr.w	r3, r3, #2
 8013956:	76bb      	strb	r3, [r7, #26]
 8013958:	e001      	b.n	801395e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013966:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8013968:	89fa      	ldrh	r2, [r7, #14]
 801396a:	8bbb      	ldrh	r3, [r7, #28]
 801396c:	429a      	cmp	r2, r3
 801396e:	d216      	bcs.n	801399e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8013970:	89fb      	ldrh	r3, [r7, #14]
 8013972:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8013974:	7e3b      	ldrb	r3, [r7, #24]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d00d      	beq.n	8013996 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801397a:	8bbb      	ldrh	r3, [r7, #28]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d10e      	bne.n	801399e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6a1b      	ldr	r3, [r3, #32]
 8013984:	699b      	ldr	r3, [r3, #24]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d102      	bne.n	8013990 <lwip_netconn_do_writemore+0x134>
 801398a:	f06f 0306 	mvn.w	r3, #6
 801398e:	e000      	b.n	8013992 <lwip_netconn_do_writemore+0x136>
 8013990:	2300      	movs	r3, #0
 8013992:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8013994:	e07d      	b.n	8013a92 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8013996:	7ebb      	ldrb	r3, [r7, #26]
 8013998:	f043 0302 	orr.w	r3, r3, #2
 801399c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6a1b      	ldr	r3, [r3, #32]
 80139a2:	691a      	ldr	r2, [r3, #16]
 80139a4:	8bbb      	ldrh	r3, [r7, #28]
 80139a6:	441a      	add	r2, r3
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6a1b      	ldr	r3, [r3, #32]
 80139ac:	689b      	ldr	r3, [r3, #8]
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d906      	bls.n	80139c2 <lwip_netconn_do_writemore+0x166>
 80139b4:	4b45      	ldr	r3, [pc, #276]	; (8013acc <lwip_netconn_do_writemore+0x270>)
 80139b6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80139ba:	494c      	ldr	r1, [pc, #304]	; (8013aec <lwip_netconn_do_writemore+0x290>)
 80139bc:	4845      	ldr	r0, [pc, #276]	; (8013ad4 <lwip_netconn_do_writemore+0x278>)
 80139be:	f00c fba3 	bl	8020108 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80139c2:	8bbb      	ldrh	r3, [r7, #28]
 80139c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139c8:	4293      	cmp	r3, r2
 80139ca:	d103      	bne.n	80139d4 <lwip_netconn_do_writemore+0x178>
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139d2:	d209      	bcs.n	80139e8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80139d8:	8bba      	ldrh	r2, [r7, #28]
 80139da:	429a      	cmp	r2, r3
 80139dc:	d10b      	bne.n	80139f6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6a1b      	ldr	r3, [r3, #32]
 80139e2:	899b      	ldrh	r3, [r3, #12]
 80139e4:	2b01      	cmp	r3, #1
 80139e6:	d906      	bls.n	80139f6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80139e8:	2301      	movs	r3, #1
 80139ea:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80139ec:	7ebb      	ldrb	r3, [r7, #26]
 80139ee:	f043 0302 	orr.w	r3, r3, #2
 80139f2:	76bb      	strb	r3, [r7, #26]
 80139f4:	e001      	b.n	80139fa <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80139f6:	2300      	movs	r3, #0
 80139f8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6858      	ldr	r0, [r3, #4]
 80139fe:	7ebb      	ldrb	r3, [r7, #26]
 8013a00:	8bba      	ldrh	r2, [r7, #28]
 8013a02:	6979      	ldr	r1, [r7, #20]
 8013a04:	f009 f98a 	bl	801cd1c <tcp_write>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8013a0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d12c      	bne.n	8013a6e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6a1b      	ldr	r3, [r3, #32]
 8013a18:	6999      	ldr	r1, [r3, #24]
 8013a1a:	8bba      	ldrh	r2, [r7, #28]
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	6a1b      	ldr	r3, [r3, #32]
 8013a20:	440a      	add	r2, r1
 8013a22:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6a1b      	ldr	r3, [r3, #32]
 8013a28:	6919      	ldr	r1, [r3, #16]
 8013a2a:	8bba      	ldrh	r2, [r7, #28]
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6a1b      	ldr	r3, [r3, #32]
 8013a30:	440a      	add	r2, r1
 8013a32:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	6a1b      	ldr	r3, [r3, #32]
 8013a38:	691a      	ldr	r2, [r3, #16]
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6a1b      	ldr	r3, [r3, #32]
 8013a3e:	689b      	ldr	r3, [r3, #8]
 8013a40:	685b      	ldr	r3, [r3, #4]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d113      	bne.n	8013a6e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6a1b      	ldr	r3, [r3, #32]
 8013a4a:	899a      	ldrh	r2, [r3, #12]
 8013a4c:	3a01      	subs	r2, #1
 8013a4e:	b292      	uxth	r2, r2
 8013a50:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6a1b      	ldr	r3, [r3, #32]
 8013a56:	899b      	ldrh	r3, [r3, #12]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d008      	beq.n	8013a6e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a1b      	ldr	r3, [r3, #32]
 8013a60:	689a      	ldr	r2, [r3, #8]
 8013a62:	3208      	adds	r2, #8
 8013a64:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6a1b      	ldr	r3, [r3, #32]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8013a6e:	7e7b      	ldrb	r3, [r7, #25]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d004      	beq.n	8013a7e <lwip_netconn_do_writemore+0x222>
 8013a74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	f43f af50 	beq.w	801391e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8013a7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d004      	beq.n	8013a90 <lwip_netconn_do_writemore+0x234>
 8013a86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a8e:	d147      	bne.n	8013b20 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 8013a90:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8013a92:	7e3b      	ldrb	r3, [r7, #24]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d02b      	beq.n	8013af0 <lwip_netconn_do_writemore+0x294>
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	6a1b      	ldr	r3, [r3, #32]
 8013a9c:	699a      	ldr	r2, [r3, #24]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6a1b      	ldr	r3, [r3, #32]
 8013aa2:	695b      	ldr	r3, [r3, #20]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d223      	bcs.n	8013af0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d005      	beq.n	8013abc <lwip_netconn_do_writemore+0x260>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	2103      	movs	r1, #3
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	7f1b      	ldrb	r3, [r3, #28]
 8013ac0:	f043 0310 	orr.w	r3, r3, #16
 8013ac4:	b2da      	uxtb	r2, r3
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	771a      	strb	r2, [r3, #28]
 8013aca:	e029      	b.n	8013b20 <lwip_netconn_do_writemore+0x2c4>
 8013acc:	08021478 	.word	0x08021478
 8013ad0:	08021614 	.word	0x08021614
 8013ad4:	08021500 	.word	0x08021500
 8013ad8:	0802191c 	.word	0x0802191c
 8013adc:	08021624 	.word	0x08021624
 8013ae0:	0802193c 	.word	0x0802193c
 8013ae4:	08021954 	.word	0x08021954
 8013ae8:	08021994 	.word	0x08021994
 8013aec:	080219bc 	.word	0x080219bc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013af8:	f640 3269 	movw	r2, #2921	; 0xb69
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d905      	bls.n	8013b0c <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8013b08:	2b07      	cmp	r3, #7
 8013b0a:	d909      	bls.n	8013b20 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d005      	beq.n	8013b20 <lwip_netconn_do_writemore+0x2c4>
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b18:	2200      	movs	r2, #0
 8013b1a:	2103      	movs	r1, #3
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8013b20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d11d      	bne.n	8013b64 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6a1b      	ldr	r3, [r3, #32]
 8013b2c:	699a      	ldr	r2, [r3, #24]
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	6a1b      	ldr	r3, [r3, #32]
 8013b32:	695b      	ldr	r3, [r3, #20]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d002      	beq.n	8013b3e <lwip_netconn_do_writemore+0x2e2>
 8013b38:	7e3b      	ldrb	r3, [r7, #24]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d001      	beq.n	8013b42 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8013b3e:	2301      	movs	r3, #1
 8013b40:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	685b      	ldr	r3, [r3, #4]
 8013b46:	4618      	mov	r0, r3
 8013b48:	f009 fed2 	bl	801d8f0 <tcp_output>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8013b50:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8013b54:	f113 0f04 	cmn.w	r3, #4
 8013b58:	d12c      	bne.n	8013bb4 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8013b5a:	7b3b      	ldrb	r3, [r7, #12]
 8013b5c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013b5e:	2301      	movs	r3, #1
 8013b60:	76fb      	strb	r3, [r7, #27]
 8013b62:	e027      	b.n	8013bb4 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8013b64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b6c:	d120      	bne.n	8013bb0 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	4618      	mov	r0, r3
 8013b74:	f009 febc 	bl	801d8f0 <tcp_output>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8013b7c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013b80:	f113 0f04 	cmn.w	r3, #4
 8013b84:	d104      	bne.n	8013b90 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8013b86:	7b7b      	ldrb	r3, [r7, #13]
 8013b88:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	76fb      	strb	r3, [r7, #27]
 8013b8e:	e011      	b.n	8013bb4 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8013b90:	7e3b      	ldrb	r3, [r7, #24]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d00e      	beq.n	8013bb4 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6a1b      	ldr	r3, [r3, #32]
 8013b9a:	699b      	ldr	r3, [r3, #24]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d102      	bne.n	8013ba6 <lwip_netconn_do_writemore+0x34a>
 8013ba0:	f06f 0306 	mvn.w	r3, #6
 8013ba4:	e000      	b.n	8013ba8 <lwip_netconn_do_writemore+0x34c>
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013baa:	2301      	movs	r3, #1
 8013bac:	76fb      	strb	r3, [r7, #27]
 8013bae:	e001      	b.n	8013bb4 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8013bb4:	7efb      	ldrb	r3, [r7, #27]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d015      	beq.n	8013be6 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	6a1b      	ldr	r3, [r3, #32]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	330c      	adds	r3, #12
 8013bc2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6a1b      	ldr	r3, [r3, #32]
 8013bc8:	7ffa      	ldrb	r2, [r7, #31]
 8013bca:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8013bd8:	78fb      	ldrb	r3, [r7, #3]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d006      	beq.n	8013bec <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8013bde:	68b8      	ldr	r0, [r7, #8]
 8013be0:	f004 fcb0 	bl	8018544 <sys_sem_signal>
 8013be4:	e002      	b.n	8013bec <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8013be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bea:	e000      	b.n	8013bee <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 8013bec:	2300      	movs	r3, #0
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3720      	adds	r7, #32
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	bf00      	nop

08013bf8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7fe fd16 	bl	801263a <netconn_err>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8013c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d166      	bne.n	8013ce8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c24:	2b10      	cmp	r3, #16
 8013c26:	d15d      	bne.n	8013ce4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	785b      	ldrb	r3, [r3, #1]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8013c32:	23fb      	movs	r3, #251	; 0xfb
 8013c34:	73fb      	strb	r3, [r7, #15]
 8013c36:	e057      	b.n	8013ce8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d04d      	beq.n	8013cde <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	2201      	movs	r2, #1
 8013c48:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	6a1b      	ldr	r3, [r3, #32]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d006      	beq.n	8013c62 <lwip_netconn_do_write+0x6a>
 8013c54:	4b28      	ldr	r3, [pc, #160]	; (8013cf8 <lwip_netconn_do_write+0x100>)
 8013c56:	f240 7223 	movw	r2, #1827	; 0x723
 8013c5a:	4928      	ldr	r1, [pc, #160]	; (8013cfc <lwip_netconn_do_write+0x104>)
 8013c5c:	4828      	ldr	r0, [pc, #160]	; (8013d00 <lwip_netconn_do_write+0x108>)
 8013c5e:	f00c fa53 	bl	8020108 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	695b      	ldr	r3, [r3, #20]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d106      	bne.n	8013c78 <lwip_netconn_do_write+0x80>
 8013c6a:	4b23      	ldr	r3, [pc, #140]	; (8013cf8 <lwip_netconn_do_write+0x100>)
 8013c6c:	f240 7224 	movw	r2, #1828	; 0x724
 8013c70:	4924      	ldr	r1, [pc, #144]	; (8013d04 <lwip_netconn_do_write+0x10c>)
 8013c72:	4823      	ldr	r0, [pc, #140]	; (8013d00 <lwip_netconn_do_write+0x108>)
 8013c74:	f00c fa48 	bl	8020108 <iprintf>
        msg->conn->current_msg = msg;
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	68ba      	ldr	r2, [r7, #8]
 8013c7e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	2100      	movs	r1, #0
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7ff fde8 	bl	801385c <lwip_netconn_do_writemore>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d02e      	beq.n	8013cf0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	785b      	ldrb	r3, [r3, #1]
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d006      	beq.n	8013caa <lwip_netconn_do_write+0xb2>
 8013c9c:	4b16      	ldr	r3, [pc, #88]	; (8013cf8 <lwip_netconn_do_write+0x100>)
 8013c9e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8013ca2:	4919      	ldr	r1, [pc, #100]	; (8013d08 <lwip_netconn_do_write+0x110>)
 8013ca4:	4816      	ldr	r0, [pc, #88]	; (8013d00 <lwip_netconn_do_write+0x108>)
 8013ca6:	f00c fa2f 	bl	8020108 <iprintf>
          UNLOCK_TCPIP_CORE();
 8013caa:	4818      	ldr	r0, [pc, #96]	; (8013d0c <lwip_netconn_do_write+0x114>)
 8013cac:	f004 fcbb 	bl	8018626 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	330c      	adds	r3, #12
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f004 fc12 	bl	80184e2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8013cbe:	4813      	ldr	r0, [pc, #76]	; (8013d0c <lwip_netconn_do_write+0x114>)
 8013cc0:	f004 fca2 	bl	8018608 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	785b      	ldrb	r3, [r3, #1]
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d110      	bne.n	8013cf0 <lwip_netconn_do_write+0xf8>
 8013cce:	4b0a      	ldr	r3, [pc, #40]	; (8013cf8 <lwip_netconn_do_write+0x100>)
 8013cd0:	f240 722c 	movw	r2, #1836	; 0x72c
 8013cd4:	490c      	ldr	r1, [pc, #48]	; (8013d08 <lwip_netconn_do_write+0x110>)
 8013cd6:	480a      	ldr	r0, [pc, #40]	; (8013d00 <lwip_netconn_do_write+0x108>)
 8013cd8:	f00c fa16 	bl	8020108 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8013cdc:	e008      	b.n	8013cf0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8013cde:	23f5      	movs	r3, #245	; 0xf5
 8013ce0:	73fb      	strb	r3, [r7, #15]
 8013ce2:	e001      	b.n	8013ce8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8013ce4:	23fa      	movs	r3, #250	; 0xfa
 8013ce6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	7bfa      	ldrb	r2, [r7, #15]
 8013cec:	711a      	strb	r2, [r3, #4]
 8013cee:	e000      	b.n	8013cf2 <lwip_netconn_do_write+0xfa>
        return;
 8013cf0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8013cf2:	3710      	adds	r7, #16
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}
 8013cf8:	08021478 	.word	0x08021478
 8013cfc:	08021860 	.word	0x08021860
 8013d00:	08021500 	.word	0x08021500
 8013d04:	080219e8 	.word	0x080219e8
 8013d08:	0802187c 	.word	0x0802187c
 8013d0c:	24010074 	.word	0x24010074

08013d10 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b084      	sub	sp, #16
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	785b      	ldrb	r3, [r3, #1]
 8013d22:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d069      	beq.n	8013e02 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8013d38:	2b10      	cmp	r3, #16
 8013d3a:	d162      	bne.n	8013e02 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013d40:	2b03      	cmp	r3, #3
 8013d42:	d002      	beq.n	8013d4a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013d44:	7afb      	ldrb	r3, [r7, #11]
 8013d46:	2b02      	cmp	r3, #2
 8013d48:	d05b      	beq.n	8013e02 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8013d4a:	7afb      	ldrb	r3, [r7, #11]
 8013d4c:	2b03      	cmp	r3, #3
 8013d4e:	d103      	bne.n	8013d58 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	22f5      	movs	r2, #245	; 0xf5
 8013d54:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013d56:	e059      	b.n	8013e0c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8013d58:	7afb      	ldrb	r3, [r7, #11]
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	d103      	bne.n	8013d66 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	22fb      	movs	r2, #251	; 0xfb
 8013d62:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013d64:	e052      	b.n	8013e0c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	7a1b      	ldrb	r3, [r3, #8]
 8013d6a:	f003 0301 	and.w	r3, r3, #1
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d004      	beq.n	8013d7c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7ff f99c 	bl	80130b4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	6a1b      	ldr	r3, [r3, #32]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d006      	beq.n	8013d94 <lwip_netconn_do_close+0x84>
 8013d86:	4b23      	ldr	r3, [pc, #140]	; (8013e14 <lwip_netconn_do_close+0x104>)
 8013d88:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8013d8c:	4922      	ldr	r1, [pc, #136]	; (8013e18 <lwip_netconn_do_close+0x108>)
 8013d8e:	4823      	ldr	r0, [pc, #140]	; (8013e1c <lwip_netconn_do_close+0x10c>)
 8013d90:	f00c f9ba 	bl	8020108 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	2204      	movs	r2, #4
 8013d9a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	2100      	movs	r1, #0
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7ff fa00 	bl	80131b0 <lwip_netconn_do_close_internal>
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d029      	beq.n	8013e0a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	785b      	ldrb	r3, [r3, #1]
 8013dbc:	2b04      	cmp	r3, #4
 8013dbe:	d006      	beq.n	8013dce <lwip_netconn_do_close+0xbe>
 8013dc0:	4b14      	ldr	r3, [pc, #80]	; (8013e14 <lwip_netconn_do_close+0x104>)
 8013dc2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8013dc6:	4916      	ldr	r1, [pc, #88]	; (8013e20 <lwip_netconn_do_close+0x110>)
 8013dc8:	4814      	ldr	r0, [pc, #80]	; (8013e1c <lwip_netconn_do_close+0x10c>)
 8013dca:	f00c f99d 	bl	8020108 <iprintf>
        UNLOCK_TCPIP_CORE();
 8013dce:	4815      	ldr	r0, [pc, #84]	; (8013e24 <lwip_netconn_do_close+0x114>)
 8013dd0:	f004 fc29 	bl	8018626 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	330c      	adds	r3, #12
 8013dda:	2100      	movs	r1, #0
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f004 fb80 	bl	80184e2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8013de2:	4810      	ldr	r0, [pc, #64]	; (8013e24 <lwip_netconn_do_close+0x114>)
 8013de4:	f004 fc10 	bl	8018608 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	785b      	ldrb	r3, [r3, #1]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00b      	beq.n	8013e0a <lwip_netconn_do_close+0xfa>
 8013df2:	4b08      	ldr	r3, [pc, #32]	; (8013e14 <lwip_netconn_do_close+0x104>)
 8013df4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8013df8:	4909      	ldr	r1, [pc, #36]	; (8013e20 <lwip_netconn_do_close+0x110>)
 8013dfa:	4808      	ldr	r0, [pc, #32]	; (8013e1c <lwip_netconn_do_close+0x10c>)
 8013dfc:	f00c f984 	bl	8020108 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8013e00:	e003      	b.n	8013e0a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	22f5      	movs	r2, #245	; 0xf5
 8013e06:	711a      	strb	r2, [r3, #4]
 8013e08:	e000      	b.n	8013e0c <lwip_netconn_do_close+0xfc>
      return;
 8013e0a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8013e0c:	3710      	adds	r7, #16
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}
 8013e12:	bf00      	nop
 8013e14:	08021478 	.word	0x08021478
 8013e18:	08021860 	.word	0x08021860
 8013e1c:	08021500 	.word	0x08021500
 8013e20:	0802187c 	.word	0x0802187c
 8013e24:	24010074 	.word	0x24010074

08013e28 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013e28:	b480      	push	{r7}
 8013e2a:	b083      	sub	sp, #12
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	4603      	mov	r3, r0
 8013e30:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013e32:	88fb      	ldrh	r3, [r7, #6]
 8013e34:	021b      	lsls	r3, r3, #8
 8013e36:	b21a      	sxth	r2, r3
 8013e38:	88fb      	ldrh	r3, [r7, #6]
 8013e3a:	0a1b      	lsrs	r3, r3, #8
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	b21b      	sxth	r3, r3
 8013e40:	4313      	orrs	r3, r2
 8013e42:	b21b      	sxth	r3, r3
 8013e44:	b29b      	uxth	r3, r3
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	370c      	adds	r7, #12
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e50:	4770      	bx	lr

08013e52 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013e52:	b480      	push	{r7}
 8013e54:	b083      	sub	sp, #12
 8013e56:	af00      	add	r7, sp, #0
 8013e58:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	061a      	lsls	r2, r3, #24
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	021b      	lsls	r3, r3, #8
 8013e62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013e66:	431a      	orrs	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	0a1b      	lsrs	r3, r3, #8
 8013e6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013e70:	431a      	orrs	r2, r3
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	0e1b      	lsrs	r3, r3, #24
 8013e76:	4313      	orrs	r3, r2
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	370c      	adds	r7, #12
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e82:	4770      	bx	lr

08013e84 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013e8c:	4915      	ldr	r1, [pc, #84]	; (8013ee4 <etharp_free_entry+0x60>)
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	4613      	mov	r3, r2
 8013e92:	005b      	lsls	r3, r3, #1
 8013e94:	4413      	add	r3, r2
 8013e96:	00db      	lsls	r3, r3, #3
 8013e98:	440b      	add	r3, r1
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d013      	beq.n	8013ec8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013ea0:	4910      	ldr	r1, [pc, #64]	; (8013ee4 <etharp_free_entry+0x60>)
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	005b      	lsls	r3, r3, #1
 8013ea8:	4413      	add	r3, r2
 8013eaa:	00db      	lsls	r3, r3, #3
 8013eac:	440b      	add	r3, r1
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f003 ff8d 	bl	8017dd0 <pbuf_free>
    arp_table[i].q = NULL;
 8013eb6:	490b      	ldr	r1, [pc, #44]	; (8013ee4 <etharp_free_entry+0x60>)
 8013eb8:	687a      	ldr	r2, [r7, #4]
 8013eba:	4613      	mov	r3, r2
 8013ebc:	005b      	lsls	r3, r3, #1
 8013ebe:	4413      	add	r3, r2
 8013ec0:	00db      	lsls	r3, r3, #3
 8013ec2:	440b      	add	r3, r1
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013ec8:	4906      	ldr	r1, [pc, #24]	; (8013ee4 <etharp_free_entry+0x60>)
 8013eca:	687a      	ldr	r2, [r7, #4]
 8013ecc:	4613      	mov	r3, r2
 8013ece:	005b      	lsls	r3, r3, #1
 8013ed0:	4413      	add	r3, r2
 8013ed2:	00db      	lsls	r3, r3, #3
 8013ed4:	440b      	add	r3, r1
 8013ed6:	3314      	adds	r3, #20
 8013ed8:	2200      	movs	r2, #0
 8013eda:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013edc:	bf00      	nop
 8013ede:	3708      	adds	r7, #8
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	24009454 	.word	0x24009454

08013ee8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b082      	sub	sp, #8
 8013eec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013eee:	2300      	movs	r3, #0
 8013ef0:	607b      	str	r3, [r7, #4]
 8013ef2:	e096      	b.n	8014022 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013ef4:	494f      	ldr	r1, [pc, #316]	; (8014034 <etharp_tmr+0x14c>)
 8013ef6:	687a      	ldr	r2, [r7, #4]
 8013ef8:	4613      	mov	r3, r2
 8013efa:	005b      	lsls	r3, r3, #1
 8013efc:	4413      	add	r3, r2
 8013efe:	00db      	lsls	r3, r3, #3
 8013f00:	440b      	add	r3, r1
 8013f02:	3314      	adds	r3, #20
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013f08:	78fb      	ldrb	r3, [r7, #3]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	f000 8086 	beq.w	801401c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013f10:	4948      	ldr	r1, [pc, #288]	; (8014034 <etharp_tmr+0x14c>)
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	4613      	mov	r3, r2
 8013f16:	005b      	lsls	r3, r3, #1
 8013f18:	4413      	add	r3, r2
 8013f1a:	00db      	lsls	r3, r3, #3
 8013f1c:	440b      	add	r3, r1
 8013f1e:	3312      	adds	r3, #18
 8013f20:	881b      	ldrh	r3, [r3, #0]
 8013f22:	3301      	adds	r3, #1
 8013f24:	b298      	uxth	r0, r3
 8013f26:	4943      	ldr	r1, [pc, #268]	; (8014034 <etharp_tmr+0x14c>)
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	4613      	mov	r3, r2
 8013f2c:	005b      	lsls	r3, r3, #1
 8013f2e:	4413      	add	r3, r2
 8013f30:	00db      	lsls	r3, r3, #3
 8013f32:	440b      	add	r3, r1
 8013f34:	3312      	adds	r3, #18
 8013f36:	4602      	mov	r2, r0
 8013f38:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f3a:	493e      	ldr	r1, [pc, #248]	; (8014034 <etharp_tmr+0x14c>)
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	4613      	mov	r3, r2
 8013f40:	005b      	lsls	r3, r3, #1
 8013f42:	4413      	add	r3, r2
 8013f44:	00db      	lsls	r3, r3, #3
 8013f46:	440b      	add	r3, r1
 8013f48:	3312      	adds	r3, #18
 8013f4a:	881b      	ldrh	r3, [r3, #0]
 8013f4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013f50:	d215      	bcs.n	8013f7e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f52:	4938      	ldr	r1, [pc, #224]	; (8014034 <etharp_tmr+0x14c>)
 8013f54:	687a      	ldr	r2, [r7, #4]
 8013f56:	4613      	mov	r3, r2
 8013f58:	005b      	lsls	r3, r3, #1
 8013f5a:	4413      	add	r3, r2
 8013f5c:	00db      	lsls	r3, r3, #3
 8013f5e:	440b      	add	r3, r1
 8013f60:	3314      	adds	r3, #20
 8013f62:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d10e      	bne.n	8013f86 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013f68:	4932      	ldr	r1, [pc, #200]	; (8014034 <etharp_tmr+0x14c>)
 8013f6a:	687a      	ldr	r2, [r7, #4]
 8013f6c:	4613      	mov	r3, r2
 8013f6e:	005b      	lsls	r3, r3, #1
 8013f70:	4413      	add	r3, r2
 8013f72:	00db      	lsls	r3, r3, #3
 8013f74:	440b      	add	r3, r1
 8013f76:	3312      	adds	r3, #18
 8013f78:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f7a:	2b04      	cmp	r3, #4
 8013f7c:	d903      	bls.n	8013f86 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7ff ff80 	bl	8013e84 <etharp_free_entry>
 8013f84:	e04a      	b.n	801401c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013f86:	492b      	ldr	r1, [pc, #172]	; (8014034 <etharp_tmr+0x14c>)
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	4613      	mov	r3, r2
 8013f8c:	005b      	lsls	r3, r3, #1
 8013f8e:	4413      	add	r3, r2
 8013f90:	00db      	lsls	r3, r3, #3
 8013f92:	440b      	add	r3, r1
 8013f94:	3314      	adds	r3, #20
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	2b03      	cmp	r3, #3
 8013f9a:	d10a      	bne.n	8013fb2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013f9c:	4925      	ldr	r1, [pc, #148]	; (8014034 <etharp_tmr+0x14c>)
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	005b      	lsls	r3, r3, #1
 8013fa4:	4413      	add	r3, r2
 8013fa6:	00db      	lsls	r3, r3, #3
 8013fa8:	440b      	add	r3, r1
 8013faa:	3314      	adds	r3, #20
 8013fac:	2204      	movs	r2, #4
 8013fae:	701a      	strb	r2, [r3, #0]
 8013fb0:	e034      	b.n	801401c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013fb2:	4920      	ldr	r1, [pc, #128]	; (8014034 <etharp_tmr+0x14c>)
 8013fb4:	687a      	ldr	r2, [r7, #4]
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	005b      	lsls	r3, r3, #1
 8013fba:	4413      	add	r3, r2
 8013fbc:	00db      	lsls	r3, r3, #3
 8013fbe:	440b      	add	r3, r1
 8013fc0:	3314      	adds	r3, #20
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	2b04      	cmp	r3, #4
 8013fc6:	d10a      	bne.n	8013fde <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013fc8:	491a      	ldr	r1, [pc, #104]	; (8014034 <etharp_tmr+0x14c>)
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	4613      	mov	r3, r2
 8013fce:	005b      	lsls	r3, r3, #1
 8013fd0:	4413      	add	r3, r2
 8013fd2:	00db      	lsls	r3, r3, #3
 8013fd4:	440b      	add	r3, r1
 8013fd6:	3314      	adds	r3, #20
 8013fd8:	2202      	movs	r2, #2
 8013fda:	701a      	strb	r2, [r3, #0]
 8013fdc:	e01e      	b.n	801401c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013fde:	4915      	ldr	r1, [pc, #84]	; (8014034 <etharp_tmr+0x14c>)
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	4613      	mov	r3, r2
 8013fe4:	005b      	lsls	r3, r3, #1
 8013fe6:	4413      	add	r3, r2
 8013fe8:	00db      	lsls	r3, r3, #3
 8013fea:	440b      	add	r3, r1
 8013fec:	3314      	adds	r3, #20
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	2b01      	cmp	r3, #1
 8013ff2:	d113      	bne.n	801401c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013ff4:	490f      	ldr	r1, [pc, #60]	; (8014034 <etharp_tmr+0x14c>)
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	00db      	lsls	r3, r3, #3
 8014000:	440b      	add	r3, r1
 8014002:	3308      	adds	r3, #8
 8014004:	6818      	ldr	r0, [r3, #0]
 8014006:	687a      	ldr	r2, [r7, #4]
 8014008:	4613      	mov	r3, r2
 801400a:	005b      	lsls	r3, r3, #1
 801400c:	4413      	add	r3, r2
 801400e:	00db      	lsls	r3, r3, #3
 8014010:	4a08      	ldr	r2, [pc, #32]	; (8014034 <etharp_tmr+0x14c>)
 8014012:	4413      	add	r3, r2
 8014014:	3304      	adds	r3, #4
 8014016:	4619      	mov	r1, r3
 8014018:	f000 fe6e 	bl	8014cf8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	3301      	adds	r3, #1
 8014020:	607b      	str	r3, [r7, #4]
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2b09      	cmp	r3, #9
 8014026:	f77f af65 	ble.w	8013ef4 <etharp_tmr+0xc>
      }
    }
  }
}
 801402a:	bf00      	nop
 801402c:	bf00      	nop
 801402e:	3708      	adds	r7, #8
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}
 8014034:	24009454 	.word	0x24009454

08014038 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b08a      	sub	sp, #40	; 0x28
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	460b      	mov	r3, r1
 8014042:	607a      	str	r2, [r7, #4]
 8014044:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014046:	230a      	movs	r3, #10
 8014048:	84fb      	strh	r3, [r7, #38]	; 0x26
 801404a:	230a      	movs	r3, #10
 801404c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801404e:	230a      	movs	r3, #10
 8014050:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014052:	2300      	movs	r3, #0
 8014054:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014056:	230a      	movs	r3, #10
 8014058:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801405a:	2300      	movs	r3, #0
 801405c:	83bb      	strh	r3, [r7, #28]
 801405e:	2300      	movs	r3, #0
 8014060:	837b      	strh	r3, [r7, #26]
 8014062:	2300      	movs	r3, #0
 8014064:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014066:	2300      	movs	r3, #0
 8014068:	843b      	strh	r3, [r7, #32]
 801406a:	e0ae      	b.n	80141ca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801406c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014070:	49a6      	ldr	r1, [pc, #664]	; (801430c <etharp_find_entry+0x2d4>)
 8014072:	4613      	mov	r3, r2
 8014074:	005b      	lsls	r3, r3, #1
 8014076:	4413      	add	r3, r2
 8014078:	00db      	lsls	r3, r3, #3
 801407a:	440b      	add	r3, r1
 801407c:	3314      	adds	r3, #20
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014082:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014086:	2b0a      	cmp	r3, #10
 8014088:	d105      	bne.n	8014096 <etharp_find_entry+0x5e>
 801408a:	7dfb      	ldrb	r3, [r7, #23]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d102      	bne.n	8014096 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014090:	8c3b      	ldrh	r3, [r7, #32]
 8014092:	847b      	strh	r3, [r7, #34]	; 0x22
 8014094:	e095      	b.n	80141c2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014096:	7dfb      	ldrb	r3, [r7, #23]
 8014098:	2b00      	cmp	r3, #0
 801409a:	f000 8092 	beq.w	80141c2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801409e:	7dfb      	ldrb	r3, [r7, #23]
 80140a0:	2b01      	cmp	r3, #1
 80140a2:	d009      	beq.n	80140b8 <etharp_find_entry+0x80>
 80140a4:	7dfb      	ldrb	r3, [r7, #23]
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d806      	bhi.n	80140b8 <etharp_find_entry+0x80>
 80140aa:	4b99      	ldr	r3, [pc, #612]	; (8014310 <etharp_find_entry+0x2d8>)
 80140ac:	f240 1223 	movw	r2, #291	; 0x123
 80140b0:	4998      	ldr	r1, [pc, #608]	; (8014314 <etharp_find_entry+0x2dc>)
 80140b2:	4899      	ldr	r0, [pc, #612]	; (8014318 <etharp_find_entry+0x2e0>)
 80140b4:	f00c f828 	bl	8020108 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d020      	beq.n	8014100 <etharp_find_entry+0xc8>
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	6819      	ldr	r1, [r3, #0]
 80140c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140c6:	4891      	ldr	r0, [pc, #580]	; (801430c <etharp_find_entry+0x2d4>)
 80140c8:	4613      	mov	r3, r2
 80140ca:	005b      	lsls	r3, r3, #1
 80140cc:	4413      	add	r3, r2
 80140ce:	00db      	lsls	r3, r3, #3
 80140d0:	4403      	add	r3, r0
 80140d2:	3304      	adds	r3, #4
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	4299      	cmp	r1, r3
 80140d8:	d112      	bne.n	8014100 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d00c      	beq.n	80140fa <etharp_find_entry+0xc2>
 80140e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140e4:	4989      	ldr	r1, [pc, #548]	; (801430c <etharp_find_entry+0x2d4>)
 80140e6:	4613      	mov	r3, r2
 80140e8:	005b      	lsls	r3, r3, #1
 80140ea:	4413      	add	r3, r2
 80140ec:	00db      	lsls	r3, r3, #3
 80140ee:	440b      	add	r3, r1
 80140f0:	3308      	adds	r3, #8
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	687a      	ldr	r2, [r7, #4]
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d102      	bne.n	8014100 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80140fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140fe:	e100      	b.n	8014302 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014100:	7dfb      	ldrb	r3, [r7, #23]
 8014102:	2b01      	cmp	r3, #1
 8014104:	d140      	bne.n	8014188 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014106:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801410a:	4980      	ldr	r1, [pc, #512]	; (801430c <etharp_find_entry+0x2d4>)
 801410c:	4613      	mov	r3, r2
 801410e:	005b      	lsls	r3, r3, #1
 8014110:	4413      	add	r3, r2
 8014112:	00db      	lsls	r3, r3, #3
 8014114:	440b      	add	r3, r1
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d01a      	beq.n	8014152 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801411c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014120:	497a      	ldr	r1, [pc, #488]	; (801430c <etharp_find_entry+0x2d4>)
 8014122:	4613      	mov	r3, r2
 8014124:	005b      	lsls	r3, r3, #1
 8014126:	4413      	add	r3, r2
 8014128:	00db      	lsls	r3, r3, #3
 801412a:	440b      	add	r3, r1
 801412c:	3312      	adds	r3, #18
 801412e:	881b      	ldrh	r3, [r3, #0]
 8014130:	8bba      	ldrh	r2, [r7, #28]
 8014132:	429a      	cmp	r2, r3
 8014134:	d845      	bhi.n	80141c2 <etharp_find_entry+0x18a>
            old_queue = i;
 8014136:	8c3b      	ldrh	r3, [r7, #32]
 8014138:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801413a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801413e:	4973      	ldr	r1, [pc, #460]	; (801430c <etharp_find_entry+0x2d4>)
 8014140:	4613      	mov	r3, r2
 8014142:	005b      	lsls	r3, r3, #1
 8014144:	4413      	add	r3, r2
 8014146:	00db      	lsls	r3, r3, #3
 8014148:	440b      	add	r3, r1
 801414a:	3312      	adds	r3, #18
 801414c:	881b      	ldrh	r3, [r3, #0]
 801414e:	83bb      	strh	r3, [r7, #28]
 8014150:	e037      	b.n	80141c2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014152:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014156:	496d      	ldr	r1, [pc, #436]	; (801430c <etharp_find_entry+0x2d4>)
 8014158:	4613      	mov	r3, r2
 801415a:	005b      	lsls	r3, r3, #1
 801415c:	4413      	add	r3, r2
 801415e:	00db      	lsls	r3, r3, #3
 8014160:	440b      	add	r3, r1
 8014162:	3312      	adds	r3, #18
 8014164:	881b      	ldrh	r3, [r3, #0]
 8014166:	8b7a      	ldrh	r2, [r7, #26]
 8014168:	429a      	cmp	r2, r3
 801416a:	d82a      	bhi.n	80141c2 <etharp_find_entry+0x18a>
            old_pending = i;
 801416c:	8c3b      	ldrh	r3, [r7, #32]
 801416e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014170:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014174:	4965      	ldr	r1, [pc, #404]	; (801430c <etharp_find_entry+0x2d4>)
 8014176:	4613      	mov	r3, r2
 8014178:	005b      	lsls	r3, r3, #1
 801417a:	4413      	add	r3, r2
 801417c:	00db      	lsls	r3, r3, #3
 801417e:	440b      	add	r3, r1
 8014180:	3312      	adds	r3, #18
 8014182:	881b      	ldrh	r3, [r3, #0]
 8014184:	837b      	strh	r3, [r7, #26]
 8014186:	e01c      	b.n	80141c2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014188:	7dfb      	ldrb	r3, [r7, #23]
 801418a:	2b01      	cmp	r3, #1
 801418c:	d919      	bls.n	80141c2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801418e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014192:	495e      	ldr	r1, [pc, #376]	; (801430c <etharp_find_entry+0x2d4>)
 8014194:	4613      	mov	r3, r2
 8014196:	005b      	lsls	r3, r3, #1
 8014198:	4413      	add	r3, r2
 801419a:	00db      	lsls	r3, r3, #3
 801419c:	440b      	add	r3, r1
 801419e:	3312      	adds	r3, #18
 80141a0:	881b      	ldrh	r3, [r3, #0]
 80141a2:	8b3a      	ldrh	r2, [r7, #24]
 80141a4:	429a      	cmp	r2, r3
 80141a6:	d80c      	bhi.n	80141c2 <etharp_find_entry+0x18a>
            old_stable = i;
 80141a8:	8c3b      	ldrh	r3, [r7, #32]
 80141aa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80141ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141b0:	4956      	ldr	r1, [pc, #344]	; (801430c <etharp_find_entry+0x2d4>)
 80141b2:	4613      	mov	r3, r2
 80141b4:	005b      	lsls	r3, r3, #1
 80141b6:	4413      	add	r3, r2
 80141b8:	00db      	lsls	r3, r3, #3
 80141ba:	440b      	add	r3, r1
 80141bc:	3312      	adds	r3, #18
 80141be:	881b      	ldrh	r3, [r3, #0]
 80141c0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141c2:	8c3b      	ldrh	r3, [r7, #32]
 80141c4:	3301      	adds	r3, #1
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	843b      	strh	r3, [r7, #32]
 80141ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141ce:	2b09      	cmp	r3, #9
 80141d0:	f77f af4c 	ble.w	801406c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80141d4:	7afb      	ldrb	r3, [r7, #11]
 80141d6:	f003 0302 	and.w	r3, r3, #2
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d108      	bne.n	80141f0 <etharp_find_entry+0x1b8>
 80141de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80141e2:	2b0a      	cmp	r3, #10
 80141e4:	d107      	bne.n	80141f6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80141e6:	7afb      	ldrb	r3, [r7, #11]
 80141e8:	f003 0301 	and.w	r3, r3, #1
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d102      	bne.n	80141f6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80141f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141f4:	e085      	b.n	8014302 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80141f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80141fa:	2b09      	cmp	r3, #9
 80141fc:	dc02      	bgt.n	8014204 <etharp_find_entry+0x1cc>
    i = empty;
 80141fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014200:	843b      	strh	r3, [r7, #32]
 8014202:	e039      	b.n	8014278 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014204:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014208:	2b09      	cmp	r3, #9
 801420a:	dc14      	bgt.n	8014236 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801420c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801420e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014210:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014214:	493d      	ldr	r1, [pc, #244]	; (801430c <etharp_find_entry+0x2d4>)
 8014216:	4613      	mov	r3, r2
 8014218:	005b      	lsls	r3, r3, #1
 801421a:	4413      	add	r3, r2
 801421c:	00db      	lsls	r3, r3, #3
 801421e:	440b      	add	r3, r1
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d018      	beq.n	8014258 <etharp_find_entry+0x220>
 8014226:	4b3a      	ldr	r3, [pc, #232]	; (8014310 <etharp_find_entry+0x2d8>)
 8014228:	f240 126d 	movw	r2, #365	; 0x16d
 801422c:	493b      	ldr	r1, [pc, #236]	; (801431c <etharp_find_entry+0x2e4>)
 801422e:	483a      	ldr	r0, [pc, #232]	; (8014318 <etharp_find_entry+0x2e0>)
 8014230:	f00b ff6a 	bl	8020108 <iprintf>
 8014234:	e010      	b.n	8014258 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014236:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801423a:	2b09      	cmp	r3, #9
 801423c:	dc02      	bgt.n	8014244 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801423e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014240:	843b      	strh	r3, [r7, #32]
 8014242:	e009      	b.n	8014258 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014244:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014248:	2b09      	cmp	r3, #9
 801424a:	dc02      	bgt.n	8014252 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801424c:	8bfb      	ldrh	r3, [r7, #30]
 801424e:	843b      	strh	r3, [r7, #32]
 8014250:	e002      	b.n	8014258 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014256:	e054      	b.n	8014302 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014258:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801425c:	2b09      	cmp	r3, #9
 801425e:	dd06      	ble.n	801426e <etharp_find_entry+0x236>
 8014260:	4b2b      	ldr	r3, [pc, #172]	; (8014310 <etharp_find_entry+0x2d8>)
 8014262:	f240 127f 	movw	r2, #383	; 0x17f
 8014266:	492e      	ldr	r1, [pc, #184]	; (8014320 <etharp_find_entry+0x2e8>)
 8014268:	482b      	ldr	r0, [pc, #172]	; (8014318 <etharp_find_entry+0x2e0>)
 801426a:	f00b ff4d 	bl	8020108 <iprintf>
    etharp_free_entry(i);
 801426e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014272:	4618      	mov	r0, r3
 8014274:	f7ff fe06 	bl	8013e84 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014278:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801427c:	2b09      	cmp	r3, #9
 801427e:	dd06      	ble.n	801428e <etharp_find_entry+0x256>
 8014280:	4b23      	ldr	r3, [pc, #140]	; (8014310 <etharp_find_entry+0x2d8>)
 8014282:	f240 1283 	movw	r2, #387	; 0x183
 8014286:	4926      	ldr	r1, [pc, #152]	; (8014320 <etharp_find_entry+0x2e8>)
 8014288:	4823      	ldr	r0, [pc, #140]	; (8014318 <etharp_find_entry+0x2e0>)
 801428a:	f00b ff3d 	bl	8020108 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801428e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014292:	491e      	ldr	r1, [pc, #120]	; (801430c <etharp_find_entry+0x2d4>)
 8014294:	4613      	mov	r3, r2
 8014296:	005b      	lsls	r3, r3, #1
 8014298:	4413      	add	r3, r2
 801429a:	00db      	lsls	r3, r3, #3
 801429c:	440b      	add	r3, r1
 801429e:	3314      	adds	r3, #20
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d006      	beq.n	80142b4 <etharp_find_entry+0x27c>
 80142a6:	4b1a      	ldr	r3, [pc, #104]	; (8014310 <etharp_find_entry+0x2d8>)
 80142a8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80142ac:	491d      	ldr	r1, [pc, #116]	; (8014324 <etharp_find_entry+0x2ec>)
 80142ae:	481a      	ldr	r0, [pc, #104]	; (8014318 <etharp_find_entry+0x2e0>)
 80142b0:	f00b ff2a 	bl	8020108 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d00b      	beq.n	80142d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80142ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	6819      	ldr	r1, [r3, #0]
 80142c2:	4812      	ldr	r0, [pc, #72]	; (801430c <etharp_find_entry+0x2d4>)
 80142c4:	4613      	mov	r3, r2
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	4413      	add	r3, r2
 80142ca:	00db      	lsls	r3, r3, #3
 80142cc:	4403      	add	r3, r0
 80142ce:	3304      	adds	r3, #4
 80142d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80142d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142d6:	490d      	ldr	r1, [pc, #52]	; (801430c <etharp_find_entry+0x2d4>)
 80142d8:	4613      	mov	r3, r2
 80142da:	005b      	lsls	r3, r3, #1
 80142dc:	4413      	add	r3, r2
 80142de:	00db      	lsls	r3, r3, #3
 80142e0:	440b      	add	r3, r1
 80142e2:	3312      	adds	r3, #18
 80142e4:	2200      	movs	r2, #0
 80142e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80142e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142ec:	4907      	ldr	r1, [pc, #28]	; (801430c <etharp_find_entry+0x2d4>)
 80142ee:	4613      	mov	r3, r2
 80142f0:	005b      	lsls	r3, r3, #1
 80142f2:	4413      	add	r3, r2
 80142f4:	00db      	lsls	r3, r3, #3
 80142f6:	440b      	add	r3, r1
 80142f8:	3308      	adds	r3, #8
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80142fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014302:	4618      	mov	r0, r3
 8014304:	3728      	adds	r7, #40	; 0x28
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	24009454 	.word	0x24009454
 8014310:	08021a14 	.word	0x08021a14
 8014314:	08021a90 	.word	0x08021a90
 8014318:	08021ad0 	.word	0x08021ad0
 801431c:	08021af8 	.word	0x08021af8
 8014320:	08021b10 	.word	0x08021b10
 8014324:	08021b24 	.word	0x08021b24

08014328 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b088      	sub	sp, #32
 801432c:	af02      	add	r7, sp, #8
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	607a      	str	r2, [r7, #4]
 8014334:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801433c:	2b06      	cmp	r3, #6
 801433e:	d006      	beq.n	801434e <etharp_update_arp_entry+0x26>
 8014340:	4b48      	ldr	r3, [pc, #288]	; (8014464 <etharp_update_arp_entry+0x13c>)
 8014342:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014346:	4948      	ldr	r1, [pc, #288]	; (8014468 <etharp_update_arp_entry+0x140>)
 8014348:	4848      	ldr	r0, [pc, #288]	; (801446c <etharp_update_arp_entry+0x144>)
 801434a:	f00b fedd 	bl	8020108 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d012      	beq.n	801437a <etharp_update_arp_entry+0x52>
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d00e      	beq.n	801437a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	68f9      	ldr	r1, [r7, #12]
 8014362:	4618      	mov	r0, r3
 8014364:	f001 face 	bl	8015904 <ip4_addr_isbroadcast_u32>
 8014368:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801436a:	2b00      	cmp	r3, #0
 801436c:	d105      	bne.n	801437a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014376:	2be0      	cmp	r3, #224	; 0xe0
 8014378:	d102      	bne.n	8014380 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801437a:	f06f 030f 	mvn.w	r3, #15
 801437e:	e06c      	b.n	801445a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014380:	78fb      	ldrb	r3, [r7, #3]
 8014382:	68fa      	ldr	r2, [r7, #12]
 8014384:	4619      	mov	r1, r3
 8014386:	68b8      	ldr	r0, [r7, #8]
 8014388:	f7ff fe56 	bl	8014038 <etharp_find_entry>
 801438c:	4603      	mov	r3, r0
 801438e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014390:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014394:	2b00      	cmp	r3, #0
 8014396:	da02      	bge.n	801439e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014398:	8afb      	ldrh	r3, [r7, #22]
 801439a:	b25b      	sxtb	r3, r3
 801439c:	e05d      	b.n	801445a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801439e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143a2:	4933      	ldr	r1, [pc, #204]	; (8014470 <etharp_update_arp_entry+0x148>)
 80143a4:	4613      	mov	r3, r2
 80143a6:	005b      	lsls	r3, r3, #1
 80143a8:	4413      	add	r3, r2
 80143aa:	00db      	lsls	r3, r3, #3
 80143ac:	440b      	add	r3, r1
 80143ae:	3314      	adds	r3, #20
 80143b0:	2202      	movs	r2, #2
 80143b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80143b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143b8:	492d      	ldr	r1, [pc, #180]	; (8014470 <etharp_update_arp_entry+0x148>)
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	440b      	add	r3, r1
 80143c4:	3308      	adds	r3, #8
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80143ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ce:	4613      	mov	r3, r2
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	4413      	add	r3, r2
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	3308      	adds	r3, #8
 80143d8:	4a25      	ldr	r2, [pc, #148]	; (8014470 <etharp_update_arp_entry+0x148>)
 80143da:	4413      	add	r3, r2
 80143dc:	3304      	adds	r3, #4
 80143de:	2206      	movs	r2, #6
 80143e0:	6879      	ldr	r1, [r7, #4]
 80143e2:	4618      	mov	r0, r3
 80143e4:	f00b fa92 	bl	801f90c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80143e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ec:	4920      	ldr	r1, [pc, #128]	; (8014470 <etharp_update_arp_entry+0x148>)
 80143ee:	4613      	mov	r3, r2
 80143f0:	005b      	lsls	r3, r3, #1
 80143f2:	4413      	add	r3, r2
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	440b      	add	r3, r1
 80143f8:	3312      	adds	r3, #18
 80143fa:	2200      	movs	r2, #0
 80143fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80143fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014402:	491b      	ldr	r1, [pc, #108]	; (8014470 <etharp_update_arp_entry+0x148>)
 8014404:	4613      	mov	r3, r2
 8014406:	005b      	lsls	r3, r3, #1
 8014408:	4413      	add	r3, r2
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	440b      	add	r3, r1
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d021      	beq.n	8014458 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014414:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014418:	4915      	ldr	r1, [pc, #84]	; (8014470 <etharp_update_arp_entry+0x148>)
 801441a:	4613      	mov	r3, r2
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	4413      	add	r3, r2
 8014420:	00db      	lsls	r3, r3, #3
 8014422:	440b      	add	r3, r1
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014428:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801442c:	4910      	ldr	r1, [pc, #64]	; (8014470 <etharp_update_arp_entry+0x148>)
 801442e:	4613      	mov	r3, r2
 8014430:	005b      	lsls	r3, r3, #1
 8014432:	4413      	add	r3, r2
 8014434:	00db      	lsls	r3, r3, #3
 8014436:	440b      	add	r3, r1
 8014438:	2200      	movs	r2, #0
 801443a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014446:	9300      	str	r3, [sp, #0]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6939      	ldr	r1, [r7, #16]
 801444c:	68f8      	ldr	r0, [r7, #12]
 801444e:	f000 fcf3 	bl	8014e38 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014452:	6938      	ldr	r0, [r7, #16]
 8014454:	f003 fcbc 	bl	8017dd0 <pbuf_free>
  }
  return ERR_OK;
 8014458:	2300      	movs	r3, #0
}
 801445a:	4618      	mov	r0, r3
 801445c:	3718      	adds	r7, #24
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	08021a14 	.word	0x08021a14
 8014468:	08021b50 	.word	0x08021b50
 801446c:	08021ad0 	.word	0x08021ad0
 8014470:	24009454 	.word	0x24009454

08014474 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801447c:	2300      	movs	r3, #0
 801447e:	60fb      	str	r3, [r7, #12]
 8014480:	e01e      	b.n	80144c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014482:	4913      	ldr	r1, [pc, #76]	; (80144d0 <etharp_cleanup_netif+0x5c>)
 8014484:	68fa      	ldr	r2, [r7, #12]
 8014486:	4613      	mov	r3, r2
 8014488:	005b      	lsls	r3, r3, #1
 801448a:	4413      	add	r3, r2
 801448c:	00db      	lsls	r3, r3, #3
 801448e:	440b      	add	r3, r1
 8014490:	3314      	adds	r3, #20
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014496:	7afb      	ldrb	r3, [r7, #11]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d00e      	beq.n	80144ba <etharp_cleanup_netif+0x46>
 801449c:	490c      	ldr	r1, [pc, #48]	; (80144d0 <etharp_cleanup_netif+0x5c>)
 801449e:	68fa      	ldr	r2, [r7, #12]
 80144a0:	4613      	mov	r3, r2
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	4413      	add	r3, r2
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	440b      	add	r3, r1
 80144aa:	3308      	adds	r3, #8
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	429a      	cmp	r2, r3
 80144b2:	d102      	bne.n	80144ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80144b4:	68f8      	ldr	r0, [r7, #12]
 80144b6:	f7ff fce5 	bl	8013e84 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	3301      	adds	r3, #1
 80144be:	60fb      	str	r3, [r7, #12]
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2b09      	cmp	r3, #9
 80144c4:	dddd      	ble.n	8014482 <etharp_cleanup_netif+0xe>
    }
  }
}
 80144c6:	bf00      	nop
 80144c8:	bf00      	nop
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}
 80144d0:	24009454 	.word	0x24009454

080144d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80144d4:	b5b0      	push	{r4, r5, r7, lr}
 80144d6:	b08a      	sub	sp, #40	; 0x28
 80144d8:	af04      	add	r7, sp, #16
 80144da:	6078      	str	r0, [r7, #4]
 80144dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d107      	bne.n	80144f4 <etharp_input+0x20>
 80144e4:	4b3d      	ldr	r3, [pc, #244]	; (80145dc <etharp_input+0x108>)
 80144e6:	f240 228a 	movw	r2, #650	; 0x28a
 80144ea:	493d      	ldr	r1, [pc, #244]	; (80145e0 <etharp_input+0x10c>)
 80144ec:	483d      	ldr	r0, [pc, #244]	; (80145e4 <etharp_input+0x110>)
 80144ee:	f00b fe0b 	bl	8020108 <iprintf>
 80144f2:	e06f      	b.n	80145d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	685b      	ldr	r3, [r3, #4]
 80144f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	881b      	ldrh	r3, [r3, #0]
 80144fe:	b29b      	uxth	r3, r3
 8014500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014504:	d10c      	bne.n	8014520 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801450a:	2b06      	cmp	r3, #6
 801450c:	d108      	bne.n	8014520 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014512:	2b04      	cmp	r3, #4
 8014514:	d104      	bne.n	8014520 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	885b      	ldrh	r3, [r3, #2]
 801451a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801451c:	2b08      	cmp	r3, #8
 801451e:	d003      	beq.n	8014528 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f003 fc55 	bl	8017dd0 <pbuf_free>
    return;
 8014526:	e055      	b.n	80145d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	330e      	adds	r3, #14
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014530:	693b      	ldr	r3, [r7, #16]
 8014532:	3318      	adds	r3, #24
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	3304      	adds	r3, #4
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d102      	bne.n	8014548 <etharp_input+0x74>
    for_us = 0;
 8014542:	2300      	movs	r3, #0
 8014544:	75fb      	strb	r3, [r7, #23]
 8014546:	e009      	b.n	801455c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014548:	68ba      	ldr	r2, [r7, #8]
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	3304      	adds	r3, #4
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	429a      	cmp	r2, r3
 8014552:	bf0c      	ite	eq
 8014554:	2301      	moveq	r3, #1
 8014556:	2300      	movne	r3, #0
 8014558:	b2db      	uxtb	r3, r3
 801455a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	f103 0208 	add.w	r2, r3, #8
 8014562:	7dfb      	ldrb	r3, [r7, #23]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d001      	beq.n	801456c <etharp_input+0x98>
 8014568:	2301      	movs	r3, #1
 801456a:	e000      	b.n	801456e <etharp_input+0x9a>
 801456c:	2302      	movs	r3, #2
 801456e:	f107 010c 	add.w	r1, r7, #12
 8014572:	6838      	ldr	r0, [r7, #0]
 8014574:	f7ff fed8 	bl	8014328 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	88db      	ldrh	r3, [r3, #6]
 801457c:	b29b      	uxth	r3, r3
 801457e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014582:	d003      	beq.n	801458c <etharp_input+0xb8>
 8014584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014588:	d01e      	beq.n	80145c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801458a:	e020      	b.n	80145ce <etharp_input+0xfa>
      if (for_us) {
 801458c:	7dfb      	ldrb	r3, [r7, #23]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d01c      	beq.n	80145cc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80145a8:	693a      	ldr	r2, [r7, #16]
 80145aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80145ac:	2102      	movs	r1, #2
 80145ae:	9103      	str	r1, [sp, #12]
 80145b0:	f107 010c 	add.w	r1, r7, #12
 80145b4:	9102      	str	r1, [sp, #8]
 80145b6:	9201      	str	r2, [sp, #4]
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	462b      	mov	r3, r5
 80145bc:	4622      	mov	r2, r4
 80145be:	4601      	mov	r1, r0
 80145c0:	6838      	ldr	r0, [r7, #0]
 80145c2:	f000 faeb 	bl	8014b9c <etharp_raw>
      break;
 80145c6:	e001      	b.n	80145cc <etharp_input+0xf8>
      break;
 80145c8:	bf00      	nop
 80145ca:	e000      	b.n	80145ce <etharp_input+0xfa>
      break;
 80145cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f003 fbfe 	bl	8017dd0 <pbuf_free>
}
 80145d4:	3718      	adds	r7, #24
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bdb0      	pop	{r4, r5, r7, pc}
 80145da:	bf00      	nop
 80145dc:	08021a14 	.word	0x08021a14
 80145e0:	08021ba8 	.word	0x08021ba8
 80145e4:	08021ad0 	.word	0x08021ad0

080145e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b086      	sub	sp, #24
 80145ec:	af02      	add	r7, sp, #8
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	4613      	mov	r3, r2
 80145f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80145f6:	79fa      	ldrb	r2, [r7, #7]
 80145f8:	4944      	ldr	r1, [pc, #272]	; (801470c <etharp_output_to_arp_index+0x124>)
 80145fa:	4613      	mov	r3, r2
 80145fc:	005b      	lsls	r3, r3, #1
 80145fe:	4413      	add	r3, r2
 8014600:	00db      	lsls	r3, r3, #3
 8014602:	440b      	add	r3, r1
 8014604:	3314      	adds	r3, #20
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	2b01      	cmp	r3, #1
 801460a:	d806      	bhi.n	801461a <etharp_output_to_arp_index+0x32>
 801460c:	4b40      	ldr	r3, [pc, #256]	; (8014710 <etharp_output_to_arp_index+0x128>)
 801460e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014612:	4940      	ldr	r1, [pc, #256]	; (8014714 <etharp_output_to_arp_index+0x12c>)
 8014614:	4840      	ldr	r0, [pc, #256]	; (8014718 <etharp_output_to_arp_index+0x130>)
 8014616:	f00b fd77 	bl	8020108 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801461a:	79fa      	ldrb	r2, [r7, #7]
 801461c:	493b      	ldr	r1, [pc, #236]	; (801470c <etharp_output_to_arp_index+0x124>)
 801461e:	4613      	mov	r3, r2
 8014620:	005b      	lsls	r3, r3, #1
 8014622:	4413      	add	r3, r2
 8014624:	00db      	lsls	r3, r3, #3
 8014626:	440b      	add	r3, r1
 8014628:	3314      	adds	r3, #20
 801462a:	781b      	ldrb	r3, [r3, #0]
 801462c:	2b02      	cmp	r3, #2
 801462e:	d153      	bne.n	80146d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014630:	79fa      	ldrb	r2, [r7, #7]
 8014632:	4936      	ldr	r1, [pc, #216]	; (801470c <etharp_output_to_arp_index+0x124>)
 8014634:	4613      	mov	r3, r2
 8014636:	005b      	lsls	r3, r3, #1
 8014638:	4413      	add	r3, r2
 801463a:	00db      	lsls	r3, r3, #3
 801463c:	440b      	add	r3, r1
 801463e:	3312      	adds	r3, #18
 8014640:	881b      	ldrh	r3, [r3, #0]
 8014642:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014646:	d919      	bls.n	801467c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014648:	79fa      	ldrb	r2, [r7, #7]
 801464a:	4613      	mov	r3, r2
 801464c:	005b      	lsls	r3, r3, #1
 801464e:	4413      	add	r3, r2
 8014650:	00db      	lsls	r3, r3, #3
 8014652:	4a2e      	ldr	r2, [pc, #184]	; (801470c <etharp_output_to_arp_index+0x124>)
 8014654:	4413      	add	r3, r2
 8014656:	3304      	adds	r3, #4
 8014658:	4619      	mov	r1, r3
 801465a:	68f8      	ldr	r0, [r7, #12]
 801465c:	f000 fb4c 	bl	8014cf8 <etharp_request>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d138      	bne.n	80146d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014666:	79fa      	ldrb	r2, [r7, #7]
 8014668:	4928      	ldr	r1, [pc, #160]	; (801470c <etharp_output_to_arp_index+0x124>)
 801466a:	4613      	mov	r3, r2
 801466c:	005b      	lsls	r3, r3, #1
 801466e:	4413      	add	r3, r2
 8014670:	00db      	lsls	r3, r3, #3
 8014672:	440b      	add	r3, r1
 8014674:	3314      	adds	r3, #20
 8014676:	2203      	movs	r2, #3
 8014678:	701a      	strb	r2, [r3, #0]
 801467a:	e02d      	b.n	80146d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801467c:	79fa      	ldrb	r2, [r7, #7]
 801467e:	4923      	ldr	r1, [pc, #140]	; (801470c <etharp_output_to_arp_index+0x124>)
 8014680:	4613      	mov	r3, r2
 8014682:	005b      	lsls	r3, r3, #1
 8014684:	4413      	add	r3, r2
 8014686:	00db      	lsls	r3, r3, #3
 8014688:	440b      	add	r3, r1
 801468a:	3312      	adds	r3, #18
 801468c:	881b      	ldrh	r3, [r3, #0]
 801468e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014692:	d321      	bcc.n	80146d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014694:	79fa      	ldrb	r2, [r7, #7]
 8014696:	4613      	mov	r3, r2
 8014698:	005b      	lsls	r3, r3, #1
 801469a:	4413      	add	r3, r2
 801469c:	00db      	lsls	r3, r3, #3
 801469e:	4a1b      	ldr	r2, [pc, #108]	; (801470c <etharp_output_to_arp_index+0x124>)
 80146a0:	4413      	add	r3, r2
 80146a2:	1d19      	adds	r1, r3, #4
 80146a4:	79fa      	ldrb	r2, [r7, #7]
 80146a6:	4613      	mov	r3, r2
 80146a8:	005b      	lsls	r3, r3, #1
 80146aa:	4413      	add	r3, r2
 80146ac:	00db      	lsls	r3, r3, #3
 80146ae:	3308      	adds	r3, #8
 80146b0:	4a16      	ldr	r2, [pc, #88]	; (801470c <etharp_output_to_arp_index+0x124>)
 80146b2:	4413      	add	r3, r2
 80146b4:	3304      	adds	r3, #4
 80146b6:	461a      	mov	r2, r3
 80146b8:	68f8      	ldr	r0, [r7, #12]
 80146ba:	f000 fafb 	bl	8014cb4 <etharp_request_dst>
 80146be:	4603      	mov	r3, r0
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d109      	bne.n	80146d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80146c4:	79fa      	ldrb	r2, [r7, #7]
 80146c6:	4911      	ldr	r1, [pc, #68]	; (801470c <etharp_output_to_arp_index+0x124>)
 80146c8:	4613      	mov	r3, r2
 80146ca:	005b      	lsls	r3, r3, #1
 80146cc:	4413      	add	r3, r2
 80146ce:	00db      	lsls	r3, r3, #3
 80146d0:	440b      	add	r3, r1
 80146d2:	3314      	adds	r3, #20
 80146d4:	2203      	movs	r2, #3
 80146d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80146de:	79fa      	ldrb	r2, [r7, #7]
 80146e0:	4613      	mov	r3, r2
 80146e2:	005b      	lsls	r3, r3, #1
 80146e4:	4413      	add	r3, r2
 80146e6:	00db      	lsls	r3, r3, #3
 80146e8:	3308      	adds	r3, #8
 80146ea:	4a08      	ldr	r2, [pc, #32]	; (801470c <etharp_output_to_arp_index+0x124>)
 80146ec:	4413      	add	r3, r2
 80146ee:	3304      	adds	r3, #4
 80146f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80146f4:	9200      	str	r2, [sp, #0]
 80146f6:	460a      	mov	r2, r1
 80146f8:	68b9      	ldr	r1, [r7, #8]
 80146fa:	68f8      	ldr	r0, [r7, #12]
 80146fc:	f000 fb9c 	bl	8014e38 <ethernet_output>
 8014700:	4603      	mov	r3, r0
}
 8014702:	4618      	mov	r0, r3
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	24009454 	.word	0x24009454
 8014710:	08021a14 	.word	0x08021a14
 8014714:	08021bc8 	.word	0x08021bc8
 8014718:	08021ad0 	.word	0x08021ad0

0801471c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b08a      	sub	sp, #40	; 0x28
 8014720:	af02      	add	r7, sp, #8
 8014722:	60f8      	str	r0, [r7, #12]
 8014724:	60b9      	str	r1, [r7, #8]
 8014726:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d106      	bne.n	8014740 <etharp_output+0x24>
 8014732:	4b73      	ldr	r3, [pc, #460]	; (8014900 <etharp_output+0x1e4>)
 8014734:	f240 321e 	movw	r2, #798	; 0x31e
 8014738:	4972      	ldr	r1, [pc, #456]	; (8014904 <etharp_output+0x1e8>)
 801473a:	4873      	ldr	r0, [pc, #460]	; (8014908 <etharp_output+0x1ec>)
 801473c:	f00b fce4 	bl	8020108 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d106      	bne.n	8014754 <etharp_output+0x38>
 8014746:	4b6e      	ldr	r3, [pc, #440]	; (8014900 <etharp_output+0x1e4>)
 8014748:	f240 321f 	movw	r2, #799	; 0x31f
 801474c:	496f      	ldr	r1, [pc, #444]	; (801490c <etharp_output+0x1f0>)
 801474e:	486e      	ldr	r0, [pc, #440]	; (8014908 <etharp_output+0x1ec>)
 8014750:	f00b fcda 	bl	8020108 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d106      	bne.n	8014768 <etharp_output+0x4c>
 801475a:	4b69      	ldr	r3, [pc, #420]	; (8014900 <etharp_output+0x1e4>)
 801475c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014760:	496b      	ldr	r1, [pc, #428]	; (8014910 <etharp_output+0x1f4>)
 8014762:	4869      	ldr	r0, [pc, #420]	; (8014908 <etharp_output+0x1ec>)
 8014764:	f00b fcd0 	bl	8020108 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	68f9      	ldr	r1, [r7, #12]
 801476e:	4618      	mov	r0, r3
 8014770:	f001 f8c8 	bl	8015904 <ip4_addr_isbroadcast_u32>
 8014774:	4603      	mov	r3, r0
 8014776:	2b00      	cmp	r3, #0
 8014778:	d002      	beq.n	8014780 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801477a:	4b66      	ldr	r3, [pc, #408]	; (8014914 <etharp_output+0x1f8>)
 801477c:	61fb      	str	r3, [r7, #28]
 801477e:	e0af      	b.n	80148e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014788:	2be0      	cmp	r3, #224	; 0xe0
 801478a:	d118      	bne.n	80147be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801478c:	2301      	movs	r3, #1
 801478e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014790:	2300      	movs	r3, #0
 8014792:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014794:	235e      	movs	r3, #94	; 0x5e
 8014796:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	3301      	adds	r3, #1
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80147a2:	b2db      	uxtb	r3, r3
 80147a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	3302      	adds	r3, #2
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	3303      	adds	r3, #3
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80147b6:	f107 0310 	add.w	r3, r7, #16
 80147ba:	61fb      	str	r3, [r7, #28]
 80147bc:	e090      	b.n	80148e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	3304      	adds	r3, #4
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	405a      	eors	r2, r3
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	3308      	adds	r3, #8
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	4013      	ands	r3, r2
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d012      	beq.n	80147fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147dc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80147e0:	4293      	cmp	r3, r2
 80147e2:	d00b      	beq.n	80147fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	330c      	adds	r3, #12
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d003      	beq.n	80147f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	330c      	adds	r3, #12
 80147f2:	61bb      	str	r3, [r7, #24]
 80147f4:	e002      	b.n	80147fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80147f6:	f06f 0303 	mvn.w	r3, #3
 80147fa:	e07d      	b.n	80148f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147fc:	4b46      	ldr	r3, [pc, #280]	; (8014918 <etharp_output+0x1fc>)
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	4619      	mov	r1, r3
 8014802:	4a46      	ldr	r2, [pc, #280]	; (801491c <etharp_output+0x200>)
 8014804:	460b      	mov	r3, r1
 8014806:	005b      	lsls	r3, r3, #1
 8014808:	440b      	add	r3, r1
 801480a:	00db      	lsls	r3, r3, #3
 801480c:	4413      	add	r3, r2
 801480e:	3314      	adds	r3, #20
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	2b01      	cmp	r3, #1
 8014814:	d925      	bls.n	8014862 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014816:	4b40      	ldr	r3, [pc, #256]	; (8014918 <etharp_output+0x1fc>)
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	4619      	mov	r1, r3
 801481c:	4a3f      	ldr	r2, [pc, #252]	; (801491c <etharp_output+0x200>)
 801481e:	460b      	mov	r3, r1
 8014820:	005b      	lsls	r3, r3, #1
 8014822:	440b      	add	r3, r1
 8014824:	00db      	lsls	r3, r3, #3
 8014826:	4413      	add	r3, r2
 8014828:	3308      	adds	r3, #8
 801482a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801482c:	68fa      	ldr	r2, [r7, #12]
 801482e:	429a      	cmp	r2, r3
 8014830:	d117      	bne.n	8014862 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014832:	69bb      	ldr	r3, [r7, #24]
 8014834:	681a      	ldr	r2, [r3, #0]
 8014836:	4b38      	ldr	r3, [pc, #224]	; (8014918 <etharp_output+0x1fc>)
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	4618      	mov	r0, r3
 801483c:	4937      	ldr	r1, [pc, #220]	; (801491c <etharp_output+0x200>)
 801483e:	4603      	mov	r3, r0
 8014840:	005b      	lsls	r3, r3, #1
 8014842:	4403      	add	r3, r0
 8014844:	00db      	lsls	r3, r3, #3
 8014846:	440b      	add	r3, r1
 8014848:	3304      	adds	r3, #4
 801484a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801484c:	429a      	cmp	r2, r3
 801484e:	d108      	bne.n	8014862 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014850:	4b31      	ldr	r3, [pc, #196]	; (8014918 <etharp_output+0x1fc>)
 8014852:	781b      	ldrb	r3, [r3, #0]
 8014854:	461a      	mov	r2, r3
 8014856:	68b9      	ldr	r1, [r7, #8]
 8014858:	68f8      	ldr	r0, [r7, #12]
 801485a:	f7ff fec5 	bl	80145e8 <etharp_output_to_arp_index>
 801485e:	4603      	mov	r3, r0
 8014860:	e04a      	b.n	80148f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014862:	2300      	movs	r3, #0
 8014864:	75fb      	strb	r3, [r7, #23]
 8014866:	e031      	b.n	80148cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014868:	7dfa      	ldrb	r2, [r7, #23]
 801486a:	492c      	ldr	r1, [pc, #176]	; (801491c <etharp_output+0x200>)
 801486c:	4613      	mov	r3, r2
 801486e:	005b      	lsls	r3, r3, #1
 8014870:	4413      	add	r3, r2
 8014872:	00db      	lsls	r3, r3, #3
 8014874:	440b      	add	r3, r1
 8014876:	3314      	adds	r3, #20
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	2b01      	cmp	r3, #1
 801487c:	d923      	bls.n	80148c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801487e:	7dfa      	ldrb	r2, [r7, #23]
 8014880:	4926      	ldr	r1, [pc, #152]	; (801491c <etharp_output+0x200>)
 8014882:	4613      	mov	r3, r2
 8014884:	005b      	lsls	r3, r3, #1
 8014886:	4413      	add	r3, r2
 8014888:	00db      	lsls	r3, r3, #3
 801488a:	440b      	add	r3, r1
 801488c:	3308      	adds	r3, #8
 801488e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014890:	68fa      	ldr	r2, [r7, #12]
 8014892:	429a      	cmp	r2, r3
 8014894:	d117      	bne.n	80148c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	6819      	ldr	r1, [r3, #0]
 801489a:	7dfa      	ldrb	r2, [r7, #23]
 801489c:	481f      	ldr	r0, [pc, #124]	; (801491c <etharp_output+0x200>)
 801489e:	4613      	mov	r3, r2
 80148a0:	005b      	lsls	r3, r3, #1
 80148a2:	4413      	add	r3, r2
 80148a4:	00db      	lsls	r3, r3, #3
 80148a6:	4403      	add	r3, r0
 80148a8:	3304      	adds	r3, #4
 80148aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80148ac:	4299      	cmp	r1, r3
 80148ae:	d10a      	bne.n	80148c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80148b0:	4a19      	ldr	r2, [pc, #100]	; (8014918 <etharp_output+0x1fc>)
 80148b2:	7dfb      	ldrb	r3, [r7, #23]
 80148b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80148b6:	7dfb      	ldrb	r3, [r7, #23]
 80148b8:	461a      	mov	r2, r3
 80148ba:	68b9      	ldr	r1, [r7, #8]
 80148bc:	68f8      	ldr	r0, [r7, #12]
 80148be:	f7ff fe93 	bl	80145e8 <etharp_output_to_arp_index>
 80148c2:	4603      	mov	r3, r0
 80148c4:	e018      	b.n	80148f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80148c6:	7dfb      	ldrb	r3, [r7, #23]
 80148c8:	3301      	adds	r3, #1
 80148ca:	75fb      	strb	r3, [r7, #23]
 80148cc:	7dfb      	ldrb	r3, [r7, #23]
 80148ce:	2b09      	cmp	r3, #9
 80148d0:	d9ca      	bls.n	8014868 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80148d2:	68ba      	ldr	r2, [r7, #8]
 80148d4:	69b9      	ldr	r1, [r7, #24]
 80148d6:	68f8      	ldr	r0, [r7, #12]
 80148d8:	f000 f822 	bl	8014920 <etharp_query>
 80148dc:	4603      	mov	r3, r0
 80148de:	e00b      	b.n	80148f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80148e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80148ea:	9300      	str	r3, [sp, #0]
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	68b9      	ldr	r1, [r7, #8]
 80148f0:	68f8      	ldr	r0, [r7, #12]
 80148f2:	f000 faa1 	bl	8014e38 <ethernet_output>
 80148f6:	4603      	mov	r3, r0
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3720      	adds	r7, #32
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	08021a14 	.word	0x08021a14
 8014904:	08021ba8 	.word	0x08021ba8
 8014908:	08021ad0 	.word	0x08021ad0
 801490c:	08021bf8 	.word	0x08021bf8
 8014910:	08021b98 	.word	0x08021b98
 8014914:	08024ac4 	.word	0x08024ac4
 8014918:	24009544 	.word	0x24009544
 801491c:	24009454 	.word	0x24009454

08014920 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b08c      	sub	sp, #48	; 0x30
 8014924:	af02      	add	r7, sp, #8
 8014926:	60f8      	str	r0, [r7, #12]
 8014928:	60b9      	str	r1, [r7, #8]
 801492a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	3326      	adds	r3, #38	; 0x26
 8014930:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014932:	23ff      	movs	r3, #255	; 0xff
 8014934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014938:	2300      	movs	r3, #0
 801493a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	68f9      	ldr	r1, [r7, #12]
 8014942:	4618      	mov	r0, r3
 8014944:	f000 ffde 	bl	8015904 <ip4_addr_isbroadcast_u32>
 8014948:	4603      	mov	r3, r0
 801494a:	2b00      	cmp	r3, #0
 801494c:	d10c      	bne.n	8014968 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014956:	2be0      	cmp	r3, #224	; 0xe0
 8014958:	d006      	beq.n	8014968 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d003      	beq.n	8014968 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d102      	bne.n	801496e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014968:	f06f 030f 	mvn.w	r3, #15
 801496c:	e101      	b.n	8014b72 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801496e:	68fa      	ldr	r2, [r7, #12]
 8014970:	2101      	movs	r1, #1
 8014972:	68b8      	ldr	r0, [r7, #8]
 8014974:	f7ff fb60 	bl	8014038 <etharp_find_entry>
 8014978:	4603      	mov	r3, r0
 801497a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801497c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014980:	2b00      	cmp	r3, #0
 8014982:	da02      	bge.n	801498a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014984:	8a7b      	ldrh	r3, [r7, #18]
 8014986:	b25b      	sxtb	r3, r3
 8014988:	e0f3      	b.n	8014b72 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801498a:	8a7b      	ldrh	r3, [r7, #18]
 801498c:	2b7e      	cmp	r3, #126	; 0x7e
 801498e:	d906      	bls.n	801499e <etharp_query+0x7e>
 8014990:	4b7a      	ldr	r3, [pc, #488]	; (8014b7c <etharp_query+0x25c>)
 8014992:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014996:	497a      	ldr	r1, [pc, #488]	; (8014b80 <etharp_query+0x260>)
 8014998:	487a      	ldr	r0, [pc, #488]	; (8014b84 <etharp_query+0x264>)
 801499a:	f00b fbb5 	bl	8020108 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801499e:	8a7b      	ldrh	r3, [r7, #18]
 80149a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80149a2:	7c7a      	ldrb	r2, [r7, #17]
 80149a4:	4978      	ldr	r1, [pc, #480]	; (8014b88 <etharp_query+0x268>)
 80149a6:	4613      	mov	r3, r2
 80149a8:	005b      	lsls	r3, r3, #1
 80149aa:	4413      	add	r3, r2
 80149ac:	00db      	lsls	r3, r3, #3
 80149ae:	440b      	add	r3, r1
 80149b0:	3314      	adds	r3, #20
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d115      	bne.n	80149e4 <etharp_query+0xc4>
    is_new_entry = 1;
 80149b8:	2301      	movs	r3, #1
 80149ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80149bc:	7c7a      	ldrb	r2, [r7, #17]
 80149be:	4972      	ldr	r1, [pc, #456]	; (8014b88 <etharp_query+0x268>)
 80149c0:	4613      	mov	r3, r2
 80149c2:	005b      	lsls	r3, r3, #1
 80149c4:	4413      	add	r3, r2
 80149c6:	00db      	lsls	r3, r3, #3
 80149c8:	440b      	add	r3, r1
 80149ca:	3314      	adds	r3, #20
 80149cc:	2201      	movs	r2, #1
 80149ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80149d0:	7c7a      	ldrb	r2, [r7, #17]
 80149d2:	496d      	ldr	r1, [pc, #436]	; (8014b88 <etharp_query+0x268>)
 80149d4:	4613      	mov	r3, r2
 80149d6:	005b      	lsls	r3, r3, #1
 80149d8:	4413      	add	r3, r2
 80149da:	00db      	lsls	r3, r3, #3
 80149dc:	440b      	add	r3, r1
 80149de:	3308      	adds	r3, #8
 80149e0:	68fa      	ldr	r2, [r7, #12]
 80149e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80149e4:	7c7a      	ldrb	r2, [r7, #17]
 80149e6:	4968      	ldr	r1, [pc, #416]	; (8014b88 <etharp_query+0x268>)
 80149e8:	4613      	mov	r3, r2
 80149ea:	005b      	lsls	r3, r3, #1
 80149ec:	4413      	add	r3, r2
 80149ee:	00db      	lsls	r3, r3, #3
 80149f0:	440b      	add	r3, r1
 80149f2:	3314      	adds	r3, #20
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	2b01      	cmp	r3, #1
 80149f8:	d011      	beq.n	8014a1e <etharp_query+0xfe>
 80149fa:	7c7a      	ldrb	r2, [r7, #17]
 80149fc:	4962      	ldr	r1, [pc, #392]	; (8014b88 <etharp_query+0x268>)
 80149fe:	4613      	mov	r3, r2
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	4413      	add	r3, r2
 8014a04:	00db      	lsls	r3, r3, #3
 8014a06:	440b      	add	r3, r1
 8014a08:	3314      	adds	r3, #20
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d806      	bhi.n	8014a1e <etharp_query+0xfe>
 8014a10:	4b5a      	ldr	r3, [pc, #360]	; (8014b7c <etharp_query+0x25c>)
 8014a12:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014a16:	495d      	ldr	r1, [pc, #372]	; (8014b8c <etharp_query+0x26c>)
 8014a18:	485a      	ldr	r0, [pc, #360]	; (8014b84 <etharp_query+0x264>)
 8014a1a:	f00b fb75 	bl	8020108 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014a1e:	6a3b      	ldr	r3, [r7, #32]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d102      	bne.n	8014a2a <etharp_query+0x10a>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d10c      	bne.n	8014a44 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014a2a:	68b9      	ldr	r1, [r7, #8]
 8014a2c:	68f8      	ldr	r0, [r7, #12]
 8014a2e:	f000 f963 	bl	8014cf8 <etharp_request>
 8014a32:	4603      	mov	r3, r0
 8014a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d102      	bne.n	8014a44 <etharp_query+0x124>
      return result;
 8014a3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014a42:	e096      	b.n	8014b72 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d106      	bne.n	8014a58 <etharp_query+0x138>
 8014a4a:	4b4c      	ldr	r3, [pc, #304]	; (8014b7c <etharp_query+0x25c>)
 8014a4c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014a50:	494f      	ldr	r1, [pc, #316]	; (8014b90 <etharp_query+0x270>)
 8014a52:	484c      	ldr	r0, [pc, #304]	; (8014b84 <etharp_query+0x264>)
 8014a54:	f00b fb58 	bl	8020108 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a58:	7c7a      	ldrb	r2, [r7, #17]
 8014a5a:	494b      	ldr	r1, [pc, #300]	; (8014b88 <etharp_query+0x268>)
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	4413      	add	r3, r2
 8014a62:	00db      	lsls	r3, r3, #3
 8014a64:	440b      	add	r3, r1
 8014a66:	3314      	adds	r3, #20
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	2b01      	cmp	r3, #1
 8014a6c:	d917      	bls.n	8014a9e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014a6e:	4a49      	ldr	r2, [pc, #292]	; (8014b94 <etharp_query+0x274>)
 8014a70:	7c7b      	ldrb	r3, [r7, #17]
 8014a72:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014a74:	7c7a      	ldrb	r2, [r7, #17]
 8014a76:	4613      	mov	r3, r2
 8014a78:	005b      	lsls	r3, r3, #1
 8014a7a:	4413      	add	r3, r2
 8014a7c:	00db      	lsls	r3, r3, #3
 8014a7e:	3308      	adds	r3, #8
 8014a80:	4a41      	ldr	r2, [pc, #260]	; (8014b88 <etharp_query+0x268>)
 8014a82:	4413      	add	r3, r2
 8014a84:	3304      	adds	r3, #4
 8014a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a8a:	9200      	str	r2, [sp, #0]
 8014a8c:	697a      	ldr	r2, [r7, #20]
 8014a8e:	6879      	ldr	r1, [r7, #4]
 8014a90:	68f8      	ldr	r0, [r7, #12]
 8014a92:	f000 f9d1 	bl	8014e38 <ethernet_output>
 8014a96:	4603      	mov	r3, r0
 8014a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a9c:	e067      	b.n	8014b6e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a9e:	7c7a      	ldrb	r2, [r7, #17]
 8014aa0:	4939      	ldr	r1, [pc, #228]	; (8014b88 <etharp_query+0x268>)
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	005b      	lsls	r3, r3, #1
 8014aa6:	4413      	add	r3, r2
 8014aa8:	00db      	lsls	r3, r3, #3
 8014aaa:	440b      	add	r3, r1
 8014aac:	3314      	adds	r3, #20
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	2b01      	cmp	r3, #1
 8014ab2:	d15c      	bne.n	8014b6e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014abc:	e01c      	b.n	8014af8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014abe:	69fb      	ldr	r3, [r7, #28]
 8014ac0:	895a      	ldrh	r2, [r3, #10]
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	891b      	ldrh	r3, [r3, #8]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d10a      	bne.n	8014ae0 <etharp_query+0x1c0>
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d006      	beq.n	8014ae0 <etharp_query+0x1c0>
 8014ad2:	4b2a      	ldr	r3, [pc, #168]	; (8014b7c <etharp_query+0x25c>)
 8014ad4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014ad8:	492f      	ldr	r1, [pc, #188]	; (8014b98 <etharp_query+0x278>)
 8014ada:	482a      	ldr	r0, [pc, #168]	; (8014b84 <etharp_query+0x264>)
 8014adc:	f00b fb14 	bl	8020108 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014ae0:	69fb      	ldr	r3, [r7, #28]
 8014ae2:	7b1b      	ldrb	r3, [r3, #12]
 8014ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <etharp_query+0x1d2>
        copy_needed = 1;
 8014aec:	2301      	movs	r3, #1
 8014aee:	61bb      	str	r3, [r7, #24]
        break;
 8014af0:	e005      	b.n	8014afe <etharp_query+0x1de>
      }
      p = p->next;
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d1df      	bne.n	8014abe <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d007      	beq.n	8014b14 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014b04:	687a      	ldr	r2, [r7, #4]
 8014b06:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014b0a:	200e      	movs	r0, #14
 8014b0c:	f003 fbc8 	bl	80182a0 <pbuf_clone>
 8014b10:	61f8      	str	r0, [r7, #28]
 8014b12:	e004      	b.n	8014b1e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014b18:	69f8      	ldr	r0, [r7, #28]
 8014b1a:	f003 f9ff 	bl	8017f1c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d021      	beq.n	8014b68 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014b24:	7c7a      	ldrb	r2, [r7, #17]
 8014b26:	4918      	ldr	r1, [pc, #96]	; (8014b88 <etharp_query+0x268>)
 8014b28:	4613      	mov	r3, r2
 8014b2a:	005b      	lsls	r3, r3, #1
 8014b2c:	4413      	add	r3, r2
 8014b2e:	00db      	lsls	r3, r3, #3
 8014b30:	440b      	add	r3, r1
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d00a      	beq.n	8014b4e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014b38:	7c7a      	ldrb	r2, [r7, #17]
 8014b3a:	4913      	ldr	r1, [pc, #76]	; (8014b88 <etharp_query+0x268>)
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	005b      	lsls	r3, r3, #1
 8014b40:	4413      	add	r3, r2
 8014b42:	00db      	lsls	r3, r3, #3
 8014b44:	440b      	add	r3, r1
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f003 f941 	bl	8017dd0 <pbuf_free>
      }
      arp_table[i].q = p;
 8014b4e:	7c7a      	ldrb	r2, [r7, #17]
 8014b50:	490d      	ldr	r1, [pc, #52]	; (8014b88 <etharp_query+0x268>)
 8014b52:	4613      	mov	r3, r2
 8014b54:	005b      	lsls	r3, r3, #1
 8014b56:	4413      	add	r3, r2
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	440b      	add	r3, r1
 8014b5c:	69fa      	ldr	r2, [r7, #28]
 8014b5e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014b60:	2300      	movs	r3, #0
 8014b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b66:	e002      	b.n	8014b6e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014b68:	23ff      	movs	r3, #255	; 0xff
 8014b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014b6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3728      	adds	r7, #40	; 0x28
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	08021a14 	.word	0x08021a14
 8014b80:	08021c04 	.word	0x08021c04
 8014b84:	08021ad0 	.word	0x08021ad0
 8014b88:	24009454 	.word	0x24009454
 8014b8c:	08021c14 	.word	0x08021c14
 8014b90:	08021bf8 	.word	0x08021bf8
 8014b94:	24009544 	.word	0x24009544
 8014b98:	08021c3c 	.word	0x08021c3c

08014b9c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b08a      	sub	sp, #40	; 0x28
 8014ba0:	af02      	add	r7, sp, #8
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
 8014ba8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014baa:	2300      	movs	r3, #0
 8014bac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d106      	bne.n	8014bc2 <etharp_raw+0x26>
 8014bb4:	4b3a      	ldr	r3, [pc, #232]	; (8014ca0 <etharp_raw+0x104>)
 8014bb6:	f240 4257 	movw	r2, #1111	; 0x457
 8014bba:	493a      	ldr	r1, [pc, #232]	; (8014ca4 <etharp_raw+0x108>)
 8014bbc:	483a      	ldr	r0, [pc, #232]	; (8014ca8 <etharp_raw+0x10c>)
 8014bbe:	f00b faa3 	bl	8020108 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014bc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014bc6:	211c      	movs	r1, #28
 8014bc8:	200e      	movs	r0, #14
 8014bca:	f002 fe1d 	bl	8017808 <pbuf_alloc>
 8014bce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014bd0:	69bb      	ldr	r3, [r7, #24]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d102      	bne.n	8014bdc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bda:	e05d      	b.n	8014c98 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	895b      	ldrh	r3, [r3, #10]
 8014be0:	2b1b      	cmp	r3, #27
 8014be2:	d806      	bhi.n	8014bf2 <etharp_raw+0x56>
 8014be4:	4b2e      	ldr	r3, [pc, #184]	; (8014ca0 <etharp_raw+0x104>)
 8014be6:	f240 4262 	movw	r2, #1122	; 0x462
 8014bea:	4930      	ldr	r1, [pc, #192]	; (8014cac <etharp_raw+0x110>)
 8014bec:	482e      	ldr	r0, [pc, #184]	; (8014ca8 <etharp_raw+0x10c>)
 8014bee:	f00b fa8b 	bl	8020108 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	685b      	ldr	r3, [r3, #4]
 8014bf6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014bf8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7ff f914 	bl	8013e28 <lwip_htons>
 8014c00:	4603      	mov	r3, r0
 8014c02:	461a      	mov	r2, r3
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014c0e:	2b06      	cmp	r3, #6
 8014c10:	d006      	beq.n	8014c20 <etharp_raw+0x84>
 8014c12:	4b23      	ldr	r3, [pc, #140]	; (8014ca0 <etharp_raw+0x104>)
 8014c14:	f240 4269 	movw	r2, #1129	; 0x469
 8014c18:	4925      	ldr	r1, [pc, #148]	; (8014cb0 <etharp_raw+0x114>)
 8014c1a:	4823      	ldr	r0, [pc, #140]	; (8014ca8 <etharp_raw+0x10c>)
 8014c1c:	f00b fa74 	bl	8020108 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	3308      	adds	r3, #8
 8014c24:	2206      	movs	r2, #6
 8014c26:	6839      	ldr	r1, [r7, #0]
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f00a fe6f 	bl	801f90c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	3312      	adds	r3, #18
 8014c32:	2206      	movs	r2, #6
 8014c34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c36:	4618      	mov	r0, r3
 8014c38:	f00a fe68 	bl	801f90c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	330e      	adds	r3, #14
 8014c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c42:	6812      	ldr	r2, [r2, #0]
 8014c44:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	3318      	adds	r3, #24
 8014c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c4c:	6812      	ldr	r2, [r2, #0]
 8014c4e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	2200      	movs	r2, #0
 8014c54:	701a      	strb	r2, [r3, #0]
 8014c56:	2200      	movs	r2, #0
 8014c58:	f042 0201 	orr.w	r2, r2, #1
 8014c5c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	2200      	movs	r2, #0
 8014c62:	f042 0208 	orr.w	r2, r2, #8
 8014c66:	709a      	strb	r2, [r3, #2]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	2206      	movs	r2, #6
 8014c70:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	2204      	movs	r2, #4
 8014c76:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014c78:	f640 0306 	movw	r3, #2054	; 0x806
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	68ba      	ldr	r2, [r7, #8]
 8014c82:	69b9      	ldr	r1, [r7, #24]
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f000 f8d7 	bl	8014e38 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014c8a:	69b8      	ldr	r0, [r7, #24]
 8014c8c:	f003 f8a0 	bl	8017dd0 <pbuf_free>
  p = NULL;
 8014c90:	2300      	movs	r3, #0
 8014c92:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014c94:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c98:	4618      	mov	r0, r3
 8014c9a:	3720      	adds	r7, #32
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	bd80      	pop	{r7, pc}
 8014ca0:	08021a14 	.word	0x08021a14
 8014ca4:	08021ba8 	.word	0x08021ba8
 8014ca8:	08021ad0 	.word	0x08021ad0
 8014cac:	08021c58 	.word	0x08021c58
 8014cb0:	08021c8c 	.word	0x08021c8c

08014cb4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b088      	sub	sp, #32
 8014cb8:	af04      	add	r7, sp, #16
 8014cba:	60f8      	str	r0, [r7, #12]
 8014cbc:	60b9      	str	r1, [r7, #8]
 8014cbe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014cd0:	2201      	movs	r2, #1
 8014cd2:	9203      	str	r2, [sp, #12]
 8014cd4:	68ba      	ldr	r2, [r7, #8]
 8014cd6:	9202      	str	r2, [sp, #8]
 8014cd8:	4a06      	ldr	r2, [pc, #24]	; (8014cf4 <etharp_request_dst+0x40>)
 8014cda:	9201      	str	r2, [sp, #4]
 8014cdc:	9300      	str	r3, [sp, #0]
 8014cde:	4603      	mov	r3, r0
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	68f8      	ldr	r0, [r7, #12]
 8014ce4:	f7ff ff5a 	bl	8014b9c <etharp_raw>
 8014ce8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3710      	adds	r7, #16
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	08024acc 	.word	0x08024acc

08014cf8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014d02:	4a05      	ldr	r2, [pc, #20]	; (8014d18 <etharp_request+0x20>)
 8014d04:	6839      	ldr	r1, [r7, #0]
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7ff ffd4 	bl	8014cb4 <etharp_request_dst>
 8014d0c:	4603      	mov	r3, r0
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3708      	adds	r7, #8
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd80      	pop	{r7, pc}
 8014d16:	bf00      	nop
 8014d18:	08024ac4 	.word	0x08024ac4

08014d1c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b086      	sub	sp, #24
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
 8014d24:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014d26:	230e      	movs	r3, #14
 8014d28:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	895b      	ldrh	r3, [r3, #10]
 8014d2e:	2b0e      	cmp	r3, #14
 8014d30:	d96e      	bls.n	8014e10 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	7bdb      	ldrb	r3, [r3, #15]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d106      	bne.n	8014d48 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014d3a:	683b      	ldr	r3, [r7, #0]
 8014d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d40:	3301      	adds	r3, #1
 8014d42:	b2da      	uxtb	r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	7b1a      	ldrb	r2, [r3, #12]
 8014d52:	7b5b      	ldrb	r3, [r3, #13]
 8014d54:	021b      	lsls	r3, r3, #8
 8014d56:	4313      	orrs	r3, r2
 8014d58:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	781b      	ldrb	r3, [r3, #0]
 8014d5e:	f003 0301 	and.w	r3, r3, #1
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d023      	beq.n	8014dae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	2b01      	cmp	r3, #1
 8014d6c:	d10f      	bne.n	8014d8e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	785b      	ldrb	r3, [r3, #1]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d11b      	bne.n	8014dae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014d7a:	2b5e      	cmp	r3, #94	; 0x5e
 8014d7c:	d117      	bne.n	8014dae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	7b5b      	ldrb	r3, [r3, #13]
 8014d82:	f043 0310 	orr.w	r3, r3, #16
 8014d86:	b2da      	uxtb	r2, r3
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	735a      	strb	r2, [r3, #13]
 8014d8c:	e00f      	b.n	8014dae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	2206      	movs	r2, #6
 8014d92:	4928      	ldr	r1, [pc, #160]	; (8014e34 <ethernet_input+0x118>)
 8014d94:	4618      	mov	r0, r3
 8014d96:	f00a fda9 	bl	801f8ec <memcmp>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d106      	bne.n	8014dae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	7b5b      	ldrb	r3, [r3, #13]
 8014da4:	f043 0308 	orr.w	r3, r3, #8
 8014da8:	b2da      	uxtb	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014dae:	89fb      	ldrh	r3, [r7, #14]
 8014db0:	2b08      	cmp	r3, #8
 8014db2:	d003      	beq.n	8014dbc <ethernet_input+0xa0>
 8014db4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014db8:	d014      	beq.n	8014de4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014dba:	e032      	b.n	8014e22 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014dc2:	f003 0308 	and.w	r3, r3, #8
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d024      	beq.n	8014e14 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014dca:	8afb      	ldrh	r3, [r7, #22]
 8014dcc:	4619      	mov	r1, r3
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f002 ff78 	bl	8017cc4 <pbuf_remove_header>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d11e      	bne.n	8014e18 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014dda:	6839      	ldr	r1, [r7, #0]
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f000 fb95 	bl	801550c <ip4_input>
      break;
 8014de2:	e013      	b.n	8014e0c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014dea:	f003 0308 	and.w	r3, r3, #8
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d014      	beq.n	8014e1c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014df2:	8afb      	ldrh	r3, [r7, #22]
 8014df4:	4619      	mov	r1, r3
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f002 ff64 	bl	8017cc4 <pbuf_remove_header>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d10e      	bne.n	8014e20 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014e02:	6839      	ldr	r1, [r7, #0]
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f7ff fb65 	bl	80144d4 <etharp_input>
      break;
 8014e0a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	e00c      	b.n	8014e2a <ethernet_input+0x10e>
    goto free_and_return;
 8014e10:	bf00      	nop
 8014e12:	e006      	b.n	8014e22 <ethernet_input+0x106>
        goto free_and_return;
 8014e14:	bf00      	nop
 8014e16:	e004      	b.n	8014e22 <ethernet_input+0x106>
        goto free_and_return;
 8014e18:	bf00      	nop
 8014e1a:	e002      	b.n	8014e22 <ethernet_input+0x106>
        goto free_and_return;
 8014e1c:	bf00      	nop
 8014e1e:	e000      	b.n	8014e22 <ethernet_input+0x106>
        goto free_and_return;
 8014e20:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f002 ffd4 	bl	8017dd0 <pbuf_free>
  return ERR_OK;
 8014e28:	2300      	movs	r3, #0
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3718      	adds	r7, #24
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	08024ac4 	.word	0x08024ac4

08014e38 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b086      	sub	sp, #24
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	60f8      	str	r0, [r7, #12]
 8014e40:	60b9      	str	r1, [r7, #8]
 8014e42:	607a      	str	r2, [r7, #4]
 8014e44:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014e46:	8c3b      	ldrh	r3, [r7, #32]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f7fe ffed 	bl	8013e28 <lwip_htons>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014e52:	210e      	movs	r1, #14
 8014e54:	68b8      	ldr	r0, [r7, #8]
 8014e56:	f002 ff25 	bl	8017ca4 <pbuf_add_header>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d125      	bne.n	8014eac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	685b      	ldr	r3, [r3, #4]
 8014e64:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	8afa      	ldrh	r2, [r7, #22]
 8014e6a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	2206      	movs	r2, #6
 8014e70:	6839      	ldr	r1, [r7, #0]
 8014e72:	4618      	mov	r0, r3
 8014e74:	f00a fd4a 	bl	801f90c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014e78:	693b      	ldr	r3, [r7, #16]
 8014e7a:	3306      	adds	r3, #6
 8014e7c:	2206      	movs	r2, #6
 8014e7e:	6879      	ldr	r1, [r7, #4]
 8014e80:	4618      	mov	r0, r3
 8014e82:	f00a fd43 	bl	801f90c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014e8c:	2b06      	cmp	r3, #6
 8014e8e:	d006      	beq.n	8014e9e <ethernet_output+0x66>
 8014e90:	4b0a      	ldr	r3, [pc, #40]	; (8014ebc <ethernet_output+0x84>)
 8014e92:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014e96:	490a      	ldr	r1, [pc, #40]	; (8014ec0 <ethernet_output+0x88>)
 8014e98:	480a      	ldr	r0, [pc, #40]	; (8014ec4 <ethernet_output+0x8c>)
 8014e9a:	f00b f935 	bl	8020108 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	699b      	ldr	r3, [r3, #24]
 8014ea2:	68b9      	ldr	r1, [r7, #8]
 8014ea4:	68f8      	ldr	r0, [r7, #12]
 8014ea6:	4798      	blx	r3
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	e002      	b.n	8014eb2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014eac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014eae:	f06f 0301 	mvn.w	r3, #1
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	3718      	adds	r7, #24
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
 8014eba:	bf00      	nop
 8014ebc:	08021cd0 	.word	0x08021cd0
 8014ec0:	08021d48 	.word	0x08021d48
 8014ec4:	08021d7c 	.word	0x08021d7c

08014ec8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b08e      	sub	sp, #56	; 0x38
 8014ecc:	af04      	add	r7, sp, #16
 8014ece:	6078      	str	r0, [r7, #4]
 8014ed0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014ed2:	4b87      	ldr	r3, [pc, #540]	; (80150f0 <icmp_input+0x228>)
 8014ed4:	689b      	ldr	r3, [r3, #8]
 8014ed6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	f003 030f 	and.w	r3, r3, #15
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014eea:	2b13      	cmp	r3, #19
 8014eec:	f240 80e8 	bls.w	80150c0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	895b      	ldrh	r3, [r3, #10]
 8014ef4:	2b03      	cmp	r3, #3
 8014ef6:	f240 80e5 	bls.w	80150c4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014f04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	f000 80d2 	beq.w	80150b2 <icmp_input+0x1ea>
 8014f0e:	2b08      	cmp	r3, #8
 8014f10:	f040 80d2 	bne.w	80150b8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014f14:	4b77      	ldr	r3, [pc, #476]	; (80150f4 <icmp_input+0x22c>)
 8014f16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f18:	4b75      	ldr	r3, [pc, #468]	; (80150f0 <icmp_input+0x228>)
 8014f1a:	695b      	ldr	r3, [r3, #20]
 8014f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f20:	2be0      	cmp	r3, #224	; 0xe0
 8014f22:	f000 80d6 	beq.w	80150d2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014f26:	4b72      	ldr	r3, [pc, #456]	; (80150f0 <icmp_input+0x228>)
 8014f28:	695b      	ldr	r3, [r3, #20]
 8014f2a:	4a71      	ldr	r2, [pc, #452]	; (80150f0 <icmp_input+0x228>)
 8014f2c:	6812      	ldr	r2, [r2, #0]
 8014f2e:	4611      	mov	r1, r2
 8014f30:	4618      	mov	r0, r3
 8014f32:	f000 fce7 	bl	8015904 <ip4_addr_isbroadcast_u32>
 8014f36:	4603      	mov	r3, r0
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f040 80cc 	bne.w	80150d6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	891b      	ldrh	r3, [r3, #8]
 8014f42:	2b07      	cmp	r3, #7
 8014f44:	f240 80c0 	bls.w	80150c8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8014f48:	6878      	ldr	r0, [r7, #4]
 8014f4a:	f000 f9e0 	bl	801530e <inet_chksum_pbuf>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d003      	beq.n	8014f5c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f002 ff3b 	bl	8017dd0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8014f5a:	e0c5      	b.n	80150e8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f5e:	330e      	adds	r3, #14
 8014f60:	4619      	mov	r1, r3
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f002 fe9e 	bl	8017ca4 <pbuf_add_header>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d04b      	beq.n	8015006 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	891a      	ldrh	r2, [r3, #8]
 8014f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f74:	4413      	add	r3, r2
 8014f76:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	891b      	ldrh	r3, [r3, #8]
 8014f7c:	8b7a      	ldrh	r2, [r7, #26]
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	f0c0 80ab 	bcc.w	80150da <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014f84:	8b7b      	ldrh	r3, [r7, #26]
 8014f86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	200e      	movs	r0, #14
 8014f8e:	f002 fc3b 	bl	8017808 <pbuf_alloc>
 8014f92:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	f000 80a1 	beq.w	80150de <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	895b      	ldrh	r3, [r3, #10]
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fa4:	3308      	adds	r3, #8
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d203      	bcs.n	8014fb2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014faa:	6978      	ldr	r0, [r7, #20]
 8014fac:	f002 ff10 	bl	8017dd0 <pbuf_free>
          goto icmperr;
 8014fb0:	e096      	b.n	80150e0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f00a fca6 	bl	801f90c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014fc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fc2:	4619      	mov	r1, r3
 8014fc4:	6978      	ldr	r0, [r7, #20]
 8014fc6:	f002 fe7d 	bl	8017cc4 <pbuf_remove_header>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d009      	beq.n	8014fe4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014fd0:	4b49      	ldr	r3, [pc, #292]	; (80150f8 <icmp_input+0x230>)
 8014fd2:	22b6      	movs	r2, #182	; 0xb6
 8014fd4:	4949      	ldr	r1, [pc, #292]	; (80150fc <icmp_input+0x234>)
 8014fd6:	484a      	ldr	r0, [pc, #296]	; (8015100 <icmp_input+0x238>)
 8014fd8:	f00b f896 	bl	8020108 <iprintf>
          pbuf_free(r);
 8014fdc:	6978      	ldr	r0, [r7, #20]
 8014fde:	f002 fef7 	bl	8017dd0 <pbuf_free>
          goto icmperr;
 8014fe2:	e07d      	b.n	80150e0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014fe4:	6879      	ldr	r1, [r7, #4]
 8014fe6:	6978      	ldr	r0, [r7, #20]
 8014fe8:	f003 f816 	bl	8018018 <pbuf_copy>
 8014fec:	4603      	mov	r3, r0
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d003      	beq.n	8014ffa <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014ff2:	6978      	ldr	r0, [r7, #20]
 8014ff4:	f002 feec 	bl	8017dd0 <pbuf_free>
          goto icmperr;
 8014ff8:	e072      	b.n	80150e0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f002 fee8 	bl	8017dd0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	607b      	str	r3, [r7, #4]
 8015004:	e00f      	b.n	8015026 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015008:	330e      	adds	r3, #14
 801500a:	4619      	mov	r1, r3
 801500c:	6878      	ldr	r0, [r7, #4]
 801500e:	f002 fe59 	bl	8017cc4 <pbuf_remove_header>
 8015012:	4603      	mov	r3, r0
 8015014:	2b00      	cmp	r3, #0
 8015016:	d006      	beq.n	8015026 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015018:	4b37      	ldr	r3, [pc, #220]	; (80150f8 <icmp_input+0x230>)
 801501a:	22c7      	movs	r2, #199	; 0xc7
 801501c:	4939      	ldr	r1, [pc, #228]	; (8015104 <icmp_input+0x23c>)
 801501e:	4838      	ldr	r0, [pc, #224]	; (8015100 <icmp_input+0x238>)
 8015020:	f00b f872 	bl	8020108 <iprintf>
          goto icmperr;
 8015024:	e05c      	b.n	80150e0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801502c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801502e:	4619      	mov	r1, r3
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f002 fe37 	bl	8017ca4 <pbuf_add_header>
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	d13c      	bne.n	80150b6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015042:	69fb      	ldr	r3, [r7, #28]
 8015044:	681a      	ldr	r2, [r3, #0]
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801504a:	4b29      	ldr	r3, [pc, #164]	; (80150f0 <icmp_input+0x228>)
 801504c:	691a      	ldr	r2, [r3, #16]
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015052:	693b      	ldr	r3, [r7, #16]
 8015054:	2200      	movs	r2, #0
 8015056:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8015058:	693b      	ldr	r3, [r7, #16]
 801505a:	885b      	ldrh	r3, [r3, #2]
 801505c:	b29b      	uxth	r3, r3
 801505e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015062:	4293      	cmp	r3, r2
 8015064:	d907      	bls.n	8015076 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	885b      	ldrh	r3, [r3, #2]
 801506a:	b29b      	uxth	r3, r3
 801506c:	3309      	adds	r3, #9
 801506e:	b29a      	uxth	r2, r3
 8015070:	693b      	ldr	r3, [r7, #16]
 8015072:	805a      	strh	r2, [r3, #2]
 8015074:	e006      	b.n	8015084 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	885b      	ldrh	r3, [r3, #2]
 801507a:	b29b      	uxth	r3, r3
 801507c:	3308      	adds	r3, #8
 801507e:	b29a      	uxth	r2, r3
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	22ff      	movs	r2, #255	; 0xff
 8015088:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2200      	movs	r2, #0
 801508e:	729a      	strb	r2, [r3, #10]
 8015090:	2200      	movs	r2, #0
 8015092:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	9302      	str	r3, [sp, #8]
 8015098:	2301      	movs	r3, #1
 801509a:	9301      	str	r3, [sp, #4]
 801509c:	2300      	movs	r3, #0
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	23ff      	movs	r3, #255	; 0xff
 80150a2:	2200      	movs	r2, #0
 80150a4:	69f9      	ldr	r1, [r7, #28]
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	f000 fb54 	bl	8015754 <ip4_output_if>
 80150ac:	4603      	mov	r3, r0
 80150ae:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80150b0:	e001      	b.n	80150b6 <icmp_input+0x1ee>
      break;
 80150b2:	bf00      	nop
 80150b4:	e000      	b.n	80150b8 <icmp_input+0x1f0>
      break;
 80150b6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f002 fe89 	bl	8017dd0 <pbuf_free>
  return;
 80150be:	e013      	b.n	80150e8 <icmp_input+0x220>
    goto lenerr;
 80150c0:	bf00      	nop
 80150c2:	e002      	b.n	80150ca <icmp_input+0x202>
    goto lenerr;
 80150c4:	bf00      	nop
 80150c6:	e000      	b.n	80150ca <icmp_input+0x202>
        goto lenerr;
 80150c8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f002 fe80 	bl	8017dd0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150d0:	e00a      	b.n	80150e8 <icmp_input+0x220>
        goto icmperr;
 80150d2:	bf00      	nop
 80150d4:	e004      	b.n	80150e0 <icmp_input+0x218>
        goto icmperr;
 80150d6:	bf00      	nop
 80150d8:	e002      	b.n	80150e0 <icmp_input+0x218>
          goto icmperr;
 80150da:	bf00      	nop
 80150dc:	e000      	b.n	80150e0 <icmp_input+0x218>
          goto icmperr;
 80150de:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80150e0:	6878      	ldr	r0, [r7, #4]
 80150e2:	f002 fe75 	bl	8017dd0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150e6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80150e8:	3728      	adds	r7, #40	; 0x28
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	24009548 	.word	0x24009548
 80150f4:	2400955c 	.word	0x2400955c
 80150f8:	08021da4 	.word	0x08021da4
 80150fc:	08021e1c 	.word	0x08021e1c
 8015100:	08021e54 	.word	0x08021e54
 8015104:	08021e7c 	.word	0x08021e7c

08015108 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	460b      	mov	r3, r1
 8015112:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015114:	78fb      	ldrb	r3, [r7, #3]
 8015116:	461a      	mov	r2, r3
 8015118:	2103      	movs	r1, #3
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f000 f814 	bl	8015148 <icmp_send_response>
}
 8015120:	bf00      	nop
 8015122:	3708      	adds	r7, #8
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}

08015128 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
 8015130:	460b      	mov	r3, r1
 8015132:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015134:	78fb      	ldrb	r3, [r7, #3]
 8015136:	461a      	mov	r2, r3
 8015138:	210b      	movs	r1, #11
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f000 f804 	bl	8015148 <icmp_send_response>
}
 8015140:	bf00      	nop
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b08c      	sub	sp, #48	; 0x30
 801514c:	af04      	add	r7, sp, #16
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	460b      	mov	r3, r1
 8015152:	70fb      	strb	r3, [r7, #3]
 8015154:	4613      	mov	r3, r2
 8015156:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015158:	f44f 7220 	mov.w	r2, #640	; 0x280
 801515c:	2124      	movs	r1, #36	; 0x24
 801515e:	2022      	movs	r0, #34	; 0x22
 8015160:	f002 fb52 	bl	8017808 <pbuf_alloc>
 8015164:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d056      	beq.n	801521a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801516c:	69fb      	ldr	r3, [r7, #28]
 801516e:	895b      	ldrh	r3, [r3, #10]
 8015170:	2b23      	cmp	r3, #35	; 0x23
 8015172:	d806      	bhi.n	8015182 <icmp_send_response+0x3a>
 8015174:	4b2b      	ldr	r3, [pc, #172]	; (8015224 <icmp_send_response+0xdc>)
 8015176:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801517a:	492b      	ldr	r1, [pc, #172]	; (8015228 <icmp_send_response+0xe0>)
 801517c:	482b      	ldr	r0, [pc, #172]	; (801522c <icmp_send_response+0xe4>)
 801517e:	f00a ffc3 	bl	8020108 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015188:	69fb      	ldr	r3, [r7, #28]
 801518a:	685b      	ldr	r3, [r3, #4]
 801518c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	78fa      	ldrb	r2, [r7, #3]
 8015192:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	78ba      	ldrb	r2, [r7, #2]
 8015198:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801519a:	697b      	ldr	r3, [r7, #20]
 801519c:	2200      	movs	r2, #0
 801519e:	711a      	strb	r2, [r3, #4]
 80151a0:	2200      	movs	r2, #0
 80151a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	2200      	movs	r2, #0
 80151a8:	719a      	strb	r2, [r3, #6]
 80151aa:	2200      	movs	r2, #0
 80151ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	685b      	ldr	r3, [r3, #4]
 80151b2:	f103 0008 	add.w	r0, r3, #8
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	221c      	movs	r2, #28
 80151bc:	4619      	mov	r1, r3
 80151be:	f00a fba5 	bl	801f90c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	68db      	ldr	r3, [r3, #12]
 80151c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80151c8:	f107 030c 	add.w	r3, r7, #12
 80151cc:	4618      	mov	r0, r3
 80151ce:	f000 f903 	bl	80153d8 <ip4_route>
 80151d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d01b      	beq.n	8015212 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80151da:	697b      	ldr	r3, [r7, #20]
 80151dc:	2200      	movs	r2, #0
 80151de:	709a      	strb	r2, [r3, #2]
 80151e0:	2200      	movs	r2, #0
 80151e2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80151e4:	69fb      	ldr	r3, [r7, #28]
 80151e6:	895b      	ldrh	r3, [r3, #10]
 80151e8:	4619      	mov	r1, r3
 80151ea:	6978      	ldr	r0, [r7, #20]
 80151ec:	f000 f87d 	bl	80152ea <inet_chksum>
 80151f0:	4603      	mov	r3, r0
 80151f2:	461a      	mov	r2, r3
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80151f8:	f107 020c 	add.w	r2, r7, #12
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	9302      	str	r3, [sp, #8]
 8015200:	2301      	movs	r3, #1
 8015202:	9301      	str	r3, [sp, #4]
 8015204:	2300      	movs	r3, #0
 8015206:	9300      	str	r3, [sp, #0]
 8015208:	23ff      	movs	r3, #255	; 0xff
 801520a:	2100      	movs	r1, #0
 801520c:	69f8      	ldr	r0, [r7, #28]
 801520e:	f000 faa1 	bl	8015754 <ip4_output_if>
  }
  pbuf_free(q);
 8015212:	69f8      	ldr	r0, [r7, #28]
 8015214:	f002 fddc 	bl	8017dd0 <pbuf_free>
 8015218:	e000      	b.n	801521c <icmp_send_response+0xd4>
    return;
 801521a:	bf00      	nop
}
 801521c:	3720      	adds	r7, #32
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	08021da4 	.word	0x08021da4
 8015228:	08021eb0 	.word	0x08021eb0
 801522c:	08021e54 	.word	0x08021e54

08015230 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8015230:	b480      	push	{r7}
 8015232:	b089      	sub	sp, #36	; 0x24
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
 8015238:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801523e:	2300      	movs	r3, #0
 8015240:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8015242:	2300      	movs	r3, #0
 8015244:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8015246:	69fb      	ldr	r3, [r7, #28]
 8015248:	f003 0301 	and.w	r3, r3, #1
 801524c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801524e:	693b      	ldr	r3, [r7, #16]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d00d      	beq.n	8015270 <lwip_standard_chksum+0x40>
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	2b00      	cmp	r3, #0
 8015258:	dd0a      	ble.n	8015270 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801525a:	69fa      	ldr	r2, [r7, #28]
 801525c:	1c53      	adds	r3, r2, #1
 801525e:	61fb      	str	r3, [r7, #28]
 8015260:	f107 030e 	add.w	r3, r7, #14
 8015264:	3301      	adds	r3, #1
 8015266:	7812      	ldrb	r2, [r2, #0]
 8015268:	701a      	strb	r2, [r3, #0]
    len--;
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	3b01      	subs	r3, #1
 801526e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8015274:	e00a      	b.n	801528c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8015276:	69bb      	ldr	r3, [r7, #24]
 8015278:	1c9a      	adds	r2, r3, #2
 801527a:	61ba      	str	r2, [r7, #24]
 801527c:	881b      	ldrh	r3, [r3, #0]
 801527e:	461a      	mov	r2, r3
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	4413      	add	r3, r2
 8015284:	617b      	str	r3, [r7, #20]
    len -= 2;
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	3b02      	subs	r3, #2
 801528a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	2b01      	cmp	r3, #1
 8015290:	dcf1      	bgt.n	8015276 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	2b00      	cmp	r3, #0
 8015296:	dd04      	ble.n	80152a2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8015298:	f107 030e 	add.w	r3, r7, #14
 801529c:	69ba      	ldr	r2, [r7, #24]
 801529e:	7812      	ldrb	r2, [r2, #0]
 80152a0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80152a2:	89fb      	ldrh	r3, [r7, #14]
 80152a4:	461a      	mov	r2, r3
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	4413      	add	r3, r2
 80152aa:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	0c1a      	lsrs	r2, r3, #16
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4413      	add	r3, r2
 80152b6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	0c1a      	lsrs	r2, r3, #16
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	b29b      	uxth	r3, r3
 80152c0:	4413      	add	r3, r2
 80152c2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d007      	beq.n	80152da <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	021b      	lsls	r3, r3, #8
 80152ce:	b29a      	uxth	r2, r3
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	0a1b      	lsrs	r3, r3, #8
 80152d4:	b2db      	uxtb	r3, r3
 80152d6:	4313      	orrs	r3, r2
 80152d8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	b29b      	uxth	r3, r3
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3724      	adds	r7, #36	; 0x24
 80152e2:	46bd      	mov	sp, r7
 80152e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e8:	4770      	bx	lr

080152ea <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80152ea:	b580      	push	{r7, lr}
 80152ec:	b082      	sub	sp, #8
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
 80152f2:	460b      	mov	r3, r1
 80152f4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80152f6:	887b      	ldrh	r3, [r7, #2]
 80152f8:	4619      	mov	r1, r3
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f7ff ff98 	bl	8015230 <lwip_standard_chksum>
 8015300:	4603      	mov	r3, r0
 8015302:	43db      	mvns	r3, r3
 8015304:	b29b      	uxth	r3, r3
}
 8015306:	4618      	mov	r0, r3
 8015308:	3708      	adds	r7, #8
 801530a:	46bd      	mov	sp, r7
 801530c:	bd80      	pop	{r7, pc}

0801530e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801530e:	b580      	push	{r7, lr}
 8015310:	b086      	sub	sp, #24
 8015312:	af00      	add	r7, sp, #0
 8015314:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8015316:	2300      	movs	r3, #0
 8015318:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801531a:	2300      	movs	r3, #0
 801531c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	613b      	str	r3, [r7, #16]
 8015322:	e02b      	b.n	801537c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	685a      	ldr	r2, [r3, #4]
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	895b      	ldrh	r3, [r3, #10]
 801532c:	4619      	mov	r1, r3
 801532e:	4610      	mov	r0, r2
 8015330:	f7ff ff7e 	bl	8015230 <lwip_standard_chksum>
 8015334:	4603      	mov	r3, r0
 8015336:	461a      	mov	r2, r3
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	4413      	add	r3, r2
 801533c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	0c1a      	lsrs	r2, r3, #16
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	b29b      	uxth	r3, r3
 8015346:	4413      	add	r3, r2
 8015348:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	895b      	ldrh	r3, [r3, #10]
 801534e:	f003 0301 	and.w	r3, r3, #1
 8015352:	b29b      	uxth	r3, r3
 8015354:	2b00      	cmp	r3, #0
 8015356:	d00e      	beq.n	8015376 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	2b00      	cmp	r3, #0
 801535c:	bf0c      	ite	eq
 801535e:	2301      	moveq	r3, #1
 8015360:	2300      	movne	r3, #0
 8015362:	b2db      	uxtb	r3, r3
 8015364:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8015366:	697b      	ldr	r3, [r7, #20]
 8015368:	021b      	lsls	r3, r3, #8
 801536a:	b29a      	uxth	r2, r3
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	0a1b      	lsrs	r3, r3, #8
 8015370:	b2db      	uxtb	r3, r3
 8015372:	4313      	orrs	r3, r2
 8015374:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	613b      	str	r3, [r7, #16]
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d1d0      	bne.n	8015324 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d007      	beq.n	8015398 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	021b      	lsls	r3, r3, #8
 801538c:	b29a      	uxth	r2, r3
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	0a1b      	lsrs	r3, r3, #8
 8015392:	b2db      	uxtb	r3, r3
 8015394:	4313      	orrs	r3, r2
 8015396:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	b29b      	uxth	r3, r3
 801539c:	43db      	mvns	r3, r3
 801539e:	b29b      	uxth	r3, r3
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	3718      	adds	r7, #24
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80153ae:	2300      	movs	r3, #0
 80153b0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80153b2:	f003 f8ff 	bl	80185b4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80153b6:	f001 f9e9 	bl	801678c <mem_init>
  memp_init();
 80153ba:	f001 fd31 	bl	8016e20 <memp_init>
  pbuf_init();
  netif_init();
 80153be:	f001 fe8d 	bl	80170dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80153c2:	f009 fd3d 	bl	801ee40 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80153c6:	f003 f97f 	bl	80186c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80153ca:	f009 fc7f 	bl	801eccc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80153ce:	bf00      	nop
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
	...

080153d8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80153d8:	b480      	push	{r7}
 80153da:	b085      	sub	sp, #20
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80153e0:	4b33      	ldr	r3, [pc, #204]	; (80154b0 <ip4_route+0xd8>)
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	60fb      	str	r3, [r7, #12]
 80153e6:	e036      	b.n	8015456 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153ee:	f003 0301 	and.w	r3, r3, #1
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d02b      	beq.n	8015450 <ip4_route+0x78>
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153fe:	089b      	lsrs	r3, r3, #2
 8015400:	f003 0301 	and.w	r3, r3, #1
 8015404:	b2db      	uxtb	r3, r3
 8015406:	2b00      	cmp	r3, #0
 8015408:	d022      	beq.n	8015450 <ip4_route+0x78>
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	3304      	adds	r3, #4
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d01d      	beq.n	8015450 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	3304      	adds	r3, #4
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	405a      	eors	r2, r3
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	3308      	adds	r3, #8
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	4013      	ands	r3, r2
 8015428:	2b00      	cmp	r3, #0
 801542a:	d101      	bne.n	8015430 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	e038      	b.n	80154a2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015436:	f003 0302 	and.w	r3, r3, #2
 801543a:	2b00      	cmp	r3, #0
 801543c:	d108      	bne.n	8015450 <ip4_route+0x78>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	681a      	ldr	r2, [r3, #0]
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	330c      	adds	r3, #12
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	429a      	cmp	r2, r3
 801544a:	d101      	bne.n	8015450 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	e028      	b.n	80154a2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	60fb      	str	r3, [r7, #12]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d1c5      	bne.n	80153e8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801545c:	4b15      	ldr	r3, [pc, #84]	; (80154b4 <ip4_route+0xdc>)
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d01a      	beq.n	801549a <ip4_route+0xc2>
 8015464:	4b13      	ldr	r3, [pc, #76]	; (80154b4 <ip4_route+0xdc>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801546c:	f003 0301 	and.w	r3, r3, #1
 8015470:	2b00      	cmp	r3, #0
 8015472:	d012      	beq.n	801549a <ip4_route+0xc2>
 8015474:	4b0f      	ldr	r3, [pc, #60]	; (80154b4 <ip4_route+0xdc>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801547c:	f003 0304 	and.w	r3, r3, #4
 8015480:	2b00      	cmp	r3, #0
 8015482:	d00a      	beq.n	801549a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015484:	4b0b      	ldr	r3, [pc, #44]	; (80154b4 <ip4_route+0xdc>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	3304      	adds	r3, #4
 801548a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801548c:	2b00      	cmp	r3, #0
 801548e:	d004      	beq.n	801549a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	b2db      	uxtb	r3, r3
 8015496:	2b7f      	cmp	r3, #127	; 0x7f
 8015498:	d101      	bne.n	801549e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801549a:	2300      	movs	r3, #0
 801549c:	e001      	b.n	80154a2 <ip4_route+0xca>
  }

  return netif_default;
 801549e:	4b05      	ldr	r3, [pc, #20]	; (80154b4 <ip4_route+0xdc>)
 80154a0:	681b      	ldr	r3, [r3, #0]
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3714      	adds	r7, #20
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr
 80154ae:	bf00      	nop
 80154b0:	24010008 	.word	0x24010008
 80154b4:	2401000c 	.word	0x2401000c

080154b8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b082      	sub	sp, #8
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154c6:	f003 0301 	and.w	r3, r3, #1
 80154ca:	b2db      	uxtb	r3, r3
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d016      	beq.n	80154fe <ip4_input_accept+0x46>
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	3304      	adds	r3, #4
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d011      	beq.n	80154fe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154da:	4b0b      	ldr	r3, [pc, #44]	; (8015508 <ip4_input_accept+0x50>)
 80154dc:	695a      	ldr	r2, [r3, #20]
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	3304      	adds	r3, #4
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d008      	beq.n	80154fa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80154e8:	4b07      	ldr	r3, [pc, #28]	; (8015508 <ip4_input_accept+0x50>)
 80154ea:	695b      	ldr	r3, [r3, #20]
 80154ec:	6879      	ldr	r1, [r7, #4]
 80154ee:	4618      	mov	r0, r3
 80154f0:	f000 fa08 	bl	8015904 <ip4_addr_isbroadcast_u32>
 80154f4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d001      	beq.n	80154fe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80154fa:	2301      	movs	r3, #1
 80154fc:	e000      	b.n	8015500 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80154fe:	2300      	movs	r3, #0
}
 8015500:	4618      	mov	r0, r3
 8015502:	3708      	adds	r7, #8
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	24009548 	.word	0x24009548

0801550c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b086      	sub	sp, #24
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	685b      	ldr	r3, [r3, #4]
 801551a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	091b      	lsrs	r3, r3, #4
 8015522:	b2db      	uxtb	r3, r3
 8015524:	2b04      	cmp	r3, #4
 8015526:	d004      	beq.n	8015532 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015528:	6878      	ldr	r0, [r7, #4]
 801552a:	f002 fc51 	bl	8017dd0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801552e:	2300      	movs	r3, #0
 8015530:	e107      	b.n	8015742 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	f003 030f 	and.w	r3, r3, #15
 801553a:	b2db      	uxtb	r3, r3
 801553c:	009b      	lsls	r3, r3, #2
 801553e:	b2db      	uxtb	r3, r3
 8015540:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	885b      	ldrh	r3, [r3, #2]
 8015546:	b29b      	uxth	r3, r3
 8015548:	4618      	mov	r0, r3
 801554a:	f7fe fc6d 	bl	8013e28 <lwip_htons>
 801554e:	4603      	mov	r3, r0
 8015550:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	891b      	ldrh	r3, [r3, #8]
 8015556:	89ba      	ldrh	r2, [r7, #12]
 8015558:	429a      	cmp	r2, r3
 801555a:	d204      	bcs.n	8015566 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801555c:	89bb      	ldrh	r3, [r7, #12]
 801555e:	4619      	mov	r1, r3
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f002 fab1 	bl	8017ac8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	895b      	ldrh	r3, [r3, #10]
 801556a:	89fa      	ldrh	r2, [r7, #14]
 801556c:	429a      	cmp	r2, r3
 801556e:	d807      	bhi.n	8015580 <ip4_input+0x74>
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	891b      	ldrh	r3, [r3, #8]
 8015574:	89ba      	ldrh	r2, [r7, #12]
 8015576:	429a      	cmp	r2, r3
 8015578:	d802      	bhi.n	8015580 <ip4_input+0x74>
 801557a:	89fb      	ldrh	r3, [r7, #14]
 801557c:	2b13      	cmp	r3, #19
 801557e:	d804      	bhi.n	801558a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f002 fc25 	bl	8017dd0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015586:	2300      	movs	r3, #0
 8015588:	e0db      	b.n	8015742 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801558a:	697b      	ldr	r3, [r7, #20]
 801558c:	691b      	ldr	r3, [r3, #16]
 801558e:	4a6f      	ldr	r2, [pc, #444]	; (801574c <ip4_input+0x240>)
 8015590:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015592:	697b      	ldr	r3, [r7, #20]
 8015594:	68db      	ldr	r3, [r3, #12]
 8015596:	4a6d      	ldr	r2, [pc, #436]	; (801574c <ip4_input+0x240>)
 8015598:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801559a:	4b6c      	ldr	r3, [pc, #432]	; (801574c <ip4_input+0x240>)
 801559c:	695b      	ldr	r3, [r3, #20]
 801559e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80155a2:	2be0      	cmp	r3, #224	; 0xe0
 80155a4:	d112      	bne.n	80155cc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155ac:	f003 0301 	and.w	r3, r3, #1
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d007      	beq.n	80155c6 <ip4_input+0xba>
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	3304      	adds	r3, #4
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d002      	beq.n	80155c6 <ip4_input+0xba>
      netif = inp;
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	613b      	str	r3, [r7, #16]
 80155c4:	e02a      	b.n	801561c <ip4_input+0x110>
    } else {
      netif = NULL;
 80155c6:	2300      	movs	r3, #0
 80155c8:	613b      	str	r3, [r7, #16]
 80155ca:	e027      	b.n	801561c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80155cc:	6838      	ldr	r0, [r7, #0]
 80155ce:	f7ff ff73 	bl	80154b8 <ip4_input_accept>
 80155d2:	4603      	mov	r3, r0
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d002      	beq.n	80155de <ip4_input+0xd2>
      netif = inp;
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	613b      	str	r3, [r7, #16]
 80155dc:	e01e      	b.n	801561c <ip4_input+0x110>
    } else {
      netif = NULL;
 80155de:	2300      	movs	r3, #0
 80155e0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80155e2:	4b5a      	ldr	r3, [pc, #360]	; (801574c <ip4_input+0x240>)
 80155e4:	695b      	ldr	r3, [r3, #20]
 80155e6:	b2db      	uxtb	r3, r3
 80155e8:	2b7f      	cmp	r3, #127	; 0x7f
 80155ea:	d017      	beq.n	801561c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80155ec:	4b58      	ldr	r3, [pc, #352]	; (8015750 <ip4_input+0x244>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	613b      	str	r3, [r7, #16]
 80155f2:	e00e      	b.n	8015612 <ip4_input+0x106>
          if (netif == inp) {
 80155f4:	693a      	ldr	r2, [r7, #16]
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d006      	beq.n	801560a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80155fc:	6938      	ldr	r0, [r7, #16]
 80155fe:	f7ff ff5b 	bl	80154b8 <ip4_input_accept>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	d108      	bne.n	801561a <ip4_input+0x10e>
 8015608:	e000      	b.n	801560c <ip4_input+0x100>
            continue;
 801560a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	613b      	str	r3, [r7, #16]
 8015612:	693b      	ldr	r3, [r7, #16]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d1ed      	bne.n	80155f4 <ip4_input+0xe8>
 8015618:	e000      	b.n	801561c <ip4_input+0x110>
            break;
 801561a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801561c:	4b4b      	ldr	r3, [pc, #300]	; (801574c <ip4_input+0x240>)
 801561e:	691b      	ldr	r3, [r3, #16]
 8015620:	6839      	ldr	r1, [r7, #0]
 8015622:	4618      	mov	r0, r3
 8015624:	f000 f96e 	bl	8015904 <ip4_addr_isbroadcast_u32>
 8015628:	4603      	mov	r3, r0
 801562a:	2b00      	cmp	r3, #0
 801562c:	d105      	bne.n	801563a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801562e:	4b47      	ldr	r3, [pc, #284]	; (801574c <ip4_input+0x240>)
 8015630:	691b      	ldr	r3, [r3, #16]
 8015632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015636:	2be0      	cmp	r3, #224	; 0xe0
 8015638:	d104      	bne.n	8015644 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f002 fbc8 	bl	8017dd0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015640:	2300      	movs	r3, #0
 8015642:	e07e      	b.n	8015742 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015644:	693b      	ldr	r3, [r7, #16]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d104      	bne.n	8015654 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f002 fbc0 	bl	8017dd0 <pbuf_free>
    return ERR_OK;
 8015650:	2300      	movs	r3, #0
 8015652:	e076      	b.n	8015742 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	88db      	ldrh	r3, [r3, #6]
 8015658:	b29b      	uxth	r3, r3
 801565a:	461a      	mov	r2, r3
 801565c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015660:	4013      	ands	r3, r2
 8015662:	2b00      	cmp	r3, #0
 8015664:	d00b      	beq.n	801567e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f000 fc92 	bl	8015f90 <ip4_reass>
 801566c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d101      	bne.n	8015678 <ip4_input+0x16c>
      return ERR_OK;
 8015674:	2300      	movs	r3, #0
 8015676:	e064      	b.n	8015742 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801567e:	4a33      	ldr	r2, [pc, #204]	; (801574c <ip4_input+0x240>)
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015684:	4a31      	ldr	r2, [pc, #196]	; (801574c <ip4_input+0x240>)
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801568a:	4a30      	ldr	r2, [pc, #192]	; (801574c <ip4_input+0x240>)
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	f003 030f 	and.w	r3, r3, #15
 8015698:	b2db      	uxtb	r3, r3
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	b2db      	uxtb	r3, r3
 801569e:	b29a      	uxth	r2, r3
 80156a0:	4b2a      	ldr	r3, [pc, #168]	; (801574c <ip4_input+0x240>)
 80156a2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80156a4:	89fb      	ldrh	r3, [r7, #14]
 80156a6:	4619      	mov	r1, r3
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f002 fb0b 	bl	8017cc4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	7a5b      	ldrb	r3, [r3, #9]
 80156b2:	2b11      	cmp	r3, #17
 80156b4:	d006      	beq.n	80156c4 <ip4_input+0x1b8>
 80156b6:	2b11      	cmp	r3, #17
 80156b8:	dc13      	bgt.n	80156e2 <ip4_input+0x1d6>
 80156ba:	2b01      	cmp	r3, #1
 80156bc:	d00c      	beq.n	80156d8 <ip4_input+0x1cc>
 80156be:	2b06      	cmp	r3, #6
 80156c0:	d005      	beq.n	80156ce <ip4_input+0x1c2>
 80156c2:	e00e      	b.n	80156e2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80156c4:	6839      	ldr	r1, [r7, #0]
 80156c6:	6878      	ldr	r0, [r7, #4]
 80156c8:	f009 fc68 	bl	801ef9c <udp_input>
        break;
 80156cc:	e026      	b.n	801571c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80156ce:	6839      	ldr	r1, [r7, #0]
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f004 fe69 	bl	801a3a8 <tcp_input>
        break;
 80156d6:	e021      	b.n	801571c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80156d8:	6839      	ldr	r1, [r7, #0]
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7ff fbf4 	bl	8014ec8 <icmp_input>
        break;
 80156e0:	e01c      	b.n	801571c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80156e2:	4b1a      	ldr	r3, [pc, #104]	; (801574c <ip4_input+0x240>)
 80156e4:	695b      	ldr	r3, [r3, #20]
 80156e6:	6939      	ldr	r1, [r7, #16]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f000 f90b 	bl	8015904 <ip4_addr_isbroadcast_u32>
 80156ee:	4603      	mov	r3, r0
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d10f      	bne.n	8015714 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80156f4:	4b15      	ldr	r3, [pc, #84]	; (801574c <ip4_input+0x240>)
 80156f6:	695b      	ldr	r3, [r3, #20]
 80156f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80156fc:	2be0      	cmp	r3, #224	; 0xe0
 80156fe:	d009      	beq.n	8015714 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015704:	4619      	mov	r1, r3
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f002 fb4f 	bl	8017daa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801570c:	2102      	movs	r1, #2
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f7ff fcfa 	bl	8015108 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	f002 fb5b 	bl	8017dd0 <pbuf_free>
        break;
 801571a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801571c:	4b0b      	ldr	r3, [pc, #44]	; (801574c <ip4_input+0x240>)
 801571e:	2200      	movs	r2, #0
 8015720:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015722:	4b0a      	ldr	r3, [pc, #40]	; (801574c <ip4_input+0x240>)
 8015724:	2200      	movs	r2, #0
 8015726:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015728:	4b08      	ldr	r3, [pc, #32]	; (801574c <ip4_input+0x240>)
 801572a:	2200      	movs	r2, #0
 801572c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801572e:	4b07      	ldr	r3, [pc, #28]	; (801574c <ip4_input+0x240>)
 8015730:	2200      	movs	r2, #0
 8015732:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015734:	4b05      	ldr	r3, [pc, #20]	; (801574c <ip4_input+0x240>)
 8015736:	2200      	movs	r2, #0
 8015738:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801573a:	4b04      	ldr	r3, [pc, #16]	; (801574c <ip4_input+0x240>)
 801573c:	2200      	movs	r2, #0
 801573e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	3718      	adds	r7, #24
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	24009548 	.word	0x24009548
 8015750:	24010008 	.word	0x24010008

08015754 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b08a      	sub	sp, #40	; 0x28
 8015758:	af04      	add	r7, sp, #16
 801575a:	60f8      	str	r0, [r7, #12]
 801575c:	60b9      	str	r1, [r7, #8]
 801575e:	607a      	str	r2, [r7, #4]
 8015760:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d009      	beq.n	8015780 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d003      	beq.n	801577a <ip4_output_if+0x26>
 8015772:	68bb      	ldr	r3, [r7, #8]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d102      	bne.n	8015780 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577c:	3304      	adds	r3, #4
 801577e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015780:	78fa      	ldrb	r2, [r7, #3]
 8015782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015784:	9302      	str	r3, [sp, #8]
 8015786:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801578a:	9301      	str	r3, [sp, #4]
 801578c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015790:	9300      	str	r3, [sp, #0]
 8015792:	4613      	mov	r3, r2
 8015794:	687a      	ldr	r2, [r7, #4]
 8015796:	6979      	ldr	r1, [r7, #20]
 8015798:	68f8      	ldr	r0, [r7, #12]
 801579a:	f000 f805 	bl	80157a8 <ip4_output_if_src>
 801579e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3718      	adds	r7, #24
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}

080157a8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b088      	sub	sp, #32
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	60f8      	str	r0, [r7, #12]
 80157b0:	60b9      	str	r1, [r7, #8]
 80157b2:	607a      	str	r2, [r7, #4]
 80157b4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	7b9b      	ldrb	r3, [r3, #14]
 80157ba:	2b01      	cmp	r3, #1
 80157bc:	d006      	beq.n	80157cc <ip4_output_if_src+0x24>
 80157be:	4b4b      	ldr	r3, [pc, #300]	; (80158ec <ip4_output_if_src+0x144>)
 80157c0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80157c4:	494a      	ldr	r1, [pc, #296]	; (80158f0 <ip4_output_if_src+0x148>)
 80157c6:	484b      	ldr	r0, [pc, #300]	; (80158f4 <ip4_output_if_src+0x14c>)
 80157c8:	f00a fc9e 	bl	8020108 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d060      	beq.n	8015894 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80157d2:	2314      	movs	r3, #20
 80157d4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80157d6:	2114      	movs	r1, #20
 80157d8:	68f8      	ldr	r0, [r7, #12]
 80157da:	f002 fa63 	bl	8017ca4 <pbuf_add_header>
 80157de:	4603      	mov	r3, r0
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d002      	beq.n	80157ea <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80157e4:	f06f 0301 	mvn.w	r3, #1
 80157e8:	e07c      	b.n	80158e4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	685b      	ldr	r3, [r3, #4]
 80157ee:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	895b      	ldrh	r3, [r3, #10]
 80157f4:	2b13      	cmp	r3, #19
 80157f6:	d806      	bhi.n	8015806 <ip4_output_if_src+0x5e>
 80157f8:	4b3c      	ldr	r3, [pc, #240]	; (80158ec <ip4_output_if_src+0x144>)
 80157fa:	f44f 7262 	mov.w	r2, #904	; 0x388
 80157fe:	493e      	ldr	r1, [pc, #248]	; (80158f8 <ip4_output_if_src+0x150>)
 8015800:	483c      	ldr	r0, [pc, #240]	; (80158f4 <ip4_output_if_src+0x14c>)
 8015802:	f00a fc81 	bl	8020108 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	78fa      	ldrb	r2, [r7, #3]
 801580a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015812:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681a      	ldr	r2, [r3, #0]
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801581c:	8b7b      	ldrh	r3, [r7, #26]
 801581e:	089b      	lsrs	r3, r3, #2
 8015820:	b29b      	uxth	r3, r3
 8015822:	b2db      	uxtb	r3, r3
 8015824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015828:	b2da      	uxtb	r2, r3
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801582e:	69fb      	ldr	r3, [r7, #28]
 8015830:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015834:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	891b      	ldrh	r3, [r3, #8]
 801583a:	4618      	mov	r0, r3
 801583c:	f7fe faf4 	bl	8013e28 <lwip_htons>
 8015840:	4603      	mov	r3, r0
 8015842:	461a      	mov	r2, r3
 8015844:	69fb      	ldr	r3, [r7, #28]
 8015846:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015848:	69fb      	ldr	r3, [r7, #28]
 801584a:	2200      	movs	r2, #0
 801584c:	719a      	strb	r2, [r3, #6]
 801584e:	2200      	movs	r2, #0
 8015850:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015852:	4b2a      	ldr	r3, [pc, #168]	; (80158fc <ip4_output_if_src+0x154>)
 8015854:	881b      	ldrh	r3, [r3, #0]
 8015856:	4618      	mov	r0, r3
 8015858:	f7fe fae6 	bl	8013e28 <lwip_htons>
 801585c:	4603      	mov	r3, r0
 801585e:	461a      	mov	r2, r3
 8015860:	69fb      	ldr	r3, [r7, #28]
 8015862:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015864:	4b25      	ldr	r3, [pc, #148]	; (80158fc <ip4_output_if_src+0x154>)
 8015866:	881b      	ldrh	r3, [r3, #0]
 8015868:	3301      	adds	r3, #1
 801586a:	b29a      	uxth	r2, r3
 801586c:	4b23      	ldr	r3, [pc, #140]	; (80158fc <ip4_output_if_src+0x154>)
 801586e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d104      	bne.n	8015880 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015876:	4b22      	ldr	r3, [pc, #136]	; (8015900 <ip4_output_if_src+0x158>)
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	60da      	str	r2, [r3, #12]
 801587e:	e003      	b.n	8015888 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015880:	68bb      	ldr	r3, [r7, #8]
 8015882:	681a      	ldr	r2, [r3, #0]
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015888:	69fb      	ldr	r3, [r7, #28]
 801588a:	2200      	movs	r2, #0
 801588c:	729a      	strb	r2, [r3, #10]
 801588e:	2200      	movs	r2, #0
 8015890:	72da      	strb	r2, [r3, #11]
 8015892:	e00f      	b.n	80158b4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	895b      	ldrh	r3, [r3, #10]
 8015898:	2b13      	cmp	r3, #19
 801589a:	d802      	bhi.n	80158a2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801589c:	f06f 0301 	mvn.w	r3, #1
 80158a0:	e020      	b.n	80158e4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	685b      	ldr	r3, [r3, #4]
 80158a6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80158a8:	69fb      	ldr	r3, [r7, #28]
 80158aa:	691b      	ldr	r3, [r3, #16]
 80158ac:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80158ae:	f107 0314 	add.w	r3, r7, #20
 80158b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80158b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d00c      	beq.n	80158d6 <ip4_output_if_src+0x12e>
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	891a      	ldrh	r2, [r3, #8]
 80158c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d906      	bls.n	80158d6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80158c8:	687a      	ldr	r2, [r7, #4]
 80158ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80158cc:	68f8      	ldr	r0, [r7, #12]
 80158ce:	f000 fd53 	bl	8016378 <ip4_frag>
 80158d2:	4603      	mov	r3, r0
 80158d4:	e006      	b.n	80158e4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80158d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d8:	695b      	ldr	r3, [r3, #20]
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	68f9      	ldr	r1, [r7, #12]
 80158de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158e0:	4798      	blx	r3
 80158e2:	4603      	mov	r3, r0
}
 80158e4:	4618      	mov	r0, r3
 80158e6:	3720      	adds	r7, #32
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}
 80158ec:	08021edc 	.word	0x08021edc
 80158f0:	08021f54 	.word	0x08021f54
 80158f4:	08021f60 	.word	0x08021f60
 80158f8:	08021f88 	.word	0x08021f88
 80158fc:	24009560 	.word	0x24009560
 8015900:	08024ad4 	.word	0x08024ad4

08015904 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015904:	b480      	push	{r7}
 8015906:	b085      	sub	sp, #20
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015918:	d002      	beq.n	8015920 <ip4_addr_isbroadcast_u32+0x1c>
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d101      	bne.n	8015924 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015920:	2301      	movs	r3, #1
 8015922:	e02a      	b.n	801597a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801592a:	f003 0302 	and.w	r3, r3, #2
 801592e:	2b00      	cmp	r3, #0
 8015930:	d101      	bne.n	8015936 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015932:	2300      	movs	r3, #0
 8015934:	e021      	b.n	801597a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	3304      	adds	r3, #4
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	687a      	ldr	r2, [r7, #4]
 801593e:	429a      	cmp	r2, r3
 8015940:	d101      	bne.n	8015946 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015942:	2300      	movs	r3, #0
 8015944:	e019      	b.n	801597a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015946:	68fa      	ldr	r2, [r7, #12]
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	3304      	adds	r3, #4
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	405a      	eors	r2, r3
 8015950:	683b      	ldr	r3, [r7, #0]
 8015952:	3308      	adds	r3, #8
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	4013      	ands	r3, r2
 8015958:	2b00      	cmp	r3, #0
 801595a:	d10d      	bne.n	8015978 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801595c:	683b      	ldr	r3, [r7, #0]
 801595e:	3308      	adds	r3, #8
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	43da      	mvns	r2, r3
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	3308      	adds	r3, #8
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015970:	429a      	cmp	r2, r3
 8015972:	d101      	bne.n	8015978 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015974:	2301      	movs	r3, #1
 8015976:	e000      	b.n	801597a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015978:	2300      	movs	r3, #0
  }
}
 801597a:	4618      	mov	r0, r3
 801597c:	3714      	adds	r7, #20
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr
	...

08015988 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b084      	sub	sp, #16
 801598c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801598e:	2300      	movs	r3, #0
 8015990:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015992:	4b12      	ldr	r3, [pc, #72]	; (80159dc <ip_reass_tmr+0x54>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015998:	e018      	b.n	80159cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	7fdb      	ldrb	r3, [r3, #31]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d00b      	beq.n	80159ba <ip_reass_tmr+0x32>
      r->timer--;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	7fdb      	ldrb	r3, [r3, #31]
 80159a6:	3b01      	subs	r3, #1
 80159a8:	b2da      	uxtb	r2, r3
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	60fb      	str	r3, [r7, #12]
 80159b8:	e008      	b.n	80159cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80159c4:	68b9      	ldr	r1, [r7, #8]
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f000 f80a 	bl	80159e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d1e3      	bne.n	801599a <ip_reass_tmr+0x12>
    }
  }
}
 80159d2:	bf00      	nop
 80159d4:	bf00      	nop
 80159d6:	3710      	adds	r7, #16
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	24009564 	.word	0x24009564

080159e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b088      	sub	sp, #32
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
 80159e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80159ea:	2300      	movs	r3, #0
 80159ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80159ee:	683a      	ldr	r2, [r7, #0]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d105      	bne.n	8015a02 <ip_reass_free_complete_datagram+0x22>
 80159f6:	4b45      	ldr	r3, [pc, #276]	; (8015b0c <ip_reass_free_complete_datagram+0x12c>)
 80159f8:	22ab      	movs	r2, #171	; 0xab
 80159fa:	4945      	ldr	r1, [pc, #276]	; (8015b10 <ip_reass_free_complete_datagram+0x130>)
 80159fc:	4845      	ldr	r0, [pc, #276]	; (8015b14 <ip_reass_free_complete_datagram+0x134>)
 80159fe:	f00a fb83 	bl	8020108 <iprintf>
  if (prev != NULL) {
 8015a02:	683b      	ldr	r3, [r7, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d00a      	beq.n	8015a1e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	d005      	beq.n	8015a1e <ip_reass_free_complete_datagram+0x3e>
 8015a12:	4b3e      	ldr	r3, [pc, #248]	; (8015b0c <ip_reass_free_complete_datagram+0x12c>)
 8015a14:	22ad      	movs	r2, #173	; 0xad
 8015a16:	4940      	ldr	r1, [pc, #256]	; (8015b18 <ip_reass_free_complete_datagram+0x138>)
 8015a18:	483e      	ldr	r0, [pc, #248]	; (8015b14 <ip_reass_free_complete_datagram+0x134>)
 8015a1a:	f00a fb75 	bl	8020108 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	889b      	ldrh	r3, [r3, #4]
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d12a      	bne.n	8015a86 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	685b      	ldr	r3, [r3, #4]
 8015a34:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	681a      	ldr	r2, [r3, #0]
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	6858      	ldr	r0, [r3, #4]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	3308      	adds	r3, #8
 8015a46:	2214      	movs	r2, #20
 8015a48:	4619      	mov	r1, r3
 8015a4a:	f009 ff5f 	bl	801f90c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015a4e:	2101      	movs	r1, #1
 8015a50:	69b8      	ldr	r0, [r7, #24]
 8015a52:	f7ff fb69 	bl	8015128 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015a56:	69b8      	ldr	r0, [r7, #24]
 8015a58:	f002 fa48 	bl	8017eec <pbuf_clen>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a60:	8bfa      	ldrh	r2, [r7, #30]
 8015a62:	8a7b      	ldrh	r3, [r7, #18]
 8015a64:	4413      	add	r3, r2
 8015a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a6a:	db05      	blt.n	8015a78 <ip_reass_free_complete_datagram+0x98>
 8015a6c:	4b27      	ldr	r3, [pc, #156]	; (8015b0c <ip_reass_free_complete_datagram+0x12c>)
 8015a6e:	22bc      	movs	r2, #188	; 0xbc
 8015a70:	492a      	ldr	r1, [pc, #168]	; (8015b1c <ip_reass_free_complete_datagram+0x13c>)
 8015a72:	4828      	ldr	r0, [pc, #160]	; (8015b14 <ip_reass_free_complete_datagram+0x134>)
 8015a74:	f00a fb48 	bl	8020108 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a78:	8bfa      	ldrh	r2, [r7, #30]
 8015a7a:	8a7b      	ldrh	r3, [r7, #18]
 8015a7c:	4413      	add	r3, r2
 8015a7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015a80:	69b8      	ldr	r0, [r7, #24]
 8015a82:	f002 f9a5 	bl	8017dd0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	685b      	ldr	r3, [r3, #4]
 8015a8a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015a8c:	e01f      	b.n	8015ace <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015a8e:	69bb      	ldr	r3, [r7, #24]
 8015a90:	685b      	ldr	r3, [r3, #4]
 8015a92:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015a94:	69bb      	ldr	r3, [r7, #24]
 8015a96:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015a9e:	68f8      	ldr	r0, [r7, #12]
 8015aa0:	f002 fa24 	bl	8017eec <pbuf_clen>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015aa8:	8bfa      	ldrh	r2, [r7, #30]
 8015aaa:	8a7b      	ldrh	r3, [r7, #18]
 8015aac:	4413      	add	r3, r2
 8015aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ab2:	db05      	blt.n	8015ac0 <ip_reass_free_complete_datagram+0xe0>
 8015ab4:	4b15      	ldr	r3, [pc, #84]	; (8015b0c <ip_reass_free_complete_datagram+0x12c>)
 8015ab6:	22cc      	movs	r2, #204	; 0xcc
 8015ab8:	4918      	ldr	r1, [pc, #96]	; (8015b1c <ip_reass_free_complete_datagram+0x13c>)
 8015aba:	4816      	ldr	r0, [pc, #88]	; (8015b14 <ip_reass_free_complete_datagram+0x134>)
 8015abc:	f00a fb24 	bl	8020108 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015ac0:	8bfa      	ldrh	r2, [r7, #30]
 8015ac2:	8a7b      	ldrh	r3, [r7, #18]
 8015ac4:	4413      	add	r3, r2
 8015ac6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015ac8:	68f8      	ldr	r0, [r7, #12]
 8015aca:	f002 f981 	bl	8017dd0 <pbuf_free>
  while (p != NULL) {
 8015ace:	69bb      	ldr	r3, [r7, #24]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d1dc      	bne.n	8015a8e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015ad4:	6839      	ldr	r1, [r7, #0]
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f000 f8c2 	bl	8015c60 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015adc:	4b10      	ldr	r3, [pc, #64]	; (8015b20 <ip_reass_free_complete_datagram+0x140>)
 8015ade:	881b      	ldrh	r3, [r3, #0]
 8015ae0:	8bfa      	ldrh	r2, [r7, #30]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d905      	bls.n	8015af2 <ip_reass_free_complete_datagram+0x112>
 8015ae6:	4b09      	ldr	r3, [pc, #36]	; (8015b0c <ip_reass_free_complete_datagram+0x12c>)
 8015ae8:	22d2      	movs	r2, #210	; 0xd2
 8015aea:	490e      	ldr	r1, [pc, #56]	; (8015b24 <ip_reass_free_complete_datagram+0x144>)
 8015aec:	4809      	ldr	r0, [pc, #36]	; (8015b14 <ip_reass_free_complete_datagram+0x134>)
 8015aee:	f00a fb0b 	bl	8020108 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015af2:	4b0b      	ldr	r3, [pc, #44]	; (8015b20 <ip_reass_free_complete_datagram+0x140>)
 8015af4:	881a      	ldrh	r2, [r3, #0]
 8015af6:	8bfb      	ldrh	r3, [r7, #30]
 8015af8:	1ad3      	subs	r3, r2, r3
 8015afa:	b29a      	uxth	r2, r3
 8015afc:	4b08      	ldr	r3, [pc, #32]	; (8015b20 <ip_reass_free_complete_datagram+0x140>)
 8015afe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015b00:	8bfb      	ldrh	r3, [r7, #30]
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3720      	adds	r7, #32
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}
 8015b0a:	bf00      	nop
 8015b0c:	08021fb8 	.word	0x08021fb8
 8015b10:	08022034 	.word	0x08022034
 8015b14:	08022040 	.word	0x08022040
 8015b18:	08022068 	.word	0x08022068
 8015b1c:	0802207c 	.word	0x0802207c
 8015b20:	24009568 	.word	0x24009568
 8015b24:	0802209c 	.word	0x0802209c

08015b28 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b08a      	sub	sp, #40	; 0x28
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
 8015b30:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015b32:	2300      	movs	r3, #0
 8015b34:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015b36:	2300      	movs	r3, #0
 8015b38:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015b46:	4b28      	ldr	r3, [pc, #160]	; (8015be8 <ip_reass_remove_oldest_datagram+0xc0>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015b4c:	e030      	b.n	8015bb0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b50:	695a      	ldr	r2, [r3, #20]
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	68db      	ldr	r3, [r3, #12]
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d10c      	bne.n	8015b74 <ip_reass_remove_oldest_datagram+0x4c>
 8015b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b5c:	699a      	ldr	r2, [r3, #24]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	691b      	ldr	r3, [r3, #16]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d106      	bne.n	8015b74 <ip_reass_remove_oldest_datagram+0x4c>
 8015b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b68:	899a      	ldrh	r2, [r3, #12]
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	889b      	ldrh	r3, [r3, #4]
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d014      	beq.n	8015b9e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015b74:	693b      	ldr	r3, [r7, #16]
 8015b76:	3301      	adds	r3, #1
 8015b78:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015b7a:	6a3b      	ldr	r3, [r7, #32]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d104      	bne.n	8015b8a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b82:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	61bb      	str	r3, [r7, #24]
 8015b88:	e009      	b.n	8015b9e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b8c:	7fda      	ldrb	r2, [r3, #31]
 8015b8e:	6a3b      	ldr	r3, [r7, #32]
 8015b90:	7fdb      	ldrb	r3, [r3, #31]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d803      	bhi.n	8015b9e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b98:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b9a:	69fb      	ldr	r3, [r7, #28]
 8015b9c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d001      	beq.n	8015baa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d1cb      	bne.n	8015b4e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015bb6:	6a3b      	ldr	r3, [r7, #32]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d008      	beq.n	8015bce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015bbc:	69b9      	ldr	r1, [r7, #24]
 8015bbe:	6a38      	ldr	r0, [r7, #32]
 8015bc0:	f7ff ff0e 	bl	80159e0 <ip_reass_free_complete_datagram>
 8015bc4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015bc6:	697a      	ldr	r2, [r7, #20]
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	4413      	add	r3, r2
 8015bcc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015bce:	697a      	ldr	r2, [r7, #20]
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	da02      	bge.n	8015bdc <ip_reass_remove_oldest_datagram+0xb4>
 8015bd6:	693b      	ldr	r3, [r7, #16]
 8015bd8:	2b01      	cmp	r3, #1
 8015bda:	dcac      	bgt.n	8015b36 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015bdc:	697b      	ldr	r3, [r7, #20]
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	3728      	adds	r7, #40	; 0x28
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	24009564 	.word	0x24009564

08015bec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
 8015bf4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015bf6:	2004      	movs	r0, #4
 8015bf8:	f001 f980 	bl	8016efc <memp_malloc>
 8015bfc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d110      	bne.n	8015c26 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015c04:	6839      	ldr	r1, [r7, #0]
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f7ff ff8e 	bl	8015b28 <ip_reass_remove_oldest_datagram>
 8015c0c:	4602      	mov	r2, r0
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	4293      	cmp	r3, r2
 8015c12:	dc03      	bgt.n	8015c1c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c14:	2004      	movs	r0, #4
 8015c16:	f001 f971 	bl	8016efc <memp_malloc>
 8015c1a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d101      	bne.n	8015c26 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015c22:	2300      	movs	r3, #0
 8015c24:	e016      	b.n	8015c54 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015c26:	2220      	movs	r2, #32
 8015c28:	2100      	movs	r1, #0
 8015c2a:	68f8      	ldr	r0, [r7, #12]
 8015c2c:	f009 fe96 	bl	801f95c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	220f      	movs	r2, #15
 8015c34:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015c36:	4b09      	ldr	r3, [pc, #36]	; (8015c5c <ip_reass_enqueue_new_datagram+0x70>)
 8015c38:	681a      	ldr	r2, [r3, #0]
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015c3e:	4a07      	ldr	r2, [pc, #28]	; (8015c5c <ip_reass_enqueue_new_datagram+0x70>)
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	3308      	adds	r3, #8
 8015c48:	2214      	movs	r2, #20
 8015c4a:	6879      	ldr	r1, [r7, #4]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f009 fe5d 	bl	801f90c <memcpy>
  return ipr;
 8015c52:	68fb      	ldr	r3, [r7, #12]
}
 8015c54:	4618      	mov	r0, r3
 8015c56:	3710      	adds	r7, #16
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	24009564 	.word	0x24009564

08015c60 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b082      	sub	sp, #8
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015c6a:	4b10      	ldr	r3, [pc, #64]	; (8015cac <ip_reass_dequeue_datagram+0x4c>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	429a      	cmp	r2, r3
 8015c72:	d104      	bne.n	8015c7e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	4a0c      	ldr	r2, [pc, #48]	; (8015cac <ip_reass_dequeue_datagram+0x4c>)
 8015c7a:	6013      	str	r3, [r2, #0]
 8015c7c:	e00d      	b.n	8015c9a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d106      	bne.n	8015c92 <ip_reass_dequeue_datagram+0x32>
 8015c84:	4b0a      	ldr	r3, [pc, #40]	; (8015cb0 <ip_reass_dequeue_datagram+0x50>)
 8015c86:	f240 1245 	movw	r2, #325	; 0x145
 8015c8a:	490a      	ldr	r1, [pc, #40]	; (8015cb4 <ip_reass_dequeue_datagram+0x54>)
 8015c8c:	480a      	ldr	r0, [pc, #40]	; (8015cb8 <ip_reass_dequeue_datagram+0x58>)
 8015c8e:	f00a fa3b 	bl	8020108 <iprintf>
    prev->next = ipr->next;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681a      	ldr	r2, [r3, #0]
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015c9a:	6879      	ldr	r1, [r7, #4]
 8015c9c:	2004      	movs	r0, #4
 8015c9e:	f001 f9a3 	bl	8016fe8 <memp_free>
}
 8015ca2:	bf00      	nop
 8015ca4:	3708      	adds	r7, #8
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}
 8015caa:	bf00      	nop
 8015cac:	24009564 	.word	0x24009564
 8015cb0:	08021fb8 	.word	0x08021fb8
 8015cb4:	080220c0 	.word	0x080220c0
 8015cb8:	08022040 	.word	0x08022040

08015cbc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b08c      	sub	sp, #48	; 0x30
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	60b9      	str	r1, [r7, #8]
 8015cc6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015ccc:	2301      	movs	r3, #1
 8015cce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015cd6:	69fb      	ldr	r3, [r7, #28]
 8015cd8:	885b      	ldrh	r3, [r3, #2]
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7fe f8a3 	bl	8013e28 <lwip_htons>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015ce6:	69fb      	ldr	r3, [r7, #28]
 8015ce8:	781b      	ldrb	r3, [r3, #0]
 8015cea:	f003 030f 	and.w	r3, r3, #15
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	009b      	lsls	r3, r3, #2
 8015cf2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015cf4:	7e7b      	ldrb	r3, [r7, #25]
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	8b7a      	ldrh	r2, [r7, #26]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d202      	bcs.n	8015d04 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d02:	e135      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015d04:	7e7b      	ldrb	r3, [r7, #25]
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	8b7a      	ldrh	r2, [r7, #26]
 8015d0a:	1ad3      	subs	r3, r2, r3
 8015d0c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015d0e:	69fb      	ldr	r3, [r7, #28]
 8015d10:	88db      	ldrh	r3, [r3, #6]
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7fe f887 	bl	8013e28 <lwip_htons>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	00db      	lsls	r3, r3, #3
 8015d24:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2e:	2200      	movs	r2, #0
 8015d30:	701a      	strb	r2, [r3, #0]
 8015d32:	2200      	movs	r2, #0
 8015d34:	705a      	strb	r2, [r3, #1]
 8015d36:	2200      	movs	r2, #0
 8015d38:	709a      	strb	r2, [r3, #2]
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d40:	8afa      	ldrh	r2, [r7, #22]
 8015d42:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015d44:	8afa      	ldrh	r2, [r7, #22]
 8015d46:	8b7b      	ldrh	r3, [r7, #26]
 8015d48:	4413      	add	r3, r2
 8015d4a:	b29a      	uxth	r2, r3
 8015d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d52:	88db      	ldrh	r3, [r3, #6]
 8015d54:	b29b      	uxth	r3, r3
 8015d56:	8afa      	ldrh	r2, [r7, #22]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d902      	bls.n	8015d62 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d60:	e106      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	685b      	ldr	r3, [r3, #4]
 8015d66:	627b      	str	r3, [r7, #36]	; 0x24
 8015d68:	e068      	b.n	8015e3c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d72:	889b      	ldrh	r3, [r3, #4]
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	889b      	ldrh	r3, [r3, #4]
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d235      	bcs.n	8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d84:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d020      	beq.n	8015dce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8e:	889b      	ldrh	r3, [r3, #4]
 8015d90:	b29a      	uxth	r2, r3
 8015d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d94:	88db      	ldrh	r3, [r3, #6]
 8015d96:	b29b      	uxth	r3, r3
 8015d98:	429a      	cmp	r2, r3
 8015d9a:	d307      	bcc.n	8015dac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9e:	88db      	ldrh	r3, [r3, #6]
 8015da0:	b29a      	uxth	r2, r3
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	889b      	ldrh	r3, [r3, #4]
 8015da6:	b29b      	uxth	r3, r3
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d902      	bls.n	8015db2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015db0:	e0de      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db4:	68ba      	ldr	r2, [r7, #8]
 8015db6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dba:	88db      	ldrh	r3, [r3, #6]
 8015dbc:	b29a      	uxth	r2, r3
 8015dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc0:	889b      	ldrh	r3, [r3, #4]
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d03d      	beq.n	8015e44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015dcc:	e03a      	b.n	8015e44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd0:	88db      	ldrh	r3, [r3, #6]
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	889b      	ldrh	r3, [r3, #4]
 8015dd8:	b29b      	uxth	r3, r3
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	d902      	bls.n	8015de4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015de2:	e0c5      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	68ba      	ldr	r2, [r7, #8]
 8015de8:	605a      	str	r2, [r3, #4]
      break;
 8015dea:	e02b      	b.n	8015e44 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dee:	889b      	ldrh	r3, [r3, #4]
 8015df0:	b29a      	uxth	r2, r3
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	889b      	ldrh	r3, [r3, #4]
 8015df6:	b29b      	uxth	r3, r3
 8015df8:	429a      	cmp	r2, r3
 8015dfa:	d102      	bne.n	8015e02 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e00:	e0b6      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e04:	889b      	ldrh	r3, [r3, #4]
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	88db      	ldrh	r3, [r3, #6]
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	d202      	bcs.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e16:	e0ab      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d009      	beq.n	8015e32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e20:	88db      	ldrh	r3, [r3, #6]
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	889b      	ldrh	r3, [r3, #4]
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d001      	beq.n	8015e32 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015e32:	693b      	ldr	r3, [r7, #16]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d193      	bne.n	8015d6a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015e42:	e000      	b.n	8015e46 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015e44:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d12d      	bne.n	8015ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d01c      	beq.n	8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e54:	88db      	ldrh	r3, [r3, #6]
 8015e56:	b29a      	uxth	r2, r3
 8015e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e5a:	889b      	ldrh	r3, [r3, #4]
 8015e5c:	b29b      	uxth	r3, r3
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	d906      	bls.n	8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015e62:	4b45      	ldr	r3, [pc, #276]	; (8015f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e64:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015e68:	4944      	ldr	r1, [pc, #272]	; (8015f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e6a:	4845      	ldr	r0, [pc, #276]	; (8015f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e6c:	f00a f94c 	bl	8020108 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e72:	68ba      	ldr	r2, [r7, #8]
 8015e74:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e78:	88db      	ldrh	r3, [r3, #6]
 8015e7a:	b29a      	uxth	r2, r3
 8015e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7e:	889b      	ldrh	r3, [r3, #4]
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	429a      	cmp	r2, r3
 8015e84:	d010      	beq.n	8015ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	623b      	str	r3, [r7, #32]
 8015e8a:	e00d      	b.n	8015ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	685b      	ldr	r3, [r3, #4]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d006      	beq.n	8015ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015e94:	4b38      	ldr	r3, [pc, #224]	; (8015f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e96:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015e9a:	493a      	ldr	r1, [pc, #232]	; (8015f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015e9c:	4838      	ldr	r0, [pc, #224]	; (8015f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e9e:	f00a f933 	bl	8020108 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	68ba      	ldr	r2, [r7, #8]
 8015ea6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d105      	bne.n	8015eba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	7f9b      	ldrb	r3, [r3, #30]
 8015eb2:	f003 0301 	and.w	r3, r3, #1
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d059      	beq.n	8015f6e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015eba:	6a3b      	ldr	r3, [r7, #32]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d04f      	beq.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d006      	beq.n	8015ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	889b      	ldrh	r3, [r3, #4]
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d002      	beq.n	8015edc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	623b      	str	r3, [r7, #32]
 8015eda:	e041      	b.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ede:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015ee6:	e012      	b.n	8015f0e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef0:	88db      	ldrh	r3, [r3, #6]
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	889b      	ldrh	r3, [r3, #4]
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d002      	beq.n	8015f04 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015efe:	2300      	movs	r3, #0
 8015f00:	623b      	str	r3, [r7, #32]
            break;
 8015f02:	e007      	b.n	8015f14 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f06:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d1e9      	bne.n	8015ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015f14:	6a3b      	ldr	r3, [r7, #32]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d022      	beq.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d106      	bne.n	8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015f22:	4b15      	ldr	r3, [pc, #84]	; (8015f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f24:	f240 12df 	movw	r2, #479	; 0x1df
 8015f28:	4917      	ldr	r1, [pc, #92]	; (8015f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015f2a:	4815      	ldr	r0, [pc, #84]	; (8015f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f2c:	f00a f8ec 	bl	8020108 <iprintf>
          LWIP_ASSERT("sanity check",
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	685b      	ldr	r3, [r3, #4]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d106      	bne.n	8015f4a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015f3c:	4b0e      	ldr	r3, [pc, #56]	; (8015f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015f42:	4911      	ldr	r1, [pc, #68]	; (8015f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015f44:	480e      	ldr	r0, [pc, #56]	; (8015f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f46:	f00a f8df 	bl	8020108 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d006      	beq.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015f52:	4b09      	ldr	r3, [pc, #36]	; (8015f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f54:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015f58:	490c      	ldr	r1, [pc, #48]	; (8015f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f5a:	4809      	ldr	r0, [pc, #36]	; (8015f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f5c:	f00a f8d4 	bl	8020108 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015f60:	6a3b      	ldr	r3, [r7, #32]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	bf14      	ite	ne
 8015f66:	2301      	movne	r3, #1
 8015f68:	2300      	moveq	r3, #0
 8015f6a:	b2db      	uxtb	r3, r3
 8015f6c:	e000      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015f6e:	2300      	movs	r3, #0
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3730      	adds	r7, #48	; 0x30
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}
 8015f78:	08021fb8 	.word	0x08021fb8
 8015f7c:	080220dc 	.word	0x080220dc
 8015f80:	08022040 	.word	0x08022040
 8015f84:	080220fc 	.word	0x080220fc
 8015f88:	08022134 	.word	0x08022134
 8015f8c:	08022144 	.word	0x08022144

08015f90 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b08e      	sub	sp, #56	; 0x38
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	f003 030f 	and.w	r3, r3, #15
 8015fa6:	b2db      	uxtb	r3, r3
 8015fa8:	009b      	lsls	r3, r3, #2
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	2b14      	cmp	r3, #20
 8015fae:	f040 8171 	bne.w	8016294 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb4:	88db      	ldrh	r3, [r3, #6]
 8015fb6:	b29b      	uxth	r3, r3
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7fd ff35 	bl	8013e28 <lwip_htons>
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	00db      	lsls	r3, r3, #3
 8015fc8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fcc:	885b      	ldrh	r3, [r3, #2]
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f7fd ff29 	bl	8013e28 <lwip_htons>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	f003 030f 	and.w	r3, r3, #15
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	009b      	lsls	r3, r3, #2
 8015fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	f0c0 8150 	bcc.w	8016298 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ffc:	b29b      	uxth	r3, r3
 8015ffe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016000:	1ad3      	subs	r3, r2, r3
 8016002:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f001 ff71 	bl	8017eec <pbuf_clen>
 801600a:	4603      	mov	r3, r0
 801600c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801600e:	4b8c      	ldr	r3, [pc, #560]	; (8016240 <ip4_reass+0x2b0>)
 8016010:	881b      	ldrh	r3, [r3, #0]
 8016012:	461a      	mov	r2, r3
 8016014:	8c3b      	ldrh	r3, [r7, #32]
 8016016:	4413      	add	r3, r2
 8016018:	2b0a      	cmp	r3, #10
 801601a:	dd10      	ble.n	801603e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801601c:	8c3b      	ldrh	r3, [r7, #32]
 801601e:	4619      	mov	r1, r3
 8016020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016022:	f7ff fd81 	bl	8015b28 <ip_reass_remove_oldest_datagram>
 8016026:	4603      	mov	r3, r0
 8016028:	2b00      	cmp	r3, #0
 801602a:	f000 8137 	beq.w	801629c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801602e:	4b84      	ldr	r3, [pc, #528]	; (8016240 <ip4_reass+0x2b0>)
 8016030:	881b      	ldrh	r3, [r3, #0]
 8016032:	461a      	mov	r2, r3
 8016034:	8c3b      	ldrh	r3, [r7, #32]
 8016036:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016038:	2b0a      	cmp	r3, #10
 801603a:	f300 812f 	bgt.w	801629c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801603e:	4b81      	ldr	r3, [pc, #516]	; (8016244 <ip4_reass+0x2b4>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	633b      	str	r3, [r7, #48]	; 0x30
 8016044:	e015      	b.n	8016072 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016048:	695a      	ldr	r2, [r3, #20]
 801604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604c:	68db      	ldr	r3, [r3, #12]
 801604e:	429a      	cmp	r2, r3
 8016050:	d10c      	bne.n	801606c <ip4_reass+0xdc>
 8016052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016054:	699a      	ldr	r2, [r3, #24]
 8016056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016058:	691b      	ldr	r3, [r3, #16]
 801605a:	429a      	cmp	r2, r3
 801605c:	d106      	bne.n	801606c <ip4_reass+0xdc>
 801605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016060:	899a      	ldrh	r2, [r3, #12]
 8016062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016064:	889b      	ldrh	r3, [r3, #4]
 8016066:	b29b      	uxth	r3, r3
 8016068:	429a      	cmp	r2, r3
 801606a:	d006      	beq.n	801607a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	633b      	str	r3, [r7, #48]	; 0x30
 8016072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016074:	2b00      	cmp	r3, #0
 8016076:	d1e6      	bne.n	8016046 <ip4_reass+0xb6>
 8016078:	e000      	b.n	801607c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801607a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801607e:	2b00      	cmp	r3, #0
 8016080:	d109      	bne.n	8016096 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016082:	8c3b      	ldrh	r3, [r7, #32]
 8016084:	4619      	mov	r1, r3
 8016086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016088:	f7ff fdb0 	bl	8015bec <ip_reass_enqueue_new_datagram>
 801608c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016090:	2b00      	cmp	r3, #0
 8016092:	d11c      	bne.n	80160ce <ip4_reass+0x13e>
      goto nullreturn;
 8016094:	e105      	b.n	80162a2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	88db      	ldrh	r3, [r3, #6]
 801609a:	b29b      	uxth	r3, r3
 801609c:	4618      	mov	r0, r3
 801609e:	f7fd fec3 	bl	8013e28 <lwip_htons>
 80160a2:	4603      	mov	r3, r0
 80160a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d110      	bne.n	80160ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80160ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ae:	89db      	ldrh	r3, [r3, #14]
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7fd feb9 	bl	8013e28 <lwip_htons>
 80160b6:	4603      	mov	r3, r0
 80160b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d006      	beq.n	80160ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80160c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c2:	3308      	adds	r3, #8
 80160c4:	2214      	movs	r2, #20
 80160c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80160c8:	4618      	mov	r0, r3
 80160ca:	f009 fc1f 	bl	801f90c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80160ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d0:	88db      	ldrh	r3, [r3, #6]
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	f003 0320 	and.w	r3, r3, #32
 80160d8:	2b00      	cmp	r3, #0
 80160da:	bf0c      	ite	eq
 80160dc:	2301      	moveq	r3, #1
 80160de:	2300      	movne	r3, #0
 80160e0:	b2db      	uxtb	r3, r3
 80160e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80160e4:	69fb      	ldr	r3, [r7, #28]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d00e      	beq.n	8016108 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80160ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80160ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160ee:	4413      	add	r3, r2
 80160f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80160f2:	8b7a      	ldrh	r2, [r7, #26]
 80160f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80160f6:	429a      	cmp	r2, r3
 80160f8:	f0c0 80a0 	bcc.w	801623c <ip4_reass+0x2ac>
 80160fc:	8b7b      	ldrh	r3, [r7, #26]
 80160fe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016102:	4293      	cmp	r3, r2
 8016104:	f200 809a 	bhi.w	801623c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016108:	69fa      	ldr	r2, [r7, #28]
 801610a:	6879      	ldr	r1, [r7, #4]
 801610c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801610e:	f7ff fdd5 	bl	8015cbc <ip_reass_chain_frag_into_datagram_and_validate>
 8016112:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801611a:	f000 809b 	beq.w	8016254 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801611e:	4b48      	ldr	r3, [pc, #288]	; (8016240 <ip4_reass+0x2b0>)
 8016120:	881a      	ldrh	r2, [r3, #0]
 8016122:	8c3b      	ldrh	r3, [r7, #32]
 8016124:	4413      	add	r3, r2
 8016126:	b29a      	uxth	r2, r3
 8016128:	4b45      	ldr	r3, [pc, #276]	; (8016240 <ip4_reass+0x2b0>)
 801612a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801612c:	69fb      	ldr	r3, [r7, #28]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d00d      	beq.n	801614e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016132:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016136:	4413      	add	r3, r2
 8016138:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801613c:	8a7a      	ldrh	r2, [r7, #18]
 801613e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016142:	7f9b      	ldrb	r3, [r3, #30]
 8016144:	f043 0301 	orr.w	r3, r3, #1
 8016148:	b2da      	uxtb	r2, r3
 801614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801614e:	697b      	ldr	r3, [r7, #20]
 8016150:	2b01      	cmp	r3, #1
 8016152:	d171      	bne.n	8016238 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016156:	8b9b      	ldrh	r3, [r3, #28]
 8016158:	3314      	adds	r3, #20
 801615a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016170:	3308      	adds	r3, #8
 8016172:	2214      	movs	r2, #20
 8016174:	4619      	mov	r1, r3
 8016176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016178:	f009 fbc8 	bl	801f90c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801617c:	8a3b      	ldrh	r3, [r7, #16]
 801617e:	4618      	mov	r0, r3
 8016180:	f7fd fe52 	bl	8013e28 <lwip_htons>
 8016184:	4603      	mov	r3, r0
 8016186:	461a      	mov	r2, r3
 8016188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801618a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801618e:	2200      	movs	r2, #0
 8016190:	719a      	strb	r2, [r3, #6]
 8016192:	2200      	movs	r2, #0
 8016194:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016198:	2200      	movs	r2, #0
 801619a:	729a      	strb	r2, [r3, #10]
 801619c:	2200      	movs	r2, #0
 801619e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80161a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80161a6:	e00d      	b.n	80161c4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80161a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161aa:	685b      	ldr	r3, [r3, #4]
 80161ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80161ae:	2114      	movs	r1, #20
 80161b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80161b2:	f001 fd87 	bl	8017cc4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80161b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80161b8:	6878      	ldr	r0, [r7, #4]
 80161ba:	f001 fed7 	bl	8017f6c <pbuf_cat>
      r = iprh->next_pbuf;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80161c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d1ee      	bne.n	80161a8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80161ca:	4b1e      	ldr	r3, [pc, #120]	; (8016244 <ip4_reass+0x2b4>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d102      	bne.n	80161da <ip4_reass+0x24a>
      ipr_prev = NULL;
 80161d4:	2300      	movs	r3, #0
 80161d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161d8:	e010      	b.n	80161fc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161da:	4b1a      	ldr	r3, [pc, #104]	; (8016244 <ip4_reass+0x2b4>)
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161e0:	e007      	b.n	80161f2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80161e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161e8:	429a      	cmp	r2, r3
 80161ea:	d006      	beq.n	80161fa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80161ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d1f4      	bne.n	80161e2 <ip4_reass+0x252>
 80161f8:	e000      	b.n	80161fc <ip4_reass+0x26c>
          break;
 80161fa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80161fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80161fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016200:	f7ff fd2e 	bl	8015c60 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f001 fe71 	bl	8017eec <pbuf_clen>
 801620a:	4603      	mov	r3, r0
 801620c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801620e:	4b0c      	ldr	r3, [pc, #48]	; (8016240 <ip4_reass+0x2b0>)
 8016210:	881b      	ldrh	r3, [r3, #0]
 8016212:	8c3a      	ldrh	r2, [r7, #32]
 8016214:	429a      	cmp	r2, r3
 8016216:	d906      	bls.n	8016226 <ip4_reass+0x296>
 8016218:	4b0b      	ldr	r3, [pc, #44]	; (8016248 <ip4_reass+0x2b8>)
 801621a:	f240 229b 	movw	r2, #667	; 0x29b
 801621e:	490b      	ldr	r1, [pc, #44]	; (801624c <ip4_reass+0x2bc>)
 8016220:	480b      	ldr	r0, [pc, #44]	; (8016250 <ip4_reass+0x2c0>)
 8016222:	f009 ff71 	bl	8020108 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016226:	4b06      	ldr	r3, [pc, #24]	; (8016240 <ip4_reass+0x2b0>)
 8016228:	881a      	ldrh	r2, [r3, #0]
 801622a:	8c3b      	ldrh	r3, [r7, #32]
 801622c:	1ad3      	subs	r3, r2, r3
 801622e:	b29a      	uxth	r2, r3
 8016230:	4b03      	ldr	r3, [pc, #12]	; (8016240 <ip4_reass+0x2b0>)
 8016232:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	e038      	b.n	80162aa <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016238:	2300      	movs	r3, #0
 801623a:	e036      	b.n	80162aa <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801623c:	bf00      	nop
 801623e:	e00a      	b.n	8016256 <ip4_reass+0x2c6>
 8016240:	24009568 	.word	0x24009568
 8016244:	24009564 	.word	0x24009564
 8016248:	08021fb8 	.word	0x08021fb8
 801624c:	08022168 	.word	0x08022168
 8016250:	08022040 	.word	0x08022040
    goto nullreturn_ipr;
 8016254:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016258:	2b00      	cmp	r3, #0
 801625a:	d106      	bne.n	801626a <ip4_reass+0x2da>
 801625c:	4b15      	ldr	r3, [pc, #84]	; (80162b4 <ip4_reass+0x324>)
 801625e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016262:	4915      	ldr	r1, [pc, #84]	; (80162b8 <ip4_reass+0x328>)
 8016264:	4815      	ldr	r0, [pc, #84]	; (80162bc <ip4_reass+0x32c>)
 8016266:	f009 ff4f 	bl	8020108 <iprintf>
  if (ipr->p == NULL) {
 801626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626c:	685b      	ldr	r3, [r3, #4]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d116      	bne.n	80162a0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016272:	4b13      	ldr	r3, [pc, #76]	; (80162c0 <ip4_reass+0x330>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016278:	429a      	cmp	r2, r3
 801627a:	d006      	beq.n	801628a <ip4_reass+0x2fa>
 801627c:	4b0d      	ldr	r3, [pc, #52]	; (80162b4 <ip4_reass+0x324>)
 801627e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016282:	4910      	ldr	r1, [pc, #64]	; (80162c4 <ip4_reass+0x334>)
 8016284:	480d      	ldr	r0, [pc, #52]	; (80162bc <ip4_reass+0x32c>)
 8016286:	f009 ff3f 	bl	8020108 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801628a:	2100      	movs	r1, #0
 801628c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801628e:	f7ff fce7 	bl	8015c60 <ip_reass_dequeue_datagram>
 8016292:	e006      	b.n	80162a2 <ip4_reass+0x312>
    goto nullreturn;
 8016294:	bf00      	nop
 8016296:	e004      	b.n	80162a2 <ip4_reass+0x312>
    goto nullreturn;
 8016298:	bf00      	nop
 801629a:	e002      	b.n	80162a2 <ip4_reass+0x312>
      goto nullreturn;
 801629c:	bf00      	nop
 801629e:	e000      	b.n	80162a2 <ip4_reass+0x312>
  }

nullreturn:
 80162a0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f001 fd94 	bl	8017dd0 <pbuf_free>
  return NULL;
 80162a8:	2300      	movs	r3, #0
}
 80162aa:	4618      	mov	r0, r3
 80162ac:	3738      	adds	r7, #56	; 0x38
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}
 80162b2:	bf00      	nop
 80162b4:	08021fb8 	.word	0x08021fb8
 80162b8:	08022184 	.word	0x08022184
 80162bc:	08022040 	.word	0x08022040
 80162c0:	24009564 	.word	0x24009564
 80162c4:	08022190 	.word	0x08022190

080162c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80162cc:	2005      	movs	r0, #5
 80162ce:	f000 fe15 	bl	8016efc <memp_malloc>
 80162d2:	4603      	mov	r3, r0
}
 80162d4:	4618      	mov	r0, r3
 80162d6:	bd80      	pop	{r7, pc}

080162d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d106      	bne.n	80162f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80162e6:	4b07      	ldr	r3, [pc, #28]	; (8016304 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80162e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80162ec:	4906      	ldr	r1, [pc, #24]	; (8016308 <ip_frag_free_pbuf_custom_ref+0x30>)
 80162ee:	4807      	ldr	r0, [pc, #28]	; (801630c <ip_frag_free_pbuf_custom_ref+0x34>)
 80162f0:	f009 ff0a 	bl	8020108 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80162f4:	6879      	ldr	r1, [r7, #4]
 80162f6:	2005      	movs	r0, #5
 80162f8:	f000 fe76 	bl	8016fe8 <memp_free>
}
 80162fc:	bf00      	nop
 80162fe:	3708      	adds	r7, #8
 8016300:	46bd      	mov	sp, r7
 8016302:	bd80      	pop	{r7, pc}
 8016304:	08021fb8 	.word	0x08021fb8
 8016308:	080221b0 	.word	0x080221b0
 801630c:	08022040 	.word	0x08022040

08016310 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b084      	sub	sp, #16
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d106      	bne.n	8016330 <ipfrag_free_pbuf_custom+0x20>
 8016322:	4b11      	ldr	r3, [pc, #68]	; (8016368 <ipfrag_free_pbuf_custom+0x58>)
 8016324:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016328:	4910      	ldr	r1, [pc, #64]	; (801636c <ipfrag_free_pbuf_custom+0x5c>)
 801632a:	4811      	ldr	r0, [pc, #68]	; (8016370 <ipfrag_free_pbuf_custom+0x60>)
 801632c:	f009 feec 	bl	8020108 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016330:	68fa      	ldr	r2, [r7, #12]
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	429a      	cmp	r2, r3
 8016336:	d006      	beq.n	8016346 <ipfrag_free_pbuf_custom+0x36>
 8016338:	4b0b      	ldr	r3, [pc, #44]	; (8016368 <ipfrag_free_pbuf_custom+0x58>)
 801633a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801633e:	490d      	ldr	r1, [pc, #52]	; (8016374 <ipfrag_free_pbuf_custom+0x64>)
 8016340:	480b      	ldr	r0, [pc, #44]	; (8016370 <ipfrag_free_pbuf_custom+0x60>)
 8016342:	f009 fee1 	bl	8020108 <iprintf>
  if (pcr->original != NULL) {
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	695b      	ldr	r3, [r3, #20]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d004      	beq.n	8016358 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	695b      	ldr	r3, [r3, #20]
 8016352:	4618      	mov	r0, r3
 8016354:	f001 fd3c 	bl	8017dd0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016358:	68f8      	ldr	r0, [r7, #12]
 801635a:	f7ff ffbd 	bl	80162d8 <ip_frag_free_pbuf_custom_ref>
}
 801635e:	bf00      	nop
 8016360:	3710      	adds	r7, #16
 8016362:	46bd      	mov	sp, r7
 8016364:	bd80      	pop	{r7, pc}
 8016366:	bf00      	nop
 8016368:	08021fb8 	.word	0x08021fb8
 801636c:	080221bc 	.word	0x080221bc
 8016370:	08022040 	.word	0x08022040
 8016374:	080221c8 	.word	0x080221c8

08016378 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b094      	sub	sp, #80	; 0x50
 801637c:	af02      	add	r7, sp, #8
 801637e:	60f8      	str	r0, [r7, #12]
 8016380:	60b9      	str	r1, [r7, #8]
 8016382:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016384:	2300      	movs	r3, #0
 8016386:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801638a:	68bb      	ldr	r3, [r7, #8]
 801638c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801638e:	3b14      	subs	r3, #20
 8016390:	2b00      	cmp	r3, #0
 8016392:	da00      	bge.n	8016396 <ip4_frag+0x1e>
 8016394:	3307      	adds	r3, #7
 8016396:	10db      	asrs	r3, r3, #3
 8016398:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801639a:	2314      	movs	r3, #20
 801639c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80163a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80163a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163aa:	781b      	ldrb	r3, [r3, #0]
 80163ac:	f003 030f 	and.w	r3, r3, #15
 80163b0:	b2db      	uxtb	r3, r3
 80163b2:	009b      	lsls	r3, r3, #2
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	2b14      	cmp	r3, #20
 80163b8:	d002      	beq.n	80163c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80163ba:	f06f 0305 	mvn.w	r3, #5
 80163be:	e110      	b.n	80165e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	895b      	ldrh	r3, [r3, #10]
 80163c4:	2b13      	cmp	r3, #19
 80163c6:	d809      	bhi.n	80163dc <ip4_frag+0x64>
 80163c8:	4b88      	ldr	r3, [pc, #544]	; (80165ec <ip4_frag+0x274>)
 80163ca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80163ce:	4988      	ldr	r1, [pc, #544]	; (80165f0 <ip4_frag+0x278>)
 80163d0:	4888      	ldr	r0, [pc, #544]	; (80165f4 <ip4_frag+0x27c>)
 80163d2:	f009 fe99 	bl	8020108 <iprintf>
 80163d6:	f06f 0305 	mvn.w	r3, #5
 80163da:	e102      	b.n	80165e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80163dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163de:	88db      	ldrh	r3, [r3, #6]
 80163e0:	b29b      	uxth	r3, r3
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7fd fd20 	bl	8013e28 <lwip_htons>
 80163e8:	4603      	mov	r3, r0
 80163ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80163ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80163f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80163fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	891b      	ldrh	r3, [r3, #8]
 8016402:	3b14      	subs	r3, #20
 8016404:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016408:	e0e1      	b.n	80165ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801640a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801640c:	00db      	lsls	r3, r3, #3
 801640e:	b29b      	uxth	r3, r3
 8016410:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016414:	4293      	cmp	r3, r2
 8016416:	bf28      	it	cs
 8016418:	4613      	movcs	r3, r2
 801641a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801641c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016420:	2114      	movs	r1, #20
 8016422:	200e      	movs	r0, #14
 8016424:	f001 f9f0 	bl	8017808 <pbuf_alloc>
 8016428:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642c:	2b00      	cmp	r3, #0
 801642e:	f000 80d5 	beq.w	80165dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016434:	895b      	ldrh	r3, [r3, #10]
 8016436:	2b13      	cmp	r3, #19
 8016438:	d806      	bhi.n	8016448 <ip4_frag+0xd0>
 801643a:	4b6c      	ldr	r3, [pc, #432]	; (80165ec <ip4_frag+0x274>)
 801643c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016440:	496d      	ldr	r1, [pc, #436]	; (80165f8 <ip4_frag+0x280>)
 8016442:	486c      	ldr	r0, [pc, #432]	; (80165f4 <ip4_frag+0x27c>)
 8016444:	f009 fe60 	bl	8020108 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801644a:	685b      	ldr	r3, [r3, #4]
 801644c:	2214      	movs	r2, #20
 801644e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016450:	4618      	mov	r0, r3
 8016452:	f009 fa5b 	bl	801f90c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016458:	685b      	ldr	r3, [r3, #4]
 801645a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801645c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801645e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016462:	e064      	b.n	801652e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	895a      	ldrh	r2, [r3, #10]
 8016468:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801646a:	1ad3      	subs	r3, r2, r3
 801646c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	895b      	ldrh	r3, [r3, #10]
 8016472:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016474:	429a      	cmp	r2, r3
 8016476:	d906      	bls.n	8016486 <ip4_frag+0x10e>
 8016478:	4b5c      	ldr	r3, [pc, #368]	; (80165ec <ip4_frag+0x274>)
 801647a:	f240 322d 	movw	r2, #813	; 0x32d
 801647e:	495f      	ldr	r1, [pc, #380]	; (80165fc <ip4_frag+0x284>)
 8016480:	485c      	ldr	r0, [pc, #368]	; (80165f4 <ip4_frag+0x27c>)
 8016482:	f009 fe41 	bl	8020108 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016486:	8bfa      	ldrh	r2, [r7, #30]
 8016488:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801648c:	4293      	cmp	r3, r2
 801648e:	bf28      	it	cs
 8016490:	4613      	movcs	r3, r2
 8016492:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016496:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801649a:	2b00      	cmp	r3, #0
 801649c:	d105      	bne.n	80164aa <ip4_frag+0x132>
        poff = 0;
 801649e:	2300      	movs	r3, #0
 80164a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	60fb      	str	r3, [r7, #12]
        continue;
 80164a8:	e041      	b.n	801652e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80164aa:	f7ff ff0d 	bl	80162c8 <ip_frag_alloc_pbuf_custom_ref>
 80164ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80164b0:	69bb      	ldr	r3, [r7, #24]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d103      	bne.n	80164be <ip4_frag+0x146>
        pbuf_free(rambuf);
 80164b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164b8:	f001 fc8a 	bl	8017dd0 <pbuf_free>
        goto memerr;
 80164bc:	e08f      	b.n	80165de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80164be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80164c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164c6:	4413      	add	r3, r2
 80164c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80164cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80164d0:	9201      	str	r2, [sp, #4]
 80164d2:	9300      	str	r3, [sp, #0]
 80164d4:	4603      	mov	r3, r0
 80164d6:	2241      	movs	r2, #65	; 0x41
 80164d8:	2000      	movs	r0, #0
 80164da:	f001 fac1 	bl	8017a60 <pbuf_alloced_custom>
 80164de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d106      	bne.n	80164f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80164e6:	69b8      	ldr	r0, [r7, #24]
 80164e8:	f7ff fef6 	bl	80162d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80164ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164ee:	f001 fc6f 	bl	8017dd0 <pbuf_free>
        goto memerr;
 80164f2:	e074      	b.n	80165de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80164f4:	68f8      	ldr	r0, [r7, #12]
 80164f6:	f001 fd11 	bl	8017f1c <pbuf_ref>
      pcr->original = p;
 80164fa:	69bb      	ldr	r3, [r7, #24]
 80164fc:	68fa      	ldr	r2, [r7, #12]
 80164fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016500:	69bb      	ldr	r3, [r7, #24]
 8016502:	4a3f      	ldr	r2, [pc, #252]	; (8016600 <ip4_frag+0x288>)
 8016504:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016506:	6979      	ldr	r1, [r7, #20]
 8016508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801650a:	f001 fd2f 	bl	8017f6c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801650e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016512:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016516:	1ad3      	subs	r3, r2, r3
 8016518:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801651c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016520:	2b00      	cmp	r3, #0
 8016522:	d004      	beq.n	801652e <ip4_frag+0x1b6>
        poff = 0;
 8016524:	2300      	movs	r3, #0
 8016526:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801652e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016532:	2b00      	cmp	r3, #0
 8016534:	d196      	bne.n	8016464 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016536:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016538:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801653c:	4413      	add	r3, r2
 801653e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016544:	f1a3 0213 	sub.w	r2, r3, #19
 8016548:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801654c:	429a      	cmp	r2, r3
 801654e:	bfcc      	ite	gt
 8016550:	2301      	movgt	r3, #1
 8016552:	2300      	movle	r3, #0
 8016554:	b2db      	uxtb	r3, r3
 8016556:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016558:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801655c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016560:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016562:	6a3b      	ldr	r3, [r7, #32]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d002      	beq.n	801656e <ip4_frag+0x1f6>
 8016568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656a:	2b00      	cmp	r3, #0
 801656c:	d003      	beq.n	8016576 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801656e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016574:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016576:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016578:	4618      	mov	r0, r3
 801657a:	f7fd fc55 	bl	8013e28 <lwip_htons>
 801657e:	4603      	mov	r3, r0
 8016580:	461a      	mov	r2, r3
 8016582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016584:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016586:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016588:	3314      	adds	r3, #20
 801658a:	b29b      	uxth	r3, r3
 801658c:	4618      	mov	r0, r3
 801658e:	f7fd fc4b 	bl	8013e28 <lwip_htons>
 8016592:	4603      	mov	r3, r0
 8016594:	461a      	mov	r2, r3
 8016596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016598:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801659c:	2200      	movs	r2, #0
 801659e:	729a      	strb	r2, [r3, #10]
 80165a0:	2200      	movs	r2, #0
 80165a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80165a4:	68bb      	ldr	r3, [r7, #8]
 80165a6:	695b      	ldr	r3, [r3, #20]
 80165a8:	687a      	ldr	r2, [r7, #4]
 80165aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165ac:	68b8      	ldr	r0, [r7, #8]
 80165ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80165b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165b2:	f001 fc0d 	bl	8017dd0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80165b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80165ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80165bc:	1ad3      	subs	r3, r2, r3
 80165be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80165c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80165c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80165c8:	4413      	add	r3, r2
 80165ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80165ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	f47f af19 	bne.w	801640a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80165d8:	2300      	movs	r3, #0
 80165da:	e002      	b.n	80165e2 <ip4_frag+0x26a>
      goto memerr;
 80165dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80165de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3748      	adds	r7, #72	; 0x48
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}
 80165ea:	bf00      	nop
 80165ec:	08021fb8 	.word	0x08021fb8
 80165f0:	080221d4 	.word	0x080221d4
 80165f4:	08022040 	.word	0x08022040
 80165f8:	080221f0 	.word	0x080221f0
 80165fc:	08022210 	.word	0x08022210
 8016600:	08016311 	.word	0x08016311

08016604 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8016604:	b480      	push	{r7}
 8016606:	b083      	sub	sp, #12
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 801660c:	4b04      	ldr	r3, [pc, #16]	; (8016620 <ptr_to_mem+0x1c>)
 801660e:	681a      	ldr	r2, [r3, #0]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	4413      	add	r3, r2
}
 8016614:	4618      	mov	r0, r3
 8016616:	370c      	adds	r7, #12
 8016618:	46bd      	mov	sp, r7
 801661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661e:	4770      	bx	lr
 8016620:	2400956c 	.word	0x2400956c

08016624 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8016624:	b480      	push	{r7}
 8016626:	b083      	sub	sp, #12
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801662c:	4b04      	ldr	r3, [pc, #16]	; (8016640 <mem_to_ptr+0x1c>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	687a      	ldr	r2, [r7, #4]
 8016632:	1ad3      	subs	r3, r2, r3
}
 8016634:	4618      	mov	r0, r3
 8016636:	370c      	adds	r7, #12
 8016638:	46bd      	mov	sp, r7
 801663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663e:	4770      	bx	lr
 8016640:	2400956c 	.word	0x2400956c

08016644 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8016644:	b590      	push	{r4, r7, lr}
 8016646:	b085      	sub	sp, #20
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801664c:	4b45      	ldr	r3, [pc, #276]	; (8016764 <plug_holes+0x120>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	687a      	ldr	r2, [r7, #4]
 8016652:	429a      	cmp	r2, r3
 8016654:	d206      	bcs.n	8016664 <plug_holes+0x20>
 8016656:	4b44      	ldr	r3, [pc, #272]	; (8016768 <plug_holes+0x124>)
 8016658:	f240 12df 	movw	r2, #479	; 0x1df
 801665c:	4943      	ldr	r1, [pc, #268]	; (801676c <plug_holes+0x128>)
 801665e:	4844      	ldr	r0, [pc, #272]	; (8016770 <plug_holes+0x12c>)
 8016660:	f009 fd52 	bl	8020108 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8016664:	4b43      	ldr	r3, [pc, #268]	; (8016774 <plug_holes+0x130>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	687a      	ldr	r2, [r7, #4]
 801666a:	429a      	cmp	r2, r3
 801666c:	d306      	bcc.n	801667c <plug_holes+0x38>
 801666e:	4b3e      	ldr	r3, [pc, #248]	; (8016768 <plug_holes+0x124>)
 8016670:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016674:	4940      	ldr	r1, [pc, #256]	; (8016778 <plug_holes+0x134>)
 8016676:	483e      	ldr	r0, [pc, #248]	; (8016770 <plug_holes+0x12c>)
 8016678:	f009 fd46 	bl	8020108 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	7a1b      	ldrb	r3, [r3, #8]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d006      	beq.n	8016692 <plug_holes+0x4e>
 8016684:	4b38      	ldr	r3, [pc, #224]	; (8016768 <plug_holes+0x124>)
 8016686:	f240 12e1 	movw	r2, #481	; 0x1e1
 801668a:	493c      	ldr	r1, [pc, #240]	; (801677c <plug_holes+0x138>)
 801668c:	4838      	ldr	r0, [pc, #224]	; (8016770 <plug_holes+0x12c>)
 801668e:	f009 fd3b 	bl	8020108 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	4a3a      	ldr	r2, [pc, #232]	; (8016780 <plug_holes+0x13c>)
 8016698:	4293      	cmp	r3, r2
 801669a:	d906      	bls.n	80166aa <plug_holes+0x66>
 801669c:	4b32      	ldr	r3, [pc, #200]	; (8016768 <plug_holes+0x124>)
 801669e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80166a2:	4938      	ldr	r1, [pc, #224]	; (8016784 <plug_holes+0x140>)
 80166a4:	4832      	ldr	r0, [pc, #200]	; (8016770 <plug_holes+0x12c>)
 80166a6:	f009 fd2f 	bl	8020108 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	4618      	mov	r0, r3
 80166b0:	f7ff ffa8 	bl	8016604 <ptr_to_mem>
 80166b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80166b6:	687a      	ldr	r2, [r7, #4]
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d024      	beq.n	8016708 <plug_holes+0xc4>
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	7a1b      	ldrb	r3, [r3, #8]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d120      	bne.n	8016708 <plug_holes+0xc4>
 80166c6:	4b2b      	ldr	r3, [pc, #172]	; (8016774 <plug_holes+0x130>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	68fa      	ldr	r2, [r7, #12]
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d01b      	beq.n	8016708 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80166d0:	4b2d      	ldr	r3, [pc, #180]	; (8016788 <plug_holes+0x144>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	68fa      	ldr	r2, [r7, #12]
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d102      	bne.n	80166e0 <plug_holes+0x9c>
      lfree = mem;
 80166da:	4a2b      	ldr	r2, [pc, #172]	; (8016788 <plug_holes+0x144>)
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4a24      	ldr	r2, [pc, #144]	; (8016780 <plug_holes+0x13c>)
 80166ee:	4293      	cmp	r3, r2
 80166f0:	d00a      	beq.n	8016708 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	4618      	mov	r0, r3
 80166f8:	f7ff ff84 	bl	8016604 <ptr_to_mem>
 80166fc:	4604      	mov	r4, r0
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f7ff ff90 	bl	8016624 <mem_to_ptr>
 8016704:	4603      	mov	r3, r0
 8016706:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	4618      	mov	r0, r3
 801670e:	f7ff ff79 	bl	8016604 <ptr_to_mem>
 8016712:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8016714:	68ba      	ldr	r2, [r7, #8]
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	429a      	cmp	r2, r3
 801671a:	d01f      	beq.n	801675c <plug_holes+0x118>
 801671c:	68bb      	ldr	r3, [r7, #8]
 801671e:	7a1b      	ldrb	r3, [r3, #8]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d11b      	bne.n	801675c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8016724:	4b18      	ldr	r3, [pc, #96]	; (8016788 <plug_holes+0x144>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	687a      	ldr	r2, [r7, #4]
 801672a:	429a      	cmp	r2, r3
 801672c:	d102      	bne.n	8016734 <plug_holes+0xf0>
      lfree = pmem;
 801672e:	4a16      	ldr	r2, [pc, #88]	; (8016788 <plug_holes+0x144>)
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681a      	ldr	r2, [r3, #0]
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	4a0f      	ldr	r2, [pc, #60]	; (8016780 <plug_holes+0x13c>)
 8016742:	4293      	cmp	r3, r2
 8016744:	d00a      	beq.n	801675c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	4618      	mov	r0, r3
 801674c:	f7ff ff5a 	bl	8016604 <ptr_to_mem>
 8016750:	4604      	mov	r4, r0
 8016752:	68b8      	ldr	r0, [r7, #8]
 8016754:	f7ff ff66 	bl	8016624 <mem_to_ptr>
 8016758:	4603      	mov	r3, r0
 801675a:	6063      	str	r3, [r4, #4]
    }
  }
}
 801675c:	bf00      	nop
 801675e:	3714      	adds	r7, #20
 8016760:	46bd      	mov	sp, r7
 8016762:	bd90      	pop	{r4, r7, pc}
 8016764:	2400956c 	.word	0x2400956c
 8016768:	08022220 	.word	0x08022220
 801676c:	08022294 	.word	0x08022294
 8016770:	080222ac 	.word	0x080222ac
 8016774:	24009570 	.word	0x24009570
 8016778:	080222d4 	.word	0x080222d4
 801677c:	080222f0 	.word	0x080222f0
 8016780:	0001ffe8 	.word	0x0001ffe8
 8016784:	0802230c 	.word	0x0802230c
 8016788:	24009578 	.word	0x24009578

0801678c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016792:	4b1b      	ldr	r3, [pc, #108]	; (8016800 <mem_init+0x74>)
 8016794:	4a1b      	ldr	r2, [pc, #108]	; (8016804 <mem_init+0x78>)
 8016796:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8016798:	4b19      	ldr	r3, [pc, #100]	; (8016800 <mem_init+0x74>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	4a19      	ldr	r2, [pc, #100]	; (8016808 <mem_init+0x7c>)
 80167a2:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	2200      	movs	r2, #0
 80167a8:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	2200      	movs	r2, #0
 80167ae:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80167b0:	4815      	ldr	r0, [pc, #84]	; (8016808 <mem_init+0x7c>)
 80167b2:	f7ff ff27 	bl	8016604 <ptr_to_mem>
 80167b6:	4603      	mov	r3, r0
 80167b8:	4a14      	ldr	r2, [pc, #80]	; (801680c <mem_init+0x80>)
 80167ba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80167bc:	4b13      	ldr	r3, [pc, #76]	; (801680c <mem_init+0x80>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	2201      	movs	r2, #1
 80167c2:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80167c4:	4b11      	ldr	r3, [pc, #68]	; (801680c <mem_init+0x80>)
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	4a0f      	ldr	r2, [pc, #60]	; (8016808 <mem_init+0x7c>)
 80167ca:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80167cc:	4b0f      	ldr	r3, [pc, #60]	; (801680c <mem_init+0x80>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	4a0d      	ldr	r2, [pc, #52]	; (8016808 <mem_init+0x7c>)
 80167d2:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80167d4:	4b0a      	ldr	r3, [pc, #40]	; (8016800 <mem_init+0x74>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	4a0d      	ldr	r2, [pc, #52]	; (8016810 <mem_init+0x84>)
 80167da:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80167dc:	480d      	ldr	r0, [pc, #52]	; (8016814 <mem_init+0x88>)
 80167de:	f001 fef7 	bl	80185d0 <sys_mutex_new>
 80167e2:	4603      	mov	r3, r0
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d006      	beq.n	80167f6 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80167e8:	4b0b      	ldr	r3, [pc, #44]	; (8016818 <mem_init+0x8c>)
 80167ea:	f240 221f 	movw	r2, #543	; 0x21f
 80167ee:	490b      	ldr	r1, [pc, #44]	; (801681c <mem_init+0x90>)
 80167f0:	480b      	ldr	r0, [pc, #44]	; (8016820 <mem_init+0x94>)
 80167f2:	f009 fc89 	bl	8020108 <iprintf>
  }
}
 80167f6:	bf00      	nop
 80167f8:	3708      	adds	r7, #8
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	2400956c 	.word	0x2400956c
 8016804:	30020000 	.word	0x30020000
 8016808:	0001ffe8 	.word	0x0001ffe8
 801680c:	24009570 	.word	0x24009570
 8016810:	24009578 	.word	0x24009578
 8016814:	24009574 	.word	0x24009574
 8016818:	08022220 	.word	0x08022220
 801681c:	08022338 	.word	0x08022338
 8016820:	080222ac 	.word	0x080222ac

08016824 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b086      	sub	sp, #24
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f7ff fef9 	bl	8016624 <mem_to_ptr>
 8016832:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	4618      	mov	r0, r3
 801683a:	f7ff fee3 	bl	8016604 <ptr_to_mem>
 801683e:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	4618      	mov	r0, r3
 8016846:	f7ff fedd 	bl	8016604 <ptr_to_mem>
 801684a:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4a11      	ldr	r2, [pc, #68]	; (8016898 <mem_link_valid+0x74>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d818      	bhi.n	8016888 <mem_link_valid+0x64>
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	4a0f      	ldr	r2, [pc, #60]	; (8016898 <mem_link_valid+0x74>)
 801685c:	4293      	cmp	r3, r2
 801685e:	d813      	bhi.n	8016888 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016864:	697a      	ldr	r2, [r7, #20]
 8016866:	429a      	cmp	r2, r3
 8016868:	d004      	beq.n	8016874 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	697a      	ldr	r2, [r7, #20]
 8016870:	429a      	cmp	r2, r3
 8016872:	d109      	bne.n	8016888 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016874:	4b09      	ldr	r3, [pc, #36]	; (801689c <mem_link_valid+0x78>)
 8016876:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016878:	693a      	ldr	r2, [r7, #16]
 801687a:	429a      	cmp	r2, r3
 801687c:	d006      	beq.n	801688c <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801687e:	693b      	ldr	r3, [r7, #16]
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	697a      	ldr	r2, [r7, #20]
 8016884:	429a      	cmp	r2, r3
 8016886:	d001      	beq.n	801688c <mem_link_valid+0x68>
    return 0;
 8016888:	2300      	movs	r3, #0
 801688a:	e000      	b.n	801688e <mem_link_valid+0x6a>
  }
  return 1;
 801688c:	2301      	movs	r3, #1
}
 801688e:	4618      	mov	r0, r3
 8016890:	3718      	adds	r7, #24
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}
 8016896:	bf00      	nop
 8016898:	0001ffe8 	.word	0x0001ffe8
 801689c:	24009570 	.word	0x24009570

080168a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b088      	sub	sp, #32
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d070      	beq.n	8016990 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f003 0303 	and.w	r3, r3, #3
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d00d      	beq.n	80168d4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80168b8:	4b37      	ldr	r3, [pc, #220]	; (8016998 <mem_free+0xf8>)
 80168ba:	f240 2273 	movw	r2, #627	; 0x273
 80168be:	4937      	ldr	r1, [pc, #220]	; (801699c <mem_free+0xfc>)
 80168c0:	4837      	ldr	r0, [pc, #220]	; (80169a0 <mem_free+0x100>)
 80168c2:	f009 fc21 	bl	8020108 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80168c6:	f001 fee1 	bl	801868c <sys_arch_protect>
 80168ca:	60f8      	str	r0, [r7, #12]
 80168cc:	68f8      	ldr	r0, [r7, #12]
 80168ce:	f001 feeb 	bl	80186a8 <sys_arch_unprotect>
    return;
 80168d2:	e05e      	b.n	8016992 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	3b0c      	subs	r3, #12
 80168d8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80168da:	4b32      	ldr	r3, [pc, #200]	; (80169a4 <mem_free+0x104>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	69fa      	ldr	r2, [r7, #28]
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d306      	bcc.n	80168f2 <mem_free+0x52>
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	f103 020c 	add.w	r2, r3, #12
 80168ea:	4b2f      	ldr	r3, [pc, #188]	; (80169a8 <mem_free+0x108>)
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d90d      	bls.n	801690e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80168f2:	4b29      	ldr	r3, [pc, #164]	; (8016998 <mem_free+0xf8>)
 80168f4:	f240 227f 	movw	r2, #639	; 0x27f
 80168f8:	492c      	ldr	r1, [pc, #176]	; (80169ac <mem_free+0x10c>)
 80168fa:	4829      	ldr	r0, [pc, #164]	; (80169a0 <mem_free+0x100>)
 80168fc:	f009 fc04 	bl	8020108 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016900:	f001 fec4 	bl	801868c <sys_arch_protect>
 8016904:	6138      	str	r0, [r7, #16]
 8016906:	6938      	ldr	r0, [r7, #16]
 8016908:	f001 fece 	bl	80186a8 <sys_arch_unprotect>
    return;
 801690c:	e041      	b.n	8016992 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801690e:	4828      	ldr	r0, [pc, #160]	; (80169b0 <mem_free+0x110>)
 8016910:	f001 fe7a 	bl	8018608 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8016914:	69fb      	ldr	r3, [r7, #28]
 8016916:	7a1b      	ldrb	r3, [r3, #8]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d110      	bne.n	801693e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801691c:	4b1e      	ldr	r3, [pc, #120]	; (8016998 <mem_free+0xf8>)
 801691e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8016922:	4924      	ldr	r1, [pc, #144]	; (80169b4 <mem_free+0x114>)
 8016924:	481e      	ldr	r0, [pc, #120]	; (80169a0 <mem_free+0x100>)
 8016926:	f009 fbef 	bl	8020108 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801692a:	4821      	ldr	r0, [pc, #132]	; (80169b0 <mem_free+0x110>)
 801692c:	f001 fe7b 	bl	8018626 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016930:	f001 feac 	bl	801868c <sys_arch_protect>
 8016934:	6178      	str	r0, [r7, #20]
 8016936:	6978      	ldr	r0, [r7, #20]
 8016938:	f001 feb6 	bl	80186a8 <sys_arch_unprotect>
    return;
 801693c:	e029      	b.n	8016992 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801693e:	69f8      	ldr	r0, [r7, #28]
 8016940:	f7ff ff70 	bl	8016824 <mem_link_valid>
 8016944:	4603      	mov	r3, r0
 8016946:	2b00      	cmp	r3, #0
 8016948:	d110      	bne.n	801696c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801694a:	4b13      	ldr	r3, [pc, #76]	; (8016998 <mem_free+0xf8>)
 801694c:	f240 2295 	movw	r2, #661	; 0x295
 8016950:	4919      	ldr	r1, [pc, #100]	; (80169b8 <mem_free+0x118>)
 8016952:	4813      	ldr	r0, [pc, #76]	; (80169a0 <mem_free+0x100>)
 8016954:	f009 fbd8 	bl	8020108 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8016958:	4815      	ldr	r0, [pc, #84]	; (80169b0 <mem_free+0x110>)
 801695a:	f001 fe64 	bl	8018626 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801695e:	f001 fe95 	bl	801868c <sys_arch_protect>
 8016962:	61b8      	str	r0, [r7, #24]
 8016964:	69b8      	ldr	r0, [r7, #24]
 8016966:	f001 fe9f 	bl	80186a8 <sys_arch_unprotect>
    return;
 801696a:	e012      	b.n	8016992 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801696c:	69fb      	ldr	r3, [r7, #28]
 801696e:	2200      	movs	r2, #0
 8016970:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8016972:	4b12      	ldr	r3, [pc, #72]	; (80169bc <mem_free+0x11c>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	69fa      	ldr	r2, [r7, #28]
 8016978:	429a      	cmp	r2, r3
 801697a:	d202      	bcs.n	8016982 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801697c:	4a0f      	ldr	r2, [pc, #60]	; (80169bc <mem_free+0x11c>)
 801697e:	69fb      	ldr	r3, [r7, #28]
 8016980:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8016982:	69f8      	ldr	r0, [r7, #28]
 8016984:	f7ff fe5e 	bl	8016644 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016988:	4809      	ldr	r0, [pc, #36]	; (80169b0 <mem_free+0x110>)
 801698a:	f001 fe4c 	bl	8018626 <sys_mutex_unlock>
 801698e:	e000      	b.n	8016992 <mem_free+0xf2>
    return;
 8016990:	bf00      	nop
}
 8016992:	3720      	adds	r7, #32
 8016994:	46bd      	mov	sp, r7
 8016996:	bd80      	pop	{r7, pc}
 8016998:	08022220 	.word	0x08022220
 801699c:	08022354 	.word	0x08022354
 80169a0:	080222ac 	.word	0x080222ac
 80169a4:	2400956c 	.word	0x2400956c
 80169a8:	24009570 	.word	0x24009570
 80169ac:	08022378 	.word	0x08022378
 80169b0:	24009574 	.word	0x24009574
 80169b4:	08022394 	.word	0x08022394
 80169b8:	080223bc 	.word	0x080223bc
 80169bc:	24009578 	.word	0x24009578

080169c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b08a      	sub	sp, #40	; 0x28
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	3303      	adds	r3, #3
 80169ce:	f023 0303 	bic.w	r3, r3, #3
 80169d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 80169d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d6:	2b0b      	cmp	r3, #11
 80169d8:	d801      	bhi.n	80169de <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80169da:	230c      	movs	r3, #12
 80169dc:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80169de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e0:	4a6e      	ldr	r2, [pc, #440]	; (8016b9c <mem_trim+0x1dc>)
 80169e2:	4293      	cmp	r3, r2
 80169e4:	d803      	bhi.n	80169ee <mem_trim+0x2e>
 80169e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d201      	bcs.n	80169f2 <mem_trim+0x32>
    return NULL;
 80169ee:	2300      	movs	r3, #0
 80169f0:	e0d0      	b.n	8016b94 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80169f2:	4b6b      	ldr	r3, [pc, #428]	; (8016ba0 <mem_trim+0x1e0>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	429a      	cmp	r2, r3
 80169fa:	d304      	bcc.n	8016a06 <mem_trim+0x46>
 80169fc:	4b69      	ldr	r3, [pc, #420]	; (8016ba4 <mem_trim+0x1e4>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	687a      	ldr	r2, [r7, #4]
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d306      	bcc.n	8016a14 <mem_trim+0x54>
 8016a06:	4b68      	ldr	r3, [pc, #416]	; (8016ba8 <mem_trim+0x1e8>)
 8016a08:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016a0c:	4967      	ldr	r1, [pc, #412]	; (8016bac <mem_trim+0x1ec>)
 8016a0e:	4868      	ldr	r0, [pc, #416]	; (8016bb0 <mem_trim+0x1f0>)
 8016a10:	f009 fb7a 	bl	8020108 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8016a14:	4b62      	ldr	r3, [pc, #392]	; (8016ba0 <mem_trim+0x1e0>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	687a      	ldr	r2, [r7, #4]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d304      	bcc.n	8016a28 <mem_trim+0x68>
 8016a1e:	4b61      	ldr	r3, [pc, #388]	; (8016ba4 <mem_trim+0x1e4>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	687a      	ldr	r2, [r7, #4]
 8016a24:	429a      	cmp	r2, r3
 8016a26:	d307      	bcc.n	8016a38 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016a28:	f001 fe30 	bl	801868c <sys_arch_protect>
 8016a2c:	60b8      	str	r0, [r7, #8]
 8016a2e:	68b8      	ldr	r0, [r7, #8]
 8016a30:	f001 fe3a 	bl	80186a8 <sys_arch_unprotect>
    return rmem;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	e0ad      	b.n	8016b94 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	3b0c      	subs	r3, #12
 8016a3c:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8016a3e:	6a38      	ldr	r0, [r7, #32]
 8016a40:	f7ff fdf0 	bl	8016624 <mem_to_ptr>
 8016a44:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8016a46:	6a3b      	ldr	r3, [r7, #32]
 8016a48:	681a      	ldr	r2, [r3, #0]
 8016a4a:	69fb      	ldr	r3, [r7, #28]
 8016a4c:	1ad3      	subs	r3, r2, r3
 8016a4e:	3b0c      	subs	r3, #12
 8016a50:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8016a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a54:	69bb      	ldr	r3, [r7, #24]
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d906      	bls.n	8016a68 <mem_trim+0xa8>
 8016a5a:	4b53      	ldr	r3, [pc, #332]	; (8016ba8 <mem_trim+0x1e8>)
 8016a5c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8016a60:	4954      	ldr	r1, [pc, #336]	; (8016bb4 <mem_trim+0x1f4>)
 8016a62:	4853      	ldr	r0, [pc, #332]	; (8016bb0 <mem_trim+0x1f0>)
 8016a64:	f009 fb50 	bl	8020108 <iprintf>
  if (newsize > size) {
 8016a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a6a:	69bb      	ldr	r3, [r7, #24]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d901      	bls.n	8016a74 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8016a70:	2300      	movs	r3, #0
 8016a72:	e08f      	b.n	8016b94 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8016a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	d101      	bne.n	8016a80 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	e089      	b.n	8016b94 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016a80:	484d      	ldr	r0, [pc, #308]	; (8016bb8 <mem_trim+0x1f8>)
 8016a82:	f001 fdc1 	bl	8018608 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8016a86:	6a3b      	ldr	r3, [r7, #32]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f7ff fdba 	bl	8016604 <ptr_to_mem>
 8016a90:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	7a1b      	ldrb	r3, [r3, #8]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d13c      	bne.n	8016b14 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016a9a:	6a3b      	ldr	r3, [r7, #32]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	4a3f      	ldr	r2, [pc, #252]	; (8016b9c <mem_trim+0x1dc>)
 8016aa0:	4293      	cmp	r3, r2
 8016aa2:	d106      	bne.n	8016ab2 <mem_trim+0xf2>
 8016aa4:	4b40      	ldr	r3, [pc, #256]	; (8016ba8 <mem_trim+0x1e8>)
 8016aa6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8016aaa:	4944      	ldr	r1, [pc, #272]	; (8016bbc <mem_trim+0x1fc>)
 8016aac:	4840      	ldr	r0, [pc, #256]	; (8016bb0 <mem_trim+0x1f0>)
 8016aae:	f009 fb2b 	bl	8020108 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016ab8:	69fa      	ldr	r2, [r7, #28]
 8016aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016abc:	4413      	add	r3, r2
 8016abe:	330c      	adds	r3, #12
 8016ac0:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8016ac2:	4b3f      	ldr	r3, [pc, #252]	; (8016bc0 <mem_trim+0x200>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	697a      	ldr	r2, [r7, #20]
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d105      	bne.n	8016ad8 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8016acc:	6938      	ldr	r0, [r7, #16]
 8016ace:	f7ff fd99 	bl	8016604 <ptr_to_mem>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	4a3a      	ldr	r2, [pc, #232]	; (8016bc0 <mem_trim+0x200>)
 8016ad6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8016ad8:	6938      	ldr	r0, [r7, #16]
 8016ada:	f7ff fd93 	bl	8016604 <ptr_to_mem>
 8016ade:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	68fa      	ldr	r2, [r7, #12]
 8016aea:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	69fa      	ldr	r2, [r7, #28]
 8016af0:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8016af2:	6a3b      	ldr	r3, [r7, #32]
 8016af4:	693a      	ldr	r2, [r7, #16]
 8016af6:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	4a27      	ldr	r2, [pc, #156]	; (8016b9c <mem_trim+0x1dc>)
 8016afe:	4293      	cmp	r3, r2
 8016b00:	d044      	beq.n	8016b8c <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7ff fd7c 	bl	8016604 <ptr_to_mem>
 8016b0c:	4602      	mov	r2, r0
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	6053      	str	r3, [r2, #4]
 8016b12:	e03b      	b.n	8016b8c <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8016b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b16:	3318      	adds	r3, #24
 8016b18:	69ba      	ldr	r2, [r7, #24]
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d336      	bcc.n	8016b8c <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016b1e:	69fa      	ldr	r2, [r7, #28]
 8016b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b22:	4413      	add	r3, r2
 8016b24:	330c      	adds	r3, #12
 8016b26:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016b28:	6a3b      	ldr	r3, [r7, #32]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	4a1b      	ldr	r2, [pc, #108]	; (8016b9c <mem_trim+0x1dc>)
 8016b2e:	4293      	cmp	r3, r2
 8016b30:	d106      	bne.n	8016b40 <mem_trim+0x180>
 8016b32:	4b1d      	ldr	r3, [pc, #116]	; (8016ba8 <mem_trim+0x1e8>)
 8016b34:	f240 3216 	movw	r2, #790	; 0x316
 8016b38:	4920      	ldr	r1, [pc, #128]	; (8016bbc <mem_trim+0x1fc>)
 8016b3a:	481d      	ldr	r0, [pc, #116]	; (8016bb0 <mem_trim+0x1f0>)
 8016b3c:	f009 fae4 	bl	8020108 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8016b40:	6938      	ldr	r0, [r7, #16]
 8016b42:	f7ff fd5f 	bl	8016604 <ptr_to_mem>
 8016b46:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8016b48:	4b1d      	ldr	r3, [pc, #116]	; (8016bc0 <mem_trim+0x200>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	697a      	ldr	r2, [r7, #20]
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	d202      	bcs.n	8016b58 <mem_trim+0x198>
      lfree = mem2;
 8016b52:	4a1b      	ldr	r2, [pc, #108]	; (8016bc0 <mem_trim+0x200>)
 8016b54:	697b      	ldr	r3, [r7, #20]
 8016b56:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8016b58:	697b      	ldr	r3, [r7, #20]
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8016b5e:	6a3b      	ldr	r3, [r7, #32]
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	697b      	ldr	r3, [r7, #20]
 8016b64:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8016b66:	697b      	ldr	r3, [r7, #20]
 8016b68:	69fa      	ldr	r2, [r7, #28]
 8016b6a:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8016b6c:	6a3b      	ldr	r3, [r7, #32]
 8016b6e:	693a      	ldr	r2, [r7, #16]
 8016b70:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016b72:	697b      	ldr	r3, [r7, #20]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	4a09      	ldr	r2, [pc, #36]	; (8016b9c <mem_trim+0x1dc>)
 8016b78:	4293      	cmp	r3, r2
 8016b7a:	d007      	beq.n	8016b8c <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7ff fd3f 	bl	8016604 <ptr_to_mem>
 8016b86:	4602      	mov	r2, r0
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016b8c:	480a      	ldr	r0, [pc, #40]	; (8016bb8 <mem_trim+0x1f8>)
 8016b8e:	f001 fd4a 	bl	8018626 <sys_mutex_unlock>
  return rmem;
 8016b92:	687b      	ldr	r3, [r7, #4]
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	3728      	adds	r7, #40	; 0x28
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd80      	pop	{r7, pc}
 8016b9c:	0001ffe8 	.word	0x0001ffe8
 8016ba0:	2400956c 	.word	0x2400956c
 8016ba4:	24009570 	.word	0x24009570
 8016ba8:	08022220 	.word	0x08022220
 8016bac:	080223f0 	.word	0x080223f0
 8016bb0:	080222ac 	.word	0x080222ac
 8016bb4:	08022408 	.word	0x08022408
 8016bb8:	24009574 	.word	0x24009574
 8016bbc:	08022428 	.word	0x08022428
 8016bc0:	24009578 	.word	0x24009578

08016bc4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b088      	sub	sp, #32
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d101      	bne.n	8016bd6 <mem_malloc+0x12>
    return NULL;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	e0d9      	b.n	8016d8a <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	3303      	adds	r3, #3
 8016bda:	f023 0303 	bic.w	r3, r3, #3
 8016bde:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8016be0:	69bb      	ldr	r3, [r7, #24]
 8016be2:	2b0b      	cmp	r3, #11
 8016be4:	d801      	bhi.n	8016bea <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8016be6:	230c      	movs	r3, #12
 8016be8:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8016bea:	69bb      	ldr	r3, [r7, #24]
 8016bec:	4a69      	ldr	r2, [pc, #420]	; (8016d94 <mem_malloc+0x1d0>)
 8016bee:	4293      	cmp	r3, r2
 8016bf0:	d803      	bhi.n	8016bfa <mem_malloc+0x36>
 8016bf2:	69ba      	ldr	r2, [r7, #24]
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d201      	bcs.n	8016bfe <mem_malloc+0x3a>
    return NULL;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	e0c5      	b.n	8016d8a <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8016bfe:	4866      	ldr	r0, [pc, #408]	; (8016d98 <mem_malloc+0x1d4>)
 8016c00:	f001 fd02 	bl	8018608 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016c04:	4b65      	ldr	r3, [pc, #404]	; (8016d9c <mem_malloc+0x1d8>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f7ff fd0b 	bl	8016624 <mem_to_ptr>
 8016c0e:	61f8      	str	r0, [r7, #28]
 8016c10:	e0b0      	b.n	8016d74 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8016c12:	69f8      	ldr	r0, [r7, #28]
 8016c14:	f7ff fcf6 	bl	8016604 <ptr_to_mem>
 8016c18:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	7a1b      	ldrb	r3, [r3, #8]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	f040 80a2 	bne.w	8016d68 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	69fb      	ldr	r3, [r7, #28]
 8016c2a:	1ad3      	subs	r3, r2, r3
 8016c2c:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8016c2e:	69ba      	ldr	r2, [r7, #24]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	f200 8099 	bhi.w	8016d68 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8016c36:	693b      	ldr	r3, [r7, #16]
 8016c38:	681a      	ldr	r2, [r3, #0]
 8016c3a:	69fb      	ldr	r3, [r7, #28]
 8016c3c:	1ad3      	subs	r3, r2, r3
 8016c3e:	f1a3 020c 	sub.w	r2, r3, #12
 8016c42:	69bb      	ldr	r3, [r7, #24]
 8016c44:	3318      	adds	r3, #24
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d331      	bcc.n	8016cae <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8016c4a:	69fa      	ldr	r2, [r7, #28]
 8016c4c:	69bb      	ldr	r3, [r7, #24]
 8016c4e:	4413      	add	r3, r2
 8016c50:	330c      	adds	r3, #12
 8016c52:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	4a4f      	ldr	r2, [pc, #316]	; (8016d94 <mem_malloc+0x1d0>)
 8016c58:	4293      	cmp	r3, r2
 8016c5a:	d106      	bne.n	8016c6a <mem_malloc+0xa6>
 8016c5c:	4b50      	ldr	r3, [pc, #320]	; (8016da0 <mem_malloc+0x1dc>)
 8016c5e:	f240 3287 	movw	r2, #903	; 0x387
 8016c62:	4950      	ldr	r1, [pc, #320]	; (8016da4 <mem_malloc+0x1e0>)
 8016c64:	4850      	ldr	r0, [pc, #320]	; (8016da8 <mem_malloc+0x1e4>)
 8016c66:	f009 fa4f 	bl	8020108 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8016c6a:	68f8      	ldr	r0, [r7, #12]
 8016c6c:	f7ff fcca 	bl	8016604 <ptr_to_mem>
 8016c70:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8016c72:	68bb      	ldr	r3, [r7, #8]
 8016c74:	2200      	movs	r2, #0
 8016c76:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8016c78:	693b      	ldr	r3, [r7, #16]
 8016c7a:	681a      	ldr	r2, [r3, #0]
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8016c80:	68bb      	ldr	r3, [r7, #8]
 8016c82:	69fa      	ldr	r2, [r7, #28]
 8016c84:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8016c86:	693b      	ldr	r3, [r7, #16]
 8016c88:	68fa      	ldr	r2, [r7, #12]
 8016c8a:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	2201      	movs	r2, #1
 8016c90:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	4a3f      	ldr	r2, [pc, #252]	; (8016d94 <mem_malloc+0x1d0>)
 8016c98:	4293      	cmp	r3, r2
 8016c9a:	d00b      	beq.n	8016cb4 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7ff fcaf 	bl	8016604 <ptr_to_mem>
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	6053      	str	r3, [r2, #4]
 8016cac:	e002      	b.n	8016cb4 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	2201      	movs	r2, #1
 8016cb2:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8016cb4:	4b39      	ldr	r3, [pc, #228]	; (8016d9c <mem_malloc+0x1d8>)
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	693a      	ldr	r2, [r7, #16]
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d127      	bne.n	8016d0e <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8016cbe:	4b37      	ldr	r3, [pc, #220]	; (8016d9c <mem_malloc+0x1d8>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8016cc4:	e005      	b.n	8016cd2 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8016cc6:	697b      	ldr	r3, [r7, #20]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f7ff fc9a 	bl	8016604 <ptr_to_mem>
 8016cd0:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	7a1b      	ldrb	r3, [r3, #8]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d004      	beq.n	8016ce4 <mem_malloc+0x120>
 8016cda:	4b34      	ldr	r3, [pc, #208]	; (8016dac <mem_malloc+0x1e8>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	697a      	ldr	r2, [r7, #20]
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	d1f0      	bne.n	8016cc6 <mem_malloc+0x102>
          }
          lfree = cur;
 8016ce4:	4a2d      	ldr	r2, [pc, #180]	; (8016d9c <mem_malloc+0x1d8>)
 8016ce6:	697b      	ldr	r3, [r7, #20]
 8016ce8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8016cea:	4b2c      	ldr	r3, [pc, #176]	; (8016d9c <mem_malloc+0x1d8>)
 8016cec:	681a      	ldr	r2, [r3, #0]
 8016cee:	4b2f      	ldr	r3, [pc, #188]	; (8016dac <mem_malloc+0x1e8>)
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d00b      	beq.n	8016d0e <mem_malloc+0x14a>
 8016cf6:	4b29      	ldr	r3, [pc, #164]	; (8016d9c <mem_malloc+0x1d8>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	7a1b      	ldrb	r3, [r3, #8]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d006      	beq.n	8016d0e <mem_malloc+0x14a>
 8016d00:	4b27      	ldr	r3, [pc, #156]	; (8016da0 <mem_malloc+0x1dc>)
 8016d02:	f240 32b5 	movw	r2, #949	; 0x3b5
 8016d06:	492a      	ldr	r1, [pc, #168]	; (8016db0 <mem_malloc+0x1ec>)
 8016d08:	4827      	ldr	r0, [pc, #156]	; (8016da8 <mem_malloc+0x1e4>)
 8016d0a:	f009 f9fd 	bl	8020108 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8016d0e:	4822      	ldr	r0, [pc, #136]	; (8016d98 <mem_malloc+0x1d4>)
 8016d10:	f001 fc89 	bl	8018626 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016d14:	693a      	ldr	r2, [r7, #16]
 8016d16:	69bb      	ldr	r3, [r7, #24]
 8016d18:	4413      	add	r3, r2
 8016d1a:	330c      	adds	r3, #12
 8016d1c:	4a23      	ldr	r2, [pc, #140]	; (8016dac <mem_malloc+0x1e8>)
 8016d1e:	6812      	ldr	r2, [r2, #0]
 8016d20:	4293      	cmp	r3, r2
 8016d22:	d906      	bls.n	8016d32 <mem_malloc+0x16e>
 8016d24:	4b1e      	ldr	r3, [pc, #120]	; (8016da0 <mem_malloc+0x1dc>)
 8016d26:	f240 32b9 	movw	r2, #953	; 0x3b9
 8016d2a:	4922      	ldr	r1, [pc, #136]	; (8016db4 <mem_malloc+0x1f0>)
 8016d2c:	481e      	ldr	r0, [pc, #120]	; (8016da8 <mem_malloc+0x1e4>)
 8016d2e:	f009 f9eb 	bl	8020108 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	f003 0303 	and.w	r3, r3, #3
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d006      	beq.n	8016d4a <mem_malloc+0x186>
 8016d3c:	4b18      	ldr	r3, [pc, #96]	; (8016da0 <mem_malloc+0x1dc>)
 8016d3e:	f240 32bb 	movw	r2, #955	; 0x3bb
 8016d42:	491d      	ldr	r1, [pc, #116]	; (8016db8 <mem_malloc+0x1f4>)
 8016d44:	4818      	ldr	r0, [pc, #96]	; (8016da8 <mem_malloc+0x1e4>)
 8016d46:	f009 f9df 	bl	8020108 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8016d4a:	693b      	ldr	r3, [r7, #16]
 8016d4c:	f003 0303 	and.w	r3, r3, #3
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d006      	beq.n	8016d62 <mem_malloc+0x19e>
 8016d54:	4b12      	ldr	r3, [pc, #72]	; (8016da0 <mem_malloc+0x1dc>)
 8016d56:	f240 32bd 	movw	r2, #957	; 0x3bd
 8016d5a:	4918      	ldr	r1, [pc, #96]	; (8016dbc <mem_malloc+0x1f8>)
 8016d5c:	4812      	ldr	r0, [pc, #72]	; (8016da8 <mem_malloc+0x1e4>)
 8016d5e:	f009 f9d3 	bl	8020108 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016d62:	693b      	ldr	r3, [r7, #16]
 8016d64:	330c      	adds	r3, #12
 8016d66:	e010      	b.n	8016d8a <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 8016d68:	69f8      	ldr	r0, [r7, #28]
 8016d6a:	f7ff fc4b 	bl	8016604 <ptr_to_mem>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016d74:	69ba      	ldr	r2, [r7, #24]
 8016d76:	4b07      	ldr	r3, [pc, #28]	; (8016d94 <mem_malloc+0x1d0>)
 8016d78:	1a9b      	subs	r3, r3, r2
 8016d7a:	69fa      	ldr	r2, [r7, #28]
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	f4ff af48 	bcc.w	8016c12 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8016d82:	4805      	ldr	r0, [pc, #20]	; (8016d98 <mem_malloc+0x1d4>)
 8016d84:	f001 fc4f 	bl	8018626 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8016d88:	2300      	movs	r3, #0
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3720      	adds	r7, #32
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bd80      	pop	{r7, pc}
 8016d92:	bf00      	nop
 8016d94:	0001ffe8 	.word	0x0001ffe8
 8016d98:	24009574 	.word	0x24009574
 8016d9c:	24009578 	.word	0x24009578
 8016da0:	08022220 	.word	0x08022220
 8016da4:	08022428 	.word	0x08022428
 8016da8:	080222ac 	.word	0x080222ac
 8016dac:	24009570 	.word	0x24009570
 8016db0:	0802243c 	.word	0x0802243c
 8016db4:	08022458 	.word	0x08022458
 8016db8:	08022488 	.word	0x08022488
 8016dbc:	080224b8 	.word	0x080224b8

08016dc0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8016dc0:	b480      	push	{r7}
 8016dc2:	b085      	sub	sp, #20
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	689b      	ldr	r3, [r3, #8]
 8016dcc:	2200      	movs	r2, #0
 8016dce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	685b      	ldr	r3, [r3, #4]
 8016dd4:	3303      	adds	r3, #3
 8016dd6:	f023 0303 	bic.w	r3, r3, #3
 8016dda:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8016ddc:	2300      	movs	r3, #0
 8016dde:	60fb      	str	r3, [r7, #12]
 8016de0:	e011      	b.n	8016e06 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	689b      	ldr	r3, [r3, #8]
 8016de6:	681a      	ldr	r2, [r3, #0]
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	689b      	ldr	r3, [r3, #8]
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	881b      	ldrh	r3, [r3, #0]
 8016df8:	461a      	mov	r2, r3
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	4413      	add	r3, r2
 8016dfe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	3301      	adds	r3, #1
 8016e04:	60fb      	str	r3, [r7, #12]
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	885b      	ldrh	r3, [r3, #2]
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	4293      	cmp	r3, r2
 8016e10:	dbe7      	blt.n	8016de2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8016e12:	bf00      	nop
 8016e14:	bf00      	nop
 8016e16:	3714      	adds	r7, #20
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1e:	4770      	bx	lr

08016e20 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b082      	sub	sp, #8
 8016e24:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016e26:	2300      	movs	r3, #0
 8016e28:	80fb      	strh	r3, [r7, #6]
 8016e2a:	e009      	b.n	8016e40 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8016e2c:	88fb      	ldrh	r3, [r7, #6]
 8016e2e:	4a08      	ldr	r2, [pc, #32]	; (8016e50 <memp_init+0x30>)
 8016e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ff ffc3 	bl	8016dc0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016e3a:	88fb      	ldrh	r3, [r7, #6]
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	80fb      	strh	r3, [r7, #6]
 8016e40:	88fb      	ldrh	r3, [r7, #6]
 8016e42:	2b0c      	cmp	r3, #12
 8016e44:	d9f2      	bls.n	8016e2c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8016e46:	bf00      	nop
 8016e48:	bf00      	nop
 8016e4a:	3708      	adds	r7, #8
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}
 8016e50:	08024b74 	.word	0x08024b74

08016e54 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b084      	sub	sp, #16
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8016e5c:	f001 fc16 	bl	801868c <sys_arch_protect>
 8016e60:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	689b      	ldr	r3, [r3, #8]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d015      	beq.n	8016e9c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	689b      	ldr	r3, [r3, #8]
 8016e74:	68ba      	ldr	r2, [r7, #8]
 8016e76:	6812      	ldr	r2, [r2, #0]
 8016e78:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	f003 0303 	and.w	r3, r3, #3
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d006      	beq.n	8016e92 <do_memp_malloc_pool+0x3e>
 8016e84:	4b09      	ldr	r3, [pc, #36]	; (8016eac <do_memp_malloc_pool+0x58>)
 8016e86:	f44f 728c 	mov.w	r2, #280	; 0x118
 8016e8a:	4909      	ldr	r1, [pc, #36]	; (8016eb0 <do_memp_malloc_pool+0x5c>)
 8016e8c:	4809      	ldr	r0, [pc, #36]	; (8016eb4 <do_memp_malloc_pool+0x60>)
 8016e8e:	f009 f93b 	bl	8020108 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016e92:	68f8      	ldr	r0, [r7, #12]
 8016e94:	f001 fc08 	bl	80186a8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8016e98:	68bb      	ldr	r3, [r7, #8]
 8016e9a:	e003      	b.n	8016ea4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016e9c:	68f8      	ldr	r0, [r7, #12]
 8016e9e:	f001 fc03 	bl	80186a8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8016ea2:	2300      	movs	r3, #0
}
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	3710      	adds	r7, #16
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}
 8016eac:	080224dc 	.word	0x080224dc
 8016eb0:	08022550 	.word	0x08022550
 8016eb4:	08022574 	.word	0x08022574

08016eb8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b082      	sub	sp, #8
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d106      	bne.n	8016ed4 <memp_malloc_pool+0x1c>
 8016ec6:	4b0a      	ldr	r3, [pc, #40]	; (8016ef0 <memp_malloc_pool+0x38>)
 8016ec8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8016ecc:	4909      	ldr	r1, [pc, #36]	; (8016ef4 <memp_malloc_pool+0x3c>)
 8016ece:	480a      	ldr	r0, [pc, #40]	; (8016ef8 <memp_malloc_pool+0x40>)
 8016ed0:	f009 f91a 	bl	8020108 <iprintf>
  if (desc == NULL) {
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d101      	bne.n	8016ede <memp_malloc_pool+0x26>
    return NULL;
 8016eda:	2300      	movs	r3, #0
 8016edc:	e003      	b.n	8016ee6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f7ff ffb8 	bl	8016e54 <do_memp_malloc_pool>
 8016ee4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3708      	adds	r7, #8
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
 8016eee:	bf00      	nop
 8016ef0:	080224dc 	.word	0x080224dc
 8016ef4:	0802259c 	.word	0x0802259c
 8016ef8:	08022574 	.word	0x08022574

08016efc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b084      	sub	sp, #16
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	4603      	mov	r3, r0
 8016f04:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016f06:	79fb      	ldrb	r3, [r7, #7]
 8016f08:	2b0c      	cmp	r3, #12
 8016f0a:	d908      	bls.n	8016f1e <memp_malloc+0x22>
 8016f0c:	4b0a      	ldr	r3, [pc, #40]	; (8016f38 <memp_malloc+0x3c>)
 8016f0e:	f240 1257 	movw	r2, #343	; 0x157
 8016f12:	490a      	ldr	r1, [pc, #40]	; (8016f3c <memp_malloc+0x40>)
 8016f14:	480a      	ldr	r0, [pc, #40]	; (8016f40 <memp_malloc+0x44>)
 8016f16:	f009 f8f7 	bl	8020108 <iprintf>
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	e008      	b.n	8016f30 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8016f1e:	79fb      	ldrb	r3, [r7, #7]
 8016f20:	4a08      	ldr	r2, [pc, #32]	; (8016f44 <memp_malloc+0x48>)
 8016f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f26:	4618      	mov	r0, r3
 8016f28:	f7ff ff94 	bl	8016e54 <do_memp_malloc_pool>
 8016f2c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8016f2e:	68fb      	ldr	r3, [r7, #12]
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3710      	adds	r7, #16
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}
 8016f38:	080224dc 	.word	0x080224dc
 8016f3c:	080225b0 	.word	0x080225b0
 8016f40:	08022574 	.word	0x08022574
 8016f44:	08024b74 	.word	0x08024b74

08016f48 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b084      	sub	sp, #16
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
 8016f50:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	f003 0303 	and.w	r3, r3, #3
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d006      	beq.n	8016f6a <do_memp_free_pool+0x22>
 8016f5c:	4b0d      	ldr	r3, [pc, #52]	; (8016f94 <do_memp_free_pool+0x4c>)
 8016f5e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8016f62:	490d      	ldr	r1, [pc, #52]	; (8016f98 <do_memp_free_pool+0x50>)
 8016f64:	480d      	ldr	r0, [pc, #52]	; (8016f9c <do_memp_free_pool+0x54>)
 8016f66:	f009 f8cf 	bl	8020108 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8016f6a:	683b      	ldr	r3, [r7, #0]
 8016f6c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8016f6e:	f001 fb8d 	bl	801868c <sys_arch_protect>
 8016f72:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	689b      	ldr	r3, [r3, #8]
 8016f78:	681a      	ldr	r2, [r3, #0]
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	689b      	ldr	r3, [r3, #8]
 8016f82:	68fa      	ldr	r2, [r7, #12]
 8016f84:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8016f86:	68b8      	ldr	r0, [r7, #8]
 8016f88:	f001 fb8e 	bl	80186a8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8016f8c:	bf00      	nop
 8016f8e:	3710      	adds	r7, #16
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}
 8016f94:	080224dc 	.word	0x080224dc
 8016f98:	080225d0 	.word	0x080225d0
 8016f9c:	08022574 	.word	0x08022574

08016fa0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
 8016fa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d106      	bne.n	8016fbe <memp_free_pool+0x1e>
 8016fb0:	4b0a      	ldr	r3, [pc, #40]	; (8016fdc <memp_free_pool+0x3c>)
 8016fb2:	f240 1295 	movw	r2, #405	; 0x195
 8016fb6:	490a      	ldr	r1, [pc, #40]	; (8016fe0 <memp_free_pool+0x40>)
 8016fb8:	480a      	ldr	r0, [pc, #40]	; (8016fe4 <memp_free_pool+0x44>)
 8016fba:	f009 f8a5 	bl	8020108 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d007      	beq.n	8016fd4 <memp_free_pool+0x34>
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d004      	beq.n	8016fd4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8016fca:	6839      	ldr	r1, [r7, #0]
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f7ff ffbb 	bl	8016f48 <do_memp_free_pool>
 8016fd2:	e000      	b.n	8016fd6 <memp_free_pool+0x36>
    return;
 8016fd4:	bf00      	nop
}
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}
 8016fdc:	080224dc 	.word	0x080224dc
 8016fe0:	0802259c 	.word	0x0802259c
 8016fe4:	08022574 	.word	0x08022574

08016fe8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b082      	sub	sp, #8
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	4603      	mov	r3, r0
 8016ff0:	6039      	str	r1, [r7, #0]
 8016ff2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8016ff4:	79fb      	ldrb	r3, [r7, #7]
 8016ff6:	2b0c      	cmp	r3, #12
 8016ff8:	d907      	bls.n	801700a <memp_free+0x22>
 8016ffa:	4b0c      	ldr	r3, [pc, #48]	; (801702c <memp_free+0x44>)
 8016ffc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017000:	490b      	ldr	r1, [pc, #44]	; (8017030 <memp_free+0x48>)
 8017002:	480c      	ldr	r0, [pc, #48]	; (8017034 <memp_free+0x4c>)
 8017004:	f009 f880 	bl	8020108 <iprintf>
 8017008:	e00c      	b.n	8017024 <memp_free+0x3c>

  if (mem == NULL) {
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d008      	beq.n	8017022 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017010:	79fb      	ldrb	r3, [r7, #7]
 8017012:	4a09      	ldr	r2, [pc, #36]	; (8017038 <memp_free+0x50>)
 8017014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017018:	6839      	ldr	r1, [r7, #0]
 801701a:	4618      	mov	r0, r3
 801701c:	f7ff ff94 	bl	8016f48 <do_memp_free_pool>
 8017020:	e000      	b.n	8017024 <memp_free+0x3c>
    return;
 8017022:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017024:	3708      	adds	r7, #8
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}
 801702a:	bf00      	nop
 801702c:	080224dc 	.word	0x080224dc
 8017030:	080225f0 	.word	0x080225f0
 8017034:	08022574 	.word	0x08022574
 8017038:	08024b74 	.word	0x08024b74

0801703c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d013      	beq.n	8017072 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d00b      	beq.n	801706a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	4618      	mov	r0, r3
 8017058:	f000 feba 	bl	8017dd0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	2200      	movs	r2, #0
 8017060:	605a      	str	r2, [r3, #4]
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	685a      	ldr	r2, [r3, #4]
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801706a:	6879      	ldr	r1, [r7, #4]
 801706c:	2006      	movs	r0, #6
 801706e:	f7ff ffbb 	bl	8016fe8 <memp_free>
  }
}
 8017072:	bf00      	nop
 8017074:	3708      	adds	r7, #8
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}
	...

0801707c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b082      	sub	sp, #8
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d108      	bne.n	801709c <netbuf_next+0x20>
 801708a:	4b11      	ldr	r3, [pc, #68]	; (80170d0 <netbuf_next+0x54>)
 801708c:	22e0      	movs	r2, #224	; 0xe0
 801708e:	4911      	ldr	r1, [pc, #68]	; (80170d4 <netbuf_next+0x58>)
 8017090:	4811      	ldr	r0, [pc, #68]	; (80170d8 <netbuf_next+0x5c>)
 8017092:	f009 f839 	bl	8020108 <iprintf>
 8017096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801709a:	e014      	b.n	80170c6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	685b      	ldr	r3, [r3, #4]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d102      	bne.n	80170ac <netbuf_next+0x30>
    return -1;
 80170a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170aa:	e00c      	b.n	80170c6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	681a      	ldr	r2, [r3, #0]
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	685b      	ldr	r3, [r3, #4]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d101      	bne.n	80170c4 <netbuf_next+0x48>
    return 1;
 80170c0:	2301      	movs	r3, #1
 80170c2:	e000      	b.n	80170c6 <netbuf_next+0x4a>
  }
  return 0;
 80170c4:	2300      	movs	r3, #0
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3708      	adds	r7, #8
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	0802260c 	.word	0x0802260c
 80170d4:	080227ac 	.word	0x080227ac
 80170d8:	0802269c 	.word	0x0802269c

080170dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80170dc:	b480      	push	{r7}
 80170de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80170e0:	bf00      	nop
 80170e2:	46bd      	mov	sp, r7
 80170e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e8:	4770      	bx	lr
	...

080170ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b086      	sub	sp, #24
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	60f8      	str	r0, [r7, #12]
 80170f4:	60b9      	str	r1, [r7, #8]
 80170f6:	607a      	str	r2, [r7, #4]
 80170f8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d108      	bne.n	8017112 <netif_add+0x26>
 8017100:	4b57      	ldr	r3, [pc, #348]	; (8017260 <netif_add+0x174>)
 8017102:	f240 1227 	movw	r2, #295	; 0x127
 8017106:	4957      	ldr	r1, [pc, #348]	; (8017264 <netif_add+0x178>)
 8017108:	4857      	ldr	r0, [pc, #348]	; (8017268 <netif_add+0x17c>)
 801710a:	f008 fffd 	bl	8020108 <iprintf>
 801710e:	2300      	movs	r3, #0
 8017110:	e0a2      	b.n	8017258 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017114:	2b00      	cmp	r3, #0
 8017116:	d108      	bne.n	801712a <netif_add+0x3e>
 8017118:	4b51      	ldr	r3, [pc, #324]	; (8017260 <netif_add+0x174>)
 801711a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801711e:	4953      	ldr	r1, [pc, #332]	; (801726c <netif_add+0x180>)
 8017120:	4851      	ldr	r0, [pc, #324]	; (8017268 <netif_add+0x17c>)
 8017122:	f008 fff1 	bl	8020108 <iprintf>
 8017126:	2300      	movs	r3, #0
 8017128:	e096      	b.n	8017258 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d101      	bne.n	8017134 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017130:	4b4f      	ldr	r3, [pc, #316]	; (8017270 <netif_add+0x184>)
 8017132:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d101      	bne.n	801713e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801713a:	4b4d      	ldr	r3, [pc, #308]	; (8017270 <netif_add+0x184>)
 801713c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d101      	bne.n	8017148 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8017144:	4b4a      	ldr	r3, [pc, #296]	; (8017270 <netif_add+0x184>)
 8017146:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	2200      	movs	r2, #0
 801714c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	2200      	movs	r2, #0
 8017152:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	2200      	movs	r2, #0
 8017158:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	4a45      	ldr	r2, [pc, #276]	; (8017274 <netif_add+0x188>)
 801715e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	2200      	movs	r2, #0
 8017164:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	2200      	movs	r2, #0
 801716a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	2200      	movs	r2, #0
 8017172:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	6a3a      	ldr	r2, [r7, #32]
 8017178:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801717a:	4b3f      	ldr	r3, [pc, #252]	; (8017278 <netif_add+0x18c>)
 801717c:	781a      	ldrb	r2, [r3, #0]
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017188:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	687a      	ldr	r2, [r7, #4]
 801718e:	68b9      	ldr	r1, [r7, #8]
 8017190:	68f8      	ldr	r0, [r7, #12]
 8017192:	f000 f913 	bl	80173bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8017196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017198:	68f8      	ldr	r0, [r7, #12]
 801719a:	4798      	blx	r3
 801719c:	4603      	mov	r3, r0
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d001      	beq.n	80171a6 <netif_add+0xba>
    return NULL;
 80171a2:	2300      	movs	r3, #0
 80171a4:	e058      	b.n	8017258 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80171ac:	2bff      	cmp	r3, #255	; 0xff
 80171ae:	d103      	bne.n	80171b8 <netif_add+0xcc>
        netif->num = 0;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2200      	movs	r2, #0
 80171b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80171b8:	2300      	movs	r3, #0
 80171ba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80171bc:	4b2f      	ldr	r3, [pc, #188]	; (801727c <netif_add+0x190>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	617b      	str	r3, [r7, #20]
 80171c2:	e02b      	b.n	801721c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80171c4:	697a      	ldr	r2, [r7, #20]
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	429a      	cmp	r2, r3
 80171ca:	d106      	bne.n	80171da <netif_add+0xee>
 80171cc:	4b24      	ldr	r3, [pc, #144]	; (8017260 <netif_add+0x174>)
 80171ce:	f240 128b 	movw	r2, #395	; 0x18b
 80171d2:	492b      	ldr	r1, [pc, #172]	; (8017280 <netif_add+0x194>)
 80171d4:	4824      	ldr	r0, [pc, #144]	; (8017268 <netif_add+0x17c>)
 80171d6:	f008 ff97 	bl	8020108 <iprintf>
        num_netifs++;
 80171da:	693b      	ldr	r3, [r7, #16]
 80171dc:	3301      	adds	r3, #1
 80171de:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	2bff      	cmp	r3, #255	; 0xff
 80171e4:	dd06      	ble.n	80171f4 <netif_add+0x108>
 80171e6:	4b1e      	ldr	r3, [pc, #120]	; (8017260 <netif_add+0x174>)
 80171e8:	f240 128d 	movw	r2, #397	; 0x18d
 80171ec:	4925      	ldr	r1, [pc, #148]	; (8017284 <netif_add+0x198>)
 80171ee:	481e      	ldr	r0, [pc, #120]	; (8017268 <netif_add+0x17c>)
 80171f0:	f008 ff8a 	bl	8020108 <iprintf>
        if (netif2->num == netif->num) {
 80171f4:	697b      	ldr	r3, [r7, #20]
 80171f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017200:	429a      	cmp	r2, r3
 8017202:	d108      	bne.n	8017216 <netif_add+0x12a>
          netif->num++;
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801720a:	3301      	adds	r3, #1
 801720c:	b2da      	uxtb	r2, r3
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8017214:	e005      	b.n	8017222 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017216:	697b      	ldr	r3, [r7, #20]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	617b      	str	r3, [r7, #20]
 801721c:	697b      	ldr	r3, [r7, #20]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d1d0      	bne.n	80171c4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d1be      	bne.n	80171a6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801722e:	2bfe      	cmp	r3, #254	; 0xfe
 8017230:	d103      	bne.n	801723a <netif_add+0x14e>
    netif_num = 0;
 8017232:	4b11      	ldr	r3, [pc, #68]	; (8017278 <netif_add+0x18c>)
 8017234:	2200      	movs	r2, #0
 8017236:	701a      	strb	r2, [r3, #0]
 8017238:	e006      	b.n	8017248 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017240:	3301      	adds	r3, #1
 8017242:	b2da      	uxtb	r2, r3
 8017244:	4b0c      	ldr	r3, [pc, #48]	; (8017278 <netif_add+0x18c>)
 8017246:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8017248:	4b0c      	ldr	r3, [pc, #48]	; (801727c <netif_add+0x190>)
 801724a:	681a      	ldr	r2, [r3, #0]
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8017250:	4a0a      	ldr	r2, [pc, #40]	; (801727c <netif_add+0x190>)
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8017256:	68fb      	ldr	r3, [r7, #12]
}
 8017258:	4618      	mov	r0, r3
 801725a:	3718      	adds	r7, #24
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}
 8017260:	080227e4 	.word	0x080227e4
 8017264:	080228b8 	.word	0x080228b8
 8017268:	08022874 	.word	0x08022874
 801726c:	080228d4 	.word	0x080228d4
 8017270:	08024ad4 	.word	0x08024ad4
 8017274:	08017697 	.word	0x08017697
 8017278:	24010010 	.word	0x24010010
 801727c:	24010008 	.word	0x24010008
 8017280:	080228f8 	.word	0x080228f8
 8017284:	0802290c 	.word	0x0802290c

08017288 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8017292:	6839      	ldr	r1, [r7, #0]
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f003 f835 	bl	801a304 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801729a:	6839      	ldr	r1, [r7, #0]
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f008 f89f 	bl	801f3e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80172a2:	bf00      	nop
 80172a4:	3708      	adds	r7, #8
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}
	...

080172ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b086      	sub	sp, #24
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	60f8      	str	r0, [r7, #12]
 80172b4:	60b9      	str	r1, [r7, #8]
 80172b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80172b8:	68bb      	ldr	r3, [r7, #8]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d106      	bne.n	80172cc <netif_do_set_ipaddr+0x20>
 80172be:	4b1d      	ldr	r3, [pc, #116]	; (8017334 <netif_do_set_ipaddr+0x88>)
 80172c0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80172c4:	491c      	ldr	r1, [pc, #112]	; (8017338 <netif_do_set_ipaddr+0x8c>)
 80172c6:	481d      	ldr	r0, [pc, #116]	; (801733c <netif_do_set_ipaddr+0x90>)
 80172c8:	f008 ff1e 	bl	8020108 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d106      	bne.n	80172e0 <netif_do_set_ipaddr+0x34>
 80172d2:	4b18      	ldr	r3, [pc, #96]	; (8017334 <netif_do_set_ipaddr+0x88>)
 80172d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80172d8:	4917      	ldr	r1, [pc, #92]	; (8017338 <netif_do_set_ipaddr+0x8c>)
 80172da:	4818      	ldr	r0, [pc, #96]	; (801733c <netif_do_set_ipaddr+0x90>)
 80172dc:	f008 ff14 	bl	8020108 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	3304      	adds	r3, #4
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	429a      	cmp	r2, r3
 80172ec:	d01c      	beq.n	8017328 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	3304      	adds	r3, #4
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80172fe:	f107 0314 	add.w	r3, r7, #20
 8017302:	4619      	mov	r1, r3
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f7ff ffbf 	bl	8017288 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d002      	beq.n	8017316 <netif_do_set_ipaddr+0x6a>
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	e000      	b.n	8017318 <netif_do_set_ipaddr+0x6c>
 8017316:	2300      	movs	r3, #0
 8017318:	68fa      	ldr	r2, [r7, #12]
 801731a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801731c:	2101      	movs	r1, #1
 801731e:	68f8      	ldr	r0, [r7, #12]
 8017320:	f000 f8d2 	bl	80174c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8017324:	2301      	movs	r3, #1
 8017326:	e000      	b.n	801732a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8017328:	2300      	movs	r3, #0
}
 801732a:	4618      	mov	r0, r3
 801732c:	3718      	adds	r7, #24
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
 8017332:	bf00      	nop
 8017334:	080227e4 	.word	0x080227e4
 8017338:	0802293c 	.word	0x0802293c
 801733c:	08022874 	.word	0x08022874

08017340 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8017340:	b480      	push	{r7}
 8017342:	b085      	sub	sp, #20
 8017344:	af00      	add	r7, sp, #0
 8017346:	60f8      	str	r0, [r7, #12]
 8017348:	60b9      	str	r1, [r7, #8]
 801734a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801734c:	68bb      	ldr	r3, [r7, #8]
 801734e:	681a      	ldr	r2, [r3, #0]
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	3308      	adds	r3, #8
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	429a      	cmp	r2, r3
 8017358:	d00a      	beq.n	8017370 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801735a:	68bb      	ldr	r3, [r7, #8]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d002      	beq.n	8017366 <netif_do_set_netmask+0x26>
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	e000      	b.n	8017368 <netif_do_set_netmask+0x28>
 8017366:	2300      	movs	r3, #0
 8017368:	68fa      	ldr	r2, [r7, #12]
 801736a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801736c:	2301      	movs	r3, #1
 801736e:	e000      	b.n	8017372 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8017370:	2300      	movs	r3, #0
}
 8017372:	4618      	mov	r0, r3
 8017374:	3714      	adds	r7, #20
 8017376:	46bd      	mov	sp, r7
 8017378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737c:	4770      	bx	lr

0801737e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801737e:	b480      	push	{r7}
 8017380:	b085      	sub	sp, #20
 8017382:	af00      	add	r7, sp, #0
 8017384:	60f8      	str	r0, [r7, #12]
 8017386:	60b9      	str	r1, [r7, #8]
 8017388:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	330c      	adds	r3, #12
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	429a      	cmp	r2, r3
 8017396:	d00a      	beq.n	80173ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d002      	beq.n	80173a4 <netif_do_set_gw+0x26>
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	e000      	b.n	80173a6 <netif_do_set_gw+0x28>
 80173a4:	2300      	movs	r3, #0
 80173a6:	68fa      	ldr	r2, [r7, #12]
 80173a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80173aa:	2301      	movs	r3, #1
 80173ac:	e000      	b.n	80173b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80173ae:	2300      	movs	r3, #0
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	3714      	adds	r7, #20
 80173b4:	46bd      	mov	sp, r7
 80173b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ba:	4770      	bx	lr

080173bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b088      	sub	sp, #32
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	607a      	str	r2, [r7, #4]
 80173c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80173ca:	2300      	movs	r3, #0
 80173cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80173ce:	2300      	movs	r3, #0
 80173d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d101      	bne.n	80173dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80173d8:	4b1c      	ldr	r3, [pc, #112]	; (801744c <netif_set_addr+0x90>)
 80173da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d101      	bne.n	80173e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80173e2:	4b1a      	ldr	r3, [pc, #104]	; (801744c <netif_set_addr+0x90>)
 80173e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d101      	bne.n	80173f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80173ec:	4b17      	ldr	r3, [pc, #92]	; (801744c <netif_set_addr+0x90>)
 80173ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d003      	beq.n	80173fe <netif_set_addr+0x42>
 80173f6:	68bb      	ldr	r3, [r7, #8]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d101      	bne.n	8017402 <netif_set_addr+0x46>
 80173fe:	2301      	movs	r3, #1
 8017400:	e000      	b.n	8017404 <netif_set_addr+0x48>
 8017402:	2300      	movs	r3, #0
 8017404:	617b      	str	r3, [r7, #20]
  if (remove) {
 8017406:	697b      	ldr	r3, [r7, #20]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d006      	beq.n	801741a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801740c:	f107 0310 	add.w	r3, r7, #16
 8017410:	461a      	mov	r2, r3
 8017412:	68b9      	ldr	r1, [r7, #8]
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	f7ff ff49 	bl	80172ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801741a:	69fa      	ldr	r2, [r7, #28]
 801741c:	6879      	ldr	r1, [r7, #4]
 801741e:	68f8      	ldr	r0, [r7, #12]
 8017420:	f7ff ff8e 	bl	8017340 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017424:	69ba      	ldr	r2, [r7, #24]
 8017426:	6839      	ldr	r1, [r7, #0]
 8017428:	68f8      	ldr	r0, [r7, #12]
 801742a:	f7ff ffa8 	bl	801737e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d106      	bne.n	8017442 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017434:	f107 0310 	add.w	r3, r7, #16
 8017438:	461a      	mov	r2, r3
 801743a:	68b9      	ldr	r1, [r7, #8]
 801743c:	68f8      	ldr	r0, [r7, #12]
 801743e:	f7ff ff35 	bl	80172ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8017442:	bf00      	nop
 8017444:	3720      	adds	r7, #32
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
 801744a:	bf00      	nop
 801744c:	08024ad4 	.word	0x08024ad4

08017450 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8017450:	b480      	push	{r7}
 8017452:	b083      	sub	sp, #12
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8017458:	4a04      	ldr	r2, [pc, #16]	; (801746c <netif_set_default+0x1c>)
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801745e:	bf00      	nop
 8017460:	370c      	adds	r7, #12
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr
 801746a:	bf00      	nop
 801746c:	2401000c 	.word	0x2401000c

08017470 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b082      	sub	sp, #8
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d107      	bne.n	801748e <netif_set_up+0x1e>
 801747e:	4b0f      	ldr	r3, [pc, #60]	; (80174bc <netif_set_up+0x4c>)
 8017480:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017484:	490e      	ldr	r1, [pc, #56]	; (80174c0 <netif_set_up+0x50>)
 8017486:	480f      	ldr	r0, [pc, #60]	; (80174c4 <netif_set_up+0x54>)
 8017488:	f008 fe3e 	bl	8020108 <iprintf>
 801748c:	e013      	b.n	80174b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017494:	f003 0301 	and.w	r3, r3, #1
 8017498:	2b00      	cmp	r3, #0
 801749a:	d10c      	bne.n	80174b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174a2:	f043 0301 	orr.w	r3, r3, #1
 80174a6:	b2da      	uxtb	r2, r3
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80174ae:	2103      	movs	r1, #3
 80174b0:	6878      	ldr	r0, [r7, #4]
 80174b2:	f000 f809 	bl	80174c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80174b6:	3708      	adds	r7, #8
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}
 80174bc:	080227e4 	.word	0x080227e4
 80174c0:	080229ac 	.word	0x080229ac
 80174c4:	08022874 	.word	0x08022874

080174c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
 80174d0:	460b      	mov	r3, r1
 80174d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d106      	bne.n	80174e8 <netif_issue_reports+0x20>
 80174da:	4b18      	ldr	r3, [pc, #96]	; (801753c <netif_issue_reports+0x74>)
 80174dc:	f240 326d 	movw	r2, #877	; 0x36d
 80174e0:	4917      	ldr	r1, [pc, #92]	; (8017540 <netif_issue_reports+0x78>)
 80174e2:	4818      	ldr	r0, [pc, #96]	; (8017544 <netif_issue_reports+0x7c>)
 80174e4:	f008 fe10 	bl	8020108 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174ee:	f003 0304 	and.w	r3, r3, #4
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d01e      	beq.n	8017534 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017500:	2b00      	cmp	r3, #0
 8017502:	d017      	beq.n	8017534 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017504:	78fb      	ldrb	r3, [r7, #3]
 8017506:	f003 0301 	and.w	r3, r3, #1
 801750a:	2b00      	cmp	r3, #0
 801750c:	d013      	beq.n	8017536 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	3304      	adds	r3, #4
 8017512:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017514:	2b00      	cmp	r3, #0
 8017516:	d00e      	beq.n	8017536 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801751e:	f003 0308 	and.w	r3, r3, #8
 8017522:	2b00      	cmp	r3, #0
 8017524:	d007      	beq.n	8017536 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	3304      	adds	r3, #4
 801752a:	4619      	mov	r1, r3
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f7fd fbe3 	bl	8014cf8 <etharp_request>
 8017532:	e000      	b.n	8017536 <netif_issue_reports+0x6e>
    return;
 8017534:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8017536:	3708      	adds	r7, #8
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	080227e4 	.word	0x080227e4
 8017540:	080229c8 	.word	0x080229c8
 8017544:	08022874 	.word	0x08022874

08017548 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b082      	sub	sp, #8
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d107      	bne.n	8017566 <netif_set_down+0x1e>
 8017556:	4b12      	ldr	r3, [pc, #72]	; (80175a0 <netif_set_down+0x58>)
 8017558:	f240 329b 	movw	r2, #923	; 0x39b
 801755c:	4911      	ldr	r1, [pc, #68]	; (80175a4 <netif_set_down+0x5c>)
 801755e:	4812      	ldr	r0, [pc, #72]	; (80175a8 <netif_set_down+0x60>)
 8017560:	f008 fdd2 	bl	8020108 <iprintf>
 8017564:	e019      	b.n	801759a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801756c:	f003 0301 	and.w	r3, r3, #1
 8017570:	2b00      	cmp	r3, #0
 8017572:	d012      	beq.n	801759a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801757a:	f023 0301 	bic.w	r3, r3, #1
 801757e:	b2da      	uxtb	r2, r3
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801758c:	f003 0308 	and.w	r3, r3, #8
 8017590:	2b00      	cmp	r3, #0
 8017592:	d002      	beq.n	801759a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7fc ff6d 	bl	8014474 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801759a:	3708      	adds	r7, #8
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}
 80175a0:	080227e4 	.word	0x080227e4
 80175a4:	080229ec 	.word	0x080229ec
 80175a8:	08022874 	.word	0x08022874

080175ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d107      	bne.n	80175ca <netif_set_link_up+0x1e>
 80175ba:	4b13      	ldr	r3, [pc, #76]	; (8017608 <netif_set_link_up+0x5c>)
 80175bc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80175c0:	4912      	ldr	r1, [pc, #72]	; (801760c <netif_set_link_up+0x60>)
 80175c2:	4813      	ldr	r0, [pc, #76]	; (8017610 <netif_set_link_up+0x64>)
 80175c4:	f008 fda0 	bl	8020108 <iprintf>
 80175c8:	e01b      	b.n	8017602 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80175d0:	f003 0304 	and.w	r3, r3, #4
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d114      	bne.n	8017602 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80175de:	f043 0304 	orr.w	r3, r3, #4
 80175e2:	b2da      	uxtb	r2, r3
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80175ea:	2103      	movs	r1, #3
 80175ec:	6878      	ldr	r0, [r7, #4]
 80175ee:	f7ff ff6b 	bl	80174c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	69db      	ldr	r3, [r3, #28]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d003      	beq.n	8017602 <netif_set_link_up+0x56>
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	69db      	ldr	r3, [r3, #28]
 80175fe:	6878      	ldr	r0, [r7, #4]
 8017600:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	080227e4 	.word	0x080227e4
 801760c:	08022a0c 	.word	0x08022a0c
 8017610:	08022874 	.word	0x08022874

08017614 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d107      	bne.n	8017632 <netif_set_link_down+0x1e>
 8017622:	4b11      	ldr	r3, [pc, #68]	; (8017668 <netif_set_link_down+0x54>)
 8017624:	f240 4206 	movw	r2, #1030	; 0x406
 8017628:	4910      	ldr	r1, [pc, #64]	; (801766c <netif_set_link_down+0x58>)
 801762a:	4811      	ldr	r0, [pc, #68]	; (8017670 <netif_set_link_down+0x5c>)
 801762c:	f008 fd6c 	bl	8020108 <iprintf>
 8017630:	e017      	b.n	8017662 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017638:	f003 0304 	and.w	r3, r3, #4
 801763c:	2b00      	cmp	r3, #0
 801763e:	d010      	beq.n	8017662 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017646:	f023 0304 	bic.w	r3, r3, #4
 801764a:	b2da      	uxtb	r2, r3
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	69db      	ldr	r3, [r3, #28]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d003      	beq.n	8017662 <netif_set_link_down+0x4e>
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	69db      	ldr	r3, [r3, #28]
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017662:	3708      	adds	r7, #8
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}
 8017668:	080227e4 	.word	0x080227e4
 801766c:	08022a30 	.word	0x08022a30
 8017670:	08022874 	.word	0x08022874

08017674 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8017674:	b480      	push	{r7}
 8017676:	b083      	sub	sp, #12
 8017678:	af00      	add	r7, sp, #0
 801767a:	6078      	str	r0, [r7, #4]
 801767c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d002      	beq.n	801768a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	683a      	ldr	r2, [r7, #0]
 8017688:	61da      	str	r2, [r3, #28]
  }
}
 801768a:	bf00      	nop
 801768c:	370c      	adds	r7, #12
 801768e:	46bd      	mov	sp, r7
 8017690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017694:	4770      	bx	lr

08017696 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8017696:	b480      	push	{r7}
 8017698:	b085      	sub	sp, #20
 801769a:	af00      	add	r7, sp, #0
 801769c:	60f8      	str	r0, [r7, #12]
 801769e:	60b9      	str	r1, [r7, #8]
 80176a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80176a2:	f06f 030b 	mvn.w	r3, #11
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	3714      	adds	r7, #20
 80176aa:	46bd      	mov	sp, r7
 80176ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b0:	4770      	bx	lr
	...

080176b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80176b4:	b480      	push	{r7}
 80176b6:	b085      	sub	sp, #20
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	4603      	mov	r3, r0
 80176bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80176be:	79fb      	ldrb	r3, [r7, #7]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d013      	beq.n	80176ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80176c4:	4b0d      	ldr	r3, [pc, #52]	; (80176fc <netif_get_by_index+0x48>)
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	60fb      	str	r3, [r7, #12]
 80176ca:	e00c      	b.n	80176e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80176d2:	3301      	adds	r3, #1
 80176d4:	b2db      	uxtb	r3, r3
 80176d6:	79fa      	ldrb	r2, [r7, #7]
 80176d8:	429a      	cmp	r2, r3
 80176da:	d101      	bne.n	80176e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	e006      	b.n	80176ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	60fb      	str	r3, [r7, #12]
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d1ef      	bne.n	80176cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80176ec:	2300      	movs	r3, #0
}
 80176ee:	4618      	mov	r0, r3
 80176f0:	3714      	adds	r7, #20
 80176f2:	46bd      	mov	sp, r7
 80176f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f8:	4770      	bx	lr
 80176fa:	bf00      	nop
 80176fc:	24010008 	.word	0x24010008

08017700 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8017706:	f000 ffc1 	bl	801868c <sys_arch_protect>
 801770a:	6038      	str	r0, [r7, #0]
 801770c:	4b0d      	ldr	r3, [pc, #52]	; (8017744 <pbuf_free_ooseq+0x44>)
 801770e:	2200      	movs	r2, #0
 8017710:	701a      	strb	r2, [r3, #0]
 8017712:	6838      	ldr	r0, [r7, #0]
 8017714:	f000 ffc8 	bl	80186a8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017718:	4b0b      	ldr	r3, [pc, #44]	; (8017748 <pbuf_free_ooseq+0x48>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	607b      	str	r3, [r7, #4]
 801771e:	e00a      	b.n	8017736 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017724:	2b00      	cmp	r3, #0
 8017726:	d003      	beq.n	8017730 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8017728:	6878      	ldr	r0, [r7, #4]
 801772a:	f002 fe29 	bl	801a380 <tcp_free_ooseq>
      return;
 801772e:	e005      	b.n	801773c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	68db      	ldr	r3, [r3, #12]
 8017734:	607b      	str	r3, [r7, #4]
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d1f1      	bne.n	8017720 <pbuf_free_ooseq+0x20>
    }
  }
}
 801773c:	3708      	adds	r7, #8
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}
 8017742:	bf00      	nop
 8017744:	24010011 	.word	0x24010011
 8017748:	24010024 	.word	0x24010024

0801774c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b082      	sub	sp, #8
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8017754:	f7ff ffd4 	bl	8017700 <pbuf_free_ooseq>
}
 8017758:	bf00      	nop
 801775a:	3708      	adds	r7, #8
 801775c:	46bd      	mov	sp, r7
 801775e:	bd80      	pop	{r7, pc}

08017760 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b082      	sub	sp, #8
 8017764:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8017766:	f000 ff91 	bl	801868c <sys_arch_protect>
 801776a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801776c:	4b0f      	ldr	r3, [pc, #60]	; (80177ac <pbuf_pool_is_empty+0x4c>)
 801776e:	781b      	ldrb	r3, [r3, #0]
 8017770:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8017772:	4b0e      	ldr	r3, [pc, #56]	; (80177ac <pbuf_pool_is_empty+0x4c>)
 8017774:	2201      	movs	r2, #1
 8017776:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f000 ff95 	bl	80186a8 <sys_arch_unprotect>

  if (!queued) {
 801777e:	78fb      	ldrb	r3, [r7, #3]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d10f      	bne.n	80177a4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8017784:	2100      	movs	r1, #0
 8017786:	480a      	ldr	r0, [pc, #40]	; (80177b0 <pbuf_pool_is_empty+0x50>)
 8017788:	f007 f91c 	bl	801e9c4 <tcpip_try_callback>
 801778c:	4603      	mov	r3, r0
 801778e:	2b00      	cmp	r3, #0
 8017790:	d008      	beq.n	80177a4 <pbuf_pool_is_empty+0x44>
 8017792:	f000 ff7b 	bl	801868c <sys_arch_protect>
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	4b04      	ldr	r3, [pc, #16]	; (80177ac <pbuf_pool_is_empty+0x4c>)
 801779a:	2200      	movs	r2, #0
 801779c:	701a      	strb	r2, [r3, #0]
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f000 ff82 	bl	80186a8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80177a4:	bf00      	nop
 80177a6:	3708      	adds	r7, #8
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	24010011 	.word	0x24010011
 80177b0:	0801774d 	.word	0x0801774d

080177b4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80177b4:	b480      	push	{r7}
 80177b6:	b085      	sub	sp, #20
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	60f8      	str	r0, [r7, #12]
 80177bc:	60b9      	str	r1, [r7, #8]
 80177be:	4611      	mov	r1, r2
 80177c0:	461a      	mov	r2, r3
 80177c2:	460b      	mov	r3, r1
 80177c4:	80fb      	strh	r3, [r7, #6]
 80177c6:	4613      	mov	r3, r2
 80177c8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	2200      	movs	r2, #0
 80177ce:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	68ba      	ldr	r2, [r7, #8]
 80177d4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	88fa      	ldrh	r2, [r7, #6]
 80177da:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	88ba      	ldrh	r2, [r7, #4]
 80177e0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80177e2:	8b3b      	ldrh	r3, [r7, #24]
 80177e4:	b2da      	uxtb	r2, r3
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	7f3a      	ldrb	r2, [r7, #28]
 80177ee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	2201      	movs	r2, #1
 80177f4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	2200      	movs	r2, #0
 80177fa:	73da      	strb	r2, [r3, #15]
}
 80177fc:	bf00      	nop
 80177fe:	3714      	adds	r7, #20
 8017800:	46bd      	mov	sp, r7
 8017802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017806:	4770      	bx	lr

08017808 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b08c      	sub	sp, #48	; 0x30
 801780c:	af02      	add	r7, sp, #8
 801780e:	4603      	mov	r3, r0
 8017810:	71fb      	strb	r3, [r7, #7]
 8017812:	460b      	mov	r3, r1
 8017814:	80bb      	strh	r3, [r7, #4]
 8017816:	4613      	mov	r3, r2
 8017818:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801781a:	79fb      	ldrb	r3, [r7, #7]
 801781c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801781e:	887b      	ldrh	r3, [r7, #2]
 8017820:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017824:	f000 8082 	beq.w	801792c <pbuf_alloc+0x124>
 8017828:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801782c:	f300 80c9 	bgt.w	80179c2 <pbuf_alloc+0x1ba>
 8017830:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017834:	d010      	beq.n	8017858 <pbuf_alloc+0x50>
 8017836:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801783a:	f300 80c2 	bgt.w	80179c2 <pbuf_alloc+0x1ba>
 801783e:	2b01      	cmp	r3, #1
 8017840:	d002      	beq.n	8017848 <pbuf_alloc+0x40>
 8017842:	2b41      	cmp	r3, #65	; 0x41
 8017844:	f040 80bd 	bne.w	80179c2 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8017848:	887a      	ldrh	r2, [r7, #2]
 801784a:	88bb      	ldrh	r3, [r7, #4]
 801784c:	4619      	mov	r1, r3
 801784e:	2000      	movs	r0, #0
 8017850:	f000 f8d2 	bl	80179f8 <pbuf_alloc_reference>
 8017854:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8017856:	e0be      	b.n	80179d6 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8017858:	2300      	movs	r3, #0
 801785a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801785c:	2300      	movs	r3, #0
 801785e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8017860:	88bb      	ldrh	r3, [r7, #4]
 8017862:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8017864:	200c      	movs	r0, #12
 8017866:	f7ff fb49 	bl	8016efc <memp_malloc>
 801786a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801786c:	693b      	ldr	r3, [r7, #16]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d109      	bne.n	8017886 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8017872:	f7ff ff75 	bl	8017760 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8017876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017878:	2b00      	cmp	r3, #0
 801787a:	d002      	beq.n	8017882 <pbuf_alloc+0x7a>
            pbuf_free(p);
 801787c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801787e:	f000 faa7 	bl	8017dd0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8017882:	2300      	movs	r3, #0
 8017884:	e0a8      	b.n	80179d8 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017888:	3303      	adds	r3, #3
 801788a:	b29b      	uxth	r3, r3
 801788c:	f023 0303 	bic.w	r3, r3, #3
 8017890:	b29a      	uxth	r2, r3
 8017892:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8017896:	1a9b      	subs	r3, r3, r2
 8017898:	b29b      	uxth	r3, r3
 801789a:	8b7a      	ldrh	r2, [r7, #26]
 801789c:	4293      	cmp	r3, r2
 801789e:	bf28      	it	cs
 80178a0:	4613      	movcs	r3, r2
 80178a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80178a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178a6:	3310      	adds	r3, #16
 80178a8:	693a      	ldr	r2, [r7, #16]
 80178aa:	4413      	add	r3, r2
 80178ac:	3303      	adds	r3, #3
 80178ae:	f023 0303 	bic.w	r3, r3, #3
 80178b2:	4618      	mov	r0, r3
 80178b4:	89f9      	ldrh	r1, [r7, #14]
 80178b6:	8b7a      	ldrh	r2, [r7, #26]
 80178b8:	2300      	movs	r3, #0
 80178ba:	9301      	str	r3, [sp, #4]
 80178bc:	887b      	ldrh	r3, [r7, #2]
 80178be:	9300      	str	r3, [sp, #0]
 80178c0:	460b      	mov	r3, r1
 80178c2:	4601      	mov	r1, r0
 80178c4:	6938      	ldr	r0, [r7, #16]
 80178c6:	f7ff ff75 	bl	80177b4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80178ca:	693b      	ldr	r3, [r7, #16]
 80178cc:	685b      	ldr	r3, [r3, #4]
 80178ce:	f003 0303 	and.w	r3, r3, #3
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d006      	beq.n	80178e4 <pbuf_alloc+0xdc>
 80178d6:	4b42      	ldr	r3, [pc, #264]	; (80179e0 <pbuf_alloc+0x1d8>)
 80178d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80178dc:	4941      	ldr	r1, [pc, #260]	; (80179e4 <pbuf_alloc+0x1dc>)
 80178de:	4842      	ldr	r0, [pc, #264]	; (80179e8 <pbuf_alloc+0x1e0>)
 80178e0:	f008 fc12 	bl	8020108 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80178e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178e6:	3303      	adds	r3, #3
 80178e8:	f023 0303 	bic.w	r3, r3, #3
 80178ec:	f240 52ec 	movw	r2, #1516	; 0x5ec
 80178f0:	4293      	cmp	r3, r2
 80178f2:	d106      	bne.n	8017902 <pbuf_alloc+0xfa>
 80178f4:	4b3a      	ldr	r3, [pc, #232]	; (80179e0 <pbuf_alloc+0x1d8>)
 80178f6:	f44f 7281 	mov.w	r2, #258	; 0x102
 80178fa:	493c      	ldr	r1, [pc, #240]	; (80179ec <pbuf_alloc+0x1e4>)
 80178fc:	483a      	ldr	r0, [pc, #232]	; (80179e8 <pbuf_alloc+0x1e0>)
 80178fe:	f008 fc03 	bl	8020108 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8017902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017904:	2b00      	cmp	r3, #0
 8017906:	d102      	bne.n	801790e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8017908:	693b      	ldr	r3, [r7, #16]
 801790a:	627b      	str	r3, [r7, #36]	; 0x24
 801790c:	e002      	b.n	8017914 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801790e:	69fb      	ldr	r3, [r7, #28]
 8017910:	693a      	ldr	r2, [r7, #16]
 8017912:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8017914:	693b      	ldr	r3, [r7, #16]
 8017916:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8017918:	8b7a      	ldrh	r2, [r7, #26]
 801791a:	89fb      	ldrh	r3, [r7, #14]
 801791c:	1ad3      	subs	r3, r2, r3
 801791e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8017920:	2300      	movs	r3, #0
 8017922:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8017924:	8b7b      	ldrh	r3, [r7, #26]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d19c      	bne.n	8017864 <pbuf_alloc+0x5c>
      break;
 801792a:	e054      	b.n	80179d6 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801792c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801792e:	3303      	adds	r3, #3
 8017930:	b29b      	uxth	r3, r3
 8017932:	f023 0303 	bic.w	r3, r3, #3
 8017936:	b29a      	uxth	r2, r3
 8017938:	88bb      	ldrh	r3, [r7, #4]
 801793a:	3303      	adds	r3, #3
 801793c:	b29b      	uxth	r3, r3
 801793e:	f023 0303 	bic.w	r3, r3, #3
 8017942:	b29b      	uxth	r3, r3
 8017944:	4413      	add	r3, r2
 8017946:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8017948:	8b3b      	ldrh	r3, [r7, #24]
 801794a:	3310      	adds	r3, #16
 801794c:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801794e:	8b3a      	ldrh	r2, [r7, #24]
 8017950:	88bb      	ldrh	r3, [r7, #4]
 8017952:	3303      	adds	r3, #3
 8017954:	f023 0303 	bic.w	r3, r3, #3
 8017958:	429a      	cmp	r2, r3
 801795a:	d306      	bcc.n	801796a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801795c:	88bb      	ldrh	r3, [r7, #4]
 801795e:	3303      	adds	r3, #3
 8017960:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017964:	697a      	ldr	r2, [r7, #20]
 8017966:	429a      	cmp	r2, r3
 8017968:	d201      	bcs.n	801796e <pbuf_alloc+0x166>
        return NULL;
 801796a:	2300      	movs	r3, #0
 801796c:	e034      	b.n	80179d8 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801796e:	6978      	ldr	r0, [r7, #20]
 8017970:	f7ff f928 	bl	8016bc4 <mem_malloc>
 8017974:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8017976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017978:	2b00      	cmp	r3, #0
 801797a:	d101      	bne.n	8017980 <pbuf_alloc+0x178>
        return NULL;
 801797c:	2300      	movs	r3, #0
 801797e:	e02b      	b.n	80179d8 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017982:	3310      	adds	r3, #16
 8017984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017986:	4413      	add	r3, r2
 8017988:	3303      	adds	r3, #3
 801798a:	f023 0303 	bic.w	r3, r3, #3
 801798e:	4618      	mov	r0, r3
 8017990:	88b9      	ldrh	r1, [r7, #4]
 8017992:	88ba      	ldrh	r2, [r7, #4]
 8017994:	2300      	movs	r3, #0
 8017996:	9301      	str	r3, [sp, #4]
 8017998:	887b      	ldrh	r3, [r7, #2]
 801799a:	9300      	str	r3, [sp, #0]
 801799c:	460b      	mov	r3, r1
 801799e:	4601      	mov	r1, r0
 80179a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80179a2:	f7ff ff07 	bl	80177b4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80179a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	f003 0303 	and.w	r3, r3, #3
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d010      	beq.n	80179d4 <pbuf_alloc+0x1cc>
 80179b2:	4b0b      	ldr	r3, [pc, #44]	; (80179e0 <pbuf_alloc+0x1d8>)
 80179b4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80179b8:	490d      	ldr	r1, [pc, #52]	; (80179f0 <pbuf_alloc+0x1e8>)
 80179ba:	480b      	ldr	r0, [pc, #44]	; (80179e8 <pbuf_alloc+0x1e0>)
 80179bc:	f008 fba4 	bl	8020108 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80179c0:	e008      	b.n	80179d4 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80179c2:	4b07      	ldr	r3, [pc, #28]	; (80179e0 <pbuf_alloc+0x1d8>)
 80179c4:	f240 1227 	movw	r2, #295	; 0x127
 80179c8:	490a      	ldr	r1, [pc, #40]	; (80179f4 <pbuf_alloc+0x1ec>)
 80179ca:	4807      	ldr	r0, [pc, #28]	; (80179e8 <pbuf_alloc+0x1e0>)
 80179cc:	f008 fb9c 	bl	8020108 <iprintf>
      return NULL;
 80179d0:	2300      	movs	r3, #0
 80179d2:	e001      	b.n	80179d8 <pbuf_alloc+0x1d0>
      break;
 80179d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80179d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80179d8:	4618      	mov	r0, r3
 80179da:	3728      	adds	r7, #40	; 0x28
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}
 80179e0:	08022a54 	.word	0x08022a54
 80179e4:	08022ac8 	.word	0x08022ac8
 80179e8:	08022af8 	.word	0x08022af8
 80179ec:	08022b20 	.word	0x08022b20
 80179f0:	08022b54 	.word	0x08022b54
 80179f4:	08022b80 	.word	0x08022b80

080179f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b086      	sub	sp, #24
 80179fc:	af02      	add	r7, sp, #8
 80179fe:	6078      	str	r0, [r7, #4]
 8017a00:	460b      	mov	r3, r1
 8017a02:	807b      	strh	r3, [r7, #2]
 8017a04:	4613      	mov	r3, r2
 8017a06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8017a08:	883b      	ldrh	r3, [r7, #0]
 8017a0a:	2b41      	cmp	r3, #65	; 0x41
 8017a0c:	d009      	beq.n	8017a22 <pbuf_alloc_reference+0x2a>
 8017a0e:	883b      	ldrh	r3, [r7, #0]
 8017a10:	2b01      	cmp	r3, #1
 8017a12:	d006      	beq.n	8017a22 <pbuf_alloc_reference+0x2a>
 8017a14:	4b0f      	ldr	r3, [pc, #60]	; (8017a54 <pbuf_alloc_reference+0x5c>)
 8017a16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8017a1a:	490f      	ldr	r1, [pc, #60]	; (8017a58 <pbuf_alloc_reference+0x60>)
 8017a1c:	480f      	ldr	r0, [pc, #60]	; (8017a5c <pbuf_alloc_reference+0x64>)
 8017a1e:	f008 fb73 	bl	8020108 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8017a22:	200b      	movs	r0, #11
 8017a24:	f7ff fa6a 	bl	8016efc <memp_malloc>
 8017a28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d101      	bne.n	8017a34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8017a30:	2300      	movs	r3, #0
 8017a32:	e00b      	b.n	8017a4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8017a34:	8879      	ldrh	r1, [r7, #2]
 8017a36:	887a      	ldrh	r2, [r7, #2]
 8017a38:	2300      	movs	r3, #0
 8017a3a:	9301      	str	r3, [sp, #4]
 8017a3c:	883b      	ldrh	r3, [r7, #0]
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	460b      	mov	r3, r1
 8017a42:	6879      	ldr	r1, [r7, #4]
 8017a44:	68f8      	ldr	r0, [r7, #12]
 8017a46:	f7ff feb5 	bl	80177b4 <pbuf_init_alloced_pbuf>
  return p;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3710      	adds	r7, #16
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	08022a54 	.word	0x08022a54
 8017a58:	08022b9c 	.word	0x08022b9c
 8017a5c:	08022af8 	.word	0x08022af8

08017a60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b088      	sub	sp, #32
 8017a64:	af02      	add	r7, sp, #8
 8017a66:	607b      	str	r3, [r7, #4]
 8017a68:	4603      	mov	r3, r0
 8017a6a:	73fb      	strb	r3, [r7, #15]
 8017a6c:	460b      	mov	r3, r1
 8017a6e:	81bb      	strh	r3, [r7, #12]
 8017a70:	4613      	mov	r3, r2
 8017a72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8017a74:	7bfb      	ldrb	r3, [r7, #15]
 8017a76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8017a78:	8a7b      	ldrh	r3, [r7, #18]
 8017a7a:	3303      	adds	r3, #3
 8017a7c:	f023 0203 	bic.w	r2, r3, #3
 8017a80:	89bb      	ldrh	r3, [r7, #12]
 8017a82:	441a      	add	r2, r3
 8017a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d901      	bls.n	8017a8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	e018      	b.n	8017ac0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8017a8e:	6a3b      	ldr	r3, [r7, #32]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d007      	beq.n	8017aa4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8017a94:	8a7b      	ldrh	r3, [r7, #18]
 8017a96:	3303      	adds	r3, #3
 8017a98:	f023 0303 	bic.w	r3, r3, #3
 8017a9c:	6a3a      	ldr	r2, [r7, #32]
 8017a9e:	4413      	add	r3, r2
 8017aa0:	617b      	str	r3, [r7, #20]
 8017aa2:	e001      	b.n	8017aa8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	89b9      	ldrh	r1, [r7, #12]
 8017aac:	89ba      	ldrh	r2, [r7, #12]
 8017aae:	2302      	movs	r3, #2
 8017ab0:	9301      	str	r3, [sp, #4]
 8017ab2:	897b      	ldrh	r3, [r7, #10]
 8017ab4:	9300      	str	r3, [sp, #0]
 8017ab6:	460b      	mov	r3, r1
 8017ab8:	6979      	ldr	r1, [r7, #20]
 8017aba:	f7ff fe7b 	bl	80177b4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8017abe:	687b      	ldr	r3, [r7, #4]
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	3718      	adds	r7, #24
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd80      	pop	{r7, pc}

08017ac8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
 8017ad0:	460b      	mov	r3, r1
 8017ad2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d106      	bne.n	8017ae8 <pbuf_realloc+0x20>
 8017ada:	4b39      	ldr	r3, [pc, #228]	; (8017bc0 <pbuf_realloc+0xf8>)
 8017adc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017ae0:	4938      	ldr	r1, [pc, #224]	; (8017bc4 <pbuf_realloc+0xfc>)
 8017ae2:	4839      	ldr	r0, [pc, #228]	; (8017bc8 <pbuf_realloc+0x100>)
 8017ae4:	f008 fb10 	bl	8020108 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	891b      	ldrh	r3, [r3, #8]
 8017aec:	887a      	ldrh	r2, [r7, #2]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d261      	bcs.n	8017bb6 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	891a      	ldrh	r2, [r3, #8]
 8017af6:	887b      	ldrh	r3, [r7, #2]
 8017af8:	1ad3      	subs	r3, r2, r3
 8017afa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8017afc:	887b      	ldrh	r3, [r7, #2]
 8017afe:	817b      	strh	r3, [r7, #10]
  q = p;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8017b04:	e018      	b.n	8017b38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	895b      	ldrh	r3, [r3, #10]
 8017b0a:	897a      	ldrh	r2, [r7, #10]
 8017b0c:	1ad3      	subs	r3, r2, r3
 8017b0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	891a      	ldrh	r2, [r3, #8]
 8017b14:	893b      	ldrh	r3, [r7, #8]
 8017b16:	1ad3      	subs	r3, r2, r3
 8017b18:	b29a      	uxth	r2, r3
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d106      	bne.n	8017b38 <pbuf_realloc+0x70>
 8017b2a:	4b25      	ldr	r3, [pc, #148]	; (8017bc0 <pbuf_realloc+0xf8>)
 8017b2c:	f240 12af 	movw	r2, #431	; 0x1af
 8017b30:	4926      	ldr	r1, [pc, #152]	; (8017bcc <pbuf_realloc+0x104>)
 8017b32:	4825      	ldr	r0, [pc, #148]	; (8017bc8 <pbuf_realloc+0x100>)
 8017b34:	f008 fae8 	bl	8020108 <iprintf>
  while (rem_len > q->len) {
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	895b      	ldrh	r3, [r3, #10]
 8017b3c:	897a      	ldrh	r2, [r7, #10]
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d8e1      	bhi.n	8017b06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	7b1b      	ldrb	r3, [r3, #12]
 8017b46:	f003 030f 	and.w	r3, r3, #15
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d11f      	bne.n	8017b8e <pbuf_realloc+0xc6>
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	895b      	ldrh	r3, [r3, #10]
 8017b52:	897a      	ldrh	r2, [r7, #10]
 8017b54:	429a      	cmp	r2, r3
 8017b56:	d01a      	beq.n	8017b8e <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	7b5b      	ldrb	r3, [r3, #13]
 8017b5c:	f003 0302 	and.w	r3, r3, #2
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d114      	bne.n	8017b8e <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	685a      	ldr	r2, [r3, #4]
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	1ad2      	subs	r2, r2, r3
 8017b6c:	897b      	ldrh	r3, [r7, #10]
 8017b6e:	4413      	add	r3, r2
 8017b70:	4619      	mov	r1, r3
 8017b72:	68f8      	ldr	r0, [r7, #12]
 8017b74:	f7fe ff24 	bl	80169c0 <mem_trim>
 8017b78:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d106      	bne.n	8017b8e <pbuf_realloc+0xc6>
 8017b80:	4b0f      	ldr	r3, [pc, #60]	; (8017bc0 <pbuf_realloc+0xf8>)
 8017b82:	f240 12bd 	movw	r2, #445	; 0x1bd
 8017b86:	4912      	ldr	r1, [pc, #72]	; (8017bd0 <pbuf_realloc+0x108>)
 8017b88:	480f      	ldr	r0, [pc, #60]	; (8017bc8 <pbuf_realloc+0x100>)
 8017b8a:	f008 fabd 	bl	8020108 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	897a      	ldrh	r2, [r7, #10]
 8017b92:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	895a      	ldrh	r2, [r3, #10]
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d004      	beq.n	8017bae <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f000 f911 	bl	8017dd0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	601a      	str	r2, [r3, #0]
 8017bb4:	e000      	b.n	8017bb8 <pbuf_realloc+0xf0>
    return;
 8017bb6:	bf00      	nop

}
 8017bb8:	3710      	adds	r7, #16
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop
 8017bc0:	08022a54 	.word	0x08022a54
 8017bc4:	08022bb0 	.word	0x08022bb0
 8017bc8:	08022af8 	.word	0x08022af8
 8017bcc:	08022bc8 	.word	0x08022bc8
 8017bd0:	08022be0 	.word	0x08022be0

08017bd4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b086      	sub	sp, #24
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	60f8      	str	r0, [r7, #12]
 8017bdc:	60b9      	str	r1, [r7, #8]
 8017bde:	4613      	mov	r3, r2
 8017be0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d106      	bne.n	8017bf6 <pbuf_add_header_impl+0x22>
 8017be8:	4b2b      	ldr	r3, [pc, #172]	; (8017c98 <pbuf_add_header_impl+0xc4>)
 8017bea:	f240 12df 	movw	r2, #479	; 0x1df
 8017bee:	492b      	ldr	r1, [pc, #172]	; (8017c9c <pbuf_add_header_impl+0xc8>)
 8017bf0:	482b      	ldr	r0, [pc, #172]	; (8017ca0 <pbuf_add_header_impl+0xcc>)
 8017bf2:	f008 fa89 	bl	8020108 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d003      	beq.n	8017c04 <pbuf_add_header_impl+0x30>
 8017bfc:	68bb      	ldr	r3, [r7, #8]
 8017bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017c02:	d301      	bcc.n	8017c08 <pbuf_add_header_impl+0x34>
    return 1;
 8017c04:	2301      	movs	r3, #1
 8017c06:	e043      	b.n	8017c90 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d101      	bne.n	8017c12 <pbuf_add_header_impl+0x3e>
    return 0;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	e03e      	b.n	8017c90 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8017c12:	68bb      	ldr	r3, [r7, #8]
 8017c14:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	891a      	ldrh	r2, [r3, #8]
 8017c1a:	8a7b      	ldrh	r3, [r7, #18]
 8017c1c:	4413      	add	r3, r2
 8017c1e:	b29b      	uxth	r3, r3
 8017c20:	8a7a      	ldrh	r2, [r7, #18]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d901      	bls.n	8017c2a <pbuf_add_header_impl+0x56>
    return 1;
 8017c26:	2301      	movs	r3, #1
 8017c28:	e032      	b.n	8017c90 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	7b1b      	ldrb	r3, [r3, #12]
 8017c2e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8017c30:	8a3b      	ldrh	r3, [r7, #16]
 8017c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d00c      	beq.n	8017c54 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	685a      	ldr	r2, [r3, #4]
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	425b      	negs	r3, r3
 8017c42:	4413      	add	r3, r2
 8017c44:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	3310      	adds	r3, #16
 8017c4a:	697a      	ldr	r2, [r7, #20]
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	d20d      	bcs.n	8017c6c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8017c50:	2301      	movs	r3, #1
 8017c52:	e01d      	b.n	8017c90 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8017c54:	79fb      	ldrb	r3, [r7, #7]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d006      	beq.n	8017c68 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	685a      	ldr	r2, [r3, #4]
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	425b      	negs	r3, r3
 8017c62:	4413      	add	r3, r2
 8017c64:	617b      	str	r3, [r7, #20]
 8017c66:	e001      	b.n	8017c6c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8017c68:	2301      	movs	r3, #1
 8017c6a:	e011      	b.n	8017c90 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	697a      	ldr	r2, [r7, #20]
 8017c70:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	895a      	ldrh	r2, [r3, #10]
 8017c76:	8a7b      	ldrh	r3, [r7, #18]
 8017c78:	4413      	add	r3, r2
 8017c7a:	b29a      	uxth	r2, r3
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	891a      	ldrh	r2, [r3, #8]
 8017c84:	8a7b      	ldrh	r3, [r7, #18]
 8017c86:	4413      	add	r3, r2
 8017c88:	b29a      	uxth	r2, r3
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	811a      	strh	r2, [r3, #8]


  return 0;
 8017c8e:	2300      	movs	r3, #0
}
 8017c90:	4618      	mov	r0, r3
 8017c92:	3718      	adds	r7, #24
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}
 8017c98:	08022a54 	.word	0x08022a54
 8017c9c:	08022bfc 	.word	0x08022bfc
 8017ca0:	08022af8 	.word	0x08022af8

08017ca4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8017cae:	2200      	movs	r2, #0
 8017cb0:	6839      	ldr	r1, [r7, #0]
 8017cb2:	6878      	ldr	r0, [r7, #4]
 8017cb4:	f7ff ff8e 	bl	8017bd4 <pbuf_add_header_impl>
 8017cb8:	4603      	mov	r3, r0
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	3708      	adds	r7, #8
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}
	...

08017cc4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b084      	sub	sp, #16
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d106      	bne.n	8017ce2 <pbuf_remove_header+0x1e>
 8017cd4:	4b20      	ldr	r3, [pc, #128]	; (8017d58 <pbuf_remove_header+0x94>)
 8017cd6:	f240 224b 	movw	r2, #587	; 0x24b
 8017cda:	4920      	ldr	r1, [pc, #128]	; (8017d5c <pbuf_remove_header+0x98>)
 8017cdc:	4820      	ldr	r0, [pc, #128]	; (8017d60 <pbuf_remove_header+0x9c>)
 8017cde:	f008 fa13 	bl	8020108 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d003      	beq.n	8017cf0 <pbuf_remove_header+0x2c>
 8017ce8:	683b      	ldr	r3, [r7, #0]
 8017cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017cee:	d301      	bcc.n	8017cf4 <pbuf_remove_header+0x30>
    return 1;
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	e02c      	b.n	8017d4e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d101      	bne.n	8017cfe <pbuf_remove_header+0x3a>
    return 0;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	e027      	b.n	8017d4e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8017cfe:	683b      	ldr	r3, [r7, #0]
 8017d00:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	895b      	ldrh	r3, [r3, #10]
 8017d06:	89fa      	ldrh	r2, [r7, #14]
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d908      	bls.n	8017d1e <pbuf_remove_header+0x5a>
 8017d0c:	4b12      	ldr	r3, [pc, #72]	; (8017d58 <pbuf_remove_header+0x94>)
 8017d0e:	f240 2255 	movw	r2, #597	; 0x255
 8017d12:	4914      	ldr	r1, [pc, #80]	; (8017d64 <pbuf_remove_header+0xa0>)
 8017d14:	4812      	ldr	r0, [pc, #72]	; (8017d60 <pbuf_remove_header+0x9c>)
 8017d16:	f008 f9f7 	bl	8020108 <iprintf>
 8017d1a:	2301      	movs	r3, #1
 8017d1c:	e017      	b.n	8017d4e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	685b      	ldr	r3, [r3, #4]
 8017d22:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	685a      	ldr	r2, [r3, #4]
 8017d28:	683b      	ldr	r3, [r7, #0]
 8017d2a:	441a      	add	r2, r3
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	895a      	ldrh	r2, [r3, #10]
 8017d34:	89fb      	ldrh	r3, [r7, #14]
 8017d36:	1ad3      	subs	r3, r2, r3
 8017d38:	b29a      	uxth	r2, r3
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	891a      	ldrh	r2, [r3, #8]
 8017d42:	89fb      	ldrh	r3, [r7, #14]
 8017d44:	1ad3      	subs	r3, r2, r3
 8017d46:	b29a      	uxth	r2, r3
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8017d4c:	2300      	movs	r3, #0
}
 8017d4e:	4618      	mov	r0, r3
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop
 8017d58:	08022a54 	.word	0x08022a54
 8017d5c:	08022bfc 	.word	0x08022bfc
 8017d60:	08022af8 	.word	0x08022af8
 8017d64:	08022c08 	.word	0x08022c08

08017d68 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b082      	sub	sp, #8
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
 8017d70:	460b      	mov	r3, r1
 8017d72:	807b      	strh	r3, [r7, #2]
 8017d74:	4613      	mov	r3, r2
 8017d76:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8017d78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	da08      	bge.n	8017d92 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8017d80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017d84:	425b      	negs	r3, r3
 8017d86:	4619      	mov	r1, r3
 8017d88:	6878      	ldr	r0, [r7, #4]
 8017d8a:	f7ff ff9b 	bl	8017cc4 <pbuf_remove_header>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	e007      	b.n	8017da2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8017d92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017d96:	787a      	ldrb	r2, [r7, #1]
 8017d98:	4619      	mov	r1, r3
 8017d9a:	6878      	ldr	r0, [r7, #4]
 8017d9c:	f7ff ff1a 	bl	8017bd4 <pbuf_add_header_impl>
 8017da0:	4603      	mov	r3, r0
  }
}
 8017da2:	4618      	mov	r0, r3
 8017da4:	3708      	adds	r7, #8
 8017da6:	46bd      	mov	sp, r7
 8017da8:	bd80      	pop	{r7, pc}

08017daa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8017daa:	b580      	push	{r7, lr}
 8017dac:	b082      	sub	sp, #8
 8017dae:	af00      	add	r7, sp, #0
 8017db0:	6078      	str	r0, [r7, #4]
 8017db2:	460b      	mov	r3, r1
 8017db4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8017db6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017dba:	2201      	movs	r2, #1
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7ff ffd2 	bl	8017d68 <pbuf_header_impl>
 8017dc4:	4603      	mov	r3, r0
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3708      	adds	r7, #8
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}
	...

08017dd0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8017dd0:	b580      	push	{r7, lr}
 8017dd2:	b088      	sub	sp, #32
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d10b      	bne.n	8017df6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d106      	bne.n	8017df2 <pbuf_free+0x22>
 8017de4:	4b3b      	ldr	r3, [pc, #236]	; (8017ed4 <pbuf_free+0x104>)
 8017de6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8017dea:	493b      	ldr	r1, [pc, #236]	; (8017ed8 <pbuf_free+0x108>)
 8017dec:	483b      	ldr	r0, [pc, #236]	; (8017edc <pbuf_free+0x10c>)
 8017dee:	f008 f98b 	bl	8020108 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8017df2:	2300      	movs	r3, #0
 8017df4:	e069      	b.n	8017eca <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8017df6:	2300      	movs	r3, #0
 8017df8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8017dfa:	e062      	b.n	8017ec2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8017dfc:	f000 fc46 	bl	801868c <sys_arch_protect>
 8017e00:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	7b9b      	ldrb	r3, [r3, #14]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d106      	bne.n	8017e18 <pbuf_free+0x48>
 8017e0a:	4b32      	ldr	r3, [pc, #200]	; (8017ed4 <pbuf_free+0x104>)
 8017e0c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8017e10:	4933      	ldr	r1, [pc, #204]	; (8017ee0 <pbuf_free+0x110>)
 8017e12:	4832      	ldr	r0, [pc, #200]	; (8017edc <pbuf_free+0x10c>)
 8017e14:	f008 f978 	bl	8020108 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	7b9b      	ldrb	r3, [r3, #14]
 8017e1c:	3b01      	subs	r3, #1
 8017e1e:	b2da      	uxtb	r2, r3
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	739a      	strb	r2, [r3, #14]
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	7b9b      	ldrb	r3, [r3, #14]
 8017e28:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8017e2a:	69b8      	ldr	r0, [r7, #24]
 8017e2c:	f000 fc3c 	bl	80186a8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8017e30:	7dfb      	ldrb	r3, [r7, #23]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d143      	bne.n	8017ebe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	7b1b      	ldrb	r3, [r3, #12]
 8017e40:	f003 030f 	and.w	r3, r3, #15
 8017e44:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	7b5b      	ldrb	r3, [r3, #13]
 8017e4a:	f003 0302 	and.w	r3, r3, #2
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d011      	beq.n	8017e76 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8017e56:	68bb      	ldr	r3, [r7, #8]
 8017e58:	691b      	ldr	r3, [r3, #16]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d106      	bne.n	8017e6c <pbuf_free+0x9c>
 8017e5e:	4b1d      	ldr	r3, [pc, #116]	; (8017ed4 <pbuf_free+0x104>)
 8017e60:	f240 22ff 	movw	r2, #767	; 0x2ff
 8017e64:	491f      	ldr	r1, [pc, #124]	; (8017ee4 <pbuf_free+0x114>)
 8017e66:	481d      	ldr	r0, [pc, #116]	; (8017edc <pbuf_free+0x10c>)
 8017e68:	f008 f94e 	bl	8020108 <iprintf>
        pc->custom_free_function(p);
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	691b      	ldr	r3, [r3, #16]
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	4798      	blx	r3
 8017e74:	e01d      	b.n	8017eb2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8017e76:	7bfb      	ldrb	r3, [r7, #15]
 8017e78:	2b02      	cmp	r3, #2
 8017e7a:	d104      	bne.n	8017e86 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8017e7c:	6879      	ldr	r1, [r7, #4]
 8017e7e:	200c      	movs	r0, #12
 8017e80:	f7ff f8b2 	bl	8016fe8 <memp_free>
 8017e84:	e015      	b.n	8017eb2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8017e86:	7bfb      	ldrb	r3, [r7, #15]
 8017e88:	2b01      	cmp	r3, #1
 8017e8a:	d104      	bne.n	8017e96 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8017e8c:	6879      	ldr	r1, [r7, #4]
 8017e8e:	200b      	movs	r0, #11
 8017e90:	f7ff f8aa 	bl	8016fe8 <memp_free>
 8017e94:	e00d      	b.n	8017eb2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8017e96:	7bfb      	ldrb	r3, [r7, #15]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d103      	bne.n	8017ea4 <pbuf_free+0xd4>
          mem_free(p);
 8017e9c:	6878      	ldr	r0, [r7, #4]
 8017e9e:	f7fe fcff 	bl	80168a0 <mem_free>
 8017ea2:	e006      	b.n	8017eb2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8017ea4:	4b0b      	ldr	r3, [pc, #44]	; (8017ed4 <pbuf_free+0x104>)
 8017ea6:	f240 320f 	movw	r2, #783	; 0x30f
 8017eaa:	490f      	ldr	r1, [pc, #60]	; (8017ee8 <pbuf_free+0x118>)
 8017eac:	480b      	ldr	r0, [pc, #44]	; (8017edc <pbuf_free+0x10c>)
 8017eae:	f008 f92b 	bl	8020108 <iprintf>
        }
      }
      count++;
 8017eb2:	7ffb      	ldrb	r3, [r7, #31]
 8017eb4:	3301      	adds	r3, #1
 8017eb6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8017eb8:	693b      	ldr	r3, [r7, #16]
 8017eba:	607b      	str	r3, [r7, #4]
 8017ebc:	e001      	b.n	8017ec2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d199      	bne.n	8017dfc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8017ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8017eca:	4618      	mov	r0, r3
 8017ecc:	3720      	adds	r7, #32
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	bd80      	pop	{r7, pc}
 8017ed2:	bf00      	nop
 8017ed4:	08022a54 	.word	0x08022a54
 8017ed8:	08022bfc 	.word	0x08022bfc
 8017edc:	08022af8 	.word	0x08022af8
 8017ee0:	08022c28 	.word	0x08022c28
 8017ee4:	08022c40 	.word	0x08022c40
 8017ee8:	08022c64 	.word	0x08022c64

08017eec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8017eec:	b480      	push	{r7}
 8017eee:	b085      	sub	sp, #20
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8017ef8:	e005      	b.n	8017f06 <pbuf_clen+0x1a>
    ++len;
 8017efa:	89fb      	ldrh	r3, [r7, #14]
 8017efc:	3301      	adds	r3, #1
 8017efe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d1f6      	bne.n	8017efa <pbuf_clen+0xe>
  }
  return len;
 8017f0c:	89fb      	ldrh	r3, [r7, #14]
}
 8017f0e:	4618      	mov	r0, r3
 8017f10:	3714      	adds	r7, #20
 8017f12:	46bd      	mov	sp, r7
 8017f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f18:	4770      	bx	lr
	...

08017f1c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b084      	sub	sp, #16
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d016      	beq.n	8017f58 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8017f2a:	f000 fbaf 	bl	801868c <sys_arch_protect>
 8017f2e:	60f8      	str	r0, [r7, #12]
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	7b9b      	ldrb	r3, [r3, #14]
 8017f34:	3301      	adds	r3, #1
 8017f36:	b2da      	uxtb	r2, r3
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	739a      	strb	r2, [r3, #14]
 8017f3c:	68f8      	ldr	r0, [r7, #12]
 8017f3e:	f000 fbb3 	bl	80186a8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	7b9b      	ldrb	r3, [r3, #14]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d106      	bne.n	8017f58 <pbuf_ref+0x3c>
 8017f4a:	4b05      	ldr	r3, [pc, #20]	; (8017f60 <pbuf_ref+0x44>)
 8017f4c:	f240 3242 	movw	r2, #834	; 0x342
 8017f50:	4904      	ldr	r1, [pc, #16]	; (8017f64 <pbuf_ref+0x48>)
 8017f52:	4805      	ldr	r0, [pc, #20]	; (8017f68 <pbuf_ref+0x4c>)
 8017f54:	f008 f8d8 	bl	8020108 <iprintf>
  }
}
 8017f58:	bf00      	nop
 8017f5a:	3710      	adds	r7, #16
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}
 8017f60:	08022a54 	.word	0x08022a54
 8017f64:	08022c78 	.word	0x08022c78
 8017f68:	08022af8 	.word	0x08022af8

08017f6c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b084      	sub	sp, #16
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
 8017f74:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d002      	beq.n	8017f82 <pbuf_cat+0x16>
 8017f7c:	683b      	ldr	r3, [r7, #0]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d107      	bne.n	8017f92 <pbuf_cat+0x26>
 8017f82:	4b20      	ldr	r3, [pc, #128]	; (8018004 <pbuf_cat+0x98>)
 8017f84:	f240 3259 	movw	r2, #857	; 0x359
 8017f88:	491f      	ldr	r1, [pc, #124]	; (8018008 <pbuf_cat+0x9c>)
 8017f8a:	4820      	ldr	r0, [pc, #128]	; (801800c <pbuf_cat+0xa0>)
 8017f8c:	f008 f8bc 	bl	8020108 <iprintf>
 8017f90:	e034      	b.n	8017ffc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	60fb      	str	r3, [r7, #12]
 8017f96:	e00a      	b.n	8017fae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	891a      	ldrh	r2, [r3, #8]
 8017f9c:	683b      	ldr	r3, [r7, #0]
 8017f9e:	891b      	ldrh	r3, [r3, #8]
 8017fa0:	4413      	add	r3, r2
 8017fa2:	b29a      	uxth	r2, r3
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	60fb      	str	r3, [r7, #12]
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d1f0      	bne.n	8017f98 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	891a      	ldrh	r2, [r3, #8]
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	895b      	ldrh	r3, [r3, #10]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d006      	beq.n	8017fd0 <pbuf_cat+0x64>
 8017fc2:	4b10      	ldr	r3, [pc, #64]	; (8018004 <pbuf_cat+0x98>)
 8017fc4:	f240 3262 	movw	r2, #866	; 0x362
 8017fc8:	4911      	ldr	r1, [pc, #68]	; (8018010 <pbuf_cat+0xa4>)
 8017fca:	4810      	ldr	r0, [pc, #64]	; (801800c <pbuf_cat+0xa0>)
 8017fcc:	f008 f89c 	bl	8020108 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d006      	beq.n	8017fe6 <pbuf_cat+0x7a>
 8017fd8:	4b0a      	ldr	r3, [pc, #40]	; (8018004 <pbuf_cat+0x98>)
 8017fda:	f240 3263 	movw	r2, #867	; 0x363
 8017fde:	490d      	ldr	r1, [pc, #52]	; (8018014 <pbuf_cat+0xa8>)
 8017fe0:	480a      	ldr	r0, [pc, #40]	; (801800c <pbuf_cat+0xa0>)
 8017fe2:	f008 f891 	bl	8020108 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	891a      	ldrh	r2, [r3, #8]
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	891b      	ldrh	r3, [r3, #8]
 8017fee:	4413      	add	r3, r2
 8017ff0:	b29a      	uxth	r2, r3
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	683a      	ldr	r2, [r7, #0]
 8017ffa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8017ffc:	3710      	adds	r7, #16
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}
 8018002:	bf00      	nop
 8018004:	08022a54 	.word	0x08022a54
 8018008:	08022c8c 	.word	0x08022c8c
 801800c:	08022af8 	.word	0x08022af8
 8018010:	08022cc4 	.word	0x08022cc4
 8018014:	08022cf4 	.word	0x08022cf4

08018018 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b086      	sub	sp, #24
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8018022:	2300      	movs	r3, #0
 8018024:	617b      	str	r3, [r7, #20]
 8018026:	2300      	movs	r3, #0
 8018028:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d008      	beq.n	8018042 <pbuf_copy+0x2a>
 8018030:	683b      	ldr	r3, [r7, #0]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d005      	beq.n	8018042 <pbuf_copy+0x2a>
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	891a      	ldrh	r2, [r3, #8]
 801803a:	683b      	ldr	r3, [r7, #0]
 801803c:	891b      	ldrh	r3, [r3, #8]
 801803e:	429a      	cmp	r2, r3
 8018040:	d209      	bcs.n	8018056 <pbuf_copy+0x3e>
 8018042:	4b57      	ldr	r3, [pc, #348]	; (80181a0 <pbuf_copy+0x188>)
 8018044:	f240 32c9 	movw	r2, #969	; 0x3c9
 8018048:	4956      	ldr	r1, [pc, #344]	; (80181a4 <pbuf_copy+0x18c>)
 801804a:	4857      	ldr	r0, [pc, #348]	; (80181a8 <pbuf_copy+0x190>)
 801804c:	f008 f85c 	bl	8020108 <iprintf>
 8018050:	f06f 030f 	mvn.w	r3, #15
 8018054:	e09f      	b.n	8018196 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	895b      	ldrh	r3, [r3, #10]
 801805a:	461a      	mov	r2, r3
 801805c:	697b      	ldr	r3, [r7, #20]
 801805e:	1ad2      	subs	r2, r2, r3
 8018060:	683b      	ldr	r3, [r7, #0]
 8018062:	895b      	ldrh	r3, [r3, #10]
 8018064:	4619      	mov	r1, r3
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	1acb      	subs	r3, r1, r3
 801806a:	429a      	cmp	r2, r3
 801806c:	d306      	bcc.n	801807c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801806e:	683b      	ldr	r3, [r7, #0]
 8018070:	895b      	ldrh	r3, [r3, #10]
 8018072:	461a      	mov	r2, r3
 8018074:	693b      	ldr	r3, [r7, #16]
 8018076:	1ad3      	subs	r3, r2, r3
 8018078:	60fb      	str	r3, [r7, #12]
 801807a:	e005      	b.n	8018088 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	895b      	ldrh	r3, [r3, #10]
 8018080:	461a      	mov	r2, r3
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	1ad3      	subs	r3, r2, r3
 8018086:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	685a      	ldr	r2, [r3, #4]
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	18d0      	adds	r0, r2, r3
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	685a      	ldr	r2, [r3, #4]
 8018094:	693b      	ldr	r3, [r7, #16]
 8018096:	4413      	add	r3, r2
 8018098:	68fa      	ldr	r2, [r7, #12]
 801809a:	4619      	mov	r1, r3
 801809c:	f007 fc36 	bl	801f90c <memcpy>
    offset_to += len;
 80180a0:	697a      	ldr	r2, [r7, #20]
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	4413      	add	r3, r2
 80180a6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80180a8:	693a      	ldr	r2, [r7, #16]
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	4413      	add	r3, r2
 80180ae:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	895b      	ldrh	r3, [r3, #10]
 80180b4:	461a      	mov	r2, r3
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	4293      	cmp	r3, r2
 80180ba:	d906      	bls.n	80180ca <pbuf_copy+0xb2>
 80180bc:	4b38      	ldr	r3, [pc, #224]	; (80181a0 <pbuf_copy+0x188>)
 80180be:	f240 32d9 	movw	r2, #985	; 0x3d9
 80180c2:	493a      	ldr	r1, [pc, #232]	; (80181ac <pbuf_copy+0x194>)
 80180c4:	4838      	ldr	r0, [pc, #224]	; (80181a8 <pbuf_copy+0x190>)
 80180c6:	f008 f81f 	bl	8020108 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80180ca:	683b      	ldr	r3, [r7, #0]
 80180cc:	895b      	ldrh	r3, [r3, #10]
 80180ce:	461a      	mov	r2, r3
 80180d0:	693b      	ldr	r3, [r7, #16]
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d906      	bls.n	80180e4 <pbuf_copy+0xcc>
 80180d6:	4b32      	ldr	r3, [pc, #200]	; (80181a0 <pbuf_copy+0x188>)
 80180d8:	f240 32da 	movw	r2, #986	; 0x3da
 80180dc:	4934      	ldr	r1, [pc, #208]	; (80181b0 <pbuf_copy+0x198>)
 80180de:	4832      	ldr	r0, [pc, #200]	; (80181a8 <pbuf_copy+0x190>)
 80180e0:	f008 f812 	bl	8020108 <iprintf>
    if (offset_from >= p_from->len) {
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	895b      	ldrh	r3, [r3, #10]
 80180e8:	461a      	mov	r2, r3
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	4293      	cmp	r3, r2
 80180ee:	d304      	bcc.n	80180fa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80180f0:	2300      	movs	r3, #0
 80180f2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80180f4:	683b      	ldr	r3, [r7, #0]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	895b      	ldrh	r3, [r3, #10]
 80180fe:	461a      	mov	r2, r3
 8018100:	697b      	ldr	r3, [r7, #20]
 8018102:	4293      	cmp	r3, r2
 8018104:	d114      	bne.n	8018130 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8018106:	2300      	movs	r3, #0
 8018108:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d10c      	bne.n	8018130 <pbuf_copy+0x118>
 8018116:	683b      	ldr	r3, [r7, #0]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d009      	beq.n	8018130 <pbuf_copy+0x118>
 801811c:	4b20      	ldr	r3, [pc, #128]	; (80181a0 <pbuf_copy+0x188>)
 801811e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8018122:	4924      	ldr	r1, [pc, #144]	; (80181b4 <pbuf_copy+0x19c>)
 8018124:	4820      	ldr	r0, [pc, #128]	; (80181a8 <pbuf_copy+0x190>)
 8018126:	f007 ffef 	bl	8020108 <iprintf>
 801812a:	f06f 030f 	mvn.w	r3, #15
 801812e:	e032      	b.n	8018196 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018130:	683b      	ldr	r3, [r7, #0]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d013      	beq.n	801815e <pbuf_copy+0x146>
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	895a      	ldrh	r2, [r3, #10]
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	891b      	ldrh	r3, [r3, #8]
 801813e:	429a      	cmp	r2, r3
 8018140:	d10d      	bne.n	801815e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d009      	beq.n	801815e <pbuf_copy+0x146>
 801814a:	4b15      	ldr	r3, [pc, #84]	; (80181a0 <pbuf_copy+0x188>)
 801814c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8018150:	4919      	ldr	r1, [pc, #100]	; (80181b8 <pbuf_copy+0x1a0>)
 8018152:	4815      	ldr	r0, [pc, #84]	; (80181a8 <pbuf_copy+0x190>)
 8018154:	f007 ffd8 	bl	8020108 <iprintf>
 8018158:	f06f 0305 	mvn.w	r3, #5
 801815c:	e01b      	b.n	8018196 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d013      	beq.n	801818c <pbuf_copy+0x174>
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	895a      	ldrh	r2, [r3, #10]
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	891b      	ldrh	r3, [r3, #8]
 801816c:	429a      	cmp	r2, r3
 801816e:	d10d      	bne.n	801818c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d009      	beq.n	801818c <pbuf_copy+0x174>
 8018178:	4b09      	ldr	r3, [pc, #36]	; (80181a0 <pbuf_copy+0x188>)
 801817a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801817e:	490e      	ldr	r1, [pc, #56]	; (80181b8 <pbuf_copy+0x1a0>)
 8018180:	4809      	ldr	r0, [pc, #36]	; (80181a8 <pbuf_copy+0x190>)
 8018182:	f007 ffc1 	bl	8020108 <iprintf>
 8018186:	f06f 0305 	mvn.w	r3, #5
 801818a:	e004      	b.n	8018196 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	2b00      	cmp	r3, #0
 8018190:	f47f af61 	bne.w	8018056 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8018194:	2300      	movs	r3, #0
}
 8018196:	4618      	mov	r0, r3
 8018198:	3718      	adds	r7, #24
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	08022a54 	.word	0x08022a54
 80181a4:	08022d40 	.word	0x08022d40
 80181a8:	08022af8 	.word	0x08022af8
 80181ac:	08022d70 	.word	0x08022d70
 80181b0:	08022d88 	.word	0x08022d88
 80181b4:	08022da4 	.word	0x08022da4
 80181b8:	08022db4 	.word	0x08022db4

080181bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b088      	sub	sp, #32
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	60f8      	str	r0, [r7, #12]
 80181c4:	60b9      	str	r1, [r7, #8]
 80181c6:	4611      	mov	r1, r2
 80181c8:	461a      	mov	r2, r3
 80181ca:	460b      	mov	r3, r1
 80181cc:	80fb      	strh	r3, [r7, #6]
 80181ce:	4613      	mov	r3, r2
 80181d0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80181d2:	2300      	movs	r3, #0
 80181d4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80181d6:	2300      	movs	r3, #0
 80181d8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d108      	bne.n	80181f2 <pbuf_copy_partial+0x36>
 80181e0:	4b2b      	ldr	r3, [pc, #172]	; (8018290 <pbuf_copy_partial+0xd4>)
 80181e2:	f240 420a 	movw	r2, #1034	; 0x40a
 80181e6:	492b      	ldr	r1, [pc, #172]	; (8018294 <pbuf_copy_partial+0xd8>)
 80181e8:	482b      	ldr	r0, [pc, #172]	; (8018298 <pbuf_copy_partial+0xdc>)
 80181ea:	f007 ff8d 	bl	8020108 <iprintf>
 80181ee:	2300      	movs	r3, #0
 80181f0:	e04a      	b.n	8018288 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80181f2:	68bb      	ldr	r3, [r7, #8]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d108      	bne.n	801820a <pbuf_copy_partial+0x4e>
 80181f8:	4b25      	ldr	r3, [pc, #148]	; (8018290 <pbuf_copy_partial+0xd4>)
 80181fa:	f240 420b 	movw	r2, #1035	; 0x40b
 80181fe:	4927      	ldr	r1, [pc, #156]	; (801829c <pbuf_copy_partial+0xe0>)
 8018200:	4825      	ldr	r0, [pc, #148]	; (8018298 <pbuf_copy_partial+0xdc>)
 8018202:	f007 ff81 	bl	8020108 <iprintf>
 8018206:	2300      	movs	r3, #0
 8018208:	e03e      	b.n	8018288 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	61fb      	str	r3, [r7, #28]
 801820e:	e034      	b.n	801827a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8018210:	88bb      	ldrh	r3, [r7, #4]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d00a      	beq.n	801822c <pbuf_copy_partial+0x70>
 8018216:	69fb      	ldr	r3, [r7, #28]
 8018218:	895b      	ldrh	r3, [r3, #10]
 801821a:	88ba      	ldrh	r2, [r7, #4]
 801821c:	429a      	cmp	r2, r3
 801821e:	d305      	bcc.n	801822c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8018220:	69fb      	ldr	r3, [r7, #28]
 8018222:	895b      	ldrh	r3, [r3, #10]
 8018224:	88ba      	ldrh	r2, [r7, #4]
 8018226:	1ad3      	subs	r3, r2, r3
 8018228:	80bb      	strh	r3, [r7, #4]
 801822a:	e023      	b.n	8018274 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801822c:	69fb      	ldr	r3, [r7, #28]
 801822e:	895a      	ldrh	r2, [r3, #10]
 8018230:	88bb      	ldrh	r3, [r7, #4]
 8018232:	1ad3      	subs	r3, r2, r3
 8018234:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8018236:	8b3a      	ldrh	r2, [r7, #24]
 8018238:	88fb      	ldrh	r3, [r7, #6]
 801823a:	429a      	cmp	r2, r3
 801823c:	d901      	bls.n	8018242 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801823e:	88fb      	ldrh	r3, [r7, #6]
 8018240:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8018242:	8b7b      	ldrh	r3, [r7, #26]
 8018244:	68ba      	ldr	r2, [r7, #8]
 8018246:	18d0      	adds	r0, r2, r3
 8018248:	69fb      	ldr	r3, [r7, #28]
 801824a:	685a      	ldr	r2, [r3, #4]
 801824c:	88bb      	ldrh	r3, [r7, #4]
 801824e:	4413      	add	r3, r2
 8018250:	8b3a      	ldrh	r2, [r7, #24]
 8018252:	4619      	mov	r1, r3
 8018254:	f007 fb5a 	bl	801f90c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8018258:	8afa      	ldrh	r2, [r7, #22]
 801825a:	8b3b      	ldrh	r3, [r7, #24]
 801825c:	4413      	add	r3, r2
 801825e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8018260:	8b7a      	ldrh	r2, [r7, #26]
 8018262:	8b3b      	ldrh	r3, [r7, #24]
 8018264:	4413      	add	r3, r2
 8018266:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8018268:	88fa      	ldrh	r2, [r7, #6]
 801826a:	8b3b      	ldrh	r3, [r7, #24]
 801826c:	1ad3      	subs	r3, r2, r3
 801826e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8018270:	2300      	movs	r3, #0
 8018272:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018274:	69fb      	ldr	r3, [r7, #28]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	61fb      	str	r3, [r7, #28]
 801827a:	88fb      	ldrh	r3, [r7, #6]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d002      	beq.n	8018286 <pbuf_copy_partial+0xca>
 8018280:	69fb      	ldr	r3, [r7, #28]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d1c4      	bne.n	8018210 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8018286:	8afb      	ldrh	r3, [r7, #22]
}
 8018288:	4618      	mov	r0, r3
 801828a:	3720      	adds	r7, #32
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}
 8018290:	08022a54 	.word	0x08022a54
 8018294:	08022de0 	.word	0x08022de0
 8018298:	08022af8 	.word	0x08022af8
 801829c:	08022e00 	.word	0x08022e00

080182a0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b084      	sub	sp, #16
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	4603      	mov	r3, r0
 80182a8:	603a      	str	r2, [r7, #0]
 80182aa:	71fb      	strb	r3, [r7, #7]
 80182ac:	460b      	mov	r3, r1
 80182ae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	8919      	ldrh	r1, [r3, #8]
 80182b4:	88ba      	ldrh	r2, [r7, #4]
 80182b6:	79fb      	ldrb	r3, [r7, #7]
 80182b8:	4618      	mov	r0, r3
 80182ba:	f7ff faa5 	bl	8017808 <pbuf_alloc>
 80182be:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d101      	bne.n	80182ca <pbuf_clone+0x2a>
    return NULL;
 80182c6:	2300      	movs	r3, #0
 80182c8:	e011      	b.n	80182ee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80182ca:	6839      	ldr	r1, [r7, #0]
 80182cc:	68f8      	ldr	r0, [r7, #12]
 80182ce:	f7ff fea3 	bl	8018018 <pbuf_copy>
 80182d2:	4603      	mov	r3, r0
 80182d4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80182d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d006      	beq.n	80182ec <pbuf_clone+0x4c>
 80182de:	4b06      	ldr	r3, [pc, #24]	; (80182f8 <pbuf_clone+0x58>)
 80182e0:	f240 5224 	movw	r2, #1316	; 0x524
 80182e4:	4905      	ldr	r1, [pc, #20]	; (80182fc <pbuf_clone+0x5c>)
 80182e6:	4806      	ldr	r0, [pc, #24]	; (8018300 <pbuf_clone+0x60>)
 80182e8:	f007 ff0e 	bl	8020108 <iprintf>
  return q;
 80182ec:	68fb      	ldr	r3, [r7, #12]
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	3710      	adds	r7, #16
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}
 80182f6:	bf00      	nop
 80182f8:	08022a54 	.word	0x08022a54
 80182fc:	08022f0c 	.word	0x08022f0c
 8018300:	08022af8 	.word	0x08022af8

08018304 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b086      	sub	sp, #24
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	60bb      	str	r3, [r7, #8]
 8018312:	2304      	movs	r3, #4
 8018314:	60fb      	str	r3, [r7, #12]
 8018316:	2300      	movs	r3, #0
 8018318:	613b      	str	r3, [r7, #16]
 801831a:	2300      	movs	r3, #0
 801831c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801831e:	f107 0308 	add.w	r3, r7, #8
 8018322:	2100      	movs	r1, #0
 8018324:	4618      	mov	r0, r3
 8018326:	f7f6 fdac 	bl	800ee82 <osMessageCreate>
 801832a:	4602      	mov	r2, r0
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d102      	bne.n	801833e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801833c:	e000      	b.n	8018340 <sys_mbox_new+0x3c>

  return ERR_OK;
 801833e:	2300      	movs	r3, #0
}
 8018340:	4618      	mov	r0, r3
 8018342:	3718      	adds	r7, #24
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}

08018348 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b082      	sub	sp, #8
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4618      	mov	r0, r3
 8018356:	f7f6 fe71 	bl	800f03c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	4618      	mov	r0, r3
 8018360:	f7f6 fe82 	bl	800f068 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018364:	bf00      	nop
 8018366:	3708      	adds	r7, #8
 8018368:	46bd      	mov	sp, r7
 801836a:	bd80      	pop	{r7, pc}

0801836c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b084      	sub	sp, #16
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	6839      	ldr	r1, [r7, #0]
 801837c:	2200      	movs	r2, #0
 801837e:	4618      	mov	r0, r3
 8018380:	f7f6 fda8 	bl	800eed4 <osMessagePut>
 8018384:	4603      	mov	r3, r0
 8018386:	2b00      	cmp	r3, #0
 8018388:	d102      	bne.n	8018390 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801838a:	2300      	movs	r3, #0
 801838c:	73fb      	strb	r3, [r7, #15]
 801838e:	e001      	b.n	8018394 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018390:	23ff      	movs	r3, #255	; 0xff
 8018392:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018394:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018398:	4618      	mov	r0, r3
 801839a:	3710      	adds	r7, #16
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}

080183a0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b08c      	sub	sp, #48	; 0x30
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	61f8      	str	r0, [r7, #28]
 80183a8:	61b9      	str	r1, [r7, #24]
 80183aa:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80183ac:	f7f6 fb94 	bl	800ead8 <osKernelSysTick>
 80183b0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80183b2:	697b      	ldr	r3, [r7, #20]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d017      	beq.n	80183e8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80183b8:	69fb      	ldr	r3, [r7, #28]
 80183ba:	6819      	ldr	r1, [r3, #0]
 80183bc:	f107 0320 	add.w	r3, r7, #32
 80183c0:	697a      	ldr	r2, [r7, #20]
 80183c2:	4618      	mov	r0, r3
 80183c4:	f7f6 fdc6 	bl	800ef54 <osMessageGet>

    if(event.status == osEventMessage)
 80183c8:	6a3b      	ldr	r3, [r7, #32]
 80183ca:	2b10      	cmp	r3, #16
 80183cc:	d109      	bne.n	80183e2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80183ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d0:	461a      	mov	r2, r3
 80183d2:	69bb      	ldr	r3, [r7, #24]
 80183d4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80183d6:	f7f6 fb7f 	bl	800ead8 <osKernelSysTick>
 80183da:	4602      	mov	r2, r0
 80183dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183de:	1ad3      	subs	r3, r2, r3
 80183e0:	e019      	b.n	8018416 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80183e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183e6:	e016      	b.n	8018416 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80183e8:	69fb      	ldr	r3, [r7, #28]
 80183ea:	6819      	ldr	r1, [r3, #0]
 80183ec:	463b      	mov	r3, r7
 80183ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183f2:	4618      	mov	r0, r3
 80183f4:	f7f6 fdae 	bl	800ef54 <osMessageGet>
 80183f8:	f107 0320 	add.w	r3, r7, #32
 80183fc:	463a      	mov	r2, r7
 80183fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8018400:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018406:	461a      	mov	r2, r3
 8018408:	69bb      	ldr	r3, [r7, #24]
 801840a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801840c:	f7f6 fb64 	bl	800ead8 <osKernelSysTick>
 8018410:	4602      	mov	r2, r0
 8018412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018414:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018416:	4618      	mov	r0, r3
 8018418:	3730      	adds	r7, #48	; 0x30
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}

0801841e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801841e:	b580      	push	{r7, lr}
 8018420:	b086      	sub	sp, #24
 8018422:	af00      	add	r7, sp, #0
 8018424:	6078      	str	r0, [r7, #4]
 8018426:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	6819      	ldr	r1, [r3, #0]
 801842c:	f107 030c 	add.w	r3, r7, #12
 8018430:	2200      	movs	r2, #0
 8018432:	4618      	mov	r0, r3
 8018434:	f7f6 fd8e 	bl	800ef54 <osMessageGet>

  if(event.status == osEventMessage)
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	2b10      	cmp	r3, #16
 801843c:	d105      	bne.n	801844a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	461a      	mov	r2, r3
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018446:	2300      	movs	r3, #0
 8018448:	e001      	b.n	801844e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801844a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801844e:	4618      	mov	r0, r3
 8018450:	3718      	adds	r7, #24
 8018452:	46bd      	mov	sp, r7
 8018454:	bd80      	pop	{r7, pc}

08018456 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018456:	b480      	push	{r7}
 8018458:	b083      	sub	sp, #12
 801845a:	af00      	add	r7, sp, #0
 801845c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d101      	bne.n	801846a <sys_mbox_valid+0x14>
    return 0;
 8018466:	2300      	movs	r3, #0
 8018468:	e000      	b.n	801846c <sys_mbox_valid+0x16>
  else
    return 1;
 801846a:	2301      	movs	r3, #1
}
 801846c:	4618      	mov	r0, r3
 801846e:	370c      	adds	r7, #12
 8018470:	46bd      	mov	sp, r7
 8018472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018476:	4770      	bx	lr

08018478 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018478:	b480      	push	{r7}
 801847a:	b083      	sub	sp, #12
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	2200      	movs	r2, #0
 8018484:	601a      	str	r2, [r3, #0]
}
 8018486:	bf00      	nop
 8018488:	370c      	adds	r7, #12
 801848a:	46bd      	mov	sp, r7
 801848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018490:	4770      	bx	lr

08018492 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018492:	b580      	push	{r7, lr}
 8018494:	b084      	sub	sp, #16
 8018496:	af00      	add	r7, sp, #0
 8018498:	6078      	str	r0, [r7, #4]
 801849a:	460b      	mov	r3, r1
 801849c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801849e:	2300      	movs	r3, #0
 80184a0:	60bb      	str	r3, [r7, #8]
 80184a2:	2300      	movs	r3, #0
 80184a4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80184a6:	f107 0308 	add.w	r3, r7, #8
 80184aa:	2101      	movs	r1, #1
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7f6 fc1f 	bl	800ecf0 <osSemaphoreCreate>
 80184b2:	4602      	mov	r2, r0
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d102      	bne.n	80184c6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80184c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184c4:	e009      	b.n	80184da <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80184c6:	78fb      	ldrb	r3, [r7, #3]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d105      	bne.n	80184d8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	2100      	movs	r1, #0
 80184d2:	4618      	mov	r0, r3
 80184d4:	f7f6 fc3e 	bl	800ed54 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80184d8:	2300      	movs	r3, #0
}
 80184da:	4618      	mov	r0, r3
 80184dc:	3710      	adds	r7, #16
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}

080184e2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80184e2:	b580      	push	{r7, lr}
 80184e4:	b084      	sub	sp, #16
 80184e6:	af00      	add	r7, sp, #0
 80184e8:	6078      	str	r0, [r7, #4]
 80184ea:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80184ec:	f7f6 faf4 	bl	800ead8 <osKernelSysTick>
 80184f0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80184f2:	683b      	ldr	r3, [r7, #0]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d011      	beq.n	801851c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	6839      	ldr	r1, [r7, #0]
 80184fe:	4618      	mov	r0, r3
 8018500:	f7f6 fc28 	bl	800ed54 <osSemaphoreWait>
 8018504:	4603      	mov	r3, r0
 8018506:	2b00      	cmp	r3, #0
 8018508:	d105      	bne.n	8018516 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801850a:	f7f6 fae5 	bl	800ead8 <osKernelSysTick>
 801850e:	4602      	mov	r2, r0
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	1ad3      	subs	r3, r2, r3
 8018514:	e012      	b.n	801853c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801851a:	e00f      	b.n	801853c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801851c:	bf00      	nop
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018526:	4618      	mov	r0, r3
 8018528:	f7f6 fc14 	bl	800ed54 <osSemaphoreWait>
 801852c:	4603      	mov	r3, r0
 801852e:	2b00      	cmp	r3, #0
 8018530:	d1f5      	bne.n	801851e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018532:	f7f6 fad1 	bl	800ead8 <osKernelSysTick>
 8018536:	4602      	mov	r2, r0
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801853c:	4618      	mov	r0, r3
 801853e:	3710      	adds	r7, #16
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}

08018544 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b082      	sub	sp, #8
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	4618      	mov	r0, r3
 8018552:	f7f6 fc4d 	bl	800edf0 <osSemaphoreRelease>
}
 8018556:	bf00      	nop
 8018558:	3708      	adds	r7, #8
 801855a:	46bd      	mov	sp, r7
 801855c:	bd80      	pop	{r7, pc}

0801855e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801855e:	b580      	push	{r7, lr}
 8018560:	b082      	sub	sp, #8
 8018562:	af00      	add	r7, sp, #0
 8018564:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	4618      	mov	r0, r3
 801856c:	f7f6 fc76 	bl	800ee5c <osSemaphoreDelete>
}
 8018570:	bf00      	nop
 8018572:	3708      	adds	r7, #8
 8018574:	46bd      	mov	sp, r7
 8018576:	bd80      	pop	{r7, pc}

08018578 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018578:	b480      	push	{r7}
 801857a:	b083      	sub	sp, #12
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	2b00      	cmp	r3, #0
 8018586:	d101      	bne.n	801858c <sys_sem_valid+0x14>
    return 0;
 8018588:	2300      	movs	r3, #0
 801858a:	e000      	b.n	801858e <sys_sem_valid+0x16>
  else
    return 1;
 801858c:	2301      	movs	r3, #1
}
 801858e:	4618      	mov	r0, r3
 8018590:	370c      	adds	r7, #12
 8018592:	46bd      	mov	sp, r7
 8018594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018598:	4770      	bx	lr

0801859a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801859a:	b480      	push	{r7}
 801859c:	b083      	sub	sp, #12
 801859e:	af00      	add	r7, sp, #0
 80185a0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	2200      	movs	r2, #0
 80185a6:	601a      	str	r2, [r3, #0]
}
 80185a8:	bf00      	nop
 80185aa:	370c      	adds	r7, #12
 80185ac:	46bd      	mov	sp, r7
 80185ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b2:	4770      	bx	lr

080185b4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80185b8:	4803      	ldr	r0, [pc, #12]	; (80185c8 <sys_init+0x14>)
 80185ba:	f7f6 fafd 	bl	800ebb8 <osMutexCreate>
 80185be:	4603      	mov	r3, r0
 80185c0:	4a02      	ldr	r2, [pc, #8]	; (80185cc <sys_init+0x18>)
 80185c2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80185c4:	bf00      	nop
 80185c6:	bd80      	pop	{r7, pc}
 80185c8:	08024ba8 	.word	0x08024ba8
 80185cc:	24010014 	.word	0x24010014

080185d0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b084      	sub	sp, #16
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80185d8:	2300      	movs	r3, #0
 80185da:	60bb      	str	r3, [r7, #8]
 80185dc:	2300      	movs	r3, #0
 80185de:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80185e0:	f107 0308 	add.w	r3, r7, #8
 80185e4:	4618      	mov	r0, r3
 80185e6:	f7f6 fae7 	bl	800ebb8 <osMutexCreate>
 80185ea:	4602      	mov	r2, r0
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d102      	bne.n	80185fe <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80185f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80185fc:	e000      	b.n	8018600 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80185fe:	2300      	movs	r3, #0
}
 8018600:	4618      	mov	r0, r3
 8018602:	3710      	adds	r7, #16
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}

08018608 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b082      	sub	sp, #8
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681b      	ldr	r3, [r3, #0]
 8018614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018618:	4618      	mov	r0, r3
 801861a:	f7f6 fae5 	bl	800ebe8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801861e:	bf00      	nop
 8018620:	3708      	adds	r7, #8
 8018622:	46bd      	mov	sp, r7
 8018624:	bd80      	pop	{r7, pc}

08018626 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018626:	b580      	push	{r7, lr}
 8018628:	b082      	sub	sp, #8
 801862a:	af00      	add	r7, sp, #0
 801862c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	4618      	mov	r0, r3
 8018634:	f7f6 fb26 	bl	800ec84 <osMutexRelease>
}
 8018638:	bf00      	nop
 801863a:	3708      	adds	r7, #8
 801863c:	46bd      	mov	sp, r7
 801863e:	bd80      	pop	{r7, pc}

08018640 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b08c      	sub	sp, #48	; 0x30
 8018644:	af00      	add	r7, sp, #0
 8018646:	60f8      	str	r0, [r7, #12]
 8018648:	60b9      	str	r1, [r7, #8]
 801864a:	607a      	str	r2, [r7, #4]
 801864c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801864e:	f107 0314 	add.w	r3, r7, #20
 8018652:	2200      	movs	r2, #0
 8018654:	601a      	str	r2, [r3, #0]
 8018656:	605a      	str	r2, [r3, #4]
 8018658:	609a      	str	r2, [r3, #8]
 801865a:	60da      	str	r2, [r3, #12]
 801865c:	611a      	str	r2, [r3, #16]
 801865e:	615a      	str	r2, [r3, #20]
 8018660:	619a      	str	r2, [r3, #24]
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	617b      	str	r3, [r7, #20]
 8018666:	68bb      	ldr	r3, [r7, #8]
 8018668:	61bb      	str	r3, [r7, #24]
 801866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801866c:	b21b      	sxth	r3, r3
 801866e:	83bb      	strh	r3, [r7, #28]
 8018670:	683b      	ldr	r3, [r7, #0]
 8018672:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018674:	f107 0314 	add.w	r3, r7, #20
 8018678:	6879      	ldr	r1, [r7, #4]
 801867a:	4618      	mov	r0, r3
 801867c:	f7f6 fa3c 	bl	800eaf8 <osThreadCreate>
 8018680:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018682:	4618      	mov	r0, r3
 8018684:	3730      	adds	r7, #48	; 0x30
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
	...

0801868c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018690:	4b04      	ldr	r3, [pc, #16]	; (80186a4 <sys_arch_protect+0x18>)
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018698:	4618      	mov	r0, r3
 801869a:	f7f6 faa5 	bl	800ebe8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801869e:	2301      	movs	r3, #1
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	bd80      	pop	{r7, pc}
 80186a4:	24010014 	.word	0x24010014

080186a8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b082      	sub	sp, #8
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80186b0:	4b04      	ldr	r3, [pc, #16]	; (80186c4 <sys_arch_unprotect+0x1c>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	4618      	mov	r0, r3
 80186b6:	f7f6 fae5 	bl	800ec84 <osMutexRelease>
}
 80186ba:	bf00      	nop
 80186bc:	3708      	adds	r7, #8
 80186be:	46bd      	mov	sp, r7
 80186c0:	bd80      	pop	{r7, pc}
 80186c2:	bf00      	nop
 80186c4:	24010014 	.word	0x24010014

080186c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80186cc:	f007 fdaa 	bl	8020224 <rand>
 80186d0:	4603      	mov	r3, r0
 80186d2:	b29b      	uxth	r3, r3
 80186d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80186d8:	b29b      	uxth	r3, r3
 80186da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80186de:	b29a      	uxth	r2, r3
 80186e0:	4b01      	ldr	r3, [pc, #4]	; (80186e8 <tcp_init+0x20>)
 80186e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80186e4:	bf00      	nop
 80186e6:	bd80      	pop	{r7, pc}
 80186e8:	24000028 	.word	0x24000028

080186ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b082      	sub	sp, #8
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	7d1b      	ldrb	r3, [r3, #20]
 80186f8:	2b01      	cmp	r3, #1
 80186fa:	d105      	bne.n	8018708 <tcp_free+0x1c>
 80186fc:	4b06      	ldr	r3, [pc, #24]	; (8018718 <tcp_free+0x2c>)
 80186fe:	22d4      	movs	r2, #212	; 0xd4
 8018700:	4906      	ldr	r1, [pc, #24]	; (801871c <tcp_free+0x30>)
 8018702:	4807      	ldr	r0, [pc, #28]	; (8018720 <tcp_free+0x34>)
 8018704:	f007 fd00 	bl	8020108 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8018708:	6879      	ldr	r1, [r7, #4]
 801870a:	2001      	movs	r0, #1
 801870c:	f7fe fc6c 	bl	8016fe8 <memp_free>
}
 8018710:	bf00      	nop
 8018712:	3708      	adds	r7, #8
 8018714:	46bd      	mov	sp, r7
 8018716:	bd80      	pop	{r7, pc}
 8018718:	08022f98 	.word	0x08022f98
 801871c:	0802300c 	.word	0x0802300c
 8018720:	08023020 	.word	0x08023020

08018724 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b082      	sub	sp, #8
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	7d1b      	ldrb	r3, [r3, #20]
 8018730:	2b01      	cmp	r3, #1
 8018732:	d105      	bne.n	8018740 <tcp_free_listen+0x1c>
 8018734:	4b06      	ldr	r3, [pc, #24]	; (8018750 <tcp_free_listen+0x2c>)
 8018736:	22df      	movs	r2, #223	; 0xdf
 8018738:	4906      	ldr	r1, [pc, #24]	; (8018754 <tcp_free_listen+0x30>)
 801873a:	4807      	ldr	r0, [pc, #28]	; (8018758 <tcp_free_listen+0x34>)
 801873c:	f007 fce4 	bl	8020108 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018740:	6879      	ldr	r1, [r7, #4]
 8018742:	2002      	movs	r0, #2
 8018744:	f7fe fc50 	bl	8016fe8 <memp_free>
}
 8018748:	bf00      	nop
 801874a:	3708      	adds	r7, #8
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}
 8018750:	08022f98 	.word	0x08022f98
 8018754:	08023048 	.word	0x08023048
 8018758:	08023020 	.word	0x08023020

0801875c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8018760:	f001 f8a8 	bl	80198b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8018764:	4b07      	ldr	r3, [pc, #28]	; (8018784 <tcp_tmr+0x28>)
 8018766:	781b      	ldrb	r3, [r3, #0]
 8018768:	3301      	adds	r3, #1
 801876a:	b2da      	uxtb	r2, r3
 801876c:	4b05      	ldr	r3, [pc, #20]	; (8018784 <tcp_tmr+0x28>)
 801876e:	701a      	strb	r2, [r3, #0]
 8018770:	4b04      	ldr	r3, [pc, #16]	; (8018784 <tcp_tmr+0x28>)
 8018772:	781b      	ldrb	r3, [r3, #0]
 8018774:	f003 0301 	and.w	r3, r3, #1
 8018778:	2b00      	cmp	r3, #0
 801877a:	d001      	beq.n	8018780 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801877c:	f000 fd5a 	bl	8019234 <tcp_slowtmr>
  }
}
 8018780:	bf00      	nop
 8018782:	bd80      	pop	{r7, pc}
 8018784:	2401002d 	.word	0x2401002d

08018788 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b084      	sub	sp, #16
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
 8018790:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d105      	bne.n	80187a4 <tcp_remove_listener+0x1c>
 8018798:	4b0d      	ldr	r3, [pc, #52]	; (80187d0 <tcp_remove_listener+0x48>)
 801879a:	22ff      	movs	r2, #255	; 0xff
 801879c:	490d      	ldr	r1, [pc, #52]	; (80187d4 <tcp_remove_listener+0x4c>)
 801879e:	480e      	ldr	r0, [pc, #56]	; (80187d8 <tcp_remove_listener+0x50>)
 80187a0:	f007 fcb2 	bl	8020108 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	60fb      	str	r3, [r7, #12]
 80187a8:	e00a      	b.n	80187c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80187ae:	683a      	ldr	r2, [r7, #0]
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d102      	bne.n	80187ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	2200      	movs	r2, #0
 80187b8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	68db      	ldr	r3, [r3, #12]
 80187be:	60fb      	str	r3, [r7, #12]
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d1f1      	bne.n	80187aa <tcp_remove_listener+0x22>
    }
  }
}
 80187c6:	bf00      	nop
 80187c8:	bf00      	nop
 80187ca:	3710      	adds	r7, #16
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}
 80187d0:	08022f98 	.word	0x08022f98
 80187d4:	08023064 	.word	0x08023064
 80187d8:	08023020 	.word	0x08023020

080187dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b084      	sub	sp, #16
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d106      	bne.n	80187f8 <tcp_listen_closed+0x1c>
 80187ea:	4b14      	ldr	r3, [pc, #80]	; (801883c <tcp_listen_closed+0x60>)
 80187ec:	f240 1211 	movw	r2, #273	; 0x111
 80187f0:	4913      	ldr	r1, [pc, #76]	; (8018840 <tcp_listen_closed+0x64>)
 80187f2:	4814      	ldr	r0, [pc, #80]	; (8018844 <tcp_listen_closed+0x68>)
 80187f4:	f007 fc88 	bl	8020108 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	7d1b      	ldrb	r3, [r3, #20]
 80187fc:	2b01      	cmp	r3, #1
 80187fe:	d006      	beq.n	801880e <tcp_listen_closed+0x32>
 8018800:	4b0e      	ldr	r3, [pc, #56]	; (801883c <tcp_listen_closed+0x60>)
 8018802:	f44f 7289 	mov.w	r2, #274	; 0x112
 8018806:	4910      	ldr	r1, [pc, #64]	; (8018848 <tcp_listen_closed+0x6c>)
 8018808:	480e      	ldr	r0, [pc, #56]	; (8018844 <tcp_listen_closed+0x68>)
 801880a:	f007 fc7d 	bl	8020108 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801880e:	2301      	movs	r3, #1
 8018810:	60fb      	str	r3, [r7, #12]
 8018812:	e00b      	b.n	801882c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018814:	4a0d      	ldr	r2, [pc, #52]	; (801884c <tcp_listen_closed+0x70>)
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	6879      	ldr	r1, [r7, #4]
 8018820:	4618      	mov	r0, r3
 8018822:	f7ff ffb1 	bl	8018788 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	3301      	adds	r3, #1
 801882a:	60fb      	str	r3, [r7, #12]
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	2b03      	cmp	r3, #3
 8018830:	d9f0      	bls.n	8018814 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018832:	bf00      	nop
 8018834:	bf00      	nop
 8018836:	3710      	adds	r7, #16
 8018838:	46bd      	mov	sp, r7
 801883a:	bd80      	pop	{r7, pc}
 801883c:	08022f98 	.word	0x08022f98
 8018840:	0802308c 	.word	0x0802308c
 8018844:	08023020 	.word	0x08023020
 8018848:	08023098 	.word	0x08023098
 801884c:	08024bc8 	.word	0x08024bc8

08018850 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018850:	b5b0      	push	{r4, r5, r7, lr}
 8018852:	b088      	sub	sp, #32
 8018854:	af04      	add	r7, sp, #16
 8018856:	6078      	str	r0, [r7, #4]
 8018858:	460b      	mov	r3, r1
 801885a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	2b00      	cmp	r3, #0
 8018860:	d106      	bne.n	8018870 <tcp_close_shutdown+0x20>
 8018862:	4b63      	ldr	r3, [pc, #396]	; (80189f0 <tcp_close_shutdown+0x1a0>)
 8018864:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8018868:	4962      	ldr	r1, [pc, #392]	; (80189f4 <tcp_close_shutdown+0x1a4>)
 801886a:	4863      	ldr	r0, [pc, #396]	; (80189f8 <tcp_close_shutdown+0x1a8>)
 801886c:	f007 fc4c 	bl	8020108 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018870:	78fb      	ldrb	r3, [r7, #3]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d067      	beq.n	8018946 <tcp_close_shutdown+0xf6>
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	7d1b      	ldrb	r3, [r3, #20]
 801887a:	2b04      	cmp	r3, #4
 801887c:	d003      	beq.n	8018886 <tcp_close_shutdown+0x36>
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	7d1b      	ldrb	r3, [r3, #20]
 8018882:	2b07      	cmp	r3, #7
 8018884:	d15f      	bne.n	8018946 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801888a:	2b00      	cmp	r3, #0
 801888c:	d105      	bne.n	801889a <tcp_close_shutdown+0x4a>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018892:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8018896:	4293      	cmp	r3, r2
 8018898:	d055      	beq.n	8018946 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	8b5b      	ldrh	r3, [r3, #26]
 801889e:	f003 0310 	and.w	r3, r3, #16
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d106      	bne.n	80188b4 <tcp_close_shutdown+0x64>
 80188a6:	4b52      	ldr	r3, [pc, #328]	; (80189f0 <tcp_close_shutdown+0x1a0>)
 80188a8:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80188ac:	4953      	ldr	r1, [pc, #332]	; (80189fc <tcp_close_shutdown+0x1ac>)
 80188ae:	4852      	ldr	r0, [pc, #328]	; (80189f8 <tcp_close_shutdown+0x1a8>)
 80188b0:	f007 fc2a 	bl	8020108 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80188bc:	687d      	ldr	r5, [r7, #4]
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	3304      	adds	r3, #4
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	8ad2      	ldrh	r2, [r2, #22]
 80188c6:	6879      	ldr	r1, [r7, #4]
 80188c8:	8b09      	ldrh	r1, [r1, #24]
 80188ca:	9102      	str	r1, [sp, #8]
 80188cc:	9201      	str	r2, [sp, #4]
 80188ce:	9300      	str	r3, [sp, #0]
 80188d0:	462b      	mov	r3, r5
 80188d2:	4622      	mov	r2, r4
 80188d4:	4601      	mov	r1, r0
 80188d6:	6878      	ldr	r0, [r7, #4]
 80188d8:	f005 fdbe 	bl	801e458 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f001 fb9b 	bl	801a018 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80188e2:	4b47      	ldr	r3, [pc, #284]	; (8018a00 <tcp_close_shutdown+0x1b0>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	687a      	ldr	r2, [r7, #4]
 80188e8:	429a      	cmp	r2, r3
 80188ea:	d105      	bne.n	80188f8 <tcp_close_shutdown+0xa8>
 80188ec:	4b44      	ldr	r3, [pc, #272]	; (8018a00 <tcp_close_shutdown+0x1b0>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	68db      	ldr	r3, [r3, #12]
 80188f2:	4a43      	ldr	r2, [pc, #268]	; (8018a00 <tcp_close_shutdown+0x1b0>)
 80188f4:	6013      	str	r3, [r2, #0]
 80188f6:	e013      	b.n	8018920 <tcp_close_shutdown+0xd0>
 80188f8:	4b41      	ldr	r3, [pc, #260]	; (8018a00 <tcp_close_shutdown+0x1b0>)
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	60fb      	str	r3, [r7, #12]
 80188fe:	e00c      	b.n	801891a <tcp_close_shutdown+0xca>
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	68db      	ldr	r3, [r3, #12]
 8018904:	687a      	ldr	r2, [r7, #4]
 8018906:	429a      	cmp	r2, r3
 8018908:	d104      	bne.n	8018914 <tcp_close_shutdown+0xc4>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	68da      	ldr	r2, [r3, #12]
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	60da      	str	r2, [r3, #12]
 8018912:	e005      	b.n	8018920 <tcp_close_shutdown+0xd0>
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	68db      	ldr	r3, [r3, #12]
 8018918:	60fb      	str	r3, [r7, #12]
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d1ef      	bne.n	8018900 <tcp_close_shutdown+0xb0>
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2200      	movs	r2, #0
 8018924:	60da      	str	r2, [r3, #12]
 8018926:	4b37      	ldr	r3, [pc, #220]	; (8018a04 <tcp_close_shutdown+0x1b4>)
 8018928:	2201      	movs	r2, #1
 801892a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801892c:	4b36      	ldr	r3, [pc, #216]	; (8018a08 <tcp_close_shutdown+0x1b8>)
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	687a      	ldr	r2, [r7, #4]
 8018932:	429a      	cmp	r2, r3
 8018934:	d102      	bne.n	801893c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8018936:	f004 f833 	bl	801c9a0 <tcp_trigger_input_pcb_close>
 801893a:	e002      	b.n	8018942 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 801893c:	6878      	ldr	r0, [r7, #4]
 801893e:	f7ff fed5 	bl	80186ec <tcp_free>
      }
      return ERR_OK;
 8018942:	2300      	movs	r3, #0
 8018944:	e050      	b.n	80189e8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	7d1b      	ldrb	r3, [r3, #20]
 801894a:	2b02      	cmp	r3, #2
 801894c:	d03b      	beq.n	80189c6 <tcp_close_shutdown+0x176>
 801894e:	2b02      	cmp	r3, #2
 8018950:	dc44      	bgt.n	80189dc <tcp_close_shutdown+0x18c>
 8018952:	2b00      	cmp	r3, #0
 8018954:	d002      	beq.n	801895c <tcp_close_shutdown+0x10c>
 8018956:	2b01      	cmp	r3, #1
 8018958:	d02a      	beq.n	80189b0 <tcp_close_shutdown+0x160>
 801895a:	e03f      	b.n	80189dc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	8adb      	ldrh	r3, [r3, #22]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d021      	beq.n	80189a8 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018964:	4b29      	ldr	r3, [pc, #164]	; (8018a0c <tcp_close_shutdown+0x1bc>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	687a      	ldr	r2, [r7, #4]
 801896a:	429a      	cmp	r2, r3
 801896c:	d105      	bne.n	801897a <tcp_close_shutdown+0x12a>
 801896e:	4b27      	ldr	r3, [pc, #156]	; (8018a0c <tcp_close_shutdown+0x1bc>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	68db      	ldr	r3, [r3, #12]
 8018974:	4a25      	ldr	r2, [pc, #148]	; (8018a0c <tcp_close_shutdown+0x1bc>)
 8018976:	6013      	str	r3, [r2, #0]
 8018978:	e013      	b.n	80189a2 <tcp_close_shutdown+0x152>
 801897a:	4b24      	ldr	r3, [pc, #144]	; (8018a0c <tcp_close_shutdown+0x1bc>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	60bb      	str	r3, [r7, #8]
 8018980:	e00c      	b.n	801899c <tcp_close_shutdown+0x14c>
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	68db      	ldr	r3, [r3, #12]
 8018986:	687a      	ldr	r2, [r7, #4]
 8018988:	429a      	cmp	r2, r3
 801898a:	d104      	bne.n	8018996 <tcp_close_shutdown+0x146>
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	68da      	ldr	r2, [r3, #12]
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	60da      	str	r2, [r3, #12]
 8018994:	e005      	b.n	80189a2 <tcp_close_shutdown+0x152>
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	68db      	ldr	r3, [r3, #12]
 801899a:	60bb      	str	r3, [r7, #8]
 801899c:	68bb      	ldr	r3, [r7, #8]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d1ef      	bne.n	8018982 <tcp_close_shutdown+0x132>
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	2200      	movs	r2, #0
 80189a6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f7ff fe9f 	bl	80186ec <tcp_free>
      break;
 80189ae:	e01a      	b.n	80189e6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f7ff ff13 	bl	80187dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80189b6:	6879      	ldr	r1, [r7, #4]
 80189b8:	4815      	ldr	r0, [pc, #84]	; (8018a10 <tcp_close_shutdown+0x1c0>)
 80189ba:	f001 fb7d 	bl	801a0b8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80189be:	6878      	ldr	r0, [r7, #4]
 80189c0:	f7ff feb0 	bl	8018724 <tcp_free_listen>
      break;
 80189c4:	e00f      	b.n	80189e6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80189c6:	6879      	ldr	r1, [r7, #4]
 80189c8:	480d      	ldr	r0, [pc, #52]	; (8018a00 <tcp_close_shutdown+0x1b0>)
 80189ca:	f001 fb75 	bl	801a0b8 <tcp_pcb_remove>
 80189ce:	4b0d      	ldr	r3, [pc, #52]	; (8018a04 <tcp_close_shutdown+0x1b4>)
 80189d0:	2201      	movs	r2, #1
 80189d2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	f7ff fe89 	bl	80186ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80189da:	e004      	b.n	80189e6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	f000 f819 	bl	8018a14 <tcp_close_shutdown_fin>
 80189e2:	4603      	mov	r3, r0
 80189e4:	e000      	b.n	80189e8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80189e6:	2300      	movs	r3, #0
}
 80189e8:	4618      	mov	r0, r3
 80189ea:	3710      	adds	r7, #16
 80189ec:	46bd      	mov	sp, r7
 80189ee:	bdb0      	pop	{r4, r5, r7, pc}
 80189f0:	08022f98 	.word	0x08022f98
 80189f4:	080230b0 	.word	0x080230b0
 80189f8:	08023020 	.word	0x08023020
 80189fc:	080230d0 	.word	0x080230d0
 8018a00:	24010024 	.word	0x24010024
 8018a04:	2401002c 	.word	0x2401002c
 8018a08:	24010064 	.word	0x24010064
 8018a0c:	2401001c 	.word	0x2401001c
 8018a10:	24010020 	.word	0x24010020

08018a14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8018a14:	b580      	push	{r7, lr}
 8018a16:	b084      	sub	sp, #16
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d106      	bne.n	8018a30 <tcp_close_shutdown_fin+0x1c>
 8018a22:	4b2e      	ldr	r3, [pc, #184]	; (8018adc <tcp_close_shutdown_fin+0xc8>)
 8018a24:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8018a28:	492d      	ldr	r1, [pc, #180]	; (8018ae0 <tcp_close_shutdown_fin+0xcc>)
 8018a2a:	482e      	ldr	r0, [pc, #184]	; (8018ae4 <tcp_close_shutdown_fin+0xd0>)
 8018a2c:	f007 fb6c 	bl	8020108 <iprintf>

  switch (pcb->state) {
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	7d1b      	ldrb	r3, [r3, #20]
 8018a34:	2b07      	cmp	r3, #7
 8018a36:	d020      	beq.n	8018a7a <tcp_close_shutdown_fin+0x66>
 8018a38:	2b07      	cmp	r3, #7
 8018a3a:	dc2b      	bgt.n	8018a94 <tcp_close_shutdown_fin+0x80>
 8018a3c:	2b03      	cmp	r3, #3
 8018a3e:	d002      	beq.n	8018a46 <tcp_close_shutdown_fin+0x32>
 8018a40:	2b04      	cmp	r3, #4
 8018a42:	d00d      	beq.n	8018a60 <tcp_close_shutdown_fin+0x4c>
 8018a44:	e026      	b.n	8018a94 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8018a46:	6878      	ldr	r0, [r7, #4]
 8018a48:	f004 fe14 	bl	801d674 <tcp_send_fin>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d11f      	bne.n	8018a98 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	2205      	movs	r2, #5
 8018a5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018a5e:	e01b      	b.n	8018a98 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8018a60:	6878      	ldr	r0, [r7, #4]
 8018a62:	f004 fe07 	bl	801d674 <tcp_send_fin>
 8018a66:	4603      	mov	r3, r0
 8018a68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d114      	bne.n	8018a9c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	2205      	movs	r2, #5
 8018a76:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018a78:	e010      	b.n	8018a9c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	f004 fdfa 	bl	801d674 <tcp_send_fin>
 8018a80:	4603      	mov	r3, r0
 8018a82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d109      	bne.n	8018aa0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	2209      	movs	r2, #9
 8018a90:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018a92:	e005      	b.n	8018aa0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8018a94:	2300      	movs	r3, #0
 8018a96:	e01c      	b.n	8018ad2 <tcp_close_shutdown_fin+0xbe>
      break;
 8018a98:	bf00      	nop
 8018a9a:	e002      	b.n	8018aa2 <tcp_close_shutdown_fin+0x8e>
      break;
 8018a9c:	bf00      	nop
 8018a9e:	e000      	b.n	8018aa2 <tcp_close_shutdown_fin+0x8e>
      break;
 8018aa0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8018aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d103      	bne.n	8018ab2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8018aaa:	6878      	ldr	r0, [r7, #4]
 8018aac:	f004 ff20 	bl	801d8f0 <tcp_output>
 8018ab0:	e00d      	b.n	8018ace <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8018ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018aba:	d108      	bne.n	8018ace <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	8b5b      	ldrh	r3, [r3, #26]
 8018ac0:	f043 0308 	orr.w	r3, r3, #8
 8018ac4:	b29a      	uxth	r2, r3
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8018aca:	2300      	movs	r3, #0
 8018acc:	e001      	b.n	8018ad2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8018ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	3710      	adds	r7, #16
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	bd80      	pop	{r7, pc}
 8018ada:	bf00      	nop
 8018adc:	08022f98 	.word	0x08022f98
 8018ae0:	0802308c 	.word	0x0802308c
 8018ae4:	08023020 	.word	0x08023020

08018ae8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b082      	sub	sp, #8
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d109      	bne.n	8018b0a <tcp_close+0x22>
 8018af6:	4b0f      	ldr	r3, [pc, #60]	; (8018b34 <tcp_close+0x4c>)
 8018af8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8018afc:	490e      	ldr	r1, [pc, #56]	; (8018b38 <tcp_close+0x50>)
 8018afe:	480f      	ldr	r0, [pc, #60]	; (8018b3c <tcp_close+0x54>)
 8018b00:	f007 fb02 	bl	8020108 <iprintf>
 8018b04:	f06f 030f 	mvn.w	r3, #15
 8018b08:	e00f      	b.n	8018b2a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	7d1b      	ldrb	r3, [r3, #20]
 8018b0e:	2b01      	cmp	r3, #1
 8018b10:	d006      	beq.n	8018b20 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	8b5b      	ldrh	r3, [r3, #26]
 8018b16:	f043 0310 	orr.w	r3, r3, #16
 8018b1a:	b29a      	uxth	r2, r3
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8018b20:	2101      	movs	r1, #1
 8018b22:	6878      	ldr	r0, [r7, #4]
 8018b24:	f7ff fe94 	bl	8018850 <tcp_close_shutdown>
 8018b28:	4603      	mov	r3, r0
}
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	3708      	adds	r7, #8
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	bd80      	pop	{r7, pc}
 8018b32:	bf00      	nop
 8018b34:	08022f98 	.word	0x08022f98
 8018b38:	080230ec 	.word	0x080230ec
 8018b3c:	08023020 	.word	0x08023020

08018b40 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b084      	sub	sp, #16
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	60f8      	str	r0, [r7, #12]
 8018b48:	60b9      	str	r1, [r7, #8]
 8018b4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d109      	bne.n	8018b66 <tcp_shutdown+0x26>
 8018b52:	4b26      	ldr	r3, [pc, #152]	; (8018bec <tcp_shutdown+0xac>)
 8018b54:	f240 2207 	movw	r2, #519	; 0x207
 8018b58:	4925      	ldr	r1, [pc, #148]	; (8018bf0 <tcp_shutdown+0xb0>)
 8018b5a:	4826      	ldr	r0, [pc, #152]	; (8018bf4 <tcp_shutdown+0xb4>)
 8018b5c:	f007 fad4 	bl	8020108 <iprintf>
 8018b60:	f06f 030f 	mvn.w	r3, #15
 8018b64:	e03d      	b.n	8018be2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	7d1b      	ldrb	r3, [r3, #20]
 8018b6a:	2b01      	cmp	r3, #1
 8018b6c:	d102      	bne.n	8018b74 <tcp_shutdown+0x34>
    return ERR_CONN;
 8018b6e:	f06f 030a 	mvn.w	r3, #10
 8018b72:	e036      	b.n	8018be2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8018b74:	68bb      	ldr	r3, [r7, #8]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d01b      	beq.n	8018bb2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	8b5b      	ldrh	r3, [r3, #26]
 8018b7e:	f043 0310 	orr.w	r3, r3, #16
 8018b82:	b29a      	uxth	r2, r3
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d005      	beq.n	8018b9a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8018b8e:	2101      	movs	r1, #1
 8018b90:	68f8      	ldr	r0, [r7, #12]
 8018b92:	f7ff fe5d 	bl	8018850 <tcp_close_shutdown>
 8018b96:	4603      	mov	r3, r0
 8018b98:	e023      	b.n	8018be2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d007      	beq.n	8018bb2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7ff f912 	bl	8017dd0 <pbuf_free>
      pcb->refused_data = NULL;
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	2200      	movs	r2, #0
 8018bb0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d013      	beq.n	8018be0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	7d1b      	ldrb	r3, [r3, #20]
 8018bbc:	2b04      	cmp	r3, #4
 8018bbe:	dc02      	bgt.n	8018bc6 <tcp_shutdown+0x86>
 8018bc0:	2b03      	cmp	r3, #3
 8018bc2:	da02      	bge.n	8018bca <tcp_shutdown+0x8a>
 8018bc4:	e009      	b.n	8018bda <tcp_shutdown+0x9a>
 8018bc6:	2b07      	cmp	r3, #7
 8018bc8:	d107      	bne.n	8018bda <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	b2db      	uxtb	r3, r3
 8018bce:	4619      	mov	r1, r3
 8018bd0:	68f8      	ldr	r0, [r7, #12]
 8018bd2:	f7ff fe3d 	bl	8018850 <tcp_close_shutdown>
 8018bd6:	4603      	mov	r3, r0
 8018bd8:	e003      	b.n	8018be2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8018bda:	f06f 030a 	mvn.w	r3, #10
 8018bde:	e000      	b.n	8018be2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8018be0:	2300      	movs	r3, #0
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3710      	adds	r7, #16
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	08022f98 	.word	0x08022f98
 8018bf0:	08023104 	.word	0x08023104
 8018bf4:	08023020 	.word	0x08023020

08018bf8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b08e      	sub	sp, #56	; 0x38
 8018bfc:	af04      	add	r7, sp, #16
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d107      	bne.n	8018c18 <tcp_abandon+0x20>
 8018c08:	4b52      	ldr	r3, [pc, #328]	; (8018d54 <tcp_abandon+0x15c>)
 8018c0a:	f240 223d 	movw	r2, #573	; 0x23d
 8018c0e:	4952      	ldr	r1, [pc, #328]	; (8018d58 <tcp_abandon+0x160>)
 8018c10:	4852      	ldr	r0, [pc, #328]	; (8018d5c <tcp_abandon+0x164>)
 8018c12:	f007 fa79 	bl	8020108 <iprintf>
 8018c16:	e099      	b.n	8018d4c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	7d1b      	ldrb	r3, [r3, #20]
 8018c1c:	2b01      	cmp	r3, #1
 8018c1e:	d106      	bne.n	8018c2e <tcp_abandon+0x36>
 8018c20:	4b4c      	ldr	r3, [pc, #304]	; (8018d54 <tcp_abandon+0x15c>)
 8018c22:	f44f 7210 	mov.w	r2, #576	; 0x240
 8018c26:	494e      	ldr	r1, [pc, #312]	; (8018d60 <tcp_abandon+0x168>)
 8018c28:	484c      	ldr	r0, [pc, #304]	; (8018d5c <tcp_abandon+0x164>)
 8018c2a:	f007 fa6d 	bl	8020108 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	7d1b      	ldrb	r3, [r3, #20]
 8018c32:	2b0a      	cmp	r3, #10
 8018c34:	d107      	bne.n	8018c46 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8018c36:	6879      	ldr	r1, [r7, #4]
 8018c38:	484a      	ldr	r0, [pc, #296]	; (8018d64 <tcp_abandon+0x16c>)
 8018c3a:	f001 fa3d 	bl	801a0b8 <tcp_pcb_remove>
    tcp_free(pcb);
 8018c3e:	6878      	ldr	r0, [r7, #4]
 8018c40:	f7ff fd54 	bl	80186ec <tcp_free>
 8018c44:	e082      	b.n	8018d4c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8018c46:	2300      	movs	r3, #0
 8018c48:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c52:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c58:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018c60:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	691b      	ldr	r3, [r3, #16]
 8018c66:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	7d1b      	ldrb	r3, [r3, #20]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d126      	bne.n	8018cbe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	8adb      	ldrh	r3, [r3, #22]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d02e      	beq.n	8018cd6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018c78:	4b3b      	ldr	r3, [pc, #236]	; (8018d68 <tcp_abandon+0x170>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	687a      	ldr	r2, [r7, #4]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d105      	bne.n	8018c8e <tcp_abandon+0x96>
 8018c82:	4b39      	ldr	r3, [pc, #228]	; (8018d68 <tcp_abandon+0x170>)
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	68db      	ldr	r3, [r3, #12]
 8018c88:	4a37      	ldr	r2, [pc, #220]	; (8018d68 <tcp_abandon+0x170>)
 8018c8a:	6013      	str	r3, [r2, #0]
 8018c8c:	e013      	b.n	8018cb6 <tcp_abandon+0xbe>
 8018c8e:	4b36      	ldr	r3, [pc, #216]	; (8018d68 <tcp_abandon+0x170>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	61fb      	str	r3, [r7, #28]
 8018c94:	e00c      	b.n	8018cb0 <tcp_abandon+0xb8>
 8018c96:	69fb      	ldr	r3, [r7, #28]
 8018c98:	68db      	ldr	r3, [r3, #12]
 8018c9a:	687a      	ldr	r2, [r7, #4]
 8018c9c:	429a      	cmp	r2, r3
 8018c9e:	d104      	bne.n	8018caa <tcp_abandon+0xb2>
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	68da      	ldr	r2, [r3, #12]
 8018ca4:	69fb      	ldr	r3, [r7, #28]
 8018ca6:	60da      	str	r2, [r3, #12]
 8018ca8:	e005      	b.n	8018cb6 <tcp_abandon+0xbe>
 8018caa:	69fb      	ldr	r3, [r7, #28]
 8018cac:	68db      	ldr	r3, [r3, #12]
 8018cae:	61fb      	str	r3, [r7, #28]
 8018cb0:	69fb      	ldr	r3, [r7, #28]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d1ef      	bne.n	8018c96 <tcp_abandon+0x9e>
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	2200      	movs	r2, #0
 8018cba:	60da      	str	r2, [r3, #12]
 8018cbc:	e00b      	b.n	8018cd6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	8adb      	ldrh	r3, [r3, #22]
 8018cc6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018cc8:	6879      	ldr	r1, [r7, #4]
 8018cca:	4828      	ldr	r0, [pc, #160]	; (8018d6c <tcp_abandon+0x174>)
 8018ccc:	f001 f9f4 	bl	801a0b8 <tcp_pcb_remove>
 8018cd0:	4b27      	ldr	r3, [pc, #156]	; (8018d70 <tcp_abandon+0x178>)
 8018cd2:	2201      	movs	r2, #1
 8018cd4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d004      	beq.n	8018ce8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	f000 fec8 	bl	8019a78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d004      	beq.n	8018cfa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f000 febf 	bl	8019a78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d004      	beq.n	8018d0c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018d06:	4618      	mov	r0, r3
 8018d08:	f000 feb6 	bl	8019a78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8018d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d00e      	beq.n	8018d30 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8018d12:	6879      	ldr	r1, [r7, #4]
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	3304      	adds	r3, #4
 8018d18:	687a      	ldr	r2, [r7, #4]
 8018d1a:	8b12      	ldrh	r2, [r2, #24]
 8018d1c:	9202      	str	r2, [sp, #8]
 8018d1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018d20:	9201      	str	r2, [sp, #4]
 8018d22:	9300      	str	r3, [sp, #0]
 8018d24:	460b      	mov	r3, r1
 8018d26:	697a      	ldr	r2, [r7, #20]
 8018d28:	69b9      	ldr	r1, [r7, #24]
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	f005 fb94 	bl	801e458 <tcp_rst>
    }
    last_state = pcb->state;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	7d1b      	ldrb	r3, [r3, #20]
 8018d34:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8018d36:	6878      	ldr	r0, [r7, #4]
 8018d38:	f7ff fcd8 	bl	80186ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018d3c:	693b      	ldr	r3, [r7, #16]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d004      	beq.n	8018d4c <tcp_abandon+0x154>
 8018d42:	693b      	ldr	r3, [r7, #16]
 8018d44:	f06f 010c 	mvn.w	r1, #12
 8018d48:	68f8      	ldr	r0, [r7, #12]
 8018d4a:	4798      	blx	r3
  }
}
 8018d4c:	3728      	adds	r7, #40	; 0x28
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	bd80      	pop	{r7, pc}
 8018d52:	bf00      	nop
 8018d54:	08022f98 	.word	0x08022f98
 8018d58:	08023120 	.word	0x08023120
 8018d5c:	08023020 	.word	0x08023020
 8018d60:	0802313c 	.word	0x0802313c
 8018d64:	24010028 	.word	0x24010028
 8018d68:	2401001c 	.word	0x2401001c
 8018d6c:	24010024 	.word	0x24010024
 8018d70:	2401002c 	.word	0x2401002c

08018d74 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b082      	sub	sp, #8
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8018d7c:	2101      	movs	r1, #1
 8018d7e:	6878      	ldr	r0, [r7, #4]
 8018d80:	f7ff ff3a 	bl	8018bf8 <tcp_abandon>
}
 8018d84:	bf00      	nop
 8018d86:	3708      	adds	r7, #8
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	bd80      	pop	{r7, pc}

08018d8c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b088      	sub	sp, #32
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	60f8      	str	r0, [r7, #12]
 8018d94:	60b9      	str	r1, [r7, #8]
 8018d96:	4613      	mov	r3, r2
 8018d98:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8018d9a:	2304      	movs	r3, #4
 8018d9c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d101      	bne.n	8018da8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8018da4:	4b3e      	ldr	r3, [pc, #248]	; (8018ea0 <tcp_bind+0x114>)
 8018da6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d109      	bne.n	8018dc2 <tcp_bind+0x36>
 8018dae:	4b3d      	ldr	r3, [pc, #244]	; (8018ea4 <tcp_bind+0x118>)
 8018db0:	f240 22a9 	movw	r2, #681	; 0x2a9
 8018db4:	493c      	ldr	r1, [pc, #240]	; (8018ea8 <tcp_bind+0x11c>)
 8018db6:	483d      	ldr	r0, [pc, #244]	; (8018eac <tcp_bind+0x120>)
 8018db8:	f007 f9a6 	bl	8020108 <iprintf>
 8018dbc:	f06f 030f 	mvn.w	r3, #15
 8018dc0:	e06a      	b.n	8018e98 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	7d1b      	ldrb	r3, [r3, #20]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d009      	beq.n	8018dde <tcp_bind+0x52>
 8018dca:	4b36      	ldr	r3, [pc, #216]	; (8018ea4 <tcp_bind+0x118>)
 8018dcc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018dd0:	4937      	ldr	r1, [pc, #220]	; (8018eb0 <tcp_bind+0x124>)
 8018dd2:	4836      	ldr	r0, [pc, #216]	; (8018eac <tcp_bind+0x120>)
 8018dd4:	f007 f998 	bl	8020108 <iprintf>
 8018dd8:	f06f 0305 	mvn.w	r3, #5
 8018ddc:	e05c      	b.n	8018e98 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8018dde:	88fb      	ldrh	r3, [r7, #6]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d109      	bne.n	8018df8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8018de4:	f000 f9e0 	bl	80191a8 <tcp_new_port>
 8018de8:	4603      	mov	r3, r0
 8018dea:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018dec:	88fb      	ldrh	r3, [r7, #6]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d135      	bne.n	8018e5e <tcp_bind+0xd2>
      return ERR_BUF;
 8018df2:	f06f 0301 	mvn.w	r3, #1
 8018df6:	e04f      	b.n	8018e98 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8018df8:	2300      	movs	r3, #0
 8018dfa:	61fb      	str	r3, [r7, #28]
 8018dfc:	e02b      	b.n	8018e56 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018dfe:	4a2d      	ldr	r2, [pc, #180]	; (8018eb4 <tcp_bind+0x128>)
 8018e00:	69fb      	ldr	r3, [r7, #28]
 8018e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	61bb      	str	r3, [r7, #24]
 8018e0a:	e01e      	b.n	8018e4a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8018e0c:	69bb      	ldr	r3, [r7, #24]
 8018e0e:	8adb      	ldrh	r3, [r3, #22]
 8018e10:	88fa      	ldrh	r2, [r7, #6]
 8018e12:	429a      	cmp	r2, r3
 8018e14:	d116      	bne.n	8018e44 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8018e16:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d010      	beq.n	8018e3e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018e1c:	69bb      	ldr	r3, [r7, #24]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d00c      	beq.n	8018e3e <tcp_bind+0xb2>
 8018e24:	68bb      	ldr	r3, [r7, #8]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d009      	beq.n	8018e3e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8018e2a:	68bb      	ldr	r3, [r7, #8]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d005      	beq.n	8018e3e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8018e32:	69bb      	ldr	r3, [r7, #24]
 8018e34:	681a      	ldr	r2, [r3, #0]
 8018e36:	68bb      	ldr	r3, [r7, #8]
 8018e38:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018e3a:	429a      	cmp	r2, r3
 8018e3c:	d102      	bne.n	8018e44 <tcp_bind+0xb8>
              return ERR_USE;
 8018e3e:	f06f 0307 	mvn.w	r3, #7
 8018e42:	e029      	b.n	8018e98 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018e44:	69bb      	ldr	r3, [r7, #24]
 8018e46:	68db      	ldr	r3, [r3, #12]
 8018e48:	61bb      	str	r3, [r7, #24]
 8018e4a:	69bb      	ldr	r3, [r7, #24]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d1dd      	bne.n	8018e0c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8018e50:	69fb      	ldr	r3, [r7, #28]
 8018e52:	3301      	adds	r3, #1
 8018e54:	61fb      	str	r3, [r7, #28]
 8018e56:	69fa      	ldr	r2, [r7, #28]
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	429a      	cmp	r2, r3
 8018e5c:	dbcf      	blt.n	8018dfe <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8018e5e:	68bb      	ldr	r3, [r7, #8]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d00c      	beq.n	8018e7e <tcp_bind+0xf2>
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d008      	beq.n	8018e7e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d002      	beq.n	8018e78 <tcp_bind+0xec>
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	e000      	b.n	8018e7a <tcp_bind+0xee>
 8018e78:	2300      	movs	r3, #0
 8018e7a:	68fa      	ldr	r2, [r7, #12]
 8018e7c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	88fa      	ldrh	r2, [r7, #6]
 8018e82:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018e84:	4b0c      	ldr	r3, [pc, #48]	; (8018eb8 <tcp_bind+0x12c>)
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	60da      	str	r2, [r3, #12]
 8018e8c:	4a0a      	ldr	r2, [pc, #40]	; (8018eb8 <tcp_bind+0x12c>)
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	6013      	str	r3, [r2, #0]
 8018e92:	f005 fe5b 	bl	801eb4c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8018e96:	2300      	movs	r3, #0
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3720      	adds	r7, #32
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}
 8018ea0:	08024ad4 	.word	0x08024ad4
 8018ea4:	08022f98 	.word	0x08022f98
 8018ea8:	08023170 	.word	0x08023170
 8018eac:	08023020 	.word	0x08023020
 8018eb0:	08023188 	.word	0x08023188
 8018eb4:	08024bc8 	.word	0x08024bc8
 8018eb8:	2401001c 	.word	0x2401001c

08018ebc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b084      	sub	sp, #16
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	60f8      	str	r0, [r7, #12]
 8018ec4:	60b9      	str	r1, [r7, #8]
 8018ec6:	4613      	mov	r3, r2
 8018ec8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8018eca:	68bb      	ldr	r3, [r7, #8]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d106      	bne.n	8018ede <tcp_accept_null+0x22>
 8018ed0:	4b07      	ldr	r3, [pc, #28]	; (8018ef0 <tcp_accept_null+0x34>)
 8018ed2:	f240 320f 	movw	r2, #783	; 0x30f
 8018ed6:	4907      	ldr	r1, [pc, #28]	; (8018ef4 <tcp_accept_null+0x38>)
 8018ed8:	4807      	ldr	r0, [pc, #28]	; (8018ef8 <tcp_accept_null+0x3c>)
 8018eda:	f007 f915 	bl	8020108 <iprintf>

  tcp_abort(pcb);
 8018ede:	68b8      	ldr	r0, [r7, #8]
 8018ee0:	f7ff ff48 	bl	8018d74 <tcp_abort>

  return ERR_ABRT;
 8018ee4:	f06f 030c 	mvn.w	r3, #12
}
 8018ee8:	4618      	mov	r0, r3
 8018eea:	3710      	adds	r7, #16
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}
 8018ef0:	08022f98 	.word	0x08022f98
 8018ef4:	080231b0 	.word	0x080231b0
 8018ef8:	08023020 	.word	0x08023020

08018efc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b088      	sub	sp, #32
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	460b      	mov	r3, r1
 8018f06:	607a      	str	r2, [r7, #4]
 8018f08:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d109      	bne.n	8018f28 <tcp_listen_with_backlog_and_err+0x2c>
 8018f14:	4b47      	ldr	r3, [pc, #284]	; (8019034 <tcp_listen_with_backlog_and_err+0x138>)
 8018f16:	f240 3259 	movw	r2, #857	; 0x359
 8018f1a:	4947      	ldr	r1, [pc, #284]	; (8019038 <tcp_listen_with_backlog_and_err+0x13c>)
 8018f1c:	4847      	ldr	r0, [pc, #284]	; (801903c <tcp_listen_with_backlog_and_err+0x140>)
 8018f1e:	f007 f8f3 	bl	8020108 <iprintf>
 8018f22:	23f0      	movs	r3, #240	; 0xf0
 8018f24:	76fb      	strb	r3, [r7, #27]
 8018f26:	e079      	b.n	801901c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	7d1b      	ldrb	r3, [r3, #20]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d009      	beq.n	8018f44 <tcp_listen_with_backlog_and_err+0x48>
 8018f30:	4b40      	ldr	r3, [pc, #256]	; (8019034 <tcp_listen_with_backlog_and_err+0x138>)
 8018f32:	f240 325a 	movw	r2, #858	; 0x35a
 8018f36:	4942      	ldr	r1, [pc, #264]	; (8019040 <tcp_listen_with_backlog_and_err+0x144>)
 8018f38:	4840      	ldr	r0, [pc, #256]	; (801903c <tcp_listen_with_backlog_and_err+0x140>)
 8018f3a:	f007 f8e5 	bl	8020108 <iprintf>
 8018f3e:	23f1      	movs	r3, #241	; 0xf1
 8018f40:	76fb      	strb	r3, [r7, #27]
 8018f42:	e06b      	b.n	801901c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	7d1b      	ldrb	r3, [r3, #20]
 8018f48:	2b01      	cmp	r3, #1
 8018f4a:	d104      	bne.n	8018f56 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8018f50:	23f7      	movs	r3, #247	; 0xf7
 8018f52:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018f54:	e062      	b.n	801901c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018f56:	2002      	movs	r0, #2
 8018f58:	f7fd ffd0 	bl	8016efc <memp_malloc>
 8018f5c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8018f5e:	69fb      	ldr	r3, [r7, #28]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d102      	bne.n	8018f6a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8018f64:	23ff      	movs	r3, #255	; 0xff
 8018f66:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018f68:	e058      	b.n	801901c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	691a      	ldr	r2, [r3, #16]
 8018f6e:	69fb      	ldr	r3, [r7, #28]
 8018f70:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	8ada      	ldrh	r2, [r3, #22]
 8018f76:	69fb      	ldr	r3, [r7, #28]
 8018f78:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8018f7a:	69fb      	ldr	r3, [r7, #28]
 8018f7c:	2201      	movs	r2, #1
 8018f7e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	7d5a      	ldrb	r2, [r3, #21]
 8018f84:	69fb      	ldr	r3, [r7, #28]
 8018f86:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	7a5a      	ldrb	r2, [r3, #9]
 8018f8c:	69fb      	ldr	r3, [r7, #28]
 8018f8e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8018f90:	69fb      	ldr	r3, [r7, #28]
 8018f92:	2200      	movs	r2, #0
 8018f94:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	7ada      	ldrb	r2, [r3, #11]
 8018f9a:	69fb      	ldr	r3, [r7, #28]
 8018f9c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	7a9a      	ldrb	r2, [r3, #10]
 8018fa2:	69fb      	ldr	r3, [r7, #28]
 8018fa4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	681a      	ldr	r2, [r3, #0]
 8018faa:	69fb      	ldr	r3, [r7, #28]
 8018fac:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	8adb      	ldrh	r3, [r3, #22]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d021      	beq.n	8018ffa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018fb6:	4b23      	ldr	r3, [pc, #140]	; (8019044 <tcp_listen_with_backlog_and_err+0x148>)
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	68fa      	ldr	r2, [r7, #12]
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d105      	bne.n	8018fcc <tcp_listen_with_backlog_and_err+0xd0>
 8018fc0:	4b20      	ldr	r3, [pc, #128]	; (8019044 <tcp_listen_with_backlog_and_err+0x148>)
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	68db      	ldr	r3, [r3, #12]
 8018fc6:	4a1f      	ldr	r2, [pc, #124]	; (8019044 <tcp_listen_with_backlog_and_err+0x148>)
 8018fc8:	6013      	str	r3, [r2, #0]
 8018fca:	e013      	b.n	8018ff4 <tcp_listen_with_backlog_and_err+0xf8>
 8018fcc:	4b1d      	ldr	r3, [pc, #116]	; (8019044 <tcp_listen_with_backlog_and_err+0x148>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	617b      	str	r3, [r7, #20]
 8018fd2:	e00c      	b.n	8018fee <tcp_listen_with_backlog_and_err+0xf2>
 8018fd4:	697b      	ldr	r3, [r7, #20]
 8018fd6:	68db      	ldr	r3, [r3, #12]
 8018fd8:	68fa      	ldr	r2, [r7, #12]
 8018fda:	429a      	cmp	r2, r3
 8018fdc:	d104      	bne.n	8018fe8 <tcp_listen_with_backlog_and_err+0xec>
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	68da      	ldr	r2, [r3, #12]
 8018fe2:	697b      	ldr	r3, [r7, #20]
 8018fe4:	60da      	str	r2, [r3, #12]
 8018fe6:	e005      	b.n	8018ff4 <tcp_listen_with_backlog_and_err+0xf8>
 8018fe8:	697b      	ldr	r3, [r7, #20]
 8018fea:	68db      	ldr	r3, [r3, #12]
 8018fec:	617b      	str	r3, [r7, #20]
 8018fee:	697b      	ldr	r3, [r7, #20]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d1ef      	bne.n	8018fd4 <tcp_listen_with_backlog_and_err+0xd8>
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	2200      	movs	r2, #0
 8018ff8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8018ffa:	68f8      	ldr	r0, [r7, #12]
 8018ffc:	f7ff fb76 	bl	80186ec <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8019000:	69fb      	ldr	r3, [r7, #28]
 8019002:	4a11      	ldr	r2, [pc, #68]	; (8019048 <tcp_listen_with_backlog_and_err+0x14c>)
 8019004:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8019006:	4b11      	ldr	r3, [pc, #68]	; (801904c <tcp_listen_with_backlog_and_err+0x150>)
 8019008:	681a      	ldr	r2, [r3, #0]
 801900a:	69fb      	ldr	r3, [r7, #28]
 801900c:	60da      	str	r2, [r3, #12]
 801900e:	4a0f      	ldr	r2, [pc, #60]	; (801904c <tcp_listen_with_backlog_and_err+0x150>)
 8019010:	69fb      	ldr	r3, [r7, #28]
 8019012:	6013      	str	r3, [r2, #0]
 8019014:	f005 fd9a 	bl	801eb4c <tcp_timer_needed>
  res = ERR_OK;
 8019018:	2300      	movs	r3, #0
 801901a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d002      	beq.n	8019028 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	7efa      	ldrb	r2, [r7, #27]
 8019026:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8019028:	69fb      	ldr	r3, [r7, #28]
}
 801902a:	4618      	mov	r0, r3
 801902c:	3720      	adds	r7, #32
 801902e:	46bd      	mov	sp, r7
 8019030:	bd80      	pop	{r7, pc}
 8019032:	bf00      	nop
 8019034:	08022f98 	.word	0x08022f98
 8019038:	080231d0 	.word	0x080231d0
 801903c:	08023020 	.word	0x08023020
 8019040:	08023200 	.word	0x08023200
 8019044:	2401001c 	.word	0x2401001c
 8019048:	08018ebd 	.word	0x08018ebd
 801904c:	24010020 	.word	0x24010020

08019050 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b084      	sub	sp, #16
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d106      	bne.n	801906c <tcp_update_rcv_ann_wnd+0x1c>
 801905e:	4b25      	ldr	r3, [pc, #148]	; (80190f4 <tcp_update_rcv_ann_wnd+0xa4>)
 8019060:	f240 32a6 	movw	r2, #934	; 0x3a6
 8019064:	4924      	ldr	r1, [pc, #144]	; (80190f8 <tcp_update_rcv_ann_wnd+0xa8>)
 8019066:	4825      	ldr	r0, [pc, #148]	; (80190fc <tcp_update_rcv_ann_wnd+0xac>)
 8019068:	f007 f84e 	bl	8020108 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019070:	687a      	ldr	r2, [r7, #4]
 8019072:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8019074:	4413      	add	r3, r2
 8019076:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801907c:	687a      	ldr	r2, [r7, #4]
 801907e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8019080:	f640 3168 	movw	r1, #2920	; 0xb68
 8019084:	428a      	cmp	r2, r1
 8019086:	bf28      	it	cs
 8019088:	460a      	movcs	r2, r1
 801908a:	b292      	uxth	r2, r2
 801908c:	4413      	add	r3, r2
 801908e:	68fa      	ldr	r2, [r7, #12]
 8019090:	1ad3      	subs	r3, r2, r3
 8019092:	2b00      	cmp	r3, #0
 8019094:	db08      	blt.n	80190a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190a2:	68fa      	ldr	r2, [r7, #12]
 80190a4:	1ad3      	subs	r3, r2, r3
 80190a6:	e020      	b.n	80190ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190b0:	1ad3      	subs	r3, r2, r3
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	dd03      	ble.n	80190be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	2200      	movs	r2, #0
 80190ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80190bc:	e014      	b.n	80190e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c6:	1ad3      	subs	r3, r2, r3
 80190c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80190ca:	68bb      	ldr	r3, [r7, #8]
 80190cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80190d0:	d306      	bcc.n	80190e0 <tcp_update_rcv_ann_wnd+0x90>
 80190d2:	4b08      	ldr	r3, [pc, #32]	; (80190f4 <tcp_update_rcv_ann_wnd+0xa4>)
 80190d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80190d8:	4909      	ldr	r1, [pc, #36]	; (8019100 <tcp_update_rcv_ann_wnd+0xb0>)
 80190da:	4808      	ldr	r0, [pc, #32]	; (80190fc <tcp_update_rcv_ann_wnd+0xac>)
 80190dc:	f007 f814 	bl	8020108 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	b29a      	uxth	r2, r3
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80190e8:	2300      	movs	r3, #0
  }
}
 80190ea:	4618      	mov	r0, r3
 80190ec:	3710      	adds	r7, #16
 80190ee:	46bd      	mov	sp, r7
 80190f0:	bd80      	pop	{r7, pc}
 80190f2:	bf00      	nop
 80190f4:	08022f98 	.word	0x08022f98
 80190f8:	08023238 	.word	0x08023238
 80190fc:	08023020 	.word	0x08023020
 8019100:	0802325c 	.word	0x0802325c

08019104 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b084      	sub	sp, #16
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
 801910c:	460b      	mov	r3, r1
 801910e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d107      	bne.n	8019126 <tcp_recved+0x22>
 8019116:	4b20      	ldr	r3, [pc, #128]	; (8019198 <tcp_recved+0x94>)
 8019118:	f240 32cf 	movw	r2, #975	; 0x3cf
 801911c:	491f      	ldr	r1, [pc, #124]	; (801919c <tcp_recved+0x98>)
 801911e:	4820      	ldr	r0, [pc, #128]	; (80191a0 <tcp_recved+0x9c>)
 8019120:	f006 fff2 	bl	8020108 <iprintf>
 8019124:	e034      	b.n	8019190 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	7d1b      	ldrb	r3, [r3, #20]
 801912a:	2b01      	cmp	r3, #1
 801912c:	d106      	bne.n	801913c <tcp_recved+0x38>
 801912e:	4b1a      	ldr	r3, [pc, #104]	; (8019198 <tcp_recved+0x94>)
 8019130:	f240 32d2 	movw	r2, #978	; 0x3d2
 8019134:	491b      	ldr	r1, [pc, #108]	; (80191a4 <tcp_recved+0xa0>)
 8019136:	481a      	ldr	r0, [pc, #104]	; (80191a0 <tcp_recved+0x9c>)
 8019138:	f006 ffe6 	bl	8020108 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019140:	887b      	ldrh	r3, [r7, #2]
 8019142:	4413      	add	r3, r2
 8019144:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8019146:	89fb      	ldrh	r3, [r7, #14]
 8019148:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801914c:	4293      	cmp	r3, r2
 801914e:	d804      	bhi.n	801915a <tcp_recved+0x56>
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019154:	89fa      	ldrh	r2, [r7, #14]
 8019156:	429a      	cmp	r2, r3
 8019158:	d204      	bcs.n	8019164 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8019160:	851a      	strh	r2, [r3, #40]	; 0x28
 8019162:	e002      	b.n	801916a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	89fa      	ldrh	r2, [r7, #14]
 8019168:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801916a:	6878      	ldr	r0, [r7, #4]
 801916c:	f7ff ff70 	bl	8019050 <tcp_update_rcv_ann_wnd>
 8019170:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8019172:	68bb      	ldr	r3, [r7, #8]
 8019174:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8019178:	4293      	cmp	r3, r2
 801917a:	d909      	bls.n	8019190 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	8b5b      	ldrh	r3, [r3, #26]
 8019180:	f043 0302 	orr.w	r3, r3, #2
 8019184:	b29a      	uxth	r2, r3
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801918a:	6878      	ldr	r0, [r7, #4]
 801918c:	f004 fbb0 	bl	801d8f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8019190:	3710      	adds	r7, #16
 8019192:	46bd      	mov	sp, r7
 8019194:	bd80      	pop	{r7, pc}
 8019196:	bf00      	nop
 8019198:	08022f98 	.word	0x08022f98
 801919c:	08023278 	.word	0x08023278
 80191a0:	08023020 	.word	0x08023020
 80191a4:	08023290 	.word	0x08023290

080191a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80191a8:	b480      	push	{r7}
 80191aa:	b083      	sub	sp, #12
 80191ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80191ae:	2300      	movs	r3, #0
 80191b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80191b2:	4b1e      	ldr	r3, [pc, #120]	; (801922c <tcp_new_port+0x84>)
 80191b4:	881b      	ldrh	r3, [r3, #0]
 80191b6:	3301      	adds	r3, #1
 80191b8:	b29a      	uxth	r2, r3
 80191ba:	4b1c      	ldr	r3, [pc, #112]	; (801922c <tcp_new_port+0x84>)
 80191bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80191be:	4b1b      	ldr	r3, [pc, #108]	; (801922c <tcp_new_port+0x84>)
 80191c0:	881b      	ldrh	r3, [r3, #0]
 80191c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80191c6:	4293      	cmp	r3, r2
 80191c8:	d103      	bne.n	80191d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80191ca:	4b18      	ldr	r3, [pc, #96]	; (801922c <tcp_new_port+0x84>)
 80191cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80191d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80191d2:	2300      	movs	r3, #0
 80191d4:	71fb      	strb	r3, [r7, #7]
 80191d6:	e01e      	b.n	8019216 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80191d8:	79fb      	ldrb	r3, [r7, #7]
 80191da:	4a15      	ldr	r2, [pc, #84]	; (8019230 <tcp_new_port+0x88>)
 80191dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	603b      	str	r3, [r7, #0]
 80191e4:	e011      	b.n	801920a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	8ada      	ldrh	r2, [r3, #22]
 80191ea:	4b10      	ldr	r3, [pc, #64]	; (801922c <tcp_new_port+0x84>)
 80191ec:	881b      	ldrh	r3, [r3, #0]
 80191ee:	429a      	cmp	r2, r3
 80191f0:	d108      	bne.n	8019204 <tcp_new_port+0x5c>
        n++;
 80191f2:	88bb      	ldrh	r3, [r7, #4]
 80191f4:	3301      	adds	r3, #1
 80191f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80191f8:	88bb      	ldrh	r3, [r7, #4]
 80191fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80191fe:	d3d8      	bcc.n	80191b2 <tcp_new_port+0xa>
          return 0;
 8019200:	2300      	movs	r3, #0
 8019202:	e00d      	b.n	8019220 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	68db      	ldr	r3, [r3, #12]
 8019208:	603b      	str	r3, [r7, #0]
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d1ea      	bne.n	80191e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019210:	79fb      	ldrb	r3, [r7, #7]
 8019212:	3301      	adds	r3, #1
 8019214:	71fb      	strb	r3, [r7, #7]
 8019216:	79fb      	ldrb	r3, [r7, #7]
 8019218:	2b03      	cmp	r3, #3
 801921a:	d9dd      	bls.n	80191d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801921c:	4b03      	ldr	r3, [pc, #12]	; (801922c <tcp_new_port+0x84>)
 801921e:	881b      	ldrh	r3, [r3, #0]
}
 8019220:	4618      	mov	r0, r3
 8019222:	370c      	adds	r7, #12
 8019224:	46bd      	mov	sp, r7
 8019226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801922a:	4770      	bx	lr
 801922c:	24000028 	.word	0x24000028
 8019230:	08024bc8 	.word	0x08024bc8

08019234 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8019234:	b5b0      	push	{r4, r5, r7, lr}
 8019236:	b090      	sub	sp, #64	; 0x40
 8019238:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801923a:	2300      	movs	r3, #0
 801923c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019240:	4b94      	ldr	r3, [pc, #592]	; (8019494 <tcp_slowtmr+0x260>)
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	3301      	adds	r3, #1
 8019246:	4a93      	ldr	r2, [pc, #588]	; (8019494 <tcp_slowtmr+0x260>)
 8019248:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801924a:	4b93      	ldr	r3, [pc, #588]	; (8019498 <tcp_slowtmr+0x264>)
 801924c:	781b      	ldrb	r3, [r3, #0]
 801924e:	3301      	adds	r3, #1
 8019250:	b2da      	uxtb	r2, r3
 8019252:	4b91      	ldr	r3, [pc, #580]	; (8019498 <tcp_slowtmr+0x264>)
 8019254:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8019256:	2300      	movs	r3, #0
 8019258:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801925a:	4b90      	ldr	r3, [pc, #576]	; (801949c <tcp_slowtmr+0x268>)
 801925c:	681b      	ldr	r3, [r3, #0]
 801925e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8019260:	e29d      	b.n	801979e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019264:	7d1b      	ldrb	r3, [r3, #20]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d106      	bne.n	8019278 <tcp_slowtmr+0x44>
 801926a:	4b8d      	ldr	r3, [pc, #564]	; (80194a0 <tcp_slowtmr+0x26c>)
 801926c:	f240 42be 	movw	r2, #1214	; 0x4be
 8019270:	498c      	ldr	r1, [pc, #560]	; (80194a4 <tcp_slowtmr+0x270>)
 8019272:	488d      	ldr	r0, [pc, #564]	; (80194a8 <tcp_slowtmr+0x274>)
 8019274:	f006 ff48 	bl	8020108 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801927a:	7d1b      	ldrb	r3, [r3, #20]
 801927c:	2b01      	cmp	r3, #1
 801927e:	d106      	bne.n	801928e <tcp_slowtmr+0x5a>
 8019280:	4b87      	ldr	r3, [pc, #540]	; (80194a0 <tcp_slowtmr+0x26c>)
 8019282:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019286:	4989      	ldr	r1, [pc, #548]	; (80194ac <tcp_slowtmr+0x278>)
 8019288:	4887      	ldr	r0, [pc, #540]	; (80194a8 <tcp_slowtmr+0x274>)
 801928a:	f006 ff3d 	bl	8020108 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019290:	7d1b      	ldrb	r3, [r3, #20]
 8019292:	2b0a      	cmp	r3, #10
 8019294:	d106      	bne.n	80192a4 <tcp_slowtmr+0x70>
 8019296:	4b82      	ldr	r3, [pc, #520]	; (80194a0 <tcp_slowtmr+0x26c>)
 8019298:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801929c:	4984      	ldr	r1, [pc, #528]	; (80194b0 <tcp_slowtmr+0x27c>)
 801929e:	4882      	ldr	r0, [pc, #520]	; (80194a8 <tcp_slowtmr+0x274>)
 80192a0:	f006 ff32 	bl	8020108 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80192a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192a6:	7f9a      	ldrb	r2, [r3, #30]
 80192a8:	4b7b      	ldr	r3, [pc, #492]	; (8019498 <tcp_slowtmr+0x264>)
 80192aa:	781b      	ldrb	r3, [r3, #0]
 80192ac:	429a      	cmp	r2, r3
 80192ae:	d105      	bne.n	80192bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80192b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80192b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192b6:	68db      	ldr	r3, [r3, #12]
 80192b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80192ba:	e270      	b.n	801979e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80192bc:	4b76      	ldr	r3, [pc, #472]	; (8019498 <tcp_slowtmr+0x264>)
 80192be:	781a      	ldrb	r2, [r3, #0]
 80192c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80192c4:	2300      	movs	r3, #0
 80192c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80192ca:	2300      	movs	r3, #0
 80192cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80192d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192d2:	7d1b      	ldrb	r3, [r3, #20]
 80192d4:	2b02      	cmp	r3, #2
 80192d6:	d10a      	bne.n	80192ee <tcp_slowtmr+0xba>
 80192d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80192de:	2b05      	cmp	r3, #5
 80192e0:	d905      	bls.n	80192ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80192e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192e6:	3301      	adds	r3, #1
 80192e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80192ec:	e11e      	b.n	801952c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80192ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80192f4:	2b0b      	cmp	r3, #11
 80192f6:	d905      	bls.n	8019304 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80192f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192fc:	3301      	adds	r3, #1
 80192fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019302:	e113      	b.n	801952c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8019304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019306:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801930a:	2b00      	cmp	r3, #0
 801930c:	d075      	beq.n	80193fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019312:	2b00      	cmp	r3, #0
 8019314:	d006      	beq.n	8019324 <tcp_slowtmr+0xf0>
 8019316:	4b62      	ldr	r3, [pc, #392]	; (80194a0 <tcp_slowtmr+0x26c>)
 8019318:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801931c:	4965      	ldr	r1, [pc, #404]	; (80194b4 <tcp_slowtmr+0x280>)
 801931e:	4862      	ldr	r0, [pc, #392]	; (80194a8 <tcp_slowtmr+0x274>)
 8019320:	f006 fef2 	bl	8020108 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019328:	2b00      	cmp	r3, #0
 801932a:	d106      	bne.n	801933a <tcp_slowtmr+0x106>
 801932c:	4b5c      	ldr	r3, [pc, #368]	; (80194a0 <tcp_slowtmr+0x26c>)
 801932e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8019332:	4961      	ldr	r1, [pc, #388]	; (80194b8 <tcp_slowtmr+0x284>)
 8019334:	485c      	ldr	r0, [pc, #368]	; (80194a8 <tcp_slowtmr+0x274>)
 8019336:	f006 fee7 	bl	8020108 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801933c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019340:	2b0b      	cmp	r3, #11
 8019342:	d905      	bls.n	8019350 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8019344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019348:	3301      	adds	r3, #1
 801934a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801934e:	e0ed      	b.n	801952c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019352:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019356:	3b01      	subs	r3, #1
 8019358:	4a58      	ldr	r2, [pc, #352]	; (80194bc <tcp_slowtmr+0x288>)
 801935a:	5cd3      	ldrb	r3, [r2, r3]
 801935c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019360:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019364:	7c7a      	ldrb	r2, [r7, #17]
 8019366:	429a      	cmp	r2, r3
 8019368:	d907      	bls.n	801937a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801936c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019370:	3301      	adds	r3, #1
 8019372:	b2da      	uxtb	r2, r3
 8019374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019376:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801937a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801937c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019380:	7c7a      	ldrb	r2, [r7, #17]
 8019382:	429a      	cmp	r2, r3
 8019384:	f200 80d2 	bhi.w	801952c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8019388:	2301      	movs	r3, #1
 801938a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801938e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019392:	2b00      	cmp	r3, #0
 8019394:	d108      	bne.n	80193a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019396:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019398:	f005 f952 	bl	801e640 <tcp_zero_window_probe>
 801939c:	4603      	mov	r3, r0
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d014      	beq.n	80193cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80193a2:	2300      	movs	r3, #0
 80193a4:	623b      	str	r3, [r7, #32]
 80193a6:	e011      	b.n	80193cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80193a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80193ae:	4619      	mov	r1, r3
 80193b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80193b2:	f004 f817 	bl	801d3e4 <tcp_split_unsent_seg>
 80193b6:	4603      	mov	r3, r0
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d107      	bne.n	80193cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80193bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80193be:	f004 fa97 	bl	801d8f0 <tcp_output>
 80193c2:	4603      	mov	r3, r0
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d101      	bne.n	80193cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80193c8:	2300      	movs	r3, #0
 80193ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80193cc:	6a3b      	ldr	r3, [r7, #32]
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	f000 80ac 	beq.w	801952c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80193d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193d6:	2200      	movs	r2, #0
 80193d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80193dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80193e2:	2b06      	cmp	r3, #6
 80193e4:	f200 80a2 	bhi.w	801952c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80193e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80193ee:	3301      	adds	r3, #1
 80193f0:	b2da      	uxtb	r2, r3
 80193f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80193f8:	e098      	b.n	801952c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80193fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019400:	2b00      	cmp	r3, #0
 8019402:	db0f      	blt.n	8019424 <tcp_slowtmr+0x1f0>
 8019404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019406:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801940a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801940e:	4293      	cmp	r3, r2
 8019410:	d008      	beq.n	8019424 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8019412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019414:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019418:	b29b      	uxth	r3, r3
 801941a:	3301      	adds	r3, #1
 801941c:	b29b      	uxth	r3, r3
 801941e:	b21a      	sxth	r2, r3
 8019420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019422:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8019424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019426:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801942c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019430:	429a      	cmp	r2, r3
 8019432:	db7b      	blt.n	801952c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019436:	f004 fd4d 	bl	801ded4 <tcp_rexmit_rto_prepare>
 801943a:	4603      	mov	r3, r0
 801943c:	2b00      	cmp	r3, #0
 801943e:	d007      	beq.n	8019450 <tcp_slowtmr+0x21c>
 8019440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019444:	2b00      	cmp	r3, #0
 8019446:	d171      	bne.n	801952c <tcp_slowtmr+0x2f8>
 8019448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801944a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801944c:	2b00      	cmp	r3, #0
 801944e:	d06d      	beq.n	801952c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8019450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019452:	7d1b      	ldrb	r3, [r3, #20]
 8019454:	2b02      	cmp	r3, #2
 8019456:	d03a      	beq.n	80194ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8019458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801945a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801945e:	2b0c      	cmp	r3, #12
 8019460:	bf28      	it	cs
 8019462:	230c      	movcs	r3, #12
 8019464:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019468:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801946c:	10db      	asrs	r3, r3, #3
 801946e:	b21b      	sxth	r3, r3
 8019470:	461a      	mov	r2, r3
 8019472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019474:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019478:	4413      	add	r3, r2
 801947a:	7efa      	ldrb	r2, [r7, #27]
 801947c:	4910      	ldr	r1, [pc, #64]	; (80194c0 <tcp_slowtmr+0x28c>)
 801947e:	5c8a      	ldrb	r2, [r1, r2]
 8019480:	4093      	lsls	r3, r2
 8019482:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019484:	697b      	ldr	r3, [r7, #20]
 8019486:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801948a:	4293      	cmp	r3, r2
 801948c:	dc1a      	bgt.n	80194c4 <tcp_slowtmr+0x290>
 801948e:	697b      	ldr	r3, [r7, #20]
 8019490:	b21a      	sxth	r2, r3
 8019492:	e019      	b.n	80194c8 <tcp_slowtmr+0x294>
 8019494:	24010018 	.word	0x24010018
 8019498:	2401002e 	.word	0x2401002e
 801949c:	24010024 	.word	0x24010024
 80194a0:	08022f98 	.word	0x08022f98
 80194a4:	08023320 	.word	0x08023320
 80194a8:	08023020 	.word	0x08023020
 80194ac:	0802334c 	.word	0x0802334c
 80194b0:	08023378 	.word	0x08023378
 80194b4:	080233a8 	.word	0x080233a8
 80194b8:	080233dc 	.word	0x080233dc
 80194bc:	08024bc0 	.word	0x08024bc0
 80194c0:	08024bb0 	.word	0x08024bb0
 80194c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80194c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80194ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d0:	2200      	movs	r2, #0
 80194d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80194d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80194da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80194e0:	4293      	cmp	r3, r2
 80194e2:	bf28      	it	cs
 80194e4:	4613      	movcs	r3, r2
 80194e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80194e8:	8a7b      	ldrh	r3, [r7, #18]
 80194ea:	085b      	lsrs	r3, r3, #1
 80194ec:	b29a      	uxth	r2, r3
 80194ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80194f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80194fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194fe:	005b      	lsls	r3, r3, #1
 8019500:	b29b      	uxth	r3, r3
 8019502:	429a      	cmp	r2, r3
 8019504:	d206      	bcs.n	8019514 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8019506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801950a:	005b      	lsls	r3, r3, #1
 801950c:	b29a      	uxth	r2, r3
 801950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019510:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8019514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019516:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8019518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801951a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019520:	2200      	movs	r2, #0
 8019522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8019526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019528:	f004 fd44 	bl	801dfb4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801952c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952e:	7d1b      	ldrb	r3, [r3, #20]
 8019530:	2b06      	cmp	r3, #6
 8019532:	d111      	bne.n	8019558 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8019534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019536:	8b5b      	ldrh	r3, [r3, #26]
 8019538:	f003 0310 	and.w	r3, r3, #16
 801953c:	2b00      	cmp	r3, #0
 801953e:	d00b      	beq.n	8019558 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019540:	4b9c      	ldr	r3, [pc, #624]	; (80197b4 <tcp_slowtmr+0x580>)
 8019542:	681a      	ldr	r2, [r3, #0]
 8019544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019546:	6a1b      	ldr	r3, [r3, #32]
 8019548:	1ad3      	subs	r3, r2, r3
 801954a:	2b28      	cmp	r3, #40	; 0x28
 801954c:	d904      	bls.n	8019558 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801954e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019552:	3301      	adds	r3, #1
 8019554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801955a:	7a5b      	ldrb	r3, [r3, #9]
 801955c:	f003 0308 	and.w	r3, r3, #8
 8019560:	2b00      	cmp	r3, #0
 8019562:	d04a      	beq.n	80195fa <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8019564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019566:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019568:	2b04      	cmp	r3, #4
 801956a:	d003      	beq.n	8019574 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801956e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8019570:	2b07      	cmp	r3, #7
 8019572:	d142      	bne.n	80195fa <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019574:	4b8f      	ldr	r3, [pc, #572]	; (80197b4 <tcp_slowtmr+0x580>)
 8019576:	681a      	ldr	r2, [r3, #0]
 8019578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801957a:	6a1b      	ldr	r3, [r3, #32]
 801957c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019580:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019584:	4b8c      	ldr	r3, [pc, #560]	; (80197b8 <tcp_slowtmr+0x584>)
 8019586:	440b      	add	r3, r1
 8019588:	498c      	ldr	r1, [pc, #560]	; (80197bc <tcp_slowtmr+0x588>)
 801958a:	fba1 1303 	umull	r1, r3, r1, r3
 801958e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019590:	429a      	cmp	r2, r3
 8019592:	d90a      	bls.n	80195aa <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019598:	3301      	adds	r3, #1
 801959a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801959e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80195a2:	3301      	adds	r3, #1
 80195a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80195a8:	e027      	b.n	80195fa <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80195aa:	4b82      	ldr	r3, [pc, #520]	; (80197b4 <tcp_slowtmr+0x580>)
 80195ac:	681a      	ldr	r2, [r3, #0]
 80195ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195b0:	6a1b      	ldr	r3, [r3, #32]
 80195b2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80195b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195b6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80195ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80195c0:	4618      	mov	r0, r3
 80195c2:	4b7f      	ldr	r3, [pc, #508]	; (80197c0 <tcp_slowtmr+0x58c>)
 80195c4:	fb00 f303 	mul.w	r3, r0, r3
 80195c8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80195ca:	497c      	ldr	r1, [pc, #496]	; (80197bc <tcp_slowtmr+0x588>)
 80195cc:	fba1 1303 	umull	r1, r3, r1, r3
 80195d0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80195d2:	429a      	cmp	r2, r3
 80195d4:	d911      	bls.n	80195fa <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80195d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80195d8:	f004 fff2 	bl	801e5c0 <tcp_keepalive>
 80195dc:	4603      	mov	r3, r0
 80195de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80195e2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d107      	bne.n	80195fa <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80195ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80195f0:	3301      	adds	r3, #1
 80195f2:	b2da      	uxtb	r2, r3
 80195f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80195fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d011      	beq.n	8019626 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8019602:	4b6c      	ldr	r3, [pc, #432]	; (80197b4 <tcp_slowtmr+0x580>)
 8019604:	681a      	ldr	r2, [r3, #0]
 8019606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019608:	6a1b      	ldr	r3, [r3, #32]
 801960a:	1ad2      	subs	r2, r2, r3
 801960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801960e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019612:	4619      	mov	r1, r3
 8019614:	460b      	mov	r3, r1
 8019616:	005b      	lsls	r3, r3, #1
 8019618:	440b      	add	r3, r1
 801961a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801961c:	429a      	cmp	r2, r3
 801961e:	d302      	bcc.n	8019626 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8019620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019622:	f000 fead 	bl	801a380 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8019626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019628:	7d1b      	ldrb	r3, [r3, #20]
 801962a:	2b03      	cmp	r3, #3
 801962c:	d10b      	bne.n	8019646 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801962e:	4b61      	ldr	r3, [pc, #388]	; (80197b4 <tcp_slowtmr+0x580>)
 8019630:	681a      	ldr	r2, [r3, #0]
 8019632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019634:	6a1b      	ldr	r3, [r3, #32]
 8019636:	1ad3      	subs	r3, r2, r3
 8019638:	2b28      	cmp	r3, #40	; 0x28
 801963a:	d904      	bls.n	8019646 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801963c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019640:	3301      	adds	r3, #1
 8019642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8019646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019648:	7d1b      	ldrb	r3, [r3, #20]
 801964a:	2b09      	cmp	r3, #9
 801964c:	d10b      	bne.n	8019666 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801964e:	4b59      	ldr	r3, [pc, #356]	; (80197b4 <tcp_slowtmr+0x580>)
 8019650:	681a      	ldr	r2, [r3, #0]
 8019652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019654:	6a1b      	ldr	r3, [r3, #32]
 8019656:	1ad3      	subs	r3, r2, r3
 8019658:	2bf0      	cmp	r3, #240	; 0xf0
 801965a:	d904      	bls.n	8019666 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801965c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019660:	3301      	adds	r3, #1
 8019662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8019666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801966a:	2b00      	cmp	r3, #0
 801966c:	d060      	beq.n	8019730 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019674:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8019676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019678:	f000 fcce 	bl	801a018 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801967e:	2b00      	cmp	r3, #0
 8019680:	d010      	beq.n	80196a4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019682:	4b50      	ldr	r3, [pc, #320]	; (80197c4 <tcp_slowtmr+0x590>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019688:	429a      	cmp	r2, r3
 801968a:	d106      	bne.n	801969a <tcp_slowtmr+0x466>
 801968c:	4b4e      	ldr	r3, [pc, #312]	; (80197c8 <tcp_slowtmr+0x594>)
 801968e:	f240 526d 	movw	r2, #1389	; 0x56d
 8019692:	494e      	ldr	r1, [pc, #312]	; (80197cc <tcp_slowtmr+0x598>)
 8019694:	484e      	ldr	r0, [pc, #312]	; (80197d0 <tcp_slowtmr+0x59c>)
 8019696:	f006 fd37 	bl	8020108 <iprintf>
        prev->next = pcb->next;
 801969a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801969c:	68da      	ldr	r2, [r3, #12]
 801969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a0:	60da      	str	r2, [r3, #12]
 80196a2:	e00f      	b.n	80196c4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80196a4:	4b47      	ldr	r3, [pc, #284]	; (80197c4 <tcp_slowtmr+0x590>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196aa:	429a      	cmp	r2, r3
 80196ac:	d006      	beq.n	80196bc <tcp_slowtmr+0x488>
 80196ae:	4b46      	ldr	r3, [pc, #280]	; (80197c8 <tcp_slowtmr+0x594>)
 80196b0:	f240 5271 	movw	r2, #1393	; 0x571
 80196b4:	4947      	ldr	r1, [pc, #284]	; (80197d4 <tcp_slowtmr+0x5a0>)
 80196b6:	4846      	ldr	r0, [pc, #280]	; (80197d0 <tcp_slowtmr+0x59c>)
 80196b8:	f006 fd26 	bl	8020108 <iprintf>
        tcp_active_pcbs = pcb->next;
 80196bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196be:	68db      	ldr	r3, [r3, #12]
 80196c0:	4a40      	ldr	r2, [pc, #256]	; (80197c4 <tcp_slowtmr+0x590>)
 80196c2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80196c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d013      	beq.n	80196f4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80196cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80196d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80196d4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80196d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d8:	3304      	adds	r3, #4
 80196da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196dc:	8ad2      	ldrh	r2, [r2, #22]
 80196de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80196e0:	8b09      	ldrh	r1, [r1, #24]
 80196e2:	9102      	str	r1, [sp, #8]
 80196e4:	9201      	str	r2, [sp, #4]
 80196e6:	9300      	str	r3, [sp, #0]
 80196e8:	462b      	mov	r3, r5
 80196ea:	4622      	mov	r2, r4
 80196ec:	4601      	mov	r1, r0
 80196ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196f0:	f004 feb2 	bl	801e458 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80196f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196f6:	691b      	ldr	r3, [r3, #16]
 80196f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80196fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196fc:	7d1b      	ldrb	r3, [r3, #20]
 80196fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8019700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019702:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8019704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801970a:	6838      	ldr	r0, [r7, #0]
 801970c:	f7fe ffee 	bl	80186ec <tcp_free>

      tcp_active_pcbs_changed = 0;
 8019710:	4b31      	ldr	r3, [pc, #196]	; (80197d8 <tcp_slowtmr+0x5a4>)
 8019712:	2200      	movs	r2, #0
 8019714:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8019716:	68fb      	ldr	r3, [r7, #12]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d004      	beq.n	8019726 <tcp_slowtmr+0x4f2>
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	f06f 010c 	mvn.w	r1, #12
 8019722:	68b8      	ldr	r0, [r7, #8]
 8019724:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8019726:	4b2c      	ldr	r3, [pc, #176]	; (80197d8 <tcp_slowtmr+0x5a4>)
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d037      	beq.n	801979e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801972e:	e592      	b.n	8019256 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8019730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019732:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019736:	68db      	ldr	r3, [r3, #12]
 8019738:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801973c:	7f1b      	ldrb	r3, [r3, #28]
 801973e:	3301      	adds	r3, #1
 8019740:	b2da      	uxtb	r2, r3
 8019742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019744:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8019746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019748:	7f1a      	ldrb	r2, [r3, #28]
 801974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801974c:	7f5b      	ldrb	r3, [r3, #29]
 801974e:	429a      	cmp	r2, r3
 8019750:	d325      	bcc.n	801979e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8019752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019754:	2200      	movs	r2, #0
 8019756:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8019758:	4b1f      	ldr	r3, [pc, #124]	; (80197d8 <tcp_slowtmr+0x5a4>)
 801975a:	2200      	movs	r2, #0
 801975c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019764:	2b00      	cmp	r3, #0
 8019766:	d00b      	beq.n	8019780 <tcp_slowtmr+0x54c>
 8019768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801976a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801976e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019770:	6912      	ldr	r2, [r2, #16]
 8019772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019774:	4610      	mov	r0, r2
 8019776:	4798      	blx	r3
 8019778:	4603      	mov	r3, r0
 801977a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801977e:	e002      	b.n	8019786 <tcp_slowtmr+0x552>
 8019780:	2300      	movs	r3, #0
 8019782:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8019786:	4b14      	ldr	r3, [pc, #80]	; (80197d8 <tcp_slowtmr+0x5a4>)
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d000      	beq.n	8019790 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801978e:	e562      	b.n	8019256 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8019790:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019794:	2b00      	cmp	r3, #0
 8019796:	d102      	bne.n	801979e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8019798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801979a:	f004 f8a9 	bl	801d8f0 <tcp_output>
  while (pcb != NULL) {
 801979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	f47f ad5e 	bne.w	8019262 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80197a6:	2300      	movs	r3, #0
 80197a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80197aa:	4b0c      	ldr	r3, [pc, #48]	; (80197dc <tcp_slowtmr+0x5a8>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80197b0:	e069      	b.n	8019886 <tcp_slowtmr+0x652>
 80197b2:	bf00      	nop
 80197b4:	24010018 	.word	0x24010018
 80197b8:	000a4cb8 	.word	0x000a4cb8
 80197bc:	10624dd3 	.word	0x10624dd3
 80197c0:	000124f8 	.word	0x000124f8
 80197c4:	24010024 	.word	0x24010024
 80197c8:	08022f98 	.word	0x08022f98
 80197cc:	08023414 	.word	0x08023414
 80197d0:	08023020 	.word	0x08023020
 80197d4:	08023440 	.word	0x08023440
 80197d8:	2401002c 	.word	0x2401002c
 80197dc:	24010028 	.word	0x24010028
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80197e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e2:	7d1b      	ldrb	r3, [r3, #20]
 80197e4:	2b0a      	cmp	r3, #10
 80197e6:	d006      	beq.n	80197f6 <tcp_slowtmr+0x5c2>
 80197e8:	4b2b      	ldr	r3, [pc, #172]	; (8019898 <tcp_slowtmr+0x664>)
 80197ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80197ee:	492b      	ldr	r1, [pc, #172]	; (801989c <tcp_slowtmr+0x668>)
 80197f0:	482b      	ldr	r0, [pc, #172]	; (80198a0 <tcp_slowtmr+0x66c>)
 80197f2:	f006 fc89 	bl	8020108 <iprintf>
    pcb_remove = 0;
 80197f6:	2300      	movs	r3, #0
 80197f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80197fc:	4b29      	ldr	r3, [pc, #164]	; (80198a4 <tcp_slowtmr+0x670>)
 80197fe:	681a      	ldr	r2, [r3, #0]
 8019800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019802:	6a1b      	ldr	r3, [r3, #32]
 8019804:	1ad3      	subs	r3, r2, r3
 8019806:	2bf0      	cmp	r3, #240	; 0xf0
 8019808:	d904      	bls.n	8019814 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801980a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801980e:	3301      	adds	r3, #1
 8019810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8019814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019818:	2b00      	cmp	r3, #0
 801981a:	d02f      	beq.n	801987c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801981c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801981e:	f000 fbfb 	bl	801a018 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8019822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019824:	2b00      	cmp	r3, #0
 8019826:	d010      	beq.n	801984a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019828:	4b1f      	ldr	r3, [pc, #124]	; (80198a8 <tcp_slowtmr+0x674>)
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801982e:	429a      	cmp	r2, r3
 8019830:	d106      	bne.n	8019840 <tcp_slowtmr+0x60c>
 8019832:	4b19      	ldr	r3, [pc, #100]	; (8019898 <tcp_slowtmr+0x664>)
 8019834:	f240 52af 	movw	r2, #1455	; 0x5af
 8019838:	491c      	ldr	r1, [pc, #112]	; (80198ac <tcp_slowtmr+0x678>)
 801983a:	4819      	ldr	r0, [pc, #100]	; (80198a0 <tcp_slowtmr+0x66c>)
 801983c:	f006 fc64 	bl	8020108 <iprintf>
        prev->next = pcb->next;
 8019840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019842:	68da      	ldr	r2, [r3, #12]
 8019844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019846:	60da      	str	r2, [r3, #12]
 8019848:	e00f      	b.n	801986a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801984a:	4b17      	ldr	r3, [pc, #92]	; (80198a8 <tcp_slowtmr+0x674>)
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019850:	429a      	cmp	r2, r3
 8019852:	d006      	beq.n	8019862 <tcp_slowtmr+0x62e>
 8019854:	4b10      	ldr	r3, [pc, #64]	; (8019898 <tcp_slowtmr+0x664>)
 8019856:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801985a:	4915      	ldr	r1, [pc, #84]	; (80198b0 <tcp_slowtmr+0x67c>)
 801985c:	4810      	ldr	r0, [pc, #64]	; (80198a0 <tcp_slowtmr+0x66c>)
 801985e:	f006 fc53 	bl	8020108 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8019862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019864:	68db      	ldr	r3, [r3, #12]
 8019866:	4a10      	ldr	r2, [pc, #64]	; (80198a8 <tcp_slowtmr+0x674>)
 8019868:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801986c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019870:	68db      	ldr	r3, [r3, #12]
 8019872:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019874:	69f8      	ldr	r0, [r7, #28]
 8019876:	f7fe ff39 	bl	80186ec <tcp_free>
 801987a:	e004      	b.n	8019886 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801987e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019882:	68db      	ldr	r3, [r3, #12]
 8019884:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019888:	2b00      	cmp	r3, #0
 801988a:	d1a9      	bne.n	80197e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801988c:	bf00      	nop
 801988e:	bf00      	nop
 8019890:	3730      	adds	r7, #48	; 0x30
 8019892:	46bd      	mov	sp, r7
 8019894:	bdb0      	pop	{r4, r5, r7, pc}
 8019896:	bf00      	nop
 8019898:	08022f98 	.word	0x08022f98
 801989c:	0802346c 	.word	0x0802346c
 80198a0:	08023020 	.word	0x08023020
 80198a4:	24010018 	.word	0x24010018
 80198a8:	24010028 	.word	0x24010028
 80198ac:	0802349c 	.word	0x0802349c
 80198b0:	080234c4 	.word	0x080234c4

080198b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80198b4:	b580      	push	{r7, lr}
 80198b6:	b082      	sub	sp, #8
 80198b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80198ba:	4b2d      	ldr	r3, [pc, #180]	; (8019970 <tcp_fasttmr+0xbc>)
 80198bc:	781b      	ldrb	r3, [r3, #0]
 80198be:	3301      	adds	r3, #1
 80198c0:	b2da      	uxtb	r2, r3
 80198c2:	4b2b      	ldr	r3, [pc, #172]	; (8019970 <tcp_fasttmr+0xbc>)
 80198c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80198c6:	4b2b      	ldr	r3, [pc, #172]	; (8019974 <tcp_fasttmr+0xc0>)
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80198cc:	e048      	b.n	8019960 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	7f9a      	ldrb	r2, [r3, #30]
 80198d2:	4b27      	ldr	r3, [pc, #156]	; (8019970 <tcp_fasttmr+0xbc>)
 80198d4:	781b      	ldrb	r3, [r3, #0]
 80198d6:	429a      	cmp	r2, r3
 80198d8:	d03f      	beq.n	801995a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80198da:	4b25      	ldr	r3, [pc, #148]	; (8019970 <tcp_fasttmr+0xbc>)
 80198dc:	781a      	ldrb	r2, [r3, #0]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	8b5b      	ldrh	r3, [r3, #26]
 80198e6:	f003 0301 	and.w	r3, r3, #1
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d010      	beq.n	8019910 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	8b5b      	ldrh	r3, [r3, #26]
 80198f2:	f043 0302 	orr.w	r3, r3, #2
 80198f6:	b29a      	uxth	r2, r3
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f003 fff7 	bl	801d8f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	8b5b      	ldrh	r3, [r3, #26]
 8019906:	f023 0303 	bic.w	r3, r3, #3
 801990a:	b29a      	uxth	r2, r3
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	8b5b      	ldrh	r3, [r3, #26]
 8019914:	f003 0308 	and.w	r3, r3, #8
 8019918:	2b00      	cmp	r3, #0
 801991a:	d009      	beq.n	8019930 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	8b5b      	ldrh	r3, [r3, #26]
 8019920:	f023 0308 	bic.w	r3, r3, #8
 8019924:	b29a      	uxth	r2, r3
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f7ff f872 	bl	8018a14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	68db      	ldr	r3, [r3, #12]
 8019934:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801993a:	2b00      	cmp	r3, #0
 801993c:	d00a      	beq.n	8019954 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801993e:	4b0e      	ldr	r3, [pc, #56]	; (8019978 <tcp_fasttmr+0xc4>)
 8019940:	2200      	movs	r2, #0
 8019942:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8019944:	6878      	ldr	r0, [r7, #4]
 8019946:	f000 f819 	bl	801997c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801994a:	4b0b      	ldr	r3, [pc, #44]	; (8019978 <tcp_fasttmr+0xc4>)
 801994c:	781b      	ldrb	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d000      	beq.n	8019954 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8019952:	e7b8      	b.n	80198c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	607b      	str	r3, [r7, #4]
 8019958:	e002      	b.n	8019960 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	68db      	ldr	r3, [r3, #12]
 801995e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d1b3      	bne.n	80198ce <tcp_fasttmr+0x1a>
    }
  }
}
 8019966:	bf00      	nop
 8019968:	bf00      	nop
 801996a:	3708      	adds	r7, #8
 801996c:	46bd      	mov	sp, r7
 801996e:	bd80      	pop	{r7, pc}
 8019970:	2401002e 	.word	0x2401002e
 8019974:	24010024 	.word	0x24010024
 8019978:	2401002c 	.word	0x2401002c

0801997c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801997c:	b590      	push	{r4, r7, lr}
 801997e:	b085      	sub	sp, #20
 8019980:	af00      	add	r7, sp, #0
 8019982:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d109      	bne.n	801999e <tcp_process_refused_data+0x22>
 801998a:	4b38      	ldr	r3, [pc, #224]	; (8019a6c <tcp_process_refused_data+0xf0>)
 801998c:	f240 6209 	movw	r2, #1545	; 0x609
 8019990:	4937      	ldr	r1, [pc, #220]	; (8019a70 <tcp_process_refused_data+0xf4>)
 8019992:	4838      	ldr	r0, [pc, #224]	; (8019a74 <tcp_process_refused_data+0xf8>)
 8019994:	f006 fbb8 	bl	8020108 <iprintf>
 8019998:	f06f 030f 	mvn.w	r3, #15
 801999c:	e061      	b.n	8019a62 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80199a2:	7b5b      	ldrb	r3, [r3, #13]
 80199a4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80199aa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	2200      	movs	r2, #0
 80199b0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d00b      	beq.n	80199d4 <tcp_process_refused_data+0x58>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	6918      	ldr	r0, [r3, #16]
 80199c6:	2300      	movs	r3, #0
 80199c8:	68ba      	ldr	r2, [r7, #8]
 80199ca:	6879      	ldr	r1, [r7, #4]
 80199cc:	47a0      	blx	r4
 80199ce:	4603      	mov	r3, r0
 80199d0:	73fb      	strb	r3, [r7, #15]
 80199d2:	e007      	b.n	80199e4 <tcp_process_refused_data+0x68>
 80199d4:	2300      	movs	r3, #0
 80199d6:	68ba      	ldr	r2, [r7, #8]
 80199d8:	6879      	ldr	r1, [r7, #4]
 80199da:	2000      	movs	r0, #0
 80199dc:	f000 f8a6 	bl	8019b2c <tcp_recv_null>
 80199e0:	4603      	mov	r3, r0
 80199e2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80199e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d12b      	bne.n	8019a44 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80199ec:	7bbb      	ldrb	r3, [r7, #14]
 80199ee:	f003 0320 	and.w	r3, r3, #32
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d034      	beq.n	8019a60 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80199fa:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80199fe:	4293      	cmp	r3, r2
 8019a00:	d005      	beq.n	8019a0e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019a06:	3301      	adds	r3, #1
 8019a08:	b29a      	uxth	r2, r3
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d00b      	beq.n	8019a30 <tcp_process_refused_data+0xb4>
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	6918      	ldr	r0, [r3, #16]
 8019a22:	2300      	movs	r3, #0
 8019a24:	2200      	movs	r2, #0
 8019a26:	6879      	ldr	r1, [r7, #4]
 8019a28:	47a0      	blx	r4
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	73fb      	strb	r3, [r7, #15]
 8019a2e:	e001      	b.n	8019a34 <tcp_process_refused_data+0xb8>
 8019a30:	2300      	movs	r3, #0
 8019a32:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8019a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a38:	f113 0f0d 	cmn.w	r3, #13
 8019a3c:	d110      	bne.n	8019a60 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8019a3e:	f06f 030c 	mvn.w	r3, #12
 8019a42:	e00e      	b.n	8019a62 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8019a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a48:	f113 0f0d 	cmn.w	r3, #13
 8019a4c:	d102      	bne.n	8019a54 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8019a4e:	f06f 030c 	mvn.w	r3, #12
 8019a52:	e006      	b.n	8019a62 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	68ba      	ldr	r2, [r7, #8]
 8019a58:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8019a5a:	f06f 0304 	mvn.w	r3, #4
 8019a5e:	e000      	b.n	8019a62 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8019a60:	2300      	movs	r3, #0
}
 8019a62:	4618      	mov	r0, r3
 8019a64:	3714      	adds	r7, #20
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bd90      	pop	{r4, r7, pc}
 8019a6a:	bf00      	nop
 8019a6c:	08022f98 	.word	0x08022f98
 8019a70:	080234ec 	.word	0x080234ec
 8019a74:	08023020 	.word	0x08023020

08019a78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b084      	sub	sp, #16
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8019a80:	e007      	b.n	8019a92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8019a88:	6878      	ldr	r0, [r7, #4]
 8019a8a:	f000 f80a 	bl	8019aa2 <tcp_seg_free>
    seg = next;
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d1f4      	bne.n	8019a82 <tcp_segs_free+0xa>
  }
}
 8019a98:	bf00      	nop
 8019a9a:	bf00      	nop
 8019a9c:	3710      	adds	r7, #16
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}

08019aa2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8019aa2:	b580      	push	{r7, lr}
 8019aa4:	b082      	sub	sp, #8
 8019aa6:	af00      	add	r7, sp, #0
 8019aa8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d00c      	beq.n	8019aca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	685b      	ldr	r3, [r3, #4]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d004      	beq.n	8019ac2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	4618      	mov	r0, r3
 8019abe:	f7fe f987 	bl	8017dd0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8019ac2:	6879      	ldr	r1, [r7, #4]
 8019ac4:	2003      	movs	r0, #3
 8019ac6:	f7fd fa8f 	bl	8016fe8 <memp_free>
  }
}
 8019aca:	bf00      	nop
 8019acc:	3708      	adds	r7, #8
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}
	...

08019ad4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b084      	sub	sp, #16
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d106      	bne.n	8019af0 <tcp_seg_copy+0x1c>
 8019ae2:	4b0f      	ldr	r3, [pc, #60]	; (8019b20 <tcp_seg_copy+0x4c>)
 8019ae4:	f240 6282 	movw	r2, #1666	; 0x682
 8019ae8:	490e      	ldr	r1, [pc, #56]	; (8019b24 <tcp_seg_copy+0x50>)
 8019aea:	480f      	ldr	r0, [pc, #60]	; (8019b28 <tcp_seg_copy+0x54>)
 8019aec:	f006 fb0c 	bl	8020108 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8019af0:	2003      	movs	r0, #3
 8019af2:	f7fd fa03 	bl	8016efc <memp_malloc>
 8019af6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d101      	bne.n	8019b02 <tcp_seg_copy+0x2e>
    return NULL;
 8019afe:	2300      	movs	r3, #0
 8019b00:	e00a      	b.n	8019b18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8019b02:	2210      	movs	r2, #16
 8019b04:	6879      	ldr	r1, [r7, #4]
 8019b06:	68f8      	ldr	r0, [r7, #12]
 8019b08:	f005 ff00 	bl	801f90c <memcpy>
  pbuf_ref(cseg->p);
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	685b      	ldr	r3, [r3, #4]
 8019b10:	4618      	mov	r0, r3
 8019b12:	f7fe fa03 	bl	8017f1c <pbuf_ref>
  return cseg;
 8019b16:	68fb      	ldr	r3, [r7, #12]
}
 8019b18:	4618      	mov	r0, r3
 8019b1a:	3710      	adds	r7, #16
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	bd80      	pop	{r7, pc}
 8019b20:	08022f98 	.word	0x08022f98
 8019b24:	08023530 	.word	0x08023530
 8019b28:	08023020 	.word	0x08023020

08019b2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b084      	sub	sp, #16
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	60f8      	str	r0, [r7, #12]
 8019b34:	60b9      	str	r1, [r7, #8]
 8019b36:	607a      	str	r2, [r7, #4]
 8019b38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b3a:	68bb      	ldr	r3, [r7, #8]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d109      	bne.n	8019b54 <tcp_recv_null+0x28>
 8019b40:	4b12      	ldr	r3, [pc, #72]	; (8019b8c <tcp_recv_null+0x60>)
 8019b42:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019b46:	4912      	ldr	r1, [pc, #72]	; (8019b90 <tcp_recv_null+0x64>)
 8019b48:	4812      	ldr	r0, [pc, #72]	; (8019b94 <tcp_recv_null+0x68>)
 8019b4a:	f006 fadd 	bl	8020108 <iprintf>
 8019b4e:	f06f 030f 	mvn.w	r3, #15
 8019b52:	e016      	b.n	8019b82 <tcp_recv_null+0x56>

  if (p != NULL) {
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d009      	beq.n	8019b6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	891b      	ldrh	r3, [r3, #8]
 8019b5e:	4619      	mov	r1, r3
 8019b60:	68b8      	ldr	r0, [r7, #8]
 8019b62:	f7ff facf 	bl	8019104 <tcp_recved>
    pbuf_free(p);
 8019b66:	6878      	ldr	r0, [r7, #4]
 8019b68:	f7fe f932 	bl	8017dd0 <pbuf_free>
 8019b6c:	e008      	b.n	8019b80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8019b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d104      	bne.n	8019b80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8019b76:	68b8      	ldr	r0, [r7, #8]
 8019b78:	f7fe ffb6 	bl	8018ae8 <tcp_close>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	e000      	b.n	8019b82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8019b80:	2300      	movs	r3, #0
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3710      	adds	r7, #16
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}
 8019b8a:	bf00      	nop
 8019b8c:	08022f98 	.word	0x08022f98
 8019b90:	0802354c 	.word	0x0802354c
 8019b94:	08023020 	.word	0x08023020

08019b98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b086      	sub	sp, #24
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	db01      	blt.n	8019bae <tcp_kill_prio+0x16>
 8019baa:	79fb      	ldrb	r3, [r7, #7]
 8019bac:	e000      	b.n	8019bb0 <tcp_kill_prio+0x18>
 8019bae:	237f      	movs	r3, #127	; 0x7f
 8019bb0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8019bb2:	7afb      	ldrb	r3, [r7, #11]
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d034      	beq.n	8019c22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8019bb8:	7afb      	ldrb	r3, [r7, #11]
 8019bba:	3b01      	subs	r3, #1
 8019bbc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019bc6:	4b19      	ldr	r3, [pc, #100]	; (8019c2c <tcp_kill_prio+0x94>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	617b      	str	r3, [r7, #20]
 8019bcc:	e01f      	b.n	8019c0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8019bce:	697b      	ldr	r3, [r7, #20]
 8019bd0:	7d5b      	ldrb	r3, [r3, #21]
 8019bd2:	7afa      	ldrb	r2, [r7, #11]
 8019bd4:	429a      	cmp	r2, r3
 8019bd6:	d80c      	bhi.n	8019bf2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019bd8:	697b      	ldr	r3, [r7, #20]
 8019bda:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8019bdc:	7afa      	ldrb	r2, [r7, #11]
 8019bde:	429a      	cmp	r2, r3
 8019be0:	d112      	bne.n	8019c08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019be2:	4b13      	ldr	r3, [pc, #76]	; (8019c30 <tcp_kill_prio+0x98>)
 8019be4:	681a      	ldr	r2, [r3, #0]
 8019be6:	697b      	ldr	r3, [r7, #20]
 8019be8:	6a1b      	ldr	r3, [r3, #32]
 8019bea:	1ad3      	subs	r3, r2, r3
 8019bec:	68fa      	ldr	r2, [r7, #12]
 8019bee:	429a      	cmp	r2, r3
 8019bf0:	d80a      	bhi.n	8019c08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8019bf2:	4b0f      	ldr	r3, [pc, #60]	; (8019c30 <tcp_kill_prio+0x98>)
 8019bf4:	681a      	ldr	r2, [r3, #0]
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	6a1b      	ldr	r3, [r3, #32]
 8019bfa:	1ad3      	subs	r3, r2, r3
 8019bfc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8019bfe:	697b      	ldr	r3, [r7, #20]
 8019c00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8019c02:	697b      	ldr	r3, [r7, #20]
 8019c04:	7d5b      	ldrb	r3, [r3, #21]
 8019c06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019c08:	697b      	ldr	r3, [r7, #20]
 8019c0a:	68db      	ldr	r3, [r3, #12]
 8019c0c:	617b      	str	r3, [r7, #20]
 8019c0e:	697b      	ldr	r3, [r7, #20]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d1dc      	bne.n	8019bce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8019c14:	693b      	ldr	r3, [r7, #16]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d004      	beq.n	8019c24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8019c1a:	6938      	ldr	r0, [r7, #16]
 8019c1c:	f7ff f8aa 	bl	8018d74 <tcp_abort>
 8019c20:	e000      	b.n	8019c24 <tcp_kill_prio+0x8c>
    return;
 8019c22:	bf00      	nop
  }
}
 8019c24:	3718      	adds	r7, #24
 8019c26:	46bd      	mov	sp, r7
 8019c28:	bd80      	pop	{r7, pc}
 8019c2a:	bf00      	nop
 8019c2c:	24010024 	.word	0x24010024
 8019c30:	24010018 	.word	0x24010018

08019c34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b086      	sub	sp, #24
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8019c3e:	79fb      	ldrb	r3, [r7, #7]
 8019c40:	2b08      	cmp	r3, #8
 8019c42:	d009      	beq.n	8019c58 <tcp_kill_state+0x24>
 8019c44:	79fb      	ldrb	r3, [r7, #7]
 8019c46:	2b09      	cmp	r3, #9
 8019c48:	d006      	beq.n	8019c58 <tcp_kill_state+0x24>
 8019c4a:	4b1a      	ldr	r3, [pc, #104]	; (8019cb4 <tcp_kill_state+0x80>)
 8019c4c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8019c50:	4919      	ldr	r1, [pc, #100]	; (8019cb8 <tcp_kill_state+0x84>)
 8019c52:	481a      	ldr	r0, [pc, #104]	; (8019cbc <tcp_kill_state+0x88>)
 8019c54:	f006 fa58 	bl	8020108 <iprintf>

  inactivity = 0;
 8019c58:	2300      	movs	r3, #0
 8019c5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019c60:	4b17      	ldr	r3, [pc, #92]	; (8019cc0 <tcp_kill_state+0x8c>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	617b      	str	r3, [r7, #20]
 8019c66:	e017      	b.n	8019c98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8019c68:	697b      	ldr	r3, [r7, #20]
 8019c6a:	7d1b      	ldrb	r3, [r3, #20]
 8019c6c:	79fa      	ldrb	r2, [r7, #7]
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d10f      	bne.n	8019c92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019c72:	4b14      	ldr	r3, [pc, #80]	; (8019cc4 <tcp_kill_state+0x90>)
 8019c74:	681a      	ldr	r2, [r3, #0]
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	6a1b      	ldr	r3, [r3, #32]
 8019c7a:	1ad3      	subs	r3, r2, r3
 8019c7c:	68fa      	ldr	r2, [r7, #12]
 8019c7e:	429a      	cmp	r2, r3
 8019c80:	d807      	bhi.n	8019c92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8019c82:	4b10      	ldr	r3, [pc, #64]	; (8019cc4 <tcp_kill_state+0x90>)
 8019c84:	681a      	ldr	r2, [r3, #0]
 8019c86:	697b      	ldr	r3, [r7, #20]
 8019c88:	6a1b      	ldr	r3, [r3, #32]
 8019c8a:	1ad3      	subs	r3, r2, r3
 8019c8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8019c8e:	697b      	ldr	r3, [r7, #20]
 8019c90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019c92:	697b      	ldr	r3, [r7, #20]
 8019c94:	68db      	ldr	r3, [r3, #12]
 8019c96:	617b      	str	r3, [r7, #20]
 8019c98:	697b      	ldr	r3, [r7, #20]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d1e4      	bne.n	8019c68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8019c9e:	693b      	ldr	r3, [r7, #16]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d003      	beq.n	8019cac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8019ca4:	2100      	movs	r1, #0
 8019ca6:	6938      	ldr	r0, [r7, #16]
 8019ca8:	f7fe ffa6 	bl	8018bf8 <tcp_abandon>
  }
}
 8019cac:	bf00      	nop
 8019cae:	3718      	adds	r7, #24
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	bd80      	pop	{r7, pc}
 8019cb4:	08022f98 	.word	0x08022f98
 8019cb8:	08023568 	.word	0x08023568
 8019cbc:	08023020 	.word	0x08023020
 8019cc0:	24010024 	.word	0x24010024
 8019cc4:	24010018 	.word	0x24010018

08019cc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8019cc8:	b580      	push	{r7, lr}
 8019cca:	b084      	sub	sp, #16
 8019ccc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8019cce:	2300      	movs	r3, #0
 8019cd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019cd6:	4b12      	ldr	r3, [pc, #72]	; (8019d20 <tcp_kill_timewait+0x58>)
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	60fb      	str	r3, [r7, #12]
 8019cdc:	e012      	b.n	8019d04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019cde:	4b11      	ldr	r3, [pc, #68]	; (8019d24 <tcp_kill_timewait+0x5c>)
 8019ce0:	681a      	ldr	r2, [r3, #0]
 8019ce2:	68fb      	ldr	r3, [r7, #12]
 8019ce4:	6a1b      	ldr	r3, [r3, #32]
 8019ce6:	1ad3      	subs	r3, r2, r3
 8019ce8:	687a      	ldr	r2, [r7, #4]
 8019cea:	429a      	cmp	r2, r3
 8019cec:	d807      	bhi.n	8019cfe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8019cee:	4b0d      	ldr	r3, [pc, #52]	; (8019d24 <tcp_kill_timewait+0x5c>)
 8019cf0:	681a      	ldr	r2, [r3, #0]
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	6a1b      	ldr	r3, [r3, #32]
 8019cf6:	1ad3      	subs	r3, r2, r3
 8019cf8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	68db      	ldr	r3, [r3, #12]
 8019d02:	60fb      	str	r3, [r7, #12]
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d1e9      	bne.n	8019cde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8019d0a:	68bb      	ldr	r3, [r7, #8]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d002      	beq.n	8019d16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8019d10:	68b8      	ldr	r0, [r7, #8]
 8019d12:	f7ff f82f 	bl	8018d74 <tcp_abort>
  }
}
 8019d16:	bf00      	nop
 8019d18:	3710      	adds	r7, #16
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	bd80      	pop	{r7, pc}
 8019d1e:	bf00      	nop
 8019d20:	24010028 	.word	0x24010028
 8019d24:	24010018 	.word	0x24010018

08019d28 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b082      	sub	sp, #8
 8019d2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8019d2e:	4b10      	ldr	r3, [pc, #64]	; (8019d70 <tcp_handle_closepend+0x48>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019d34:	e014      	b.n	8019d60 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	68db      	ldr	r3, [r3, #12]
 8019d3a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	8b5b      	ldrh	r3, [r3, #26]
 8019d40:	f003 0308 	and.w	r3, r3, #8
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d009      	beq.n	8019d5c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	8b5b      	ldrh	r3, [r3, #26]
 8019d4c:	f023 0308 	bic.w	r3, r3, #8
 8019d50:	b29a      	uxth	r2, r3
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8019d56:	6878      	ldr	r0, [r7, #4]
 8019d58:	f7fe fe5c 	bl	8018a14 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8019d5c:	683b      	ldr	r3, [r7, #0]
 8019d5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d1e7      	bne.n	8019d36 <tcp_handle_closepend+0xe>
  }
}
 8019d66:	bf00      	nop
 8019d68:	bf00      	nop
 8019d6a:	3708      	adds	r7, #8
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}
 8019d70:	24010024 	.word	0x24010024

08019d74 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b084      	sub	sp, #16
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	4603      	mov	r3, r0
 8019d7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019d7e:	2001      	movs	r0, #1
 8019d80:	f7fd f8bc 	bl	8016efc <memp_malloc>
 8019d84:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d126      	bne.n	8019dda <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8019d8c:	f7ff ffcc 	bl	8019d28 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8019d90:	f7ff ff9a 	bl	8019cc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019d94:	2001      	movs	r0, #1
 8019d96:	f7fd f8b1 	bl	8016efc <memp_malloc>
 8019d9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d11b      	bne.n	8019dda <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8019da2:	2009      	movs	r0, #9
 8019da4:	f7ff ff46 	bl	8019c34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019da8:	2001      	movs	r0, #1
 8019daa:	f7fd f8a7 	bl	8016efc <memp_malloc>
 8019dae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d111      	bne.n	8019dda <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8019db6:	2008      	movs	r0, #8
 8019db8:	f7ff ff3c 	bl	8019c34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019dbc:	2001      	movs	r0, #1
 8019dbe:	f7fd f89d 	bl	8016efc <memp_malloc>
 8019dc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d107      	bne.n	8019dda <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8019dca:	79fb      	ldrb	r3, [r7, #7]
 8019dcc:	4618      	mov	r0, r3
 8019dce:	f7ff fee3 	bl	8019b98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019dd2:	2001      	movs	r0, #1
 8019dd4:	f7fd f892 	bl	8016efc <memp_malloc>
 8019dd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d03f      	beq.n	8019e60 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8019de0:	229c      	movs	r2, #156	; 0x9c
 8019de2:	2100      	movs	r1, #0
 8019de4:	68f8      	ldr	r0, [r7, #12]
 8019de6:	f005 fdb9 	bl	801f95c <memset>
    pcb->prio = prio;
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	79fa      	ldrb	r2, [r7, #7]
 8019dee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8019df6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8019e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	22ff      	movs	r2, #255	; 0xff
 8019e0e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019e16:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	2206      	movs	r2, #6
 8019e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	2206      	movs	r2, #6
 8019e24:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019e2c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	2201      	movs	r2, #1
 8019e32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8019e36:	4b0d      	ldr	r3, [pc, #52]	; (8019e6c <tcp_alloc+0xf8>)
 8019e38:	681a      	ldr	r2, [r3, #0]
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8019e3e:	4b0c      	ldr	r3, [pc, #48]	; (8019e70 <tcp_alloc+0xfc>)
 8019e40:	781a      	ldrb	r2, [r3, #0]
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8019e4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	4a08      	ldr	r2, [pc, #32]	; (8019e74 <tcp_alloc+0x100>)
 8019e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	4a07      	ldr	r2, [pc, #28]	; (8019e78 <tcp_alloc+0x104>)
 8019e5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8019e60:	68fb      	ldr	r3, [r7, #12]
}
 8019e62:	4618      	mov	r0, r3
 8019e64:	3710      	adds	r7, #16
 8019e66:	46bd      	mov	sp, r7
 8019e68:	bd80      	pop	{r7, pc}
 8019e6a:	bf00      	nop
 8019e6c:	24010018 	.word	0x24010018
 8019e70:	2401002e 	.word	0x2401002e
 8019e74:	08019b2d 	.word	0x08019b2d
 8019e78:	006ddd00 	.word	0x006ddd00

08019e7c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	b084      	sub	sp, #16
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	4603      	mov	r3, r0
 8019e84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8019e86:	2040      	movs	r0, #64	; 0x40
 8019e88:	f7ff ff74 	bl	8019d74 <tcp_alloc>
 8019e8c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019e8e:	68fb      	ldr	r3, [r7, #12]
}
 8019e90:	4618      	mov	r0, r3
 8019e92:	3710      	adds	r7, #16
 8019e94:	46bd      	mov	sp, r7
 8019e96:	bd80      	pop	{r7, pc}

08019e98 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8019e98:	b480      	push	{r7}
 8019e9a:	b083      	sub	sp, #12
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
 8019ea0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d002      	beq.n	8019eae <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	683a      	ldr	r2, [r7, #0]
 8019eac:	611a      	str	r2, [r3, #16]
  }
}
 8019eae:	bf00      	nop
 8019eb0:	370c      	adds	r7, #12
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb8:	4770      	bx	lr
	...

08019ebc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8019ebc:	b580      	push	{r7, lr}
 8019ebe:	b082      	sub	sp, #8
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	6078      	str	r0, [r7, #4]
 8019ec4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d00e      	beq.n	8019eea <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	7d1b      	ldrb	r3, [r3, #20]
 8019ed0:	2b01      	cmp	r3, #1
 8019ed2:	d106      	bne.n	8019ee2 <tcp_recv+0x26>
 8019ed4:	4b07      	ldr	r3, [pc, #28]	; (8019ef4 <tcp_recv+0x38>)
 8019ed6:	f240 72df 	movw	r2, #2015	; 0x7df
 8019eda:	4907      	ldr	r1, [pc, #28]	; (8019ef8 <tcp_recv+0x3c>)
 8019edc:	4807      	ldr	r0, [pc, #28]	; (8019efc <tcp_recv+0x40>)
 8019ede:	f006 f913 	bl	8020108 <iprintf>
    pcb->recv = recv;
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	683a      	ldr	r2, [r7, #0]
 8019ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8019eea:	bf00      	nop
 8019eec:	3708      	adds	r7, #8
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	bd80      	pop	{r7, pc}
 8019ef2:	bf00      	nop
 8019ef4:	08022f98 	.word	0x08022f98
 8019ef8:	08023578 	.word	0x08023578
 8019efc:	08023020 	.word	0x08023020

08019f00 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b082      	sub	sp, #8
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	6078      	str	r0, [r7, #4]
 8019f08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d00e      	beq.n	8019f2e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	7d1b      	ldrb	r3, [r3, #20]
 8019f14:	2b01      	cmp	r3, #1
 8019f16:	d106      	bne.n	8019f26 <tcp_sent+0x26>
 8019f18:	4b07      	ldr	r3, [pc, #28]	; (8019f38 <tcp_sent+0x38>)
 8019f1a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8019f1e:	4907      	ldr	r1, [pc, #28]	; (8019f3c <tcp_sent+0x3c>)
 8019f20:	4807      	ldr	r0, [pc, #28]	; (8019f40 <tcp_sent+0x40>)
 8019f22:	f006 f8f1 	bl	8020108 <iprintf>
    pcb->sent = sent;
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	683a      	ldr	r2, [r7, #0]
 8019f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8019f2e:	bf00      	nop
 8019f30:	3708      	adds	r7, #8
 8019f32:	46bd      	mov	sp, r7
 8019f34:	bd80      	pop	{r7, pc}
 8019f36:	bf00      	nop
 8019f38:	08022f98 	.word	0x08022f98
 8019f3c:	080235a0 	.word	0x080235a0
 8019f40:	08023020 	.word	0x08023020

08019f44 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b082      	sub	sp, #8
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
 8019f4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d00e      	beq.n	8019f72 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	7d1b      	ldrb	r3, [r3, #20]
 8019f58:	2b01      	cmp	r3, #1
 8019f5a:	d106      	bne.n	8019f6a <tcp_err+0x26>
 8019f5c:	4b07      	ldr	r3, [pc, #28]	; (8019f7c <tcp_err+0x38>)
 8019f5e:	f640 020d 	movw	r2, #2061	; 0x80d
 8019f62:	4907      	ldr	r1, [pc, #28]	; (8019f80 <tcp_err+0x3c>)
 8019f64:	4807      	ldr	r0, [pc, #28]	; (8019f84 <tcp_err+0x40>)
 8019f66:	f006 f8cf 	bl	8020108 <iprintf>
    pcb->errf = err;
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	683a      	ldr	r2, [r7, #0]
 8019f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8019f72:	bf00      	nop
 8019f74:	3708      	adds	r7, #8
 8019f76:	46bd      	mov	sp, r7
 8019f78:	bd80      	pop	{r7, pc}
 8019f7a:	bf00      	nop
 8019f7c:	08022f98 	.word	0x08022f98
 8019f80:	080235c8 	.word	0x080235c8
 8019f84:	08023020 	.word	0x08023020

08019f88 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8019f88:	b480      	push	{r7}
 8019f8a:	b085      	sub	sp, #20
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
 8019f90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d008      	beq.n	8019faa <tcp_accept+0x22>
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	7d1b      	ldrb	r3, [r3, #20]
 8019f9c:	2b01      	cmp	r3, #1
 8019f9e:	d104      	bne.n	8019faa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	683a      	ldr	r2, [r7, #0]
 8019fa8:	619a      	str	r2, [r3, #24]
  }
}
 8019faa:	bf00      	nop
 8019fac:	3714      	adds	r7, #20
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb4:	4770      	bx	lr
	...

08019fb8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b084      	sub	sp, #16
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	60f8      	str	r0, [r7, #12]
 8019fc0:	60b9      	str	r1, [r7, #8]
 8019fc2:	4613      	mov	r3, r2
 8019fc4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d107      	bne.n	8019fdc <tcp_poll+0x24>
 8019fcc:	4b0e      	ldr	r3, [pc, #56]	; (801a008 <tcp_poll+0x50>)
 8019fce:	f640 023d 	movw	r2, #2109	; 0x83d
 8019fd2:	490e      	ldr	r1, [pc, #56]	; (801a00c <tcp_poll+0x54>)
 8019fd4:	480e      	ldr	r0, [pc, #56]	; (801a010 <tcp_poll+0x58>)
 8019fd6:	f006 f897 	bl	8020108 <iprintf>
 8019fda:	e011      	b.n	801a000 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	7d1b      	ldrb	r3, [r3, #20]
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d106      	bne.n	8019ff2 <tcp_poll+0x3a>
 8019fe4:	4b08      	ldr	r3, [pc, #32]	; (801a008 <tcp_poll+0x50>)
 8019fe6:	f640 023e 	movw	r2, #2110	; 0x83e
 8019fea:	490a      	ldr	r1, [pc, #40]	; (801a014 <tcp_poll+0x5c>)
 8019fec:	4808      	ldr	r0, [pc, #32]	; (801a010 <tcp_poll+0x58>)
 8019fee:	f006 f88b 	bl	8020108 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	68ba      	ldr	r2, [r7, #8]
 8019ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	79fa      	ldrb	r2, [r7, #7]
 8019ffe:	775a      	strb	r2, [r3, #29]
}
 801a000:	3710      	adds	r7, #16
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
 801a006:	bf00      	nop
 801a008:	08022f98 	.word	0x08022f98
 801a00c:	080235f0 	.word	0x080235f0
 801a010:	08023020 	.word	0x08023020
 801a014:	08023608 	.word	0x08023608

0801a018 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801a018:	b580      	push	{r7, lr}
 801a01a:	b082      	sub	sp, #8
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d107      	bne.n	801a036 <tcp_pcb_purge+0x1e>
 801a026:	4b21      	ldr	r3, [pc, #132]	; (801a0ac <tcp_pcb_purge+0x94>)
 801a028:	f640 0251 	movw	r2, #2129	; 0x851
 801a02c:	4920      	ldr	r1, [pc, #128]	; (801a0b0 <tcp_pcb_purge+0x98>)
 801a02e:	4821      	ldr	r0, [pc, #132]	; (801a0b4 <tcp_pcb_purge+0x9c>)
 801a030:	f006 f86a 	bl	8020108 <iprintf>
 801a034:	e037      	b.n	801a0a6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	7d1b      	ldrb	r3, [r3, #20]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d033      	beq.n	801a0a6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801a042:	2b0a      	cmp	r3, #10
 801a044:	d02f      	beq.n	801a0a6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801a04a:	2b01      	cmp	r3, #1
 801a04c:	d02b      	beq.n	801a0a6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a052:	2b00      	cmp	r3, #0
 801a054:	d007      	beq.n	801a066 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a05a:	4618      	mov	r0, r3
 801a05c:	f7fd feb8 	bl	8017dd0 <pbuf_free>
      pcb->refused_data = NULL;
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2200      	movs	r2, #0
 801a064:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d002      	beq.n	801a074 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801a06e:	6878      	ldr	r0, [r7, #4]
 801a070:	f000 f986 	bl	801a380 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a07a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a080:	4618      	mov	r0, r3
 801a082:	f7ff fcf9 	bl	8019a78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a08a:	4618      	mov	r0, r3
 801a08c:	f7ff fcf4 	bl	8019a78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	2200      	movs	r2, #0
 801a094:	66da      	str	r2, [r3, #108]	; 0x6c
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801a0a6:	3708      	adds	r7, #8
 801a0a8:	46bd      	mov	sp, r7
 801a0aa:	bd80      	pop	{r7, pc}
 801a0ac:	08022f98 	.word	0x08022f98
 801a0b0:	08023628 	.word	0x08023628
 801a0b4:	08023020 	.word	0x08023020

0801a0b8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b084      	sub	sp, #16
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801a0c2:	683b      	ldr	r3, [r7, #0]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d106      	bne.n	801a0d6 <tcp_pcb_remove+0x1e>
 801a0c8:	4b3e      	ldr	r3, [pc, #248]	; (801a1c4 <tcp_pcb_remove+0x10c>)
 801a0ca:	f640 0283 	movw	r2, #2179	; 0x883
 801a0ce:	493e      	ldr	r1, [pc, #248]	; (801a1c8 <tcp_pcb_remove+0x110>)
 801a0d0:	483e      	ldr	r0, [pc, #248]	; (801a1cc <tcp_pcb_remove+0x114>)
 801a0d2:	f006 f819 	bl	8020108 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d106      	bne.n	801a0ea <tcp_pcb_remove+0x32>
 801a0dc:	4b39      	ldr	r3, [pc, #228]	; (801a1c4 <tcp_pcb_remove+0x10c>)
 801a0de:	f640 0284 	movw	r2, #2180	; 0x884
 801a0e2:	493b      	ldr	r1, [pc, #236]	; (801a1d0 <tcp_pcb_remove+0x118>)
 801a0e4:	4839      	ldr	r0, [pc, #228]	; (801a1cc <tcp_pcb_remove+0x114>)
 801a0e6:	f006 f80f 	bl	8020108 <iprintf>

  TCP_RMV(pcblist, pcb);
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	683a      	ldr	r2, [r7, #0]
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	d105      	bne.n	801a100 <tcp_pcb_remove+0x48>
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	68da      	ldr	r2, [r3, #12]
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	601a      	str	r2, [r3, #0]
 801a0fe:	e013      	b.n	801a128 <tcp_pcb_remove+0x70>
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	60fb      	str	r3, [r7, #12]
 801a106:	e00c      	b.n	801a122 <tcp_pcb_remove+0x6a>
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	68db      	ldr	r3, [r3, #12]
 801a10c:	683a      	ldr	r2, [r7, #0]
 801a10e:	429a      	cmp	r2, r3
 801a110:	d104      	bne.n	801a11c <tcp_pcb_remove+0x64>
 801a112:	683b      	ldr	r3, [r7, #0]
 801a114:	68da      	ldr	r2, [r3, #12]
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	60da      	str	r2, [r3, #12]
 801a11a:	e005      	b.n	801a128 <tcp_pcb_remove+0x70>
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	68db      	ldr	r3, [r3, #12]
 801a120:	60fb      	str	r3, [r7, #12]
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d1ef      	bne.n	801a108 <tcp_pcb_remove+0x50>
 801a128:	683b      	ldr	r3, [r7, #0]
 801a12a:	2200      	movs	r2, #0
 801a12c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801a12e:	6838      	ldr	r0, [r7, #0]
 801a130:	f7ff ff72 	bl	801a018 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801a134:	683b      	ldr	r3, [r7, #0]
 801a136:	7d1b      	ldrb	r3, [r3, #20]
 801a138:	2b0a      	cmp	r3, #10
 801a13a:	d013      	beq.n	801a164 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801a13c:	683b      	ldr	r3, [r7, #0]
 801a13e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801a140:	2b01      	cmp	r3, #1
 801a142:	d00f      	beq.n	801a164 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801a144:	683b      	ldr	r3, [r7, #0]
 801a146:	8b5b      	ldrh	r3, [r3, #26]
 801a148:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d009      	beq.n	801a164 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801a150:	683b      	ldr	r3, [r7, #0]
 801a152:	8b5b      	ldrh	r3, [r3, #26]
 801a154:	f043 0302 	orr.w	r3, r3, #2
 801a158:	b29a      	uxth	r2, r3
 801a15a:	683b      	ldr	r3, [r7, #0]
 801a15c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a15e:	6838      	ldr	r0, [r7, #0]
 801a160:	f003 fbc6 	bl	801d8f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801a164:	683b      	ldr	r3, [r7, #0]
 801a166:	7d1b      	ldrb	r3, [r3, #20]
 801a168:	2b01      	cmp	r3, #1
 801a16a:	d020      	beq.n	801a1ae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801a16c:	683b      	ldr	r3, [r7, #0]
 801a16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a170:	2b00      	cmp	r3, #0
 801a172:	d006      	beq.n	801a182 <tcp_pcb_remove+0xca>
 801a174:	4b13      	ldr	r3, [pc, #76]	; (801a1c4 <tcp_pcb_remove+0x10c>)
 801a176:	f640 0293 	movw	r2, #2195	; 0x893
 801a17a:	4916      	ldr	r1, [pc, #88]	; (801a1d4 <tcp_pcb_remove+0x11c>)
 801a17c:	4813      	ldr	r0, [pc, #76]	; (801a1cc <tcp_pcb_remove+0x114>)
 801a17e:	f005 ffc3 	bl	8020108 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801a182:	683b      	ldr	r3, [r7, #0]
 801a184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a186:	2b00      	cmp	r3, #0
 801a188:	d006      	beq.n	801a198 <tcp_pcb_remove+0xe0>
 801a18a:	4b0e      	ldr	r3, [pc, #56]	; (801a1c4 <tcp_pcb_remove+0x10c>)
 801a18c:	f640 0294 	movw	r2, #2196	; 0x894
 801a190:	4911      	ldr	r1, [pc, #68]	; (801a1d8 <tcp_pcb_remove+0x120>)
 801a192:	480e      	ldr	r0, [pc, #56]	; (801a1cc <tcp_pcb_remove+0x114>)
 801a194:	f005 ffb8 	bl	8020108 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801a198:	683b      	ldr	r3, [r7, #0]
 801a19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d006      	beq.n	801a1ae <tcp_pcb_remove+0xf6>
 801a1a0:	4b08      	ldr	r3, [pc, #32]	; (801a1c4 <tcp_pcb_remove+0x10c>)
 801a1a2:	f640 0296 	movw	r2, #2198	; 0x896
 801a1a6:	490d      	ldr	r1, [pc, #52]	; (801a1dc <tcp_pcb_remove+0x124>)
 801a1a8:	4808      	ldr	r0, [pc, #32]	; (801a1cc <tcp_pcb_remove+0x114>)
 801a1aa:	f005 ffad 	bl	8020108 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801a1b4:	683b      	ldr	r3, [r7, #0]
 801a1b6:	2200      	movs	r2, #0
 801a1b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801a1ba:	bf00      	nop
 801a1bc:	3710      	adds	r7, #16
 801a1be:	46bd      	mov	sp, r7
 801a1c0:	bd80      	pop	{r7, pc}
 801a1c2:	bf00      	nop
 801a1c4:	08022f98 	.word	0x08022f98
 801a1c8:	08023644 	.word	0x08023644
 801a1cc:	08023020 	.word	0x08023020
 801a1d0:	08023660 	.word	0x08023660
 801a1d4:	08023680 	.word	0x08023680
 801a1d8:	08023698 	.word	0x08023698
 801a1dc:	080236b4 	.word	0x080236b4

0801a1e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b082      	sub	sp, #8
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d106      	bne.n	801a1fc <tcp_next_iss+0x1c>
 801a1ee:	4b0a      	ldr	r3, [pc, #40]	; (801a218 <tcp_next_iss+0x38>)
 801a1f0:	f640 02af 	movw	r2, #2223	; 0x8af
 801a1f4:	4909      	ldr	r1, [pc, #36]	; (801a21c <tcp_next_iss+0x3c>)
 801a1f6:	480a      	ldr	r0, [pc, #40]	; (801a220 <tcp_next_iss+0x40>)
 801a1f8:	f005 ff86 	bl	8020108 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801a1fc:	4b09      	ldr	r3, [pc, #36]	; (801a224 <tcp_next_iss+0x44>)
 801a1fe:	681a      	ldr	r2, [r3, #0]
 801a200:	4b09      	ldr	r3, [pc, #36]	; (801a228 <tcp_next_iss+0x48>)
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	4413      	add	r3, r2
 801a206:	4a07      	ldr	r2, [pc, #28]	; (801a224 <tcp_next_iss+0x44>)
 801a208:	6013      	str	r3, [r2, #0]
  return iss;
 801a20a:	4b06      	ldr	r3, [pc, #24]	; (801a224 <tcp_next_iss+0x44>)
 801a20c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801a20e:	4618      	mov	r0, r3
 801a210:	3708      	adds	r7, #8
 801a212:	46bd      	mov	sp, r7
 801a214:	bd80      	pop	{r7, pc}
 801a216:	bf00      	nop
 801a218:	08022f98 	.word	0x08022f98
 801a21c:	080236cc 	.word	0x080236cc
 801a220:	08023020 	.word	0x08023020
 801a224:	2400002c 	.word	0x2400002c
 801a228:	24010018 	.word	0x24010018

0801a22c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b086      	sub	sp, #24
 801a230:	af00      	add	r7, sp, #0
 801a232:	4603      	mov	r3, r0
 801a234:	60b9      	str	r1, [r7, #8]
 801a236:	607a      	str	r2, [r7, #4]
 801a238:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d106      	bne.n	801a24e <tcp_eff_send_mss_netif+0x22>
 801a240:	4b14      	ldr	r3, [pc, #80]	; (801a294 <tcp_eff_send_mss_netif+0x68>)
 801a242:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801a246:	4914      	ldr	r1, [pc, #80]	; (801a298 <tcp_eff_send_mss_netif+0x6c>)
 801a248:	4814      	ldr	r0, [pc, #80]	; (801a29c <tcp_eff_send_mss_netif+0x70>)
 801a24a:	f005 ff5d 	bl	8020108 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801a24e:	68bb      	ldr	r3, [r7, #8]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d101      	bne.n	801a258 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801a254:	89fb      	ldrh	r3, [r7, #14]
 801a256:	e019      	b.n	801a28c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a25c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801a25e:	8afb      	ldrh	r3, [r7, #22]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d012      	beq.n	801a28a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801a264:	2328      	movs	r3, #40	; 0x28
 801a266:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801a268:	8afa      	ldrh	r2, [r7, #22]
 801a26a:	8abb      	ldrh	r3, [r7, #20]
 801a26c:	429a      	cmp	r2, r3
 801a26e:	d904      	bls.n	801a27a <tcp_eff_send_mss_netif+0x4e>
 801a270:	8afa      	ldrh	r2, [r7, #22]
 801a272:	8abb      	ldrh	r3, [r7, #20]
 801a274:	1ad3      	subs	r3, r2, r3
 801a276:	b29b      	uxth	r3, r3
 801a278:	e000      	b.n	801a27c <tcp_eff_send_mss_netif+0x50>
 801a27a:	2300      	movs	r3, #0
 801a27c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801a27e:	8a7a      	ldrh	r2, [r7, #18]
 801a280:	89fb      	ldrh	r3, [r7, #14]
 801a282:	4293      	cmp	r3, r2
 801a284:	bf28      	it	cs
 801a286:	4613      	movcs	r3, r2
 801a288:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801a28a:	89fb      	ldrh	r3, [r7, #14]
}
 801a28c:	4618      	mov	r0, r3
 801a28e:	3718      	adds	r7, #24
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}
 801a294:	08022f98 	.word	0x08022f98
 801a298:	080236e8 	.word	0x080236e8
 801a29c:	08023020 	.word	0x08023020

0801a2a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b084      	sub	sp, #16
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	6078      	str	r0, [r7, #4]
 801a2a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801a2aa:	683b      	ldr	r3, [r7, #0]
 801a2ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d119      	bne.n	801a2e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801a2b4:	4b10      	ldr	r3, [pc, #64]	; (801a2f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801a2b6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801a2ba:	4910      	ldr	r1, [pc, #64]	; (801a2fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801a2bc:	4810      	ldr	r0, [pc, #64]	; (801a300 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801a2be:	f005 ff23 	bl	8020108 <iprintf>

  while (pcb != NULL) {
 801a2c2:	e011      	b.n	801a2e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	681a      	ldr	r2, [r3, #0]
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	429a      	cmp	r2, r3
 801a2ce:	d108      	bne.n	801a2e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	68db      	ldr	r3, [r3, #12]
 801a2d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801a2d6:	68f8      	ldr	r0, [r7, #12]
 801a2d8:	f7fe fd4c 	bl	8018d74 <tcp_abort>
      pcb = next;
 801a2dc:	68bb      	ldr	r3, [r7, #8]
 801a2de:	60fb      	str	r3, [r7, #12]
 801a2e0:	e002      	b.n	801a2e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	68db      	ldr	r3, [r3, #12]
 801a2e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d1ea      	bne.n	801a2c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801a2ee:	bf00      	nop
 801a2f0:	bf00      	nop
 801a2f2:	3710      	adds	r7, #16
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	bd80      	pop	{r7, pc}
 801a2f8:	08022f98 	.word	0x08022f98
 801a2fc:	08023710 	.word	0x08023710
 801a300:	08023020 	.word	0x08023020

0801a304 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b084      	sub	sp, #16
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
 801a30c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d02a      	beq.n	801a36a <tcp_netif_ip_addr_changed+0x66>
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d026      	beq.n	801a36a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801a31c:	4b15      	ldr	r3, [pc, #84]	; (801a374 <tcp_netif_ip_addr_changed+0x70>)
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	4619      	mov	r1, r3
 801a322:	6878      	ldr	r0, [r7, #4]
 801a324:	f7ff ffbc 	bl	801a2a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801a328:	4b13      	ldr	r3, [pc, #76]	; (801a378 <tcp_netif_ip_addr_changed+0x74>)
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	4619      	mov	r1, r3
 801a32e:	6878      	ldr	r0, [r7, #4]
 801a330:	f7ff ffb6 	bl	801a2a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801a334:	683b      	ldr	r3, [r7, #0]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d017      	beq.n	801a36a <tcp_netif_ip_addr_changed+0x66>
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d013      	beq.n	801a36a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a342:	4b0e      	ldr	r3, [pc, #56]	; (801a37c <tcp_netif_ip_addr_changed+0x78>)
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	60fb      	str	r3, [r7, #12]
 801a348:	e00c      	b.n	801a364 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	681a      	ldr	r2, [r3, #0]
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	429a      	cmp	r2, r3
 801a354:	d103      	bne.n	801a35e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801a356:	683b      	ldr	r3, [r7, #0]
 801a358:	681a      	ldr	r2, [r3, #0]
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	68db      	ldr	r3, [r3, #12]
 801a362:	60fb      	str	r3, [r7, #12]
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d1ef      	bne.n	801a34a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801a36a:	bf00      	nop
 801a36c:	3710      	adds	r7, #16
 801a36e:	46bd      	mov	sp, r7
 801a370:	bd80      	pop	{r7, pc}
 801a372:	bf00      	nop
 801a374:	24010024 	.word	0x24010024
 801a378:	2401001c 	.word	0x2401001c
 801a37c:	24010020 	.word	0x24010020

0801a380 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b082      	sub	sp, #8
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d007      	beq.n	801a3a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a394:	4618      	mov	r0, r3
 801a396:	f7ff fb6f 	bl	8019a78 <tcp_segs_free>
    pcb->ooseq = NULL;
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	2200      	movs	r2, #0
 801a39e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801a3a0:	bf00      	nop
 801a3a2:	3708      	adds	r7, #8
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}

0801a3a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801a3a8:	b590      	push	{r4, r7, lr}
 801a3aa:	b08d      	sub	sp, #52	; 0x34
 801a3ac:	af04      	add	r7, sp, #16
 801a3ae:	6078      	str	r0, [r7, #4]
 801a3b0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d105      	bne.n	801a3c4 <tcp_input+0x1c>
 801a3b8:	4b9b      	ldr	r3, [pc, #620]	; (801a628 <tcp_input+0x280>)
 801a3ba:	2283      	movs	r2, #131	; 0x83
 801a3bc:	499b      	ldr	r1, [pc, #620]	; (801a62c <tcp_input+0x284>)
 801a3be:	489c      	ldr	r0, [pc, #624]	; (801a630 <tcp_input+0x288>)
 801a3c0:	f005 fea2 	bl	8020108 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	685b      	ldr	r3, [r3, #4]
 801a3c8:	4a9a      	ldr	r2, [pc, #616]	; (801a634 <tcp_input+0x28c>)
 801a3ca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	895b      	ldrh	r3, [r3, #10]
 801a3d0:	2b13      	cmp	r3, #19
 801a3d2:	f240 83d1 	bls.w	801ab78 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801a3d6:	4b98      	ldr	r3, [pc, #608]	; (801a638 <tcp_input+0x290>)
 801a3d8:	695b      	ldr	r3, [r3, #20]
 801a3da:	4a97      	ldr	r2, [pc, #604]	; (801a638 <tcp_input+0x290>)
 801a3dc:	6812      	ldr	r2, [r2, #0]
 801a3de:	4611      	mov	r1, r2
 801a3e0:	4618      	mov	r0, r3
 801a3e2:	f7fb fa8f 	bl	8015904 <ip4_addr_isbroadcast_u32>
 801a3e6:	4603      	mov	r3, r0
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	f040 83c7 	bne.w	801ab7c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801a3ee:	4b92      	ldr	r3, [pc, #584]	; (801a638 <tcp_input+0x290>)
 801a3f0:	695b      	ldr	r3, [r3, #20]
 801a3f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801a3f6:	2be0      	cmp	r3, #224	; 0xe0
 801a3f8:	f000 83c0 	beq.w	801ab7c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801a3fc:	4b8d      	ldr	r3, [pc, #564]	; (801a634 <tcp_input+0x28c>)
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	899b      	ldrh	r3, [r3, #12]
 801a402:	b29b      	uxth	r3, r3
 801a404:	4618      	mov	r0, r3
 801a406:	f7f9 fd0f 	bl	8013e28 <lwip_htons>
 801a40a:	4603      	mov	r3, r0
 801a40c:	0b1b      	lsrs	r3, r3, #12
 801a40e:	b29b      	uxth	r3, r3
 801a410:	b2db      	uxtb	r3, r3
 801a412:	009b      	lsls	r3, r3, #2
 801a414:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801a416:	7cbb      	ldrb	r3, [r7, #18]
 801a418:	2b13      	cmp	r3, #19
 801a41a:	f240 83b1 	bls.w	801ab80 <tcp_input+0x7d8>
 801a41e:	7cbb      	ldrb	r3, [r7, #18]
 801a420:	b29a      	uxth	r2, r3
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	891b      	ldrh	r3, [r3, #8]
 801a426:	429a      	cmp	r2, r3
 801a428:	f200 83aa 	bhi.w	801ab80 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801a42c:	7cbb      	ldrb	r3, [r7, #18]
 801a42e:	b29b      	uxth	r3, r3
 801a430:	3b14      	subs	r3, #20
 801a432:	b29a      	uxth	r2, r3
 801a434:	4b81      	ldr	r3, [pc, #516]	; (801a63c <tcp_input+0x294>)
 801a436:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801a438:	4b81      	ldr	r3, [pc, #516]	; (801a640 <tcp_input+0x298>)
 801a43a:	2200      	movs	r2, #0
 801a43c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	895a      	ldrh	r2, [r3, #10]
 801a442:	7cbb      	ldrb	r3, [r7, #18]
 801a444:	b29b      	uxth	r3, r3
 801a446:	429a      	cmp	r2, r3
 801a448:	d309      	bcc.n	801a45e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801a44a:	4b7c      	ldr	r3, [pc, #496]	; (801a63c <tcp_input+0x294>)
 801a44c:	881a      	ldrh	r2, [r3, #0]
 801a44e:	4b7d      	ldr	r3, [pc, #500]	; (801a644 <tcp_input+0x29c>)
 801a450:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801a452:	7cbb      	ldrb	r3, [r7, #18]
 801a454:	4619      	mov	r1, r3
 801a456:	6878      	ldr	r0, [r7, #4]
 801a458:	f7fd fc34 	bl	8017cc4 <pbuf_remove_header>
 801a45c:	e04e      	b.n	801a4fc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d105      	bne.n	801a472 <tcp_input+0xca>
 801a466:	4b70      	ldr	r3, [pc, #448]	; (801a628 <tcp_input+0x280>)
 801a468:	22c2      	movs	r2, #194	; 0xc2
 801a46a:	4977      	ldr	r1, [pc, #476]	; (801a648 <tcp_input+0x2a0>)
 801a46c:	4870      	ldr	r0, [pc, #448]	; (801a630 <tcp_input+0x288>)
 801a46e:	f005 fe4b 	bl	8020108 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801a472:	2114      	movs	r1, #20
 801a474:	6878      	ldr	r0, [r7, #4]
 801a476:	f7fd fc25 	bl	8017cc4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	895a      	ldrh	r2, [r3, #10]
 801a47e:	4b71      	ldr	r3, [pc, #452]	; (801a644 <tcp_input+0x29c>)
 801a480:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801a482:	4b6e      	ldr	r3, [pc, #440]	; (801a63c <tcp_input+0x294>)
 801a484:	881a      	ldrh	r2, [r3, #0]
 801a486:	4b6f      	ldr	r3, [pc, #444]	; (801a644 <tcp_input+0x29c>)
 801a488:	881b      	ldrh	r3, [r3, #0]
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801a48e:	4b6d      	ldr	r3, [pc, #436]	; (801a644 <tcp_input+0x29c>)
 801a490:	881b      	ldrh	r3, [r3, #0]
 801a492:	4619      	mov	r1, r3
 801a494:	6878      	ldr	r0, [r7, #4]
 801a496:	f7fd fc15 	bl	8017cc4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	895b      	ldrh	r3, [r3, #10]
 801a4a0:	8a3a      	ldrh	r2, [r7, #16]
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	f200 836e 	bhi.w	801ab84 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	685b      	ldr	r3, [r3, #4]
 801a4ae:	4a64      	ldr	r2, [pc, #400]	; (801a640 <tcp_input+0x298>)
 801a4b0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	8a3a      	ldrh	r2, [r7, #16]
 801a4b8:	4611      	mov	r1, r2
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	f7fd fc02 	bl	8017cc4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	891a      	ldrh	r2, [r3, #8]
 801a4c4:	8a3b      	ldrh	r3, [r7, #16]
 801a4c6:	1ad3      	subs	r3, r2, r3
 801a4c8:	b29a      	uxth	r2, r3
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	895b      	ldrh	r3, [r3, #10]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d005      	beq.n	801a4e2 <tcp_input+0x13a>
 801a4d6:	4b54      	ldr	r3, [pc, #336]	; (801a628 <tcp_input+0x280>)
 801a4d8:	22df      	movs	r2, #223	; 0xdf
 801a4da:	495c      	ldr	r1, [pc, #368]	; (801a64c <tcp_input+0x2a4>)
 801a4dc:	4854      	ldr	r0, [pc, #336]	; (801a630 <tcp_input+0x288>)
 801a4de:	f005 fe13 	bl	8020108 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	891a      	ldrh	r2, [r3, #8]
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	891b      	ldrh	r3, [r3, #8]
 801a4ec:	429a      	cmp	r2, r3
 801a4ee:	d005      	beq.n	801a4fc <tcp_input+0x154>
 801a4f0:	4b4d      	ldr	r3, [pc, #308]	; (801a628 <tcp_input+0x280>)
 801a4f2:	22e0      	movs	r2, #224	; 0xe0
 801a4f4:	4956      	ldr	r1, [pc, #344]	; (801a650 <tcp_input+0x2a8>)
 801a4f6:	484e      	ldr	r0, [pc, #312]	; (801a630 <tcp_input+0x288>)
 801a4f8:	f005 fe06 	bl	8020108 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801a4fc:	4b4d      	ldr	r3, [pc, #308]	; (801a634 <tcp_input+0x28c>)
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	881b      	ldrh	r3, [r3, #0]
 801a502:	b29b      	uxth	r3, r3
 801a504:	4a4b      	ldr	r2, [pc, #300]	; (801a634 <tcp_input+0x28c>)
 801a506:	6814      	ldr	r4, [r2, #0]
 801a508:	4618      	mov	r0, r3
 801a50a:	f7f9 fc8d 	bl	8013e28 <lwip_htons>
 801a50e:	4603      	mov	r3, r0
 801a510:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801a512:	4b48      	ldr	r3, [pc, #288]	; (801a634 <tcp_input+0x28c>)
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	885b      	ldrh	r3, [r3, #2]
 801a518:	b29b      	uxth	r3, r3
 801a51a:	4a46      	ldr	r2, [pc, #280]	; (801a634 <tcp_input+0x28c>)
 801a51c:	6814      	ldr	r4, [r2, #0]
 801a51e:	4618      	mov	r0, r3
 801a520:	f7f9 fc82 	bl	8013e28 <lwip_htons>
 801a524:	4603      	mov	r3, r0
 801a526:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801a528:	4b42      	ldr	r3, [pc, #264]	; (801a634 <tcp_input+0x28c>)
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	685b      	ldr	r3, [r3, #4]
 801a52e:	4a41      	ldr	r2, [pc, #260]	; (801a634 <tcp_input+0x28c>)
 801a530:	6814      	ldr	r4, [r2, #0]
 801a532:	4618      	mov	r0, r3
 801a534:	f7f9 fc8d 	bl	8013e52 <lwip_htonl>
 801a538:	4603      	mov	r3, r0
 801a53a:	6063      	str	r3, [r4, #4]
 801a53c:	6863      	ldr	r3, [r4, #4]
 801a53e:	4a45      	ldr	r2, [pc, #276]	; (801a654 <tcp_input+0x2ac>)
 801a540:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801a542:	4b3c      	ldr	r3, [pc, #240]	; (801a634 <tcp_input+0x28c>)
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	689b      	ldr	r3, [r3, #8]
 801a548:	4a3a      	ldr	r2, [pc, #232]	; (801a634 <tcp_input+0x28c>)
 801a54a:	6814      	ldr	r4, [r2, #0]
 801a54c:	4618      	mov	r0, r3
 801a54e:	f7f9 fc80 	bl	8013e52 <lwip_htonl>
 801a552:	4603      	mov	r3, r0
 801a554:	60a3      	str	r3, [r4, #8]
 801a556:	68a3      	ldr	r3, [r4, #8]
 801a558:	4a3f      	ldr	r2, [pc, #252]	; (801a658 <tcp_input+0x2b0>)
 801a55a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801a55c:	4b35      	ldr	r3, [pc, #212]	; (801a634 <tcp_input+0x28c>)
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	89db      	ldrh	r3, [r3, #14]
 801a562:	b29b      	uxth	r3, r3
 801a564:	4a33      	ldr	r2, [pc, #204]	; (801a634 <tcp_input+0x28c>)
 801a566:	6814      	ldr	r4, [r2, #0]
 801a568:	4618      	mov	r0, r3
 801a56a:	f7f9 fc5d 	bl	8013e28 <lwip_htons>
 801a56e:	4603      	mov	r3, r0
 801a570:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801a572:	4b30      	ldr	r3, [pc, #192]	; (801a634 <tcp_input+0x28c>)
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	899b      	ldrh	r3, [r3, #12]
 801a578:	b29b      	uxth	r3, r3
 801a57a:	4618      	mov	r0, r3
 801a57c:	f7f9 fc54 	bl	8013e28 <lwip_htons>
 801a580:	4603      	mov	r3, r0
 801a582:	b2db      	uxtb	r3, r3
 801a584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a588:	b2da      	uxtb	r2, r3
 801a58a:	4b34      	ldr	r3, [pc, #208]	; (801a65c <tcp_input+0x2b4>)
 801a58c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	891a      	ldrh	r2, [r3, #8]
 801a592:	4b33      	ldr	r3, [pc, #204]	; (801a660 <tcp_input+0x2b8>)
 801a594:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801a596:	4b31      	ldr	r3, [pc, #196]	; (801a65c <tcp_input+0x2b4>)
 801a598:	781b      	ldrb	r3, [r3, #0]
 801a59a:	f003 0303 	and.w	r3, r3, #3
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d00c      	beq.n	801a5bc <tcp_input+0x214>
    tcplen++;
 801a5a2:	4b2f      	ldr	r3, [pc, #188]	; (801a660 <tcp_input+0x2b8>)
 801a5a4:	881b      	ldrh	r3, [r3, #0]
 801a5a6:	3301      	adds	r3, #1
 801a5a8:	b29a      	uxth	r2, r3
 801a5aa:	4b2d      	ldr	r3, [pc, #180]	; (801a660 <tcp_input+0x2b8>)
 801a5ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	891a      	ldrh	r2, [r3, #8]
 801a5b2:	4b2b      	ldr	r3, [pc, #172]	; (801a660 <tcp_input+0x2b8>)
 801a5b4:	881b      	ldrh	r3, [r3, #0]
 801a5b6:	429a      	cmp	r2, r3
 801a5b8:	f200 82e6 	bhi.w	801ab88 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801a5bc:	2300      	movs	r3, #0
 801a5be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a5c0:	4b28      	ldr	r3, [pc, #160]	; (801a664 <tcp_input+0x2bc>)
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	61fb      	str	r3, [r7, #28]
 801a5c6:	e09d      	b.n	801a704 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801a5c8:	69fb      	ldr	r3, [r7, #28]
 801a5ca:	7d1b      	ldrb	r3, [r3, #20]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d105      	bne.n	801a5dc <tcp_input+0x234>
 801a5d0:	4b15      	ldr	r3, [pc, #84]	; (801a628 <tcp_input+0x280>)
 801a5d2:	22fb      	movs	r2, #251	; 0xfb
 801a5d4:	4924      	ldr	r1, [pc, #144]	; (801a668 <tcp_input+0x2c0>)
 801a5d6:	4816      	ldr	r0, [pc, #88]	; (801a630 <tcp_input+0x288>)
 801a5d8:	f005 fd96 	bl	8020108 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801a5dc:	69fb      	ldr	r3, [r7, #28]
 801a5de:	7d1b      	ldrb	r3, [r3, #20]
 801a5e0:	2b0a      	cmp	r3, #10
 801a5e2:	d105      	bne.n	801a5f0 <tcp_input+0x248>
 801a5e4:	4b10      	ldr	r3, [pc, #64]	; (801a628 <tcp_input+0x280>)
 801a5e6:	22fc      	movs	r2, #252	; 0xfc
 801a5e8:	4920      	ldr	r1, [pc, #128]	; (801a66c <tcp_input+0x2c4>)
 801a5ea:	4811      	ldr	r0, [pc, #68]	; (801a630 <tcp_input+0x288>)
 801a5ec:	f005 fd8c 	bl	8020108 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801a5f0:	69fb      	ldr	r3, [r7, #28]
 801a5f2:	7d1b      	ldrb	r3, [r3, #20]
 801a5f4:	2b01      	cmp	r3, #1
 801a5f6:	d105      	bne.n	801a604 <tcp_input+0x25c>
 801a5f8:	4b0b      	ldr	r3, [pc, #44]	; (801a628 <tcp_input+0x280>)
 801a5fa:	22fd      	movs	r2, #253	; 0xfd
 801a5fc:	491c      	ldr	r1, [pc, #112]	; (801a670 <tcp_input+0x2c8>)
 801a5fe:	480c      	ldr	r0, [pc, #48]	; (801a630 <tcp_input+0x288>)
 801a600:	f005 fd82 	bl	8020108 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a604:	69fb      	ldr	r3, [r7, #28]
 801a606:	7a1b      	ldrb	r3, [r3, #8]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d033      	beq.n	801a674 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a60c:	69fb      	ldr	r3, [r7, #28]
 801a60e:	7a1a      	ldrb	r2, [r3, #8]
 801a610:	4b09      	ldr	r3, [pc, #36]	; (801a638 <tcp_input+0x290>)
 801a612:	685b      	ldr	r3, [r3, #4]
 801a614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a618:	3301      	adds	r3, #1
 801a61a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a61c:	429a      	cmp	r2, r3
 801a61e:	d029      	beq.n	801a674 <tcp_input+0x2cc>
      prev = pcb;
 801a620:	69fb      	ldr	r3, [r7, #28]
 801a622:	61bb      	str	r3, [r7, #24]
      continue;
 801a624:	e06b      	b.n	801a6fe <tcp_input+0x356>
 801a626:	bf00      	nop
 801a628:	08023744 	.word	0x08023744
 801a62c:	080237bc 	.word	0x080237bc
 801a630:	080237d4 	.word	0x080237d4
 801a634:	24010040 	.word	0x24010040
 801a638:	24009548 	.word	0x24009548
 801a63c:	24010044 	.word	0x24010044
 801a640:	24010048 	.word	0x24010048
 801a644:	24010046 	.word	0x24010046
 801a648:	080237fc 	.word	0x080237fc
 801a64c:	0802380c 	.word	0x0802380c
 801a650:	08023818 	.word	0x08023818
 801a654:	24010050 	.word	0x24010050
 801a658:	24010054 	.word	0x24010054
 801a65c:	2401005c 	.word	0x2401005c
 801a660:	2401005a 	.word	0x2401005a
 801a664:	24010024 	.word	0x24010024
 801a668:	08023838 	.word	0x08023838
 801a66c:	08023860 	.word	0x08023860
 801a670:	0802388c 	.word	0x0802388c
    }

    if (pcb->remote_port == tcphdr->src &&
 801a674:	69fb      	ldr	r3, [r7, #28]
 801a676:	8b1a      	ldrh	r2, [r3, #24]
 801a678:	4b72      	ldr	r3, [pc, #456]	; (801a844 <tcp_input+0x49c>)
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	881b      	ldrh	r3, [r3, #0]
 801a67e:	b29b      	uxth	r3, r3
 801a680:	429a      	cmp	r2, r3
 801a682:	d13a      	bne.n	801a6fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801a684:	69fb      	ldr	r3, [r7, #28]
 801a686:	8ada      	ldrh	r2, [r3, #22]
 801a688:	4b6e      	ldr	r3, [pc, #440]	; (801a844 <tcp_input+0x49c>)
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	885b      	ldrh	r3, [r3, #2]
 801a68e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801a690:	429a      	cmp	r2, r3
 801a692:	d132      	bne.n	801a6fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a694:	69fb      	ldr	r3, [r7, #28]
 801a696:	685a      	ldr	r2, [r3, #4]
 801a698:	4b6b      	ldr	r3, [pc, #428]	; (801a848 <tcp_input+0x4a0>)
 801a69a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801a69c:	429a      	cmp	r2, r3
 801a69e:	d12c      	bne.n	801a6fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a6a0:	69fb      	ldr	r3, [r7, #28]
 801a6a2:	681a      	ldr	r2, [r3, #0]
 801a6a4:	4b68      	ldr	r3, [pc, #416]	; (801a848 <tcp_input+0x4a0>)
 801a6a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	d126      	bne.n	801a6fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801a6ac:	69fb      	ldr	r3, [r7, #28]
 801a6ae:	68db      	ldr	r3, [r3, #12]
 801a6b0:	69fa      	ldr	r2, [r7, #28]
 801a6b2:	429a      	cmp	r2, r3
 801a6b4:	d106      	bne.n	801a6c4 <tcp_input+0x31c>
 801a6b6:	4b65      	ldr	r3, [pc, #404]	; (801a84c <tcp_input+0x4a4>)
 801a6b8:	f240 120d 	movw	r2, #269	; 0x10d
 801a6bc:	4964      	ldr	r1, [pc, #400]	; (801a850 <tcp_input+0x4a8>)
 801a6be:	4865      	ldr	r0, [pc, #404]	; (801a854 <tcp_input+0x4ac>)
 801a6c0:	f005 fd22 	bl	8020108 <iprintf>
      if (prev != NULL) {
 801a6c4:	69bb      	ldr	r3, [r7, #24]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d00a      	beq.n	801a6e0 <tcp_input+0x338>
        prev->next = pcb->next;
 801a6ca:	69fb      	ldr	r3, [r7, #28]
 801a6cc:	68da      	ldr	r2, [r3, #12]
 801a6ce:	69bb      	ldr	r3, [r7, #24]
 801a6d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801a6d2:	4b61      	ldr	r3, [pc, #388]	; (801a858 <tcp_input+0x4b0>)
 801a6d4:	681a      	ldr	r2, [r3, #0]
 801a6d6:	69fb      	ldr	r3, [r7, #28]
 801a6d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801a6da:	4a5f      	ldr	r2, [pc, #380]	; (801a858 <tcp_input+0x4b0>)
 801a6dc:	69fb      	ldr	r3, [r7, #28]
 801a6de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801a6e0:	69fb      	ldr	r3, [r7, #28]
 801a6e2:	68db      	ldr	r3, [r3, #12]
 801a6e4:	69fa      	ldr	r2, [r7, #28]
 801a6e6:	429a      	cmp	r2, r3
 801a6e8:	d111      	bne.n	801a70e <tcp_input+0x366>
 801a6ea:	4b58      	ldr	r3, [pc, #352]	; (801a84c <tcp_input+0x4a4>)
 801a6ec:	f240 1215 	movw	r2, #277	; 0x115
 801a6f0:	495a      	ldr	r1, [pc, #360]	; (801a85c <tcp_input+0x4b4>)
 801a6f2:	4858      	ldr	r0, [pc, #352]	; (801a854 <tcp_input+0x4ac>)
 801a6f4:	f005 fd08 	bl	8020108 <iprintf>
      break;
 801a6f8:	e009      	b.n	801a70e <tcp_input+0x366>
    }
    prev = pcb;
 801a6fa:	69fb      	ldr	r3, [r7, #28]
 801a6fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6fe:	69fb      	ldr	r3, [r7, #28]
 801a700:	68db      	ldr	r3, [r3, #12]
 801a702:	61fb      	str	r3, [r7, #28]
 801a704:	69fb      	ldr	r3, [r7, #28]
 801a706:	2b00      	cmp	r3, #0
 801a708:	f47f af5e 	bne.w	801a5c8 <tcp_input+0x220>
 801a70c:	e000      	b.n	801a710 <tcp_input+0x368>
      break;
 801a70e:	bf00      	nop
  }

  if (pcb == NULL) {
 801a710:	69fb      	ldr	r3, [r7, #28]
 801a712:	2b00      	cmp	r3, #0
 801a714:	f040 80aa 	bne.w	801a86c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a718:	4b51      	ldr	r3, [pc, #324]	; (801a860 <tcp_input+0x4b8>)
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	61fb      	str	r3, [r7, #28]
 801a71e:	e03f      	b.n	801a7a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a720:	69fb      	ldr	r3, [r7, #28]
 801a722:	7d1b      	ldrb	r3, [r3, #20]
 801a724:	2b0a      	cmp	r3, #10
 801a726:	d006      	beq.n	801a736 <tcp_input+0x38e>
 801a728:	4b48      	ldr	r3, [pc, #288]	; (801a84c <tcp_input+0x4a4>)
 801a72a:	f240 121f 	movw	r2, #287	; 0x11f
 801a72e:	494d      	ldr	r1, [pc, #308]	; (801a864 <tcp_input+0x4bc>)
 801a730:	4848      	ldr	r0, [pc, #288]	; (801a854 <tcp_input+0x4ac>)
 801a732:	f005 fce9 	bl	8020108 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a736:	69fb      	ldr	r3, [r7, #28]
 801a738:	7a1b      	ldrb	r3, [r3, #8]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d009      	beq.n	801a752 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a73e:	69fb      	ldr	r3, [r7, #28]
 801a740:	7a1a      	ldrb	r2, [r3, #8]
 801a742:	4b41      	ldr	r3, [pc, #260]	; (801a848 <tcp_input+0x4a0>)
 801a744:	685b      	ldr	r3, [r3, #4]
 801a746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a74a:	3301      	adds	r3, #1
 801a74c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a74e:	429a      	cmp	r2, r3
 801a750:	d122      	bne.n	801a798 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801a752:	69fb      	ldr	r3, [r7, #28]
 801a754:	8b1a      	ldrh	r2, [r3, #24]
 801a756:	4b3b      	ldr	r3, [pc, #236]	; (801a844 <tcp_input+0x49c>)
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	881b      	ldrh	r3, [r3, #0]
 801a75c:	b29b      	uxth	r3, r3
 801a75e:	429a      	cmp	r2, r3
 801a760:	d11b      	bne.n	801a79a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801a762:	69fb      	ldr	r3, [r7, #28]
 801a764:	8ada      	ldrh	r2, [r3, #22]
 801a766:	4b37      	ldr	r3, [pc, #220]	; (801a844 <tcp_input+0x49c>)
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	885b      	ldrh	r3, [r3, #2]
 801a76c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801a76e:	429a      	cmp	r2, r3
 801a770:	d113      	bne.n	801a79a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a772:	69fb      	ldr	r3, [r7, #28]
 801a774:	685a      	ldr	r2, [r3, #4]
 801a776:	4b34      	ldr	r3, [pc, #208]	; (801a848 <tcp_input+0x4a0>)
 801a778:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801a77a:	429a      	cmp	r2, r3
 801a77c:	d10d      	bne.n	801a79a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a77e:	69fb      	ldr	r3, [r7, #28]
 801a780:	681a      	ldr	r2, [r3, #0]
 801a782:	4b31      	ldr	r3, [pc, #196]	; (801a848 <tcp_input+0x4a0>)
 801a784:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a786:	429a      	cmp	r2, r3
 801a788:	d107      	bne.n	801a79a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801a78a:	69f8      	ldr	r0, [r7, #28]
 801a78c:	f000 fb56 	bl	801ae3c <tcp_timewait_input>
        }
        pbuf_free(p);
 801a790:	6878      	ldr	r0, [r7, #4]
 801a792:	f7fd fb1d 	bl	8017dd0 <pbuf_free>
        return;
 801a796:	e1fd      	b.n	801ab94 <tcp_input+0x7ec>
        continue;
 801a798:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a79a:	69fb      	ldr	r3, [r7, #28]
 801a79c:	68db      	ldr	r3, [r3, #12]
 801a79e:	61fb      	str	r3, [r7, #28]
 801a7a0:	69fb      	ldr	r3, [r7, #28]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d1bc      	bne.n	801a720 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a7aa:	4b2f      	ldr	r3, [pc, #188]	; (801a868 <tcp_input+0x4c0>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	617b      	str	r3, [r7, #20]
 801a7b0:	e02a      	b.n	801a808 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a7b2:	697b      	ldr	r3, [r7, #20]
 801a7b4:	7a1b      	ldrb	r3, [r3, #8]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d00c      	beq.n	801a7d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a7ba:	697b      	ldr	r3, [r7, #20]
 801a7bc:	7a1a      	ldrb	r2, [r3, #8]
 801a7be:	4b22      	ldr	r3, [pc, #136]	; (801a848 <tcp_input+0x4a0>)
 801a7c0:	685b      	ldr	r3, [r3, #4]
 801a7c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a7c6:	3301      	adds	r3, #1
 801a7c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a7ca:	429a      	cmp	r2, r3
 801a7cc:	d002      	beq.n	801a7d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801a7ce:	697b      	ldr	r3, [r7, #20]
 801a7d0:	61bb      	str	r3, [r7, #24]
        continue;
 801a7d2:	e016      	b.n	801a802 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801a7d4:	697b      	ldr	r3, [r7, #20]
 801a7d6:	8ada      	ldrh	r2, [r3, #22]
 801a7d8:	4b1a      	ldr	r3, [pc, #104]	; (801a844 <tcp_input+0x49c>)
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	885b      	ldrh	r3, [r3, #2]
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	d10c      	bne.n	801a7fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801a7e4:	697b      	ldr	r3, [r7, #20]
 801a7e6:	681a      	ldr	r2, [r3, #0]
 801a7e8:	4b17      	ldr	r3, [pc, #92]	; (801a848 <tcp_input+0x4a0>)
 801a7ea:	695b      	ldr	r3, [r3, #20]
 801a7ec:	429a      	cmp	r2, r3
 801a7ee:	d00f      	beq.n	801a810 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801a7f0:	697b      	ldr	r3, [r7, #20]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d00d      	beq.n	801a812 <tcp_input+0x46a>
 801a7f6:	697b      	ldr	r3, [r7, #20]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d009      	beq.n	801a812 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801a7fe:	697b      	ldr	r3, [r7, #20]
 801a800:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a802:	697b      	ldr	r3, [r7, #20]
 801a804:	68db      	ldr	r3, [r3, #12]
 801a806:	617b      	str	r3, [r7, #20]
 801a808:	697b      	ldr	r3, [r7, #20]
 801a80a:	2b00      	cmp	r3, #0
 801a80c:	d1d1      	bne.n	801a7b2 <tcp_input+0x40a>
 801a80e:	e000      	b.n	801a812 <tcp_input+0x46a>
            break;
 801a810:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801a812:	697b      	ldr	r3, [r7, #20]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d029      	beq.n	801a86c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801a818:	69bb      	ldr	r3, [r7, #24]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d00a      	beq.n	801a834 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801a81e:	697b      	ldr	r3, [r7, #20]
 801a820:	68da      	ldr	r2, [r3, #12]
 801a822:	69bb      	ldr	r3, [r7, #24]
 801a824:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801a826:	4b10      	ldr	r3, [pc, #64]	; (801a868 <tcp_input+0x4c0>)
 801a828:	681a      	ldr	r2, [r3, #0]
 801a82a:	697b      	ldr	r3, [r7, #20]
 801a82c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801a82e:	4a0e      	ldr	r2, [pc, #56]	; (801a868 <tcp_input+0x4c0>)
 801a830:	697b      	ldr	r3, [r7, #20]
 801a832:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801a834:	6978      	ldr	r0, [r7, #20]
 801a836:	f000 fa03 	bl	801ac40 <tcp_listen_input>
      }
      pbuf_free(p);
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f7fd fac8 	bl	8017dd0 <pbuf_free>
      return;
 801a840:	e1a8      	b.n	801ab94 <tcp_input+0x7ec>
 801a842:	bf00      	nop
 801a844:	24010040 	.word	0x24010040
 801a848:	24009548 	.word	0x24009548
 801a84c:	08023744 	.word	0x08023744
 801a850:	080238b4 	.word	0x080238b4
 801a854:	080237d4 	.word	0x080237d4
 801a858:	24010024 	.word	0x24010024
 801a85c:	080238e0 	.word	0x080238e0
 801a860:	24010028 	.word	0x24010028
 801a864:	0802390c 	.word	0x0802390c
 801a868:	24010020 	.word	0x24010020
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801a86c:	69fb      	ldr	r3, [r7, #28]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	f000 8158 	beq.w	801ab24 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801a874:	4b95      	ldr	r3, [pc, #596]	; (801aacc <tcp_input+0x724>)
 801a876:	2200      	movs	r2, #0
 801a878:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	891a      	ldrh	r2, [r3, #8]
 801a87e:	4b93      	ldr	r3, [pc, #588]	; (801aacc <tcp_input+0x724>)
 801a880:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801a882:	4a92      	ldr	r2, [pc, #584]	; (801aacc <tcp_input+0x724>)
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801a888:	4b91      	ldr	r3, [pc, #580]	; (801aad0 <tcp_input+0x728>)
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	4a8f      	ldr	r2, [pc, #572]	; (801aacc <tcp_input+0x724>)
 801a88e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801a890:	4b90      	ldr	r3, [pc, #576]	; (801aad4 <tcp_input+0x72c>)
 801a892:	2200      	movs	r2, #0
 801a894:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801a896:	4b90      	ldr	r3, [pc, #576]	; (801aad8 <tcp_input+0x730>)
 801a898:	2200      	movs	r2, #0
 801a89a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801a89c:	4b8f      	ldr	r3, [pc, #572]	; (801aadc <tcp_input+0x734>)
 801a89e:	2200      	movs	r2, #0
 801a8a0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801a8a2:	4b8f      	ldr	r3, [pc, #572]	; (801aae0 <tcp_input+0x738>)
 801a8a4:	781b      	ldrb	r3, [r3, #0]
 801a8a6:	f003 0308 	and.w	r3, r3, #8
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d006      	beq.n	801a8bc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	7b5b      	ldrb	r3, [r3, #13]
 801a8b2:	f043 0301 	orr.w	r3, r3, #1
 801a8b6:	b2da      	uxtb	r2, r3
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801a8bc:	69fb      	ldr	r3, [r7, #28]
 801a8be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d017      	beq.n	801a8f4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a8c4:	69f8      	ldr	r0, [r7, #28]
 801a8c6:	f7ff f859 	bl	801997c <tcp_process_refused_data>
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	f113 0f0d 	cmn.w	r3, #13
 801a8d0:	d007      	beq.n	801a8e2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a8d2:	69fb      	ldr	r3, [r7, #28]
 801a8d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d00c      	beq.n	801a8f4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a8da:	4b82      	ldr	r3, [pc, #520]	; (801aae4 <tcp_input+0x73c>)
 801a8dc:	881b      	ldrh	r3, [r3, #0]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d008      	beq.n	801a8f4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801a8e2:	69fb      	ldr	r3, [r7, #28]
 801a8e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	f040 80e4 	bne.w	801aab4 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801a8ec:	69f8      	ldr	r0, [r7, #28]
 801a8ee:	f003 fe05 	bl	801e4fc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801a8f2:	e0df      	b.n	801aab4 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 801a8f4:	4a7c      	ldr	r2, [pc, #496]	; (801aae8 <tcp_input+0x740>)
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801a8fa:	69f8      	ldr	r0, [r7, #28]
 801a8fc:	f000 fb18 	bl	801af30 <tcp_process>
 801a900:	4603      	mov	r3, r0
 801a902:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801a904:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a908:	f113 0f0d 	cmn.w	r3, #13
 801a90c:	f000 80d4 	beq.w	801aab8 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 801a910:	4b71      	ldr	r3, [pc, #452]	; (801aad8 <tcp_input+0x730>)
 801a912:	781b      	ldrb	r3, [r3, #0]
 801a914:	f003 0308 	and.w	r3, r3, #8
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d015      	beq.n	801a948 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801a91c:	69fb      	ldr	r3, [r7, #28]
 801a91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a922:	2b00      	cmp	r3, #0
 801a924:	d008      	beq.n	801a938 <tcp_input+0x590>
 801a926:	69fb      	ldr	r3, [r7, #28]
 801a928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a92c:	69fa      	ldr	r2, [r7, #28]
 801a92e:	6912      	ldr	r2, [r2, #16]
 801a930:	f06f 010d 	mvn.w	r1, #13
 801a934:	4610      	mov	r0, r2
 801a936:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a938:	69f9      	ldr	r1, [r7, #28]
 801a93a:	486c      	ldr	r0, [pc, #432]	; (801aaec <tcp_input+0x744>)
 801a93c:	f7ff fbbc 	bl	801a0b8 <tcp_pcb_remove>
        tcp_free(pcb);
 801a940:	69f8      	ldr	r0, [r7, #28]
 801a942:	f7fd fed3 	bl	80186ec <tcp_free>
 801a946:	e0da      	b.n	801aafe <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801a948:	2300      	movs	r3, #0
 801a94a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801a94c:	4b63      	ldr	r3, [pc, #396]	; (801aadc <tcp_input+0x734>)
 801a94e:	881b      	ldrh	r3, [r3, #0]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d01d      	beq.n	801a990 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801a954:	4b61      	ldr	r3, [pc, #388]	; (801aadc <tcp_input+0x734>)
 801a956:	881b      	ldrh	r3, [r3, #0]
 801a958:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801a95a:	69fb      	ldr	r3, [r7, #28]
 801a95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a960:	2b00      	cmp	r3, #0
 801a962:	d00a      	beq.n	801a97a <tcp_input+0x5d2>
 801a964:	69fb      	ldr	r3, [r7, #28]
 801a966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a96a:	69fa      	ldr	r2, [r7, #28]
 801a96c:	6910      	ldr	r0, [r2, #16]
 801a96e:	89fa      	ldrh	r2, [r7, #14]
 801a970:	69f9      	ldr	r1, [r7, #28]
 801a972:	4798      	blx	r3
 801a974:	4603      	mov	r3, r0
 801a976:	74fb      	strb	r3, [r7, #19]
 801a978:	e001      	b.n	801a97e <tcp_input+0x5d6>
 801a97a:	2300      	movs	r3, #0
 801a97c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a97e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a982:	f113 0f0d 	cmn.w	r3, #13
 801a986:	f000 8099 	beq.w	801aabc <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801a98a:	4b54      	ldr	r3, [pc, #336]	; (801aadc <tcp_input+0x734>)
 801a98c:	2200      	movs	r2, #0
 801a98e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801a990:	69f8      	ldr	r0, [r7, #28]
 801a992:	f000 f915 	bl	801abc0 <tcp_input_delayed_close>
 801a996:	4603      	mov	r3, r0
 801a998:	2b00      	cmp	r3, #0
 801a99a:	f040 8091 	bne.w	801aac0 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801a99e:	4b4d      	ldr	r3, [pc, #308]	; (801aad4 <tcp_input+0x72c>)
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d041      	beq.n	801aa2a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801a9a6:	69fb      	ldr	r3, [r7, #28]
 801a9a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d006      	beq.n	801a9bc <tcp_input+0x614>
 801a9ae:	4b50      	ldr	r3, [pc, #320]	; (801aaf0 <tcp_input+0x748>)
 801a9b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a9b4:	494f      	ldr	r1, [pc, #316]	; (801aaf4 <tcp_input+0x74c>)
 801a9b6:	4850      	ldr	r0, [pc, #320]	; (801aaf8 <tcp_input+0x750>)
 801a9b8:	f005 fba6 	bl	8020108 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801a9bc:	69fb      	ldr	r3, [r7, #28]
 801a9be:	8b5b      	ldrh	r3, [r3, #26]
 801a9c0:	f003 0310 	and.w	r3, r3, #16
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d008      	beq.n	801a9da <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801a9c8:	4b42      	ldr	r3, [pc, #264]	; (801aad4 <tcp_input+0x72c>)
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f7fd f9ff 	bl	8017dd0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801a9d2:	69f8      	ldr	r0, [r7, #28]
 801a9d4:	f7fe f9ce 	bl	8018d74 <tcp_abort>
            goto aborted;
 801a9d8:	e091      	b.n	801aafe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801a9da:	69fb      	ldr	r3, [r7, #28]
 801a9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d00c      	beq.n	801a9fe <tcp_input+0x656>
 801a9e4:	69fb      	ldr	r3, [r7, #28]
 801a9e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a9ea:	69fb      	ldr	r3, [r7, #28]
 801a9ec:	6918      	ldr	r0, [r3, #16]
 801a9ee:	4b39      	ldr	r3, [pc, #228]	; (801aad4 <tcp_input+0x72c>)
 801a9f0:	681a      	ldr	r2, [r3, #0]
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	69f9      	ldr	r1, [r7, #28]
 801a9f6:	47a0      	blx	r4
 801a9f8:	4603      	mov	r3, r0
 801a9fa:	74fb      	strb	r3, [r7, #19]
 801a9fc:	e008      	b.n	801aa10 <tcp_input+0x668>
 801a9fe:	4b35      	ldr	r3, [pc, #212]	; (801aad4 <tcp_input+0x72c>)
 801aa00:	681a      	ldr	r2, [r3, #0]
 801aa02:	2300      	movs	r3, #0
 801aa04:	69f9      	ldr	r1, [r7, #28]
 801aa06:	2000      	movs	r0, #0
 801aa08:	f7ff f890 	bl	8019b2c <tcp_recv_null>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801aa10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801aa14:	f113 0f0d 	cmn.w	r3, #13
 801aa18:	d054      	beq.n	801aac4 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801aa1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d003      	beq.n	801aa2a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801aa22:	4b2c      	ldr	r3, [pc, #176]	; (801aad4 <tcp_input+0x72c>)
 801aa24:	681a      	ldr	r2, [r3, #0]
 801aa26:	69fb      	ldr	r3, [r7, #28]
 801aa28:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801aa2a:	4b2b      	ldr	r3, [pc, #172]	; (801aad8 <tcp_input+0x730>)
 801aa2c:	781b      	ldrb	r3, [r3, #0]
 801aa2e:	f003 0320 	and.w	r3, r3, #32
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d031      	beq.n	801aa9a <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 801aa36:	69fb      	ldr	r3, [r7, #28]
 801aa38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d009      	beq.n	801aa52 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801aa3e:	69fb      	ldr	r3, [r7, #28]
 801aa40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa42:	7b5a      	ldrb	r2, [r3, #13]
 801aa44:	69fb      	ldr	r3, [r7, #28]
 801aa46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa48:	f042 0220 	orr.w	r2, r2, #32
 801aa4c:	b2d2      	uxtb	r2, r2
 801aa4e:	735a      	strb	r2, [r3, #13]
 801aa50:	e023      	b.n	801aa9a <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801aa52:	69fb      	ldr	r3, [r7, #28]
 801aa54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa56:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801aa5a:	4293      	cmp	r3, r2
 801aa5c:	d005      	beq.n	801aa6a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801aa5e:	69fb      	ldr	r3, [r7, #28]
 801aa60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa62:	3301      	adds	r3, #1
 801aa64:	b29a      	uxth	r2, r3
 801aa66:	69fb      	ldr	r3, [r7, #28]
 801aa68:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801aa6a:	69fb      	ldr	r3, [r7, #28]
 801aa6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d00b      	beq.n	801aa8c <tcp_input+0x6e4>
 801aa74:	69fb      	ldr	r3, [r7, #28]
 801aa76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801aa7a:	69fb      	ldr	r3, [r7, #28]
 801aa7c:	6918      	ldr	r0, [r3, #16]
 801aa7e:	2300      	movs	r3, #0
 801aa80:	2200      	movs	r2, #0
 801aa82:	69f9      	ldr	r1, [r7, #28]
 801aa84:	47a0      	blx	r4
 801aa86:	4603      	mov	r3, r0
 801aa88:	74fb      	strb	r3, [r7, #19]
 801aa8a:	e001      	b.n	801aa90 <tcp_input+0x6e8>
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801aa90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801aa94:	f113 0f0d 	cmn.w	r3, #13
 801aa98:	d016      	beq.n	801aac8 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801aa9a:	4b13      	ldr	r3, [pc, #76]	; (801aae8 <tcp_input+0x740>)
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801aaa0:	69f8      	ldr	r0, [r7, #28]
 801aaa2:	f000 f88d 	bl	801abc0 <tcp_input_delayed_close>
 801aaa6:	4603      	mov	r3, r0
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d127      	bne.n	801aafc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801aaac:	69f8      	ldr	r0, [r7, #28]
 801aaae:	f002 ff1f 	bl	801d8f0 <tcp_output>
 801aab2:	e024      	b.n	801aafe <tcp_input+0x756>
        goto aborted;
 801aab4:	bf00      	nop
 801aab6:	e022      	b.n	801aafe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801aab8:	bf00      	nop
 801aaba:	e020      	b.n	801aafe <tcp_input+0x756>
              goto aborted;
 801aabc:	bf00      	nop
 801aabe:	e01e      	b.n	801aafe <tcp_input+0x756>
          goto aborted;
 801aac0:	bf00      	nop
 801aac2:	e01c      	b.n	801aafe <tcp_input+0x756>
            goto aborted;
 801aac4:	bf00      	nop
 801aac6:	e01a      	b.n	801aafe <tcp_input+0x756>
              goto aborted;
 801aac8:	bf00      	nop
 801aaca:	e018      	b.n	801aafe <tcp_input+0x756>
 801aacc:	24010030 	.word	0x24010030
 801aad0:	24010040 	.word	0x24010040
 801aad4:	24010060 	.word	0x24010060
 801aad8:	2401005d 	.word	0x2401005d
 801aadc:	24010058 	.word	0x24010058
 801aae0:	2401005c 	.word	0x2401005c
 801aae4:	2401005a 	.word	0x2401005a
 801aae8:	24010064 	.word	0x24010064
 801aaec:	24010024 	.word	0x24010024
 801aaf0:	08023744 	.word	0x08023744
 801aaf4:	0802393c 	.word	0x0802393c
 801aaf8:	080237d4 	.word	0x080237d4
          goto aborted;
 801aafc:	bf00      	nop
    tcp_input_pcb = NULL;
 801aafe:	4b27      	ldr	r3, [pc, #156]	; (801ab9c <tcp_input+0x7f4>)
 801ab00:	2200      	movs	r2, #0
 801ab02:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801ab04:	4b26      	ldr	r3, [pc, #152]	; (801aba0 <tcp_input+0x7f8>)
 801ab06:	2200      	movs	r2, #0
 801ab08:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801ab0a:	4b26      	ldr	r3, [pc, #152]	; (801aba4 <tcp_input+0x7fc>)
 801ab0c:	685b      	ldr	r3, [r3, #4]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d03f      	beq.n	801ab92 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801ab12:	4b24      	ldr	r3, [pc, #144]	; (801aba4 <tcp_input+0x7fc>)
 801ab14:	685b      	ldr	r3, [r3, #4]
 801ab16:	4618      	mov	r0, r3
 801ab18:	f7fd f95a 	bl	8017dd0 <pbuf_free>
      inseg.p = NULL;
 801ab1c:	4b21      	ldr	r3, [pc, #132]	; (801aba4 <tcp_input+0x7fc>)
 801ab1e:	2200      	movs	r2, #0
 801ab20:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801ab22:	e036      	b.n	801ab92 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801ab24:	4b20      	ldr	r3, [pc, #128]	; (801aba8 <tcp_input+0x800>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	899b      	ldrh	r3, [r3, #12]
 801ab2a:	b29b      	uxth	r3, r3
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	f7f9 f97b 	bl	8013e28 <lwip_htons>
 801ab32:	4603      	mov	r3, r0
 801ab34:	b2db      	uxtb	r3, r3
 801ab36:	f003 0304 	and.w	r3, r3, #4
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d118      	bne.n	801ab70 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ab3e:	4b1b      	ldr	r3, [pc, #108]	; (801abac <tcp_input+0x804>)
 801ab40:	6819      	ldr	r1, [r3, #0]
 801ab42:	4b1b      	ldr	r3, [pc, #108]	; (801abb0 <tcp_input+0x808>)
 801ab44:	881b      	ldrh	r3, [r3, #0]
 801ab46:	461a      	mov	r2, r3
 801ab48:	4b1a      	ldr	r3, [pc, #104]	; (801abb4 <tcp_input+0x80c>)
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ab4e:	4b16      	ldr	r3, [pc, #88]	; (801aba8 <tcp_input+0x800>)
 801ab50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ab52:	885b      	ldrh	r3, [r3, #2]
 801ab54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ab56:	4a14      	ldr	r2, [pc, #80]	; (801aba8 <tcp_input+0x800>)
 801ab58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ab5a:	8812      	ldrh	r2, [r2, #0]
 801ab5c:	b292      	uxth	r2, r2
 801ab5e:	9202      	str	r2, [sp, #8]
 801ab60:	9301      	str	r3, [sp, #4]
 801ab62:	4b15      	ldr	r3, [pc, #84]	; (801abb8 <tcp_input+0x810>)
 801ab64:	9300      	str	r3, [sp, #0]
 801ab66:	4b15      	ldr	r3, [pc, #84]	; (801abbc <tcp_input+0x814>)
 801ab68:	4602      	mov	r2, r0
 801ab6a:	2000      	movs	r0, #0
 801ab6c:	f003 fc74 	bl	801e458 <tcp_rst>
    pbuf_free(p);
 801ab70:	6878      	ldr	r0, [r7, #4]
 801ab72:	f7fd f92d 	bl	8017dd0 <pbuf_free>
  return;
 801ab76:	e00c      	b.n	801ab92 <tcp_input+0x7ea>
    goto dropped;
 801ab78:	bf00      	nop
 801ab7a:	e006      	b.n	801ab8a <tcp_input+0x7e2>
    goto dropped;
 801ab7c:	bf00      	nop
 801ab7e:	e004      	b.n	801ab8a <tcp_input+0x7e2>
    goto dropped;
 801ab80:	bf00      	nop
 801ab82:	e002      	b.n	801ab8a <tcp_input+0x7e2>
      goto dropped;
 801ab84:	bf00      	nop
 801ab86:	e000      	b.n	801ab8a <tcp_input+0x7e2>
      goto dropped;
 801ab88:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ab8a:	6878      	ldr	r0, [r7, #4]
 801ab8c:	f7fd f920 	bl	8017dd0 <pbuf_free>
 801ab90:	e000      	b.n	801ab94 <tcp_input+0x7ec>
  return;
 801ab92:	bf00      	nop
}
 801ab94:	3724      	adds	r7, #36	; 0x24
 801ab96:	46bd      	mov	sp, r7
 801ab98:	bd90      	pop	{r4, r7, pc}
 801ab9a:	bf00      	nop
 801ab9c:	24010064 	.word	0x24010064
 801aba0:	24010060 	.word	0x24010060
 801aba4:	24010030 	.word	0x24010030
 801aba8:	24010040 	.word	0x24010040
 801abac:	24010054 	.word	0x24010054
 801abb0:	2401005a 	.word	0x2401005a
 801abb4:	24010050 	.word	0x24010050
 801abb8:	24009558 	.word	0x24009558
 801abbc:	2400955c 	.word	0x2400955c

0801abc0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b082      	sub	sp, #8
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d106      	bne.n	801abdc <tcp_input_delayed_close+0x1c>
 801abce:	4b17      	ldr	r3, [pc, #92]	; (801ac2c <tcp_input_delayed_close+0x6c>)
 801abd0:	f240 225a 	movw	r2, #602	; 0x25a
 801abd4:	4916      	ldr	r1, [pc, #88]	; (801ac30 <tcp_input_delayed_close+0x70>)
 801abd6:	4817      	ldr	r0, [pc, #92]	; (801ac34 <tcp_input_delayed_close+0x74>)
 801abd8:	f005 fa96 	bl	8020108 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801abdc:	4b16      	ldr	r3, [pc, #88]	; (801ac38 <tcp_input_delayed_close+0x78>)
 801abde:	781b      	ldrb	r3, [r3, #0]
 801abe0:	f003 0310 	and.w	r3, r3, #16
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d01c      	beq.n	801ac22 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	8b5b      	ldrh	r3, [r3, #26]
 801abec:	f003 0310 	and.w	r3, r3, #16
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d10d      	bne.n	801ac10 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d008      	beq.n	801ac10 <tcp_input_delayed_close+0x50>
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ac04:	687a      	ldr	r2, [r7, #4]
 801ac06:	6912      	ldr	r2, [r2, #16]
 801ac08:	f06f 010e 	mvn.w	r1, #14
 801ac0c:	4610      	mov	r0, r2
 801ac0e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ac10:	6879      	ldr	r1, [r7, #4]
 801ac12:	480a      	ldr	r0, [pc, #40]	; (801ac3c <tcp_input_delayed_close+0x7c>)
 801ac14:	f7ff fa50 	bl	801a0b8 <tcp_pcb_remove>
    tcp_free(pcb);
 801ac18:	6878      	ldr	r0, [r7, #4]
 801ac1a:	f7fd fd67 	bl	80186ec <tcp_free>
    return 1;
 801ac1e:	2301      	movs	r3, #1
 801ac20:	e000      	b.n	801ac24 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801ac22:	2300      	movs	r3, #0
}
 801ac24:	4618      	mov	r0, r3
 801ac26:	3708      	adds	r7, #8
 801ac28:	46bd      	mov	sp, r7
 801ac2a:	bd80      	pop	{r7, pc}
 801ac2c:	08023744 	.word	0x08023744
 801ac30:	08023958 	.word	0x08023958
 801ac34:	080237d4 	.word	0x080237d4
 801ac38:	2401005d 	.word	0x2401005d
 801ac3c:	24010024 	.word	0x24010024

0801ac40 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801ac40:	b590      	push	{r4, r7, lr}
 801ac42:	b08b      	sub	sp, #44	; 0x2c
 801ac44:	af04      	add	r7, sp, #16
 801ac46:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801ac48:	4b6f      	ldr	r3, [pc, #444]	; (801ae08 <tcp_listen_input+0x1c8>)
 801ac4a:	781b      	ldrb	r3, [r3, #0]
 801ac4c:	f003 0304 	and.w	r3, r3, #4
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	f040 80d2 	bne.w	801adfa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d106      	bne.n	801ac6a <tcp_listen_input+0x2a>
 801ac5c:	4b6b      	ldr	r3, [pc, #428]	; (801ae0c <tcp_listen_input+0x1cc>)
 801ac5e:	f240 2281 	movw	r2, #641	; 0x281
 801ac62:	496b      	ldr	r1, [pc, #428]	; (801ae10 <tcp_listen_input+0x1d0>)
 801ac64:	486b      	ldr	r0, [pc, #428]	; (801ae14 <tcp_listen_input+0x1d4>)
 801ac66:	f005 fa4f 	bl	8020108 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801ac6a:	4b67      	ldr	r3, [pc, #412]	; (801ae08 <tcp_listen_input+0x1c8>)
 801ac6c:	781b      	ldrb	r3, [r3, #0]
 801ac6e:	f003 0310 	and.w	r3, r3, #16
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d019      	beq.n	801acaa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ac76:	4b68      	ldr	r3, [pc, #416]	; (801ae18 <tcp_listen_input+0x1d8>)
 801ac78:	6819      	ldr	r1, [r3, #0]
 801ac7a:	4b68      	ldr	r3, [pc, #416]	; (801ae1c <tcp_listen_input+0x1dc>)
 801ac7c:	881b      	ldrh	r3, [r3, #0]
 801ac7e:	461a      	mov	r2, r3
 801ac80:	4b67      	ldr	r3, [pc, #412]	; (801ae20 <tcp_listen_input+0x1e0>)
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ac86:	4b67      	ldr	r3, [pc, #412]	; (801ae24 <tcp_listen_input+0x1e4>)
 801ac88:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ac8a:	885b      	ldrh	r3, [r3, #2]
 801ac8c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ac8e:	4a65      	ldr	r2, [pc, #404]	; (801ae24 <tcp_listen_input+0x1e4>)
 801ac90:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ac92:	8812      	ldrh	r2, [r2, #0]
 801ac94:	b292      	uxth	r2, r2
 801ac96:	9202      	str	r2, [sp, #8]
 801ac98:	9301      	str	r3, [sp, #4]
 801ac9a:	4b63      	ldr	r3, [pc, #396]	; (801ae28 <tcp_listen_input+0x1e8>)
 801ac9c:	9300      	str	r3, [sp, #0]
 801ac9e:	4b63      	ldr	r3, [pc, #396]	; (801ae2c <tcp_listen_input+0x1ec>)
 801aca0:	4602      	mov	r2, r0
 801aca2:	6878      	ldr	r0, [r7, #4]
 801aca4:	f003 fbd8 	bl	801e458 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801aca8:	e0a9      	b.n	801adfe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801acaa:	4b57      	ldr	r3, [pc, #348]	; (801ae08 <tcp_listen_input+0x1c8>)
 801acac:	781b      	ldrb	r3, [r3, #0]
 801acae:	f003 0302 	and.w	r3, r3, #2
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	f000 80a3 	beq.w	801adfe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	7d5b      	ldrb	r3, [r3, #21]
 801acbc:	4618      	mov	r0, r3
 801acbe:	f7ff f859 	bl	8019d74 <tcp_alloc>
 801acc2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801acc4:	697b      	ldr	r3, [r7, #20]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d111      	bne.n	801acee <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	699b      	ldr	r3, [r3, #24]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d00a      	beq.n	801ace8 <tcp_listen_input+0xa8>
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	699b      	ldr	r3, [r3, #24]
 801acd6:	687a      	ldr	r2, [r7, #4]
 801acd8:	6910      	ldr	r0, [r2, #16]
 801acda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801acde:	2100      	movs	r1, #0
 801ace0:	4798      	blx	r3
 801ace2:	4603      	mov	r3, r0
 801ace4:	73bb      	strb	r3, [r7, #14]
      return;
 801ace6:	e08b      	b.n	801ae00 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801ace8:	23f0      	movs	r3, #240	; 0xf0
 801acea:	73bb      	strb	r3, [r7, #14]
      return;
 801acec:	e088      	b.n	801ae00 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801acee:	4b50      	ldr	r3, [pc, #320]	; (801ae30 <tcp_listen_input+0x1f0>)
 801acf0:	695a      	ldr	r2, [r3, #20]
 801acf2:	697b      	ldr	r3, [r7, #20]
 801acf4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801acf6:	4b4e      	ldr	r3, [pc, #312]	; (801ae30 <tcp_listen_input+0x1f0>)
 801acf8:	691a      	ldr	r2, [r3, #16]
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	8ada      	ldrh	r2, [r3, #22]
 801ad02:	697b      	ldr	r3, [r7, #20]
 801ad04:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801ad06:	4b47      	ldr	r3, [pc, #284]	; (801ae24 <tcp_listen_input+0x1e4>)
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	881b      	ldrh	r3, [r3, #0]
 801ad0c:	b29a      	uxth	r2, r3
 801ad0e:	697b      	ldr	r3, [r7, #20]
 801ad10:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801ad12:	697b      	ldr	r3, [r7, #20]
 801ad14:	2203      	movs	r2, #3
 801ad16:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801ad18:	4b41      	ldr	r3, [pc, #260]	; (801ae20 <tcp_listen_input+0x1e0>)
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	1c5a      	adds	r2, r3, #1
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801ad22:	697b      	ldr	r3, [r7, #20]
 801ad24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ad26:	697b      	ldr	r3, [r7, #20]
 801ad28:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801ad2a:	6978      	ldr	r0, [r7, #20]
 801ad2c:	f7ff fa58 	bl	801a1e0 <tcp_next_iss>
 801ad30:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801ad32:	697b      	ldr	r3, [r7, #20]
 801ad34:	693a      	ldr	r2, [r7, #16]
 801ad36:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801ad38:	697b      	ldr	r3, [r7, #20]
 801ad3a:	693a      	ldr	r2, [r7, #16]
 801ad3c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801ad3e:	697b      	ldr	r3, [r7, #20]
 801ad40:	693a      	ldr	r2, [r7, #16]
 801ad42:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801ad44:	697b      	ldr	r3, [r7, #20]
 801ad46:	693a      	ldr	r2, [r7, #16]
 801ad48:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801ad4a:	4b35      	ldr	r3, [pc, #212]	; (801ae20 <tcp_listen_input+0x1e0>)
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	1e5a      	subs	r2, r3, #1
 801ad50:	697b      	ldr	r3, [r7, #20]
 801ad52:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	691a      	ldr	r2, [r3, #16]
 801ad58:	697b      	ldr	r3, [r7, #20]
 801ad5a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801ad5c:	697b      	ldr	r3, [r7, #20]
 801ad5e:	687a      	ldr	r2, [r7, #4]
 801ad60:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	7a5b      	ldrb	r3, [r3, #9]
 801ad66:	f003 030c 	and.w	r3, r3, #12
 801ad6a:	b2da      	uxtb	r2, r3
 801ad6c:	697b      	ldr	r3, [r7, #20]
 801ad6e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	7a1a      	ldrb	r2, [r3, #8]
 801ad74:	697b      	ldr	r3, [r7, #20]
 801ad76:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801ad78:	4b2e      	ldr	r3, [pc, #184]	; (801ae34 <tcp_listen_input+0x1f4>)
 801ad7a:	681a      	ldr	r2, [r3, #0]
 801ad7c:	697b      	ldr	r3, [r7, #20]
 801ad7e:	60da      	str	r2, [r3, #12]
 801ad80:	4a2c      	ldr	r2, [pc, #176]	; (801ae34 <tcp_listen_input+0x1f4>)
 801ad82:	697b      	ldr	r3, [r7, #20]
 801ad84:	6013      	str	r3, [r2, #0]
 801ad86:	f003 fee1 	bl	801eb4c <tcp_timer_needed>
 801ad8a:	4b2b      	ldr	r3, [pc, #172]	; (801ae38 <tcp_listen_input+0x1f8>)
 801ad8c:	2201      	movs	r2, #1
 801ad8e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801ad90:	6978      	ldr	r0, [r7, #20]
 801ad92:	f001 fd8f 	bl	801c8b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801ad96:	4b23      	ldr	r3, [pc, #140]	; (801ae24 <tcp_listen_input+0x1e4>)
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	89db      	ldrh	r3, [r3, #14]
 801ad9c:	b29a      	uxth	r2, r3
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801ada4:	697b      	ldr	r3, [r7, #20]
 801ada6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801adaa:	697b      	ldr	r3, [r7, #20]
 801adac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801adb0:	697b      	ldr	r3, [r7, #20]
 801adb2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801adb4:	697b      	ldr	r3, [r7, #20]
 801adb6:	3304      	adds	r3, #4
 801adb8:	4618      	mov	r0, r3
 801adba:	f7fa fb0d 	bl	80153d8 <ip4_route>
 801adbe:	4601      	mov	r1, r0
 801adc0:	697b      	ldr	r3, [r7, #20]
 801adc2:	3304      	adds	r3, #4
 801adc4:	461a      	mov	r2, r3
 801adc6:	4620      	mov	r0, r4
 801adc8:	f7ff fa30 	bl	801a22c <tcp_eff_send_mss_netif>
 801adcc:	4603      	mov	r3, r0
 801adce:	461a      	mov	r2, r3
 801add0:	697b      	ldr	r3, [r7, #20]
 801add2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801add4:	2112      	movs	r1, #18
 801add6:	6978      	ldr	r0, [r7, #20]
 801add8:	f002 fc9c 	bl	801d714 <tcp_enqueue_flags>
 801addc:	4603      	mov	r3, r0
 801adde:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801ade0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d004      	beq.n	801adf2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801ade8:	2100      	movs	r1, #0
 801adea:	6978      	ldr	r0, [r7, #20]
 801adec:	f7fd ff04 	bl	8018bf8 <tcp_abandon>
      return;
 801adf0:	e006      	b.n	801ae00 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801adf2:	6978      	ldr	r0, [r7, #20]
 801adf4:	f002 fd7c 	bl	801d8f0 <tcp_output>
  return;
 801adf8:	e001      	b.n	801adfe <tcp_listen_input+0x1be>
    return;
 801adfa:	bf00      	nop
 801adfc:	e000      	b.n	801ae00 <tcp_listen_input+0x1c0>
  return;
 801adfe:	bf00      	nop
}
 801ae00:	371c      	adds	r7, #28
 801ae02:	46bd      	mov	sp, r7
 801ae04:	bd90      	pop	{r4, r7, pc}
 801ae06:	bf00      	nop
 801ae08:	2401005c 	.word	0x2401005c
 801ae0c:	08023744 	.word	0x08023744
 801ae10:	08023980 	.word	0x08023980
 801ae14:	080237d4 	.word	0x080237d4
 801ae18:	24010054 	.word	0x24010054
 801ae1c:	2401005a 	.word	0x2401005a
 801ae20:	24010050 	.word	0x24010050
 801ae24:	24010040 	.word	0x24010040
 801ae28:	24009558 	.word	0x24009558
 801ae2c:	2400955c 	.word	0x2400955c
 801ae30:	24009548 	.word	0x24009548
 801ae34:	24010024 	.word	0x24010024
 801ae38:	2401002c 	.word	0x2401002c

0801ae3c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b086      	sub	sp, #24
 801ae40:	af04      	add	r7, sp, #16
 801ae42:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801ae44:	4b2f      	ldr	r3, [pc, #188]	; (801af04 <tcp_timewait_input+0xc8>)
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	f003 0304 	and.w	r3, r3, #4
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d153      	bne.n	801aef8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d106      	bne.n	801ae64 <tcp_timewait_input+0x28>
 801ae56:	4b2c      	ldr	r3, [pc, #176]	; (801af08 <tcp_timewait_input+0xcc>)
 801ae58:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ae5c:	492b      	ldr	r1, [pc, #172]	; (801af0c <tcp_timewait_input+0xd0>)
 801ae5e:	482c      	ldr	r0, [pc, #176]	; (801af10 <tcp_timewait_input+0xd4>)
 801ae60:	f005 f952 	bl	8020108 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801ae64:	4b27      	ldr	r3, [pc, #156]	; (801af04 <tcp_timewait_input+0xc8>)
 801ae66:	781b      	ldrb	r3, [r3, #0]
 801ae68:	f003 0302 	and.w	r3, r3, #2
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d02a      	beq.n	801aec6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801ae70:	4b28      	ldr	r3, [pc, #160]	; (801af14 <tcp_timewait_input+0xd8>)
 801ae72:	681a      	ldr	r2, [r3, #0]
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae78:	1ad3      	subs	r3, r2, r3
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	db2d      	blt.n	801aeda <tcp_timewait_input+0x9e>
 801ae7e:	4b25      	ldr	r3, [pc, #148]	; (801af14 <tcp_timewait_input+0xd8>)
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae86:	6879      	ldr	r1, [r7, #4]
 801ae88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ae8a:	440b      	add	r3, r1
 801ae8c:	1ad3      	subs	r3, r2, r3
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	dc23      	bgt.n	801aeda <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ae92:	4b21      	ldr	r3, [pc, #132]	; (801af18 <tcp_timewait_input+0xdc>)
 801ae94:	6819      	ldr	r1, [r3, #0]
 801ae96:	4b21      	ldr	r3, [pc, #132]	; (801af1c <tcp_timewait_input+0xe0>)
 801ae98:	881b      	ldrh	r3, [r3, #0]
 801ae9a:	461a      	mov	r2, r3
 801ae9c:	4b1d      	ldr	r3, [pc, #116]	; (801af14 <tcp_timewait_input+0xd8>)
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aea2:	4b1f      	ldr	r3, [pc, #124]	; (801af20 <tcp_timewait_input+0xe4>)
 801aea4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aea6:	885b      	ldrh	r3, [r3, #2]
 801aea8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aeaa:	4a1d      	ldr	r2, [pc, #116]	; (801af20 <tcp_timewait_input+0xe4>)
 801aeac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aeae:	8812      	ldrh	r2, [r2, #0]
 801aeb0:	b292      	uxth	r2, r2
 801aeb2:	9202      	str	r2, [sp, #8]
 801aeb4:	9301      	str	r3, [sp, #4]
 801aeb6:	4b1b      	ldr	r3, [pc, #108]	; (801af24 <tcp_timewait_input+0xe8>)
 801aeb8:	9300      	str	r3, [sp, #0]
 801aeba:	4b1b      	ldr	r3, [pc, #108]	; (801af28 <tcp_timewait_input+0xec>)
 801aebc:	4602      	mov	r2, r0
 801aebe:	6878      	ldr	r0, [r7, #4]
 801aec0:	f003 faca 	bl	801e458 <tcp_rst>
      return;
 801aec4:	e01b      	b.n	801aefe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801aec6:	4b0f      	ldr	r3, [pc, #60]	; (801af04 <tcp_timewait_input+0xc8>)
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	f003 0301 	and.w	r3, r3, #1
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d003      	beq.n	801aeda <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801aed2:	4b16      	ldr	r3, [pc, #88]	; (801af2c <tcp_timewait_input+0xf0>)
 801aed4:	681a      	ldr	r2, [r3, #0]
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801aeda:	4b10      	ldr	r3, [pc, #64]	; (801af1c <tcp_timewait_input+0xe0>)
 801aedc:	881b      	ldrh	r3, [r3, #0]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d00c      	beq.n	801aefc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	8b5b      	ldrh	r3, [r3, #26]
 801aee6:	f043 0302 	orr.w	r3, r3, #2
 801aeea:	b29a      	uxth	r2, r3
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801aef0:	6878      	ldr	r0, [r7, #4]
 801aef2:	f002 fcfd 	bl	801d8f0 <tcp_output>
  }
  return;
 801aef6:	e001      	b.n	801aefc <tcp_timewait_input+0xc0>
    return;
 801aef8:	bf00      	nop
 801aefa:	e000      	b.n	801aefe <tcp_timewait_input+0xc2>
  return;
 801aefc:	bf00      	nop
}
 801aefe:	3708      	adds	r7, #8
 801af00:	46bd      	mov	sp, r7
 801af02:	bd80      	pop	{r7, pc}
 801af04:	2401005c 	.word	0x2401005c
 801af08:	08023744 	.word	0x08023744
 801af0c:	080239a0 	.word	0x080239a0
 801af10:	080237d4 	.word	0x080237d4
 801af14:	24010050 	.word	0x24010050
 801af18:	24010054 	.word	0x24010054
 801af1c:	2401005a 	.word	0x2401005a
 801af20:	24010040 	.word	0x24010040
 801af24:	24009558 	.word	0x24009558
 801af28:	2400955c 	.word	0x2400955c
 801af2c:	24010018 	.word	0x24010018

0801af30 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801af30:	b590      	push	{r4, r7, lr}
 801af32:	b08d      	sub	sp, #52	; 0x34
 801af34:	af04      	add	r7, sp, #16
 801af36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801af38:	2300      	movs	r3, #0
 801af3a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801af3c:	2300      	movs	r3, #0
 801af3e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d106      	bne.n	801af54 <tcp_process+0x24>
 801af46:	4b9d      	ldr	r3, [pc, #628]	; (801b1bc <tcp_process+0x28c>)
 801af48:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801af4c:	499c      	ldr	r1, [pc, #624]	; (801b1c0 <tcp_process+0x290>)
 801af4e:	489d      	ldr	r0, [pc, #628]	; (801b1c4 <tcp_process+0x294>)
 801af50:	f005 f8da 	bl	8020108 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801af54:	4b9c      	ldr	r3, [pc, #624]	; (801b1c8 <tcp_process+0x298>)
 801af56:	781b      	ldrb	r3, [r3, #0]
 801af58:	f003 0304 	and.w	r3, r3, #4
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d04e      	beq.n	801affe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	7d1b      	ldrb	r3, [r3, #20]
 801af64:	2b02      	cmp	r3, #2
 801af66:	d108      	bne.n	801af7a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801af6c:	4b97      	ldr	r3, [pc, #604]	; (801b1cc <tcp_process+0x29c>)
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	429a      	cmp	r2, r3
 801af72:	d123      	bne.n	801afbc <tcp_process+0x8c>
        acceptable = 1;
 801af74:	2301      	movs	r3, #1
 801af76:	76fb      	strb	r3, [r7, #27]
 801af78:	e020      	b.n	801afbc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801af7e:	4b94      	ldr	r3, [pc, #592]	; (801b1d0 <tcp_process+0x2a0>)
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	429a      	cmp	r2, r3
 801af84:	d102      	bne.n	801af8c <tcp_process+0x5c>
        acceptable = 1;
 801af86:	2301      	movs	r3, #1
 801af88:	76fb      	strb	r3, [r7, #27]
 801af8a:	e017      	b.n	801afbc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801af8c:	4b90      	ldr	r3, [pc, #576]	; (801b1d0 <tcp_process+0x2a0>)
 801af8e:	681a      	ldr	r2, [r3, #0]
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af94:	1ad3      	subs	r3, r2, r3
 801af96:	2b00      	cmp	r3, #0
 801af98:	db10      	blt.n	801afbc <tcp_process+0x8c>
 801af9a:	4b8d      	ldr	r3, [pc, #564]	; (801b1d0 <tcp_process+0x2a0>)
 801af9c:	681a      	ldr	r2, [r3, #0]
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afa2:	6879      	ldr	r1, [r7, #4]
 801afa4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801afa6:	440b      	add	r3, r1
 801afa8:	1ad3      	subs	r3, r2, r3
 801afaa:	2b00      	cmp	r3, #0
 801afac:	dc06      	bgt.n	801afbc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	8b5b      	ldrh	r3, [r3, #26]
 801afb2:	f043 0302 	orr.w	r3, r3, #2
 801afb6:	b29a      	uxth	r2, r3
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801afbc:	7efb      	ldrb	r3, [r7, #27]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d01b      	beq.n	801affa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	7d1b      	ldrb	r3, [r3, #20]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d106      	bne.n	801afd8 <tcp_process+0xa8>
 801afca:	4b7c      	ldr	r3, [pc, #496]	; (801b1bc <tcp_process+0x28c>)
 801afcc:	f44f 724e 	mov.w	r2, #824	; 0x338
 801afd0:	4980      	ldr	r1, [pc, #512]	; (801b1d4 <tcp_process+0x2a4>)
 801afd2:	487c      	ldr	r0, [pc, #496]	; (801b1c4 <tcp_process+0x294>)
 801afd4:	f005 f898 	bl	8020108 <iprintf>
      recv_flags |= TF_RESET;
 801afd8:	4b7f      	ldr	r3, [pc, #508]	; (801b1d8 <tcp_process+0x2a8>)
 801afda:	781b      	ldrb	r3, [r3, #0]
 801afdc:	f043 0308 	orr.w	r3, r3, #8
 801afe0:	b2da      	uxtb	r2, r3
 801afe2:	4b7d      	ldr	r3, [pc, #500]	; (801b1d8 <tcp_process+0x2a8>)
 801afe4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	8b5b      	ldrh	r3, [r3, #26]
 801afea:	f023 0301 	bic.w	r3, r3, #1
 801afee:	b29a      	uxth	r2, r3
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801aff4:	f06f 030d 	mvn.w	r3, #13
 801aff8:	e37a      	b.n	801b6f0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801affa:	2300      	movs	r3, #0
 801affc:	e378      	b.n	801b6f0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801affe:	4b72      	ldr	r3, [pc, #456]	; (801b1c8 <tcp_process+0x298>)
 801b000:	781b      	ldrb	r3, [r3, #0]
 801b002:	f003 0302 	and.w	r3, r3, #2
 801b006:	2b00      	cmp	r3, #0
 801b008:	d010      	beq.n	801b02c <tcp_process+0xfc>
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	7d1b      	ldrb	r3, [r3, #20]
 801b00e:	2b02      	cmp	r3, #2
 801b010:	d00c      	beq.n	801b02c <tcp_process+0xfc>
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	7d1b      	ldrb	r3, [r3, #20]
 801b016:	2b03      	cmp	r3, #3
 801b018:	d008      	beq.n	801b02c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	8b5b      	ldrh	r3, [r3, #26]
 801b01e:	f043 0302 	orr.w	r3, r3, #2
 801b022:	b29a      	uxth	r2, r3
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801b028:	2300      	movs	r3, #0
 801b02a:	e361      	b.n	801b6f0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	8b5b      	ldrh	r3, [r3, #26]
 801b030:	f003 0310 	and.w	r3, r3, #16
 801b034:	2b00      	cmp	r3, #0
 801b036:	d103      	bne.n	801b040 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801b038:	4b68      	ldr	r3, [pc, #416]	; (801b1dc <tcp_process+0x2ac>)
 801b03a:	681a      	ldr	r2, [r3, #0]
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	2200      	movs	r2, #0
 801b044:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2200      	movs	r2, #0
 801b04c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801b050:	6878      	ldr	r0, [r7, #4]
 801b052:	f001 fc2f 	bl	801c8b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	7d1b      	ldrb	r3, [r3, #20]
 801b05a:	3b02      	subs	r3, #2
 801b05c:	2b07      	cmp	r3, #7
 801b05e:	f200 8337 	bhi.w	801b6d0 <tcp_process+0x7a0>
 801b062:	a201      	add	r2, pc, #4	; (adr r2, 801b068 <tcp_process+0x138>)
 801b064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b068:	0801b089 	.word	0x0801b089
 801b06c:	0801b2b9 	.word	0x0801b2b9
 801b070:	0801b431 	.word	0x0801b431
 801b074:	0801b45b 	.word	0x0801b45b
 801b078:	0801b57f 	.word	0x0801b57f
 801b07c:	0801b431 	.word	0x0801b431
 801b080:	0801b60b 	.word	0x0801b60b
 801b084:	0801b69b 	.word	0x0801b69b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801b088:	4b4f      	ldr	r3, [pc, #316]	; (801b1c8 <tcp_process+0x298>)
 801b08a:	781b      	ldrb	r3, [r3, #0]
 801b08c:	f003 0310 	and.w	r3, r3, #16
 801b090:	2b00      	cmp	r3, #0
 801b092:	f000 80e4 	beq.w	801b25e <tcp_process+0x32e>
 801b096:	4b4c      	ldr	r3, [pc, #304]	; (801b1c8 <tcp_process+0x298>)
 801b098:	781b      	ldrb	r3, [r3, #0]
 801b09a:	f003 0302 	and.w	r3, r3, #2
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f000 80dd 	beq.w	801b25e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b0a8:	1c5a      	adds	r2, r3, #1
 801b0aa:	4b48      	ldr	r3, [pc, #288]	; (801b1cc <tcp_process+0x29c>)
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	429a      	cmp	r2, r3
 801b0b0:	f040 80d5 	bne.w	801b25e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801b0b4:	4b46      	ldr	r3, [pc, #280]	; (801b1d0 <tcp_process+0x2a0>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	1c5a      	adds	r2, r3, #1
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801b0c6:	4b41      	ldr	r3, [pc, #260]	; (801b1cc <tcp_process+0x29c>)
 801b0c8:	681a      	ldr	r2, [r3, #0]
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801b0ce:	4b44      	ldr	r3, [pc, #272]	; (801b1e0 <tcp_process+0x2b0>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	89db      	ldrh	r3, [r3, #14]
 801b0d4:	b29a      	uxth	r2, r3
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801b0e8:	4b39      	ldr	r3, [pc, #228]	; (801b1d0 <tcp_process+0x2a0>)
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	1e5a      	subs	r2, r3, #1
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	2204      	movs	r2, #4
 801b0f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	3304      	adds	r3, #4
 801b100:	4618      	mov	r0, r3
 801b102:	f7fa f969 	bl	80153d8 <ip4_route>
 801b106:	4601      	mov	r1, r0
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	3304      	adds	r3, #4
 801b10c:	461a      	mov	r2, r3
 801b10e:	4620      	mov	r0, r4
 801b110:	f7ff f88c 	bl	801a22c <tcp_eff_send_mss_netif>
 801b114:	4603      	mov	r3, r0
 801b116:	461a      	mov	r2, r3
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b120:	009a      	lsls	r2, r3, #2
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b126:	005b      	lsls	r3, r3, #1
 801b128:	f241 111c 	movw	r1, #4380	; 0x111c
 801b12c:	428b      	cmp	r3, r1
 801b12e:	bf38      	it	cc
 801b130:	460b      	movcc	r3, r1
 801b132:	429a      	cmp	r2, r3
 801b134:	d204      	bcs.n	801b140 <tcp_process+0x210>
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b13a:	009b      	lsls	r3, r3, #2
 801b13c:	b29b      	uxth	r3, r3
 801b13e:	e00d      	b.n	801b15c <tcp_process+0x22c>
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b144:	005b      	lsls	r3, r3, #1
 801b146:	f241 121c 	movw	r2, #4380	; 0x111c
 801b14a:	4293      	cmp	r3, r2
 801b14c:	d904      	bls.n	801b158 <tcp_process+0x228>
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b152:	005b      	lsls	r3, r3, #1
 801b154:	b29b      	uxth	r3, r3
 801b156:	e001      	b.n	801b15c <tcp_process+0x22c>
 801b158:	f241 131c 	movw	r3, #4380	; 0x111c
 801b15c:	687a      	ldr	r2, [r7, #4]
 801b15e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d106      	bne.n	801b17a <tcp_process+0x24a>
 801b16c:	4b13      	ldr	r3, [pc, #76]	; (801b1bc <tcp_process+0x28c>)
 801b16e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801b172:	491c      	ldr	r1, [pc, #112]	; (801b1e4 <tcp_process+0x2b4>)
 801b174:	4813      	ldr	r0, [pc, #76]	; (801b1c4 <tcp_process+0x294>)
 801b176:	f004 ffc7 	bl	8020108 <iprintf>
        --pcb->snd_queuelen;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b180:	3b01      	subs	r3, #1
 801b182:	b29a      	uxth	r2, r3
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b18e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801b190:	69fb      	ldr	r3, [r7, #28]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d12a      	bne.n	801b1ec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b19a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801b19c:	69fb      	ldr	r3, [r7, #28]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d106      	bne.n	801b1b0 <tcp_process+0x280>
 801b1a2:	4b06      	ldr	r3, [pc, #24]	; (801b1bc <tcp_process+0x28c>)
 801b1a4:	f44f 725d 	mov.w	r2, #884	; 0x374
 801b1a8:	490f      	ldr	r1, [pc, #60]	; (801b1e8 <tcp_process+0x2b8>)
 801b1aa:	4806      	ldr	r0, [pc, #24]	; (801b1c4 <tcp_process+0x294>)
 801b1ac:	f004 ffac 	bl	8020108 <iprintf>
          pcb->unsent = rseg->next;
 801b1b0:	69fb      	ldr	r3, [r7, #28]
 801b1b2:	681a      	ldr	r2, [r3, #0]
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	66da      	str	r2, [r3, #108]	; 0x6c
 801b1b8:	e01c      	b.n	801b1f4 <tcp_process+0x2c4>
 801b1ba:	bf00      	nop
 801b1bc:	08023744 	.word	0x08023744
 801b1c0:	080239c0 	.word	0x080239c0
 801b1c4:	080237d4 	.word	0x080237d4
 801b1c8:	2401005c 	.word	0x2401005c
 801b1cc:	24010054 	.word	0x24010054
 801b1d0:	24010050 	.word	0x24010050
 801b1d4:	080239dc 	.word	0x080239dc
 801b1d8:	2401005d 	.word	0x2401005d
 801b1dc:	24010018 	.word	0x24010018
 801b1e0:	24010040 	.word	0x24010040
 801b1e4:	080239fc 	.word	0x080239fc
 801b1e8:	08023a14 	.word	0x08023a14
        } else {
          pcb->unacked = rseg->next;
 801b1ec:	69fb      	ldr	r3, [r7, #28]
 801b1ee:	681a      	ldr	r2, [r3, #0]
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801b1f4:	69f8      	ldr	r0, [r7, #28]
 801b1f6:	f7fe fc54 	bl	8019aa2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d104      	bne.n	801b20c <tcp_process+0x2dc>
          pcb->rtime = -1;
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b208:	861a      	strh	r2, [r3, #48]	; 0x30
 801b20a:	e006      	b.n	801b21a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	2200      	movs	r2, #0
 801b210:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	2200      	movs	r2, #0
 801b216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b220:	2b00      	cmp	r3, #0
 801b222:	d00a      	beq.n	801b23a <tcp_process+0x30a>
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b22a:	687a      	ldr	r2, [r7, #4]
 801b22c:	6910      	ldr	r0, [r2, #16]
 801b22e:	2200      	movs	r2, #0
 801b230:	6879      	ldr	r1, [r7, #4]
 801b232:	4798      	blx	r3
 801b234:	4603      	mov	r3, r0
 801b236:	76bb      	strb	r3, [r7, #26]
 801b238:	e001      	b.n	801b23e <tcp_process+0x30e>
 801b23a:	2300      	movs	r3, #0
 801b23c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801b23e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b242:	f113 0f0d 	cmn.w	r3, #13
 801b246:	d102      	bne.n	801b24e <tcp_process+0x31e>
          return ERR_ABRT;
 801b248:	f06f 030c 	mvn.w	r3, #12
 801b24c:	e250      	b.n	801b6f0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	8b5b      	ldrh	r3, [r3, #26]
 801b252:	f043 0302 	orr.w	r3, r3, #2
 801b256:	b29a      	uxth	r2, r3
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801b25c:	e23a      	b.n	801b6d4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801b25e:	4b98      	ldr	r3, [pc, #608]	; (801b4c0 <tcp_process+0x590>)
 801b260:	781b      	ldrb	r3, [r3, #0]
 801b262:	f003 0310 	and.w	r3, r3, #16
 801b266:	2b00      	cmp	r3, #0
 801b268:	f000 8234 	beq.w	801b6d4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b26c:	4b95      	ldr	r3, [pc, #596]	; (801b4c4 <tcp_process+0x594>)
 801b26e:	6819      	ldr	r1, [r3, #0]
 801b270:	4b95      	ldr	r3, [pc, #596]	; (801b4c8 <tcp_process+0x598>)
 801b272:	881b      	ldrh	r3, [r3, #0]
 801b274:	461a      	mov	r2, r3
 801b276:	4b95      	ldr	r3, [pc, #596]	; (801b4cc <tcp_process+0x59c>)
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b27c:	4b94      	ldr	r3, [pc, #592]	; (801b4d0 <tcp_process+0x5a0>)
 801b27e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b280:	885b      	ldrh	r3, [r3, #2]
 801b282:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b284:	4a92      	ldr	r2, [pc, #584]	; (801b4d0 <tcp_process+0x5a0>)
 801b286:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b288:	8812      	ldrh	r2, [r2, #0]
 801b28a:	b292      	uxth	r2, r2
 801b28c:	9202      	str	r2, [sp, #8]
 801b28e:	9301      	str	r3, [sp, #4]
 801b290:	4b90      	ldr	r3, [pc, #576]	; (801b4d4 <tcp_process+0x5a4>)
 801b292:	9300      	str	r3, [sp, #0]
 801b294:	4b90      	ldr	r3, [pc, #576]	; (801b4d8 <tcp_process+0x5a8>)
 801b296:	4602      	mov	r2, r0
 801b298:	6878      	ldr	r0, [r7, #4]
 801b29a:	f003 f8dd 	bl	801e458 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b2a4:	2b05      	cmp	r3, #5
 801b2a6:	f200 8215 	bhi.w	801b6d4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	2200      	movs	r2, #0
 801b2ae:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	f002 fea7 	bl	801e004 <tcp_rexmit_rto>
      break;
 801b2b6:	e20d      	b.n	801b6d4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801b2b8:	4b81      	ldr	r3, [pc, #516]	; (801b4c0 <tcp_process+0x590>)
 801b2ba:	781b      	ldrb	r3, [r3, #0]
 801b2bc:	f003 0310 	and.w	r3, r3, #16
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	f000 80a1 	beq.w	801b408 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b2c6:	4b7f      	ldr	r3, [pc, #508]	; (801b4c4 <tcp_process+0x594>)
 801b2c8:	681a      	ldr	r2, [r3, #0]
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2ce:	1ad3      	subs	r3, r2, r3
 801b2d0:	3b01      	subs	r3, #1
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	db7e      	blt.n	801b3d4 <tcp_process+0x4a4>
 801b2d6:	4b7b      	ldr	r3, [pc, #492]	; (801b4c4 <tcp_process+0x594>)
 801b2d8:	681a      	ldr	r2, [r3, #0]
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b2de:	1ad3      	subs	r3, r2, r3
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	dc77      	bgt.n	801b3d4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2204      	movs	r2, #4
 801b2e8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d102      	bne.n	801b2f8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801b2f2:	23fa      	movs	r3, #250	; 0xfa
 801b2f4:	76bb      	strb	r3, [r7, #26]
 801b2f6:	e01d      	b.n	801b334 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b2fc:	699b      	ldr	r3, [r3, #24]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d106      	bne.n	801b310 <tcp_process+0x3e0>
 801b302:	4b76      	ldr	r3, [pc, #472]	; (801b4dc <tcp_process+0x5ac>)
 801b304:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801b308:	4975      	ldr	r1, [pc, #468]	; (801b4e0 <tcp_process+0x5b0>)
 801b30a:	4876      	ldr	r0, [pc, #472]	; (801b4e4 <tcp_process+0x5b4>)
 801b30c:	f004 fefc 	bl	8020108 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b314:	699b      	ldr	r3, [r3, #24]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d00a      	beq.n	801b330 <tcp_process+0x400>
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b31e:	699b      	ldr	r3, [r3, #24]
 801b320:	687a      	ldr	r2, [r7, #4]
 801b322:	6910      	ldr	r0, [r2, #16]
 801b324:	2200      	movs	r2, #0
 801b326:	6879      	ldr	r1, [r7, #4]
 801b328:	4798      	blx	r3
 801b32a:	4603      	mov	r3, r0
 801b32c:	76bb      	strb	r3, [r7, #26]
 801b32e:	e001      	b.n	801b334 <tcp_process+0x404>
 801b330:	23f0      	movs	r3, #240	; 0xf0
 801b332:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801b334:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d00a      	beq.n	801b352 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801b33c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b340:	f113 0f0d 	cmn.w	r3, #13
 801b344:	d002      	beq.n	801b34c <tcp_process+0x41c>
              tcp_abort(pcb);
 801b346:	6878      	ldr	r0, [r7, #4]
 801b348:	f7fd fd14 	bl	8018d74 <tcp_abort>
            }
            return ERR_ABRT;
 801b34c:	f06f 030c 	mvn.w	r3, #12
 801b350:	e1ce      	b.n	801b6f0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801b352:	6878      	ldr	r0, [r7, #4]
 801b354:	f000 fae0 	bl	801b918 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801b358:	4b63      	ldr	r3, [pc, #396]	; (801b4e8 <tcp_process+0x5b8>)
 801b35a:	881b      	ldrh	r3, [r3, #0]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d005      	beq.n	801b36c <tcp_process+0x43c>
            recv_acked--;
 801b360:	4b61      	ldr	r3, [pc, #388]	; (801b4e8 <tcp_process+0x5b8>)
 801b362:	881b      	ldrh	r3, [r3, #0]
 801b364:	3b01      	subs	r3, #1
 801b366:	b29a      	uxth	r2, r3
 801b368:	4b5f      	ldr	r3, [pc, #380]	; (801b4e8 <tcp_process+0x5b8>)
 801b36a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b370:	009a      	lsls	r2, r3, #2
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b376:	005b      	lsls	r3, r3, #1
 801b378:	f241 111c 	movw	r1, #4380	; 0x111c
 801b37c:	428b      	cmp	r3, r1
 801b37e:	bf38      	it	cc
 801b380:	460b      	movcc	r3, r1
 801b382:	429a      	cmp	r2, r3
 801b384:	d204      	bcs.n	801b390 <tcp_process+0x460>
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b38a:	009b      	lsls	r3, r3, #2
 801b38c:	b29b      	uxth	r3, r3
 801b38e:	e00d      	b.n	801b3ac <tcp_process+0x47c>
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b394:	005b      	lsls	r3, r3, #1
 801b396:	f241 121c 	movw	r2, #4380	; 0x111c
 801b39a:	4293      	cmp	r3, r2
 801b39c:	d904      	bls.n	801b3a8 <tcp_process+0x478>
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b3a2:	005b      	lsls	r3, r3, #1
 801b3a4:	b29b      	uxth	r3, r3
 801b3a6:	e001      	b.n	801b3ac <tcp_process+0x47c>
 801b3a8:	f241 131c 	movw	r3, #4380	; 0x111c
 801b3ac:	687a      	ldr	r2, [r7, #4]
 801b3ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801b3b2:	4b4e      	ldr	r3, [pc, #312]	; (801b4ec <tcp_process+0x5bc>)
 801b3b4:	781b      	ldrb	r3, [r3, #0]
 801b3b6:	f003 0320 	and.w	r3, r3, #32
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d037      	beq.n	801b42e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	8b5b      	ldrh	r3, [r3, #26]
 801b3c2:	f043 0302 	orr.w	r3, r3, #2
 801b3c6:	b29a      	uxth	r2, r3
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	2207      	movs	r2, #7
 801b3d0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801b3d2:	e02c      	b.n	801b42e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b3d4:	4b3b      	ldr	r3, [pc, #236]	; (801b4c4 <tcp_process+0x594>)
 801b3d6:	6819      	ldr	r1, [r3, #0]
 801b3d8:	4b3b      	ldr	r3, [pc, #236]	; (801b4c8 <tcp_process+0x598>)
 801b3da:	881b      	ldrh	r3, [r3, #0]
 801b3dc:	461a      	mov	r2, r3
 801b3de:	4b3b      	ldr	r3, [pc, #236]	; (801b4cc <tcp_process+0x59c>)
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b3e4:	4b3a      	ldr	r3, [pc, #232]	; (801b4d0 <tcp_process+0x5a0>)
 801b3e6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b3e8:	885b      	ldrh	r3, [r3, #2]
 801b3ea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b3ec:	4a38      	ldr	r2, [pc, #224]	; (801b4d0 <tcp_process+0x5a0>)
 801b3ee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b3f0:	8812      	ldrh	r2, [r2, #0]
 801b3f2:	b292      	uxth	r2, r2
 801b3f4:	9202      	str	r2, [sp, #8]
 801b3f6:	9301      	str	r3, [sp, #4]
 801b3f8:	4b36      	ldr	r3, [pc, #216]	; (801b4d4 <tcp_process+0x5a4>)
 801b3fa:	9300      	str	r3, [sp, #0]
 801b3fc:	4b36      	ldr	r3, [pc, #216]	; (801b4d8 <tcp_process+0x5a8>)
 801b3fe:	4602      	mov	r2, r0
 801b400:	6878      	ldr	r0, [r7, #4]
 801b402:	f003 f829 	bl	801e458 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801b406:	e167      	b.n	801b6d8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801b408:	4b2d      	ldr	r3, [pc, #180]	; (801b4c0 <tcp_process+0x590>)
 801b40a:	781b      	ldrb	r3, [r3, #0]
 801b40c:	f003 0302 	and.w	r3, r3, #2
 801b410:	2b00      	cmp	r3, #0
 801b412:	f000 8161 	beq.w	801b6d8 <tcp_process+0x7a8>
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b41a:	1e5a      	subs	r2, r3, #1
 801b41c:	4b2b      	ldr	r3, [pc, #172]	; (801b4cc <tcp_process+0x59c>)
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	429a      	cmp	r2, r3
 801b422:	f040 8159 	bne.w	801b6d8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801b426:	6878      	ldr	r0, [r7, #4]
 801b428:	f002 fe0e 	bl	801e048 <tcp_rexmit>
      break;
 801b42c:	e154      	b.n	801b6d8 <tcp_process+0x7a8>
 801b42e:	e153      	b.n	801b6d8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801b430:	6878      	ldr	r0, [r7, #4]
 801b432:	f000 fa71 	bl	801b918 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801b436:	4b2d      	ldr	r3, [pc, #180]	; (801b4ec <tcp_process+0x5bc>)
 801b438:	781b      	ldrb	r3, [r3, #0]
 801b43a:	f003 0320 	and.w	r3, r3, #32
 801b43e:	2b00      	cmp	r3, #0
 801b440:	f000 814c 	beq.w	801b6dc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	8b5b      	ldrh	r3, [r3, #26]
 801b448:	f043 0302 	orr.w	r3, r3, #2
 801b44c:	b29a      	uxth	r2, r3
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	2207      	movs	r2, #7
 801b456:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b458:	e140      	b.n	801b6dc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801b45a:	6878      	ldr	r0, [r7, #4]
 801b45c:	f000 fa5c 	bl	801b918 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b460:	4b22      	ldr	r3, [pc, #136]	; (801b4ec <tcp_process+0x5bc>)
 801b462:	781b      	ldrb	r3, [r3, #0]
 801b464:	f003 0320 	and.w	r3, r3, #32
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d071      	beq.n	801b550 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b46c:	4b14      	ldr	r3, [pc, #80]	; (801b4c0 <tcp_process+0x590>)
 801b46e:	781b      	ldrb	r3, [r3, #0]
 801b470:	f003 0310 	and.w	r3, r3, #16
 801b474:	2b00      	cmp	r3, #0
 801b476:	d060      	beq.n	801b53a <tcp_process+0x60a>
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b47c:	4b11      	ldr	r3, [pc, #68]	; (801b4c4 <tcp_process+0x594>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	429a      	cmp	r2, r3
 801b482:	d15a      	bne.n	801b53a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d156      	bne.n	801b53a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	8b5b      	ldrh	r3, [r3, #26]
 801b490:	f043 0302 	orr.w	r3, r3, #2
 801b494:	b29a      	uxth	r2, r3
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801b49a:	6878      	ldr	r0, [r7, #4]
 801b49c:	f7fe fdbc 	bl	801a018 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801b4a0:	4b13      	ldr	r3, [pc, #76]	; (801b4f0 <tcp_process+0x5c0>)
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	687a      	ldr	r2, [r7, #4]
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	d105      	bne.n	801b4b6 <tcp_process+0x586>
 801b4aa:	4b11      	ldr	r3, [pc, #68]	; (801b4f0 <tcp_process+0x5c0>)
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	68db      	ldr	r3, [r3, #12]
 801b4b0:	4a0f      	ldr	r2, [pc, #60]	; (801b4f0 <tcp_process+0x5c0>)
 801b4b2:	6013      	str	r3, [r2, #0]
 801b4b4:	e02e      	b.n	801b514 <tcp_process+0x5e4>
 801b4b6:	4b0e      	ldr	r3, [pc, #56]	; (801b4f0 <tcp_process+0x5c0>)
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	617b      	str	r3, [r7, #20]
 801b4bc:	e027      	b.n	801b50e <tcp_process+0x5de>
 801b4be:	bf00      	nop
 801b4c0:	2401005c 	.word	0x2401005c
 801b4c4:	24010054 	.word	0x24010054
 801b4c8:	2401005a 	.word	0x2401005a
 801b4cc:	24010050 	.word	0x24010050
 801b4d0:	24010040 	.word	0x24010040
 801b4d4:	24009558 	.word	0x24009558
 801b4d8:	2400955c 	.word	0x2400955c
 801b4dc:	08023744 	.word	0x08023744
 801b4e0:	08023a28 	.word	0x08023a28
 801b4e4:	080237d4 	.word	0x080237d4
 801b4e8:	24010058 	.word	0x24010058
 801b4ec:	2401005d 	.word	0x2401005d
 801b4f0:	24010024 	.word	0x24010024
 801b4f4:	697b      	ldr	r3, [r7, #20]
 801b4f6:	68db      	ldr	r3, [r3, #12]
 801b4f8:	687a      	ldr	r2, [r7, #4]
 801b4fa:	429a      	cmp	r2, r3
 801b4fc:	d104      	bne.n	801b508 <tcp_process+0x5d8>
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	68da      	ldr	r2, [r3, #12]
 801b502:	697b      	ldr	r3, [r7, #20]
 801b504:	60da      	str	r2, [r3, #12]
 801b506:	e005      	b.n	801b514 <tcp_process+0x5e4>
 801b508:	697b      	ldr	r3, [r7, #20]
 801b50a:	68db      	ldr	r3, [r3, #12]
 801b50c:	617b      	str	r3, [r7, #20]
 801b50e:	697b      	ldr	r3, [r7, #20]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d1ef      	bne.n	801b4f4 <tcp_process+0x5c4>
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	2200      	movs	r2, #0
 801b518:	60da      	str	r2, [r3, #12]
 801b51a:	4b77      	ldr	r3, [pc, #476]	; (801b6f8 <tcp_process+0x7c8>)
 801b51c:	2201      	movs	r2, #1
 801b51e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	220a      	movs	r2, #10
 801b524:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801b526:	4b75      	ldr	r3, [pc, #468]	; (801b6fc <tcp_process+0x7cc>)
 801b528:	681a      	ldr	r2, [r3, #0]
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	60da      	str	r2, [r3, #12]
 801b52e:	4a73      	ldr	r2, [pc, #460]	; (801b6fc <tcp_process+0x7cc>)
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	6013      	str	r3, [r2, #0]
 801b534:	f003 fb0a 	bl	801eb4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801b538:	e0d2      	b.n	801b6e0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	8b5b      	ldrh	r3, [r3, #26]
 801b53e:	f043 0302 	orr.w	r3, r3, #2
 801b542:	b29a      	uxth	r2, r3
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	2208      	movs	r2, #8
 801b54c:	751a      	strb	r2, [r3, #20]
      break;
 801b54e:	e0c7      	b.n	801b6e0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b550:	4b6b      	ldr	r3, [pc, #428]	; (801b700 <tcp_process+0x7d0>)
 801b552:	781b      	ldrb	r3, [r3, #0]
 801b554:	f003 0310 	and.w	r3, r3, #16
 801b558:	2b00      	cmp	r3, #0
 801b55a:	f000 80c1 	beq.w	801b6e0 <tcp_process+0x7b0>
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b562:	4b68      	ldr	r3, [pc, #416]	; (801b704 <tcp_process+0x7d4>)
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	429a      	cmp	r2, r3
 801b568:	f040 80ba 	bne.w	801b6e0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b570:	2b00      	cmp	r3, #0
 801b572:	f040 80b5 	bne.w	801b6e0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2206      	movs	r2, #6
 801b57a:	751a      	strb	r2, [r3, #20]
      break;
 801b57c:	e0b0      	b.n	801b6e0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801b57e:	6878      	ldr	r0, [r7, #4]
 801b580:	f000 f9ca 	bl	801b918 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b584:	4b60      	ldr	r3, [pc, #384]	; (801b708 <tcp_process+0x7d8>)
 801b586:	781b      	ldrb	r3, [r3, #0]
 801b588:	f003 0320 	and.w	r3, r3, #32
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	f000 80a9 	beq.w	801b6e4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	8b5b      	ldrh	r3, [r3, #26]
 801b596:	f043 0302 	orr.w	r3, r3, #2
 801b59a:	b29a      	uxth	r2, r3
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801b5a0:	6878      	ldr	r0, [r7, #4]
 801b5a2:	f7fe fd39 	bl	801a018 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b5a6:	4b59      	ldr	r3, [pc, #356]	; (801b70c <tcp_process+0x7dc>)
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	687a      	ldr	r2, [r7, #4]
 801b5ac:	429a      	cmp	r2, r3
 801b5ae:	d105      	bne.n	801b5bc <tcp_process+0x68c>
 801b5b0:	4b56      	ldr	r3, [pc, #344]	; (801b70c <tcp_process+0x7dc>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	68db      	ldr	r3, [r3, #12]
 801b5b6:	4a55      	ldr	r2, [pc, #340]	; (801b70c <tcp_process+0x7dc>)
 801b5b8:	6013      	str	r3, [r2, #0]
 801b5ba:	e013      	b.n	801b5e4 <tcp_process+0x6b4>
 801b5bc:	4b53      	ldr	r3, [pc, #332]	; (801b70c <tcp_process+0x7dc>)
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	613b      	str	r3, [r7, #16]
 801b5c2:	e00c      	b.n	801b5de <tcp_process+0x6ae>
 801b5c4:	693b      	ldr	r3, [r7, #16]
 801b5c6:	68db      	ldr	r3, [r3, #12]
 801b5c8:	687a      	ldr	r2, [r7, #4]
 801b5ca:	429a      	cmp	r2, r3
 801b5cc:	d104      	bne.n	801b5d8 <tcp_process+0x6a8>
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	68da      	ldr	r2, [r3, #12]
 801b5d2:	693b      	ldr	r3, [r7, #16]
 801b5d4:	60da      	str	r2, [r3, #12]
 801b5d6:	e005      	b.n	801b5e4 <tcp_process+0x6b4>
 801b5d8:	693b      	ldr	r3, [r7, #16]
 801b5da:	68db      	ldr	r3, [r3, #12]
 801b5dc:	613b      	str	r3, [r7, #16]
 801b5de:	693b      	ldr	r3, [r7, #16]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d1ef      	bne.n	801b5c4 <tcp_process+0x694>
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	2200      	movs	r2, #0
 801b5e8:	60da      	str	r2, [r3, #12]
 801b5ea:	4b43      	ldr	r3, [pc, #268]	; (801b6f8 <tcp_process+0x7c8>)
 801b5ec:	2201      	movs	r2, #1
 801b5ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	220a      	movs	r2, #10
 801b5f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b5f6:	4b41      	ldr	r3, [pc, #260]	; (801b6fc <tcp_process+0x7cc>)
 801b5f8:	681a      	ldr	r2, [r3, #0]
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	60da      	str	r2, [r3, #12]
 801b5fe:	4a3f      	ldr	r2, [pc, #252]	; (801b6fc <tcp_process+0x7cc>)
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	6013      	str	r3, [r2, #0]
 801b604:	f003 faa2 	bl	801eb4c <tcp_timer_needed>
      }
      break;
 801b608:	e06c      	b.n	801b6e4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801b60a:	6878      	ldr	r0, [r7, #4]
 801b60c:	f000 f984 	bl	801b918 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b610:	4b3b      	ldr	r3, [pc, #236]	; (801b700 <tcp_process+0x7d0>)
 801b612:	781b      	ldrb	r3, [r3, #0]
 801b614:	f003 0310 	and.w	r3, r3, #16
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d065      	beq.n	801b6e8 <tcp_process+0x7b8>
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b620:	4b38      	ldr	r3, [pc, #224]	; (801b704 <tcp_process+0x7d4>)
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	429a      	cmp	r2, r3
 801b626:	d15f      	bne.n	801b6e8 <tcp_process+0x7b8>
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d15b      	bne.n	801b6e8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801b630:	6878      	ldr	r0, [r7, #4]
 801b632:	f7fe fcf1 	bl	801a018 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b636:	4b35      	ldr	r3, [pc, #212]	; (801b70c <tcp_process+0x7dc>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	687a      	ldr	r2, [r7, #4]
 801b63c:	429a      	cmp	r2, r3
 801b63e:	d105      	bne.n	801b64c <tcp_process+0x71c>
 801b640:	4b32      	ldr	r3, [pc, #200]	; (801b70c <tcp_process+0x7dc>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	68db      	ldr	r3, [r3, #12]
 801b646:	4a31      	ldr	r2, [pc, #196]	; (801b70c <tcp_process+0x7dc>)
 801b648:	6013      	str	r3, [r2, #0]
 801b64a:	e013      	b.n	801b674 <tcp_process+0x744>
 801b64c:	4b2f      	ldr	r3, [pc, #188]	; (801b70c <tcp_process+0x7dc>)
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	60fb      	str	r3, [r7, #12]
 801b652:	e00c      	b.n	801b66e <tcp_process+0x73e>
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	68db      	ldr	r3, [r3, #12]
 801b658:	687a      	ldr	r2, [r7, #4]
 801b65a:	429a      	cmp	r2, r3
 801b65c:	d104      	bne.n	801b668 <tcp_process+0x738>
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	68da      	ldr	r2, [r3, #12]
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	60da      	str	r2, [r3, #12]
 801b666:	e005      	b.n	801b674 <tcp_process+0x744>
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	68db      	ldr	r3, [r3, #12]
 801b66c:	60fb      	str	r3, [r7, #12]
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d1ef      	bne.n	801b654 <tcp_process+0x724>
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	2200      	movs	r2, #0
 801b678:	60da      	str	r2, [r3, #12]
 801b67a:	4b1f      	ldr	r3, [pc, #124]	; (801b6f8 <tcp_process+0x7c8>)
 801b67c:	2201      	movs	r2, #1
 801b67e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	220a      	movs	r2, #10
 801b684:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b686:	4b1d      	ldr	r3, [pc, #116]	; (801b6fc <tcp_process+0x7cc>)
 801b688:	681a      	ldr	r2, [r3, #0]
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	60da      	str	r2, [r3, #12]
 801b68e:	4a1b      	ldr	r2, [pc, #108]	; (801b6fc <tcp_process+0x7cc>)
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	6013      	str	r3, [r2, #0]
 801b694:	f003 fa5a 	bl	801eb4c <tcp_timer_needed>
      }
      break;
 801b698:	e026      	b.n	801b6e8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f000 f93c 	bl	801b918 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b6a0:	4b17      	ldr	r3, [pc, #92]	; (801b700 <tcp_process+0x7d0>)
 801b6a2:	781b      	ldrb	r3, [r3, #0]
 801b6a4:	f003 0310 	and.w	r3, r3, #16
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d01f      	beq.n	801b6ec <tcp_process+0x7bc>
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b6b0:	4b14      	ldr	r3, [pc, #80]	; (801b704 <tcp_process+0x7d4>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	429a      	cmp	r2, r3
 801b6b6:	d119      	bne.n	801b6ec <tcp_process+0x7bc>
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d115      	bne.n	801b6ec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801b6c0:	4b11      	ldr	r3, [pc, #68]	; (801b708 <tcp_process+0x7d8>)
 801b6c2:	781b      	ldrb	r3, [r3, #0]
 801b6c4:	f043 0310 	orr.w	r3, r3, #16
 801b6c8:	b2da      	uxtb	r2, r3
 801b6ca:	4b0f      	ldr	r3, [pc, #60]	; (801b708 <tcp_process+0x7d8>)
 801b6cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 801b6ce:	e00d      	b.n	801b6ec <tcp_process+0x7bc>
    default:
      break;
 801b6d0:	bf00      	nop
 801b6d2:	e00c      	b.n	801b6ee <tcp_process+0x7be>
      break;
 801b6d4:	bf00      	nop
 801b6d6:	e00a      	b.n	801b6ee <tcp_process+0x7be>
      break;
 801b6d8:	bf00      	nop
 801b6da:	e008      	b.n	801b6ee <tcp_process+0x7be>
      break;
 801b6dc:	bf00      	nop
 801b6de:	e006      	b.n	801b6ee <tcp_process+0x7be>
      break;
 801b6e0:	bf00      	nop
 801b6e2:	e004      	b.n	801b6ee <tcp_process+0x7be>
      break;
 801b6e4:	bf00      	nop
 801b6e6:	e002      	b.n	801b6ee <tcp_process+0x7be>
      break;
 801b6e8:	bf00      	nop
 801b6ea:	e000      	b.n	801b6ee <tcp_process+0x7be>
      break;
 801b6ec:	bf00      	nop
  }
  return ERR_OK;
 801b6ee:	2300      	movs	r3, #0
}
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	3724      	adds	r7, #36	; 0x24
 801b6f4:	46bd      	mov	sp, r7
 801b6f6:	bd90      	pop	{r4, r7, pc}
 801b6f8:	2401002c 	.word	0x2401002c
 801b6fc:	24010028 	.word	0x24010028
 801b700:	2401005c 	.word	0x2401005c
 801b704:	24010054 	.word	0x24010054
 801b708:	2401005d 	.word	0x2401005d
 801b70c:	24010024 	.word	0x24010024

0801b710 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801b710:	b590      	push	{r4, r7, lr}
 801b712:	b085      	sub	sp, #20
 801b714:	af00      	add	r7, sp, #0
 801b716:	6078      	str	r0, [r7, #4]
 801b718:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d106      	bne.n	801b72e <tcp_oos_insert_segment+0x1e>
 801b720:	4b3b      	ldr	r3, [pc, #236]	; (801b810 <tcp_oos_insert_segment+0x100>)
 801b722:	f240 421f 	movw	r2, #1055	; 0x41f
 801b726:	493b      	ldr	r1, [pc, #236]	; (801b814 <tcp_oos_insert_segment+0x104>)
 801b728:	483b      	ldr	r0, [pc, #236]	; (801b818 <tcp_oos_insert_segment+0x108>)
 801b72a:	f004 fced 	bl	8020108 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	68db      	ldr	r3, [r3, #12]
 801b732:	899b      	ldrh	r3, [r3, #12]
 801b734:	b29b      	uxth	r3, r3
 801b736:	4618      	mov	r0, r3
 801b738:	f7f8 fb76 	bl	8013e28 <lwip_htons>
 801b73c:	4603      	mov	r3, r0
 801b73e:	b2db      	uxtb	r3, r3
 801b740:	f003 0301 	and.w	r3, r3, #1
 801b744:	2b00      	cmp	r3, #0
 801b746:	d028      	beq.n	801b79a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801b748:	6838      	ldr	r0, [r7, #0]
 801b74a:	f7fe f995 	bl	8019a78 <tcp_segs_free>
    next = NULL;
 801b74e:	2300      	movs	r3, #0
 801b750:	603b      	str	r3, [r7, #0]
 801b752:	e056      	b.n	801b802 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b754:	683b      	ldr	r3, [r7, #0]
 801b756:	68db      	ldr	r3, [r3, #12]
 801b758:	899b      	ldrh	r3, [r3, #12]
 801b75a:	b29b      	uxth	r3, r3
 801b75c:	4618      	mov	r0, r3
 801b75e:	f7f8 fb63 	bl	8013e28 <lwip_htons>
 801b762:	4603      	mov	r3, r0
 801b764:	b2db      	uxtb	r3, r3
 801b766:	f003 0301 	and.w	r3, r3, #1
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d00d      	beq.n	801b78a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	68db      	ldr	r3, [r3, #12]
 801b772:	899b      	ldrh	r3, [r3, #12]
 801b774:	b29c      	uxth	r4, r3
 801b776:	2001      	movs	r0, #1
 801b778:	f7f8 fb56 	bl	8013e28 <lwip_htons>
 801b77c:	4603      	mov	r3, r0
 801b77e:	461a      	mov	r2, r3
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	68db      	ldr	r3, [r3, #12]
 801b784:	4322      	orrs	r2, r4
 801b786:	b292      	uxth	r2, r2
 801b788:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801b78a:	683b      	ldr	r3, [r7, #0]
 801b78c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801b794:	68f8      	ldr	r0, [r7, #12]
 801b796:	f7fe f984 	bl	8019aa2 <tcp_seg_free>
    while (next &&
 801b79a:	683b      	ldr	r3, [r7, #0]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d00e      	beq.n	801b7be <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	891b      	ldrh	r3, [r3, #8]
 801b7a4:	461a      	mov	r2, r3
 801b7a6:	4b1d      	ldr	r3, [pc, #116]	; (801b81c <tcp_oos_insert_segment+0x10c>)
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	441a      	add	r2, r3
 801b7ac:	683b      	ldr	r3, [r7, #0]
 801b7ae:	68db      	ldr	r3, [r3, #12]
 801b7b0:	685b      	ldr	r3, [r3, #4]
 801b7b2:	6839      	ldr	r1, [r7, #0]
 801b7b4:	8909      	ldrh	r1, [r1, #8]
 801b7b6:	440b      	add	r3, r1
 801b7b8:	1ad3      	subs	r3, r2, r3
    while (next &&
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	daca      	bge.n	801b754 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801b7be:	683b      	ldr	r3, [r7, #0]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d01e      	beq.n	801b802 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	891b      	ldrh	r3, [r3, #8]
 801b7c8:	461a      	mov	r2, r3
 801b7ca:	4b14      	ldr	r3, [pc, #80]	; (801b81c <tcp_oos_insert_segment+0x10c>)
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	441a      	add	r2, r3
 801b7d0:	683b      	ldr	r3, [r7, #0]
 801b7d2:	68db      	ldr	r3, [r3, #12]
 801b7d4:	685b      	ldr	r3, [r3, #4]
 801b7d6:	1ad3      	subs	r3, r2, r3
    if (next &&
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	dd12      	ble.n	801b802 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801b7dc:	683b      	ldr	r3, [r7, #0]
 801b7de:	68db      	ldr	r3, [r3, #12]
 801b7e0:	685b      	ldr	r3, [r3, #4]
 801b7e2:	b29a      	uxth	r2, r3
 801b7e4:	4b0d      	ldr	r3, [pc, #52]	; (801b81c <tcp_oos_insert_segment+0x10c>)
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	b29b      	uxth	r3, r3
 801b7ea:	1ad3      	subs	r3, r2, r3
 801b7ec:	b29a      	uxth	r2, r3
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	685a      	ldr	r2, [r3, #4]
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	891b      	ldrh	r3, [r3, #8]
 801b7fa:	4619      	mov	r1, r3
 801b7fc:	4610      	mov	r0, r2
 801b7fe:	f7fc f963 	bl	8017ac8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	683a      	ldr	r2, [r7, #0]
 801b806:	601a      	str	r2, [r3, #0]
}
 801b808:	bf00      	nop
 801b80a:	3714      	adds	r7, #20
 801b80c:	46bd      	mov	sp, r7
 801b80e:	bd90      	pop	{r4, r7, pc}
 801b810:	08023744 	.word	0x08023744
 801b814:	08023a48 	.word	0x08023a48
 801b818:	080237d4 	.word	0x080237d4
 801b81c:	24010050 	.word	0x24010050

0801b820 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801b820:	b5b0      	push	{r4, r5, r7, lr}
 801b822:	b086      	sub	sp, #24
 801b824:	af00      	add	r7, sp, #0
 801b826:	60f8      	str	r0, [r7, #12]
 801b828:	60b9      	str	r1, [r7, #8]
 801b82a:	607a      	str	r2, [r7, #4]
 801b82c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801b82e:	e03e      	b.n	801b8ae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801b834:	68bb      	ldr	r3, [r7, #8]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801b83a:	697b      	ldr	r3, [r7, #20]
 801b83c:	685b      	ldr	r3, [r3, #4]
 801b83e:	4618      	mov	r0, r3
 801b840:	f7fc fb54 	bl	8017eec <pbuf_clen>
 801b844:	4603      	mov	r3, r0
 801b846:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801b848:	68fb      	ldr	r3, [r7, #12]
 801b84a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b84e:	8a7a      	ldrh	r2, [r7, #18]
 801b850:	429a      	cmp	r2, r3
 801b852:	d906      	bls.n	801b862 <tcp_free_acked_segments+0x42>
 801b854:	4b2a      	ldr	r3, [pc, #168]	; (801b900 <tcp_free_acked_segments+0xe0>)
 801b856:	f240 4257 	movw	r2, #1111	; 0x457
 801b85a:	492a      	ldr	r1, [pc, #168]	; (801b904 <tcp_free_acked_segments+0xe4>)
 801b85c:	482a      	ldr	r0, [pc, #168]	; (801b908 <tcp_free_acked_segments+0xe8>)
 801b85e:	f004 fc53 	bl	8020108 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801b868:	8a7b      	ldrh	r3, [r7, #18]
 801b86a:	1ad3      	subs	r3, r2, r3
 801b86c:	b29a      	uxth	r2, r3
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801b874:	697b      	ldr	r3, [r7, #20]
 801b876:	891a      	ldrh	r2, [r3, #8]
 801b878:	4b24      	ldr	r3, [pc, #144]	; (801b90c <tcp_free_acked_segments+0xec>)
 801b87a:	881b      	ldrh	r3, [r3, #0]
 801b87c:	4413      	add	r3, r2
 801b87e:	b29a      	uxth	r2, r3
 801b880:	4b22      	ldr	r3, [pc, #136]	; (801b90c <tcp_free_acked_segments+0xec>)
 801b882:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801b884:	6978      	ldr	r0, [r7, #20]
 801b886:	f7fe f90c 	bl	8019aa2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b890:	2b00      	cmp	r3, #0
 801b892:	d00c      	beq.n	801b8ae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801b894:	68bb      	ldr	r3, [r7, #8]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d109      	bne.n	801b8ae <tcp_free_acked_segments+0x8e>
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d106      	bne.n	801b8ae <tcp_free_acked_segments+0x8e>
 801b8a0:	4b17      	ldr	r3, [pc, #92]	; (801b900 <tcp_free_acked_segments+0xe0>)
 801b8a2:	f240 4261 	movw	r2, #1121	; 0x461
 801b8a6:	491a      	ldr	r1, [pc, #104]	; (801b910 <tcp_free_acked_segments+0xf0>)
 801b8a8:	4817      	ldr	r0, [pc, #92]	; (801b908 <tcp_free_acked_segments+0xe8>)
 801b8aa:	f004 fc2d 	bl	8020108 <iprintf>
  while (seg_list != NULL &&
 801b8ae:	68bb      	ldr	r3, [r7, #8]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d020      	beq.n	801b8f6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	68db      	ldr	r3, [r3, #12]
 801b8b8:	685b      	ldr	r3, [r3, #4]
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7f8 fac9 	bl	8013e52 <lwip_htonl>
 801b8c0:	4604      	mov	r4, r0
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	891b      	ldrh	r3, [r3, #8]
 801b8c6:	461d      	mov	r5, r3
 801b8c8:	68bb      	ldr	r3, [r7, #8]
 801b8ca:	68db      	ldr	r3, [r3, #12]
 801b8cc:	899b      	ldrh	r3, [r3, #12]
 801b8ce:	b29b      	uxth	r3, r3
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f7f8 faa9 	bl	8013e28 <lwip_htons>
 801b8d6:	4603      	mov	r3, r0
 801b8d8:	b2db      	uxtb	r3, r3
 801b8da:	f003 0303 	and.w	r3, r3, #3
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d001      	beq.n	801b8e6 <tcp_free_acked_segments+0xc6>
 801b8e2:	2301      	movs	r3, #1
 801b8e4:	e000      	b.n	801b8e8 <tcp_free_acked_segments+0xc8>
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	442b      	add	r3, r5
 801b8ea:	18e2      	adds	r2, r4, r3
 801b8ec:	4b09      	ldr	r3, [pc, #36]	; (801b914 <tcp_free_acked_segments+0xf4>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	dd9c      	ble.n	801b830 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801b8f6:	68bb      	ldr	r3, [r7, #8]
}
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	3718      	adds	r7, #24
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	bdb0      	pop	{r4, r5, r7, pc}
 801b900:	08023744 	.word	0x08023744
 801b904:	08023a70 	.word	0x08023a70
 801b908:	080237d4 	.word	0x080237d4
 801b90c:	24010058 	.word	0x24010058
 801b910:	08023a98 	.word	0x08023a98
 801b914:	24010054 	.word	0x24010054

0801b918 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801b918:	b5b0      	push	{r4, r5, r7, lr}
 801b91a:	b094      	sub	sp, #80	; 0x50
 801b91c:	af00      	add	r7, sp, #0
 801b91e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801b920:	2300      	movs	r3, #0
 801b922:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	2b00      	cmp	r3, #0
 801b928:	d106      	bne.n	801b938 <tcp_receive+0x20>
 801b92a:	4b91      	ldr	r3, [pc, #580]	; (801bb70 <tcp_receive+0x258>)
 801b92c:	f240 427b 	movw	r2, #1147	; 0x47b
 801b930:	4990      	ldr	r1, [pc, #576]	; (801bb74 <tcp_receive+0x25c>)
 801b932:	4891      	ldr	r0, [pc, #580]	; (801bb78 <tcp_receive+0x260>)
 801b934:	f004 fbe8 	bl	8020108 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	7d1b      	ldrb	r3, [r3, #20]
 801b93c:	2b03      	cmp	r3, #3
 801b93e:	d806      	bhi.n	801b94e <tcp_receive+0x36>
 801b940:	4b8b      	ldr	r3, [pc, #556]	; (801bb70 <tcp_receive+0x258>)
 801b942:	f240 427c 	movw	r2, #1148	; 0x47c
 801b946:	498d      	ldr	r1, [pc, #564]	; (801bb7c <tcp_receive+0x264>)
 801b948:	488b      	ldr	r0, [pc, #556]	; (801bb78 <tcp_receive+0x260>)
 801b94a:	f004 fbdd 	bl	8020108 <iprintf>

  if (flags & TCP_ACK) {
 801b94e:	4b8c      	ldr	r3, [pc, #560]	; (801bb80 <tcp_receive+0x268>)
 801b950:	781b      	ldrb	r3, [r3, #0]
 801b952:	f003 0310 	and.w	r3, r3, #16
 801b956:	2b00      	cmp	r3, #0
 801b958:	f000 8264 	beq.w	801be24 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b962:	461a      	mov	r2, r3
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b968:	4413      	add	r3, r2
 801b96a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b970:	4b84      	ldr	r3, [pc, #528]	; (801bb84 <tcp_receive+0x26c>)
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	1ad3      	subs	r3, r2, r3
 801b976:	2b00      	cmp	r3, #0
 801b978:	db1b      	blt.n	801b9b2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b97e:	4b81      	ldr	r3, [pc, #516]	; (801bb84 <tcp_receive+0x26c>)
 801b980:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b982:	429a      	cmp	r2, r3
 801b984:	d106      	bne.n	801b994 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b98a:	4b7f      	ldr	r3, [pc, #508]	; (801bb88 <tcp_receive+0x270>)
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	1ad3      	subs	r3, r2, r3
 801b990:	2b00      	cmp	r3, #0
 801b992:	db0e      	blt.n	801b9b2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b998:	4b7b      	ldr	r3, [pc, #492]	; (801bb88 <tcp_receive+0x270>)
 801b99a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b99c:	429a      	cmp	r2, r3
 801b99e:	d125      	bne.n	801b9ec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b9a0:	4b7a      	ldr	r3, [pc, #488]	; (801bb8c <tcp_receive+0x274>)
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	89db      	ldrh	r3, [r3, #14]
 801b9a6:	b29a      	uxth	r2, r3
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b9ae:	429a      	cmp	r2, r3
 801b9b0:	d91c      	bls.n	801b9ec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801b9b2:	4b76      	ldr	r3, [pc, #472]	; (801bb8c <tcp_receive+0x274>)
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	89db      	ldrh	r3, [r3, #14]
 801b9b8:	b29a      	uxth	r2, r3
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b9cc:	429a      	cmp	r2, r3
 801b9ce:	d205      	bcs.n	801b9dc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801b9dc:	4b69      	ldr	r3, [pc, #420]	; (801bb84 <tcp_receive+0x26c>)
 801b9de:	681a      	ldr	r2, [r3, #0]
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801b9e4:	4b68      	ldr	r3, [pc, #416]	; (801bb88 <tcp_receive+0x270>)
 801b9e6:	681a      	ldr	r2, [r3, #0]
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801b9ec:	4b66      	ldr	r3, [pc, #408]	; (801bb88 <tcp_receive+0x270>)
 801b9ee:	681a      	ldr	r2, [r3, #0]
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9f4:	1ad3      	subs	r3, r2, r3
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	dc58      	bgt.n	801baac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801b9fa:	4b65      	ldr	r3, [pc, #404]	; (801bb90 <tcp_receive+0x278>)
 801b9fc:	881b      	ldrh	r3, [r3, #0]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d14b      	bne.n	801ba9a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba06:	687a      	ldr	r2, [r7, #4]
 801ba08:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801ba0c:	4413      	add	r3, r2
 801ba0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ba10:	429a      	cmp	r2, r3
 801ba12:	d142      	bne.n	801ba9a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	db3d      	blt.n	801ba9a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ba22:	4b59      	ldr	r3, [pc, #356]	; (801bb88 <tcp_receive+0x270>)
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	429a      	cmp	r2, r3
 801ba28:	d137      	bne.n	801ba9a <tcp_receive+0x182>
              found_dupack = 1;
 801ba2a:	2301      	movs	r3, #1
 801ba2c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ba34:	2bff      	cmp	r3, #255	; 0xff
 801ba36:	d007      	beq.n	801ba48 <tcp_receive+0x130>
                ++pcb->dupacks;
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ba3e:	3301      	adds	r3, #1
 801ba40:	b2da      	uxtb	r2, r3
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ba4e:	2b03      	cmp	r3, #3
 801ba50:	d91b      	bls.n	801ba8a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ba5c:	4413      	add	r3, r2
 801ba5e:	b29a      	uxth	r2, r3
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ba66:	429a      	cmp	r2, r3
 801ba68:	d30a      	bcc.n	801ba80 <tcp_receive+0x168>
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ba74:	4413      	add	r3, r2
 801ba76:	b29a      	uxth	r2, r3
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ba7e:	e004      	b.n	801ba8a <tcp_receive+0x172>
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ba90:	2b02      	cmp	r3, #2
 801ba92:	d902      	bls.n	801ba9a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ba94:	6878      	ldr	r0, [r7, #4]
 801ba96:	f002 fb43 	bl	801e120 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ba9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	f040 8161 	bne.w	801bd64 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	2200      	movs	r2, #0
 801baa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801baaa:	e15b      	b.n	801bd64 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801baac:	4b36      	ldr	r3, [pc, #216]	; (801bb88 <tcp_receive+0x270>)
 801baae:	681a      	ldr	r2, [r3, #0]
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bab4:	1ad3      	subs	r3, r2, r3
 801bab6:	3b01      	subs	r3, #1
 801bab8:	2b00      	cmp	r3, #0
 801baba:	f2c0 814e 	blt.w	801bd5a <tcp_receive+0x442>
 801babe:	4b32      	ldr	r3, [pc, #200]	; (801bb88 <tcp_receive+0x270>)
 801bac0:	681a      	ldr	r2, [r3, #0]
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bac6:	1ad3      	subs	r3, r2, r3
 801bac8:	2b00      	cmp	r3, #0
 801baca:	f300 8146 	bgt.w	801bd5a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	8b5b      	ldrh	r3, [r3, #26]
 801bad2:	f003 0304 	and.w	r3, r3, #4
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d010      	beq.n	801bafc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	8b5b      	ldrh	r3, [r3, #26]
 801bade:	f023 0304 	bic.w	r3, r3, #4
 801bae2:	b29a      	uxth	r2, r3
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	2200      	movs	r2, #0
 801baf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	2200      	movs	r2, #0
 801bb00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801bb0a:	10db      	asrs	r3, r3, #3
 801bb0c:	b21b      	sxth	r3, r3
 801bb0e:	b29a      	uxth	r2, r3
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801bb16:	b29b      	uxth	r3, r3
 801bb18:	4413      	add	r3, r2
 801bb1a:	b29b      	uxth	r3, r3
 801bb1c:	b21a      	sxth	r2, r3
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801bb24:	4b18      	ldr	r3, [pc, #96]	; (801bb88 <tcp_receive+0x270>)
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	b29a      	uxth	r2, r3
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb2e:	b29b      	uxth	r3, r3
 801bb30:	1ad3      	subs	r3, r2, r3
 801bb32:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	2200      	movs	r2, #0
 801bb38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801bb3c:	4b12      	ldr	r3, [pc, #72]	; (801bb88 <tcp_receive+0x270>)
 801bb3e:	681a      	ldr	r2, [r3, #0]
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	7d1b      	ldrb	r3, [r3, #20]
 801bb48:	2b03      	cmp	r3, #3
 801bb4a:	f240 8097 	bls.w	801bc7c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801bb5a:	429a      	cmp	r2, r3
 801bb5c:	d245      	bcs.n	801bbea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	8b5b      	ldrh	r3, [r3, #26]
 801bb62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d014      	beq.n	801bb94 <tcp_receive+0x27c>
 801bb6a:	2301      	movs	r3, #1
 801bb6c:	e013      	b.n	801bb96 <tcp_receive+0x27e>
 801bb6e:	bf00      	nop
 801bb70:	08023744 	.word	0x08023744
 801bb74:	08023ab8 	.word	0x08023ab8
 801bb78:	080237d4 	.word	0x080237d4
 801bb7c:	08023ad4 	.word	0x08023ad4
 801bb80:	2401005c 	.word	0x2401005c
 801bb84:	24010050 	.word	0x24010050
 801bb88:	24010054 	.word	0x24010054
 801bb8c:	24010040 	.word	0x24010040
 801bb90:	2401005a 	.word	0x2401005a
 801bb94:	2302      	movs	r3, #2
 801bb96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801bb9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801bb9e:	b29a      	uxth	r2, r3
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bba4:	fb12 f303 	smulbb	r3, r2, r3
 801bba8:	b29b      	uxth	r3, r3
 801bbaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801bbac:	4293      	cmp	r3, r2
 801bbae:	bf28      	it	cs
 801bbb0:	4613      	movcs	r3, r2
 801bbb2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bbba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bbbc:	4413      	add	r3, r2
 801bbbe:	b29a      	uxth	r2, r3
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bbc6:	429a      	cmp	r2, r3
 801bbc8:	d309      	bcc.n	801bbde <tcp_receive+0x2c6>
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bbd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bbd2:	4413      	add	r3, r2
 801bbd4:	b29a      	uxth	r2, r3
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801bbdc:	e04e      	b.n	801bc7c <tcp_receive+0x364>
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbe4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801bbe8:	e048      	b.n	801bc7c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801bbf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bbf2:	4413      	add	r3, r2
 801bbf4:	b29a      	uxth	r2, r3
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801bbfc:	429a      	cmp	r2, r3
 801bbfe:	d309      	bcc.n	801bc14 <tcp_receive+0x2fc>
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801bc06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801bc08:	4413      	add	r3, r2
 801bc0a:	b29a      	uxth	r2, r3
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801bc12:	e004      	b.n	801bc1e <tcp_receive+0x306>
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bc2a:	429a      	cmp	r2, r3
 801bc2c:	d326      	bcc.n	801bc7c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bc3a:	1ad3      	subs	r3, r2, r3
 801bc3c:	b29a      	uxth	r2, r3
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc4e:	4413      	add	r3, r2
 801bc50:	b29a      	uxth	r2, r3
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bc58:	429a      	cmp	r2, r3
 801bc5a:	d30a      	bcc.n	801bc72 <tcp_receive+0x35a>
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc66:	4413      	add	r3, r2
 801bc68:	b29a      	uxth	r2, r3
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801bc70:	e004      	b.n	801bc7c <tcp_receive+0x364>
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc84:	4a98      	ldr	r2, [pc, #608]	; (801bee8 <tcp_receive+0x5d0>)
 801bc86:	6878      	ldr	r0, [r7, #4]
 801bc88:	f7ff fdca 	bl	801b820 <tcp_free_acked_segments>
 801bc8c:	4602      	mov	r2, r0
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801bc92:	687b      	ldr	r3, [r7, #4]
 801bc94:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc9a:	4a94      	ldr	r2, [pc, #592]	; (801beec <tcp_receive+0x5d4>)
 801bc9c:	6878      	ldr	r0, [r7, #4]
 801bc9e:	f7ff fdbf 	bl	801b820 <tcp_free_acked_segments>
 801bca2:	4602      	mov	r2, r0
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d104      	bne.n	801bcba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bcb6:	861a      	strh	r2, [r3, #48]	; 0x30
 801bcb8:	e002      	b.n	801bcc0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	2200      	movs	r2, #0
 801bcbe:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d103      	bne.n	801bcd6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	2200      	movs	r2, #0
 801bcd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801bcdc:	4b84      	ldr	r3, [pc, #528]	; (801bef0 <tcp_receive+0x5d8>)
 801bcde:	881b      	ldrh	r3, [r3, #0]
 801bce0:	4413      	add	r3, r2
 801bce2:	b29a      	uxth	r2, r3
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	8b5b      	ldrh	r3, [r3, #26]
 801bcee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d035      	beq.n	801bd62 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d118      	bne.n	801bd30 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d00c      	beq.n	801bd20 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bd0e:	68db      	ldr	r3, [r3, #12]
 801bd10:	685b      	ldr	r3, [r3, #4]
 801bd12:	4618      	mov	r0, r3
 801bd14:	f7f8 f89d 	bl	8013e52 <lwip_htonl>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	dc20      	bgt.n	801bd62 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	8b5b      	ldrh	r3, [r3, #26]
 801bd24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bd28:	b29a      	uxth	r2, r3
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bd2e:	e018      	b.n	801bd62 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bd38:	68db      	ldr	r3, [r3, #12]
 801bd3a:	685b      	ldr	r3, [r3, #4]
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	f7f8 f888 	bl	8013e52 <lwip_htonl>
 801bd42:	4603      	mov	r3, r0
 801bd44:	1ae3      	subs	r3, r4, r3
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	dc0b      	bgt.n	801bd62 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	8b5b      	ldrh	r3, [r3, #26]
 801bd4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bd52:	b29a      	uxth	r2, r3
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bd58:	e003      	b.n	801bd62 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801bd5a:	6878      	ldr	r0, [r7, #4]
 801bd5c:	f002 fbce 	bl	801e4fc <tcp_send_empty_ack>
 801bd60:	e000      	b.n	801bd64 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bd62:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d05b      	beq.n	801be24 <tcp_receive+0x50c>
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bd70:	4b60      	ldr	r3, [pc, #384]	; (801bef4 <tcp_receive+0x5dc>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	1ad3      	subs	r3, r2, r3
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	da54      	bge.n	801be24 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801bd7a:	4b5f      	ldr	r3, [pc, #380]	; (801bef8 <tcp_receive+0x5e0>)
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	b29a      	uxth	r2, r3
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd84:	b29b      	uxth	r3, r3
 801bd86:	1ad3      	subs	r3, r2, r3
 801bd88:	b29b      	uxth	r3, r3
 801bd8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801bd8e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801bd98:	10db      	asrs	r3, r3, #3
 801bd9a:	b21b      	sxth	r3, r3
 801bd9c:	b29b      	uxth	r3, r3
 801bd9e:	1ad3      	subs	r3, r2, r3
 801bda0:	b29b      	uxth	r3, r3
 801bda2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801bdac:	b29a      	uxth	r2, r3
 801bdae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801bdb2:	4413      	add	r3, r2
 801bdb4:	b29b      	uxth	r3, r3
 801bdb6:	b21a      	sxth	r2, r3
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801bdbc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	da05      	bge.n	801bdd0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801bdc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801bdc8:	425b      	negs	r3, r3
 801bdca:	b29b      	uxth	r3, r3
 801bdcc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801bdd0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801bdda:	109b      	asrs	r3, r3, #2
 801bddc:	b21b      	sxth	r3, r3
 801bdde:	b29b      	uxth	r3, r3
 801bde0:	1ad3      	subs	r3, r2, r3
 801bde2:	b29b      	uxth	r3, r3
 801bde4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801bdee:	b29a      	uxth	r2, r3
 801bdf0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801bdf4:	4413      	add	r3, r2
 801bdf6:	b29b      	uxth	r3, r3
 801bdf8:	b21a      	sxth	r2, r3
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801be04:	10db      	asrs	r3, r3, #3
 801be06:	b21b      	sxth	r3, r3
 801be08:	b29a      	uxth	r2, r3
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801be10:	b29b      	uxth	r3, r3
 801be12:	4413      	add	r3, r2
 801be14:	b29b      	uxth	r3, r3
 801be16:	b21a      	sxth	r2, r3
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2200      	movs	r2, #0
 801be22:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801be24:	4b35      	ldr	r3, [pc, #212]	; (801befc <tcp_receive+0x5e4>)
 801be26:	881b      	ldrh	r3, [r3, #0]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	f000 84e2 	beq.w	801c7f2 <tcp_receive+0xeda>
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	7d1b      	ldrb	r3, [r3, #20]
 801be32:	2b06      	cmp	r3, #6
 801be34:	f200 84dd 	bhi.w	801c7f2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801be3c:	4b30      	ldr	r3, [pc, #192]	; (801bf00 <tcp_receive+0x5e8>)
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	1ad3      	subs	r3, r2, r3
 801be42:	3b01      	subs	r3, #1
 801be44:	2b00      	cmp	r3, #0
 801be46:	f2c0 808f 	blt.w	801bf68 <tcp_receive+0x650>
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801be4e:	4b2b      	ldr	r3, [pc, #172]	; (801befc <tcp_receive+0x5e4>)
 801be50:	881b      	ldrh	r3, [r3, #0]
 801be52:	4619      	mov	r1, r3
 801be54:	4b2a      	ldr	r3, [pc, #168]	; (801bf00 <tcp_receive+0x5e8>)
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	440b      	add	r3, r1
 801be5a:	1ad3      	subs	r3, r2, r3
 801be5c:	3301      	adds	r3, #1
 801be5e:	2b00      	cmp	r3, #0
 801be60:	f300 8082 	bgt.w	801bf68 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801be64:	4b27      	ldr	r3, [pc, #156]	; (801bf04 <tcp_receive+0x5ec>)
 801be66:	685b      	ldr	r3, [r3, #4]
 801be68:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801be6e:	4b24      	ldr	r3, [pc, #144]	; (801bf00 <tcp_receive+0x5e8>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	1ad3      	subs	r3, r2, r3
 801be74:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801be76:	4b23      	ldr	r3, [pc, #140]	; (801bf04 <tcp_receive+0x5ec>)
 801be78:	685b      	ldr	r3, [r3, #4]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d106      	bne.n	801be8c <tcp_receive+0x574>
 801be7e:	4b22      	ldr	r3, [pc, #136]	; (801bf08 <tcp_receive+0x5f0>)
 801be80:	f240 5294 	movw	r2, #1428	; 0x594
 801be84:	4921      	ldr	r1, [pc, #132]	; (801bf0c <tcp_receive+0x5f4>)
 801be86:	4822      	ldr	r0, [pc, #136]	; (801bf10 <tcp_receive+0x5f8>)
 801be88:	f004 f93e 	bl	8020108 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801be8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be92:	4293      	cmp	r3, r2
 801be94:	d906      	bls.n	801bea4 <tcp_receive+0x58c>
 801be96:	4b1c      	ldr	r3, [pc, #112]	; (801bf08 <tcp_receive+0x5f0>)
 801be98:	f240 5295 	movw	r2, #1429	; 0x595
 801be9c:	491d      	ldr	r1, [pc, #116]	; (801bf14 <tcp_receive+0x5fc>)
 801be9e:	481c      	ldr	r0, [pc, #112]	; (801bf10 <tcp_receive+0x5f8>)
 801bea0:	f004 f932 	bl	8020108 <iprintf>
      off = (u16_t)off32;
 801bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bea6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801beaa:	4b16      	ldr	r3, [pc, #88]	; (801bf04 <tcp_receive+0x5ec>)
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	891b      	ldrh	r3, [r3, #8]
 801beb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801beb4:	429a      	cmp	r2, r3
 801beb6:	d906      	bls.n	801bec6 <tcp_receive+0x5ae>
 801beb8:	4b13      	ldr	r3, [pc, #76]	; (801bf08 <tcp_receive+0x5f0>)
 801beba:	f240 5297 	movw	r2, #1431	; 0x597
 801bebe:	4916      	ldr	r1, [pc, #88]	; (801bf18 <tcp_receive+0x600>)
 801bec0:	4813      	ldr	r0, [pc, #76]	; (801bf10 <tcp_receive+0x5f8>)
 801bec2:	f004 f921 	bl	8020108 <iprintf>
      inseg.len -= off;
 801bec6:	4b0f      	ldr	r3, [pc, #60]	; (801bf04 <tcp_receive+0x5ec>)
 801bec8:	891a      	ldrh	r2, [r3, #8]
 801beca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bece:	1ad3      	subs	r3, r2, r3
 801bed0:	b29a      	uxth	r2, r3
 801bed2:	4b0c      	ldr	r3, [pc, #48]	; (801bf04 <tcp_receive+0x5ec>)
 801bed4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801bed6:	4b0b      	ldr	r3, [pc, #44]	; (801bf04 <tcp_receive+0x5ec>)
 801bed8:	685b      	ldr	r3, [r3, #4]
 801beda:	891a      	ldrh	r2, [r3, #8]
 801bedc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bee0:	1ad3      	subs	r3, r2, r3
 801bee2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801bee4:	e02a      	b.n	801bf3c <tcp_receive+0x624>
 801bee6:	bf00      	nop
 801bee8:	08023af0 	.word	0x08023af0
 801beec:	08023af8 	.word	0x08023af8
 801bef0:	24010058 	.word	0x24010058
 801bef4:	24010054 	.word	0x24010054
 801bef8:	24010018 	.word	0x24010018
 801befc:	2401005a 	.word	0x2401005a
 801bf00:	24010050 	.word	0x24010050
 801bf04:	24010030 	.word	0x24010030
 801bf08:	08023744 	.word	0x08023744
 801bf0c:	08023b00 	.word	0x08023b00
 801bf10:	080237d4 	.word	0x080237d4
 801bf14:	08023b10 	.word	0x08023b10
 801bf18:	08023b20 	.word	0x08023b20
        off -= p->len;
 801bf1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bf1e:	895b      	ldrh	r3, [r3, #10]
 801bf20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bf24:	1ad3      	subs	r3, r2, r3
 801bf26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801bf2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bf2c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801bf2e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801bf30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bf32:	2200      	movs	r2, #0
 801bf34:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801bf36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801bf3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bf3e:	895b      	ldrh	r3, [r3, #10]
 801bf40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d8e9      	bhi.n	801bf1c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801bf48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bf4c:	4619      	mov	r1, r3
 801bf4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801bf50:	f7fb feb8 	bl	8017cc4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf58:	4a91      	ldr	r2, [pc, #580]	; (801c1a0 <tcp_receive+0x888>)
 801bf5a:	6013      	str	r3, [r2, #0]
 801bf5c:	4b91      	ldr	r3, [pc, #580]	; (801c1a4 <tcp_receive+0x88c>)
 801bf5e:	68db      	ldr	r3, [r3, #12]
 801bf60:	4a8f      	ldr	r2, [pc, #572]	; (801c1a0 <tcp_receive+0x888>)
 801bf62:	6812      	ldr	r2, [r2, #0]
 801bf64:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801bf66:	e00d      	b.n	801bf84 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801bf68:	4b8d      	ldr	r3, [pc, #564]	; (801c1a0 <tcp_receive+0x888>)
 801bf6a:	681a      	ldr	r2, [r3, #0]
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf70:	1ad3      	subs	r3, r2, r3
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	da06      	bge.n	801bf84 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	8b5b      	ldrh	r3, [r3, #26]
 801bf7a:	f043 0302 	orr.w	r3, r3, #2
 801bf7e:	b29a      	uxth	r2, r3
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bf84:	4b86      	ldr	r3, [pc, #536]	; (801c1a0 <tcp_receive+0x888>)
 801bf86:	681a      	ldr	r2, [r3, #0]
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf8c:	1ad3      	subs	r3, r2, r3
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	f2c0 842a 	blt.w	801c7e8 <tcp_receive+0xed0>
 801bf94:	4b82      	ldr	r3, [pc, #520]	; (801c1a0 <tcp_receive+0x888>)
 801bf96:	681a      	ldr	r2, [r3, #0]
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf9c:	6879      	ldr	r1, [r7, #4]
 801bf9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bfa0:	440b      	add	r3, r1
 801bfa2:	1ad3      	subs	r3, r2, r3
 801bfa4:	3301      	adds	r3, #1
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	f300 841e 	bgt.w	801c7e8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bfb0:	4b7b      	ldr	r3, [pc, #492]	; (801c1a0 <tcp_receive+0x888>)
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	429a      	cmp	r2, r3
 801bfb6:	f040 829a 	bne.w	801c4ee <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801bfba:	4b7a      	ldr	r3, [pc, #488]	; (801c1a4 <tcp_receive+0x88c>)
 801bfbc:	891c      	ldrh	r4, [r3, #8]
 801bfbe:	4b79      	ldr	r3, [pc, #484]	; (801c1a4 <tcp_receive+0x88c>)
 801bfc0:	68db      	ldr	r3, [r3, #12]
 801bfc2:	899b      	ldrh	r3, [r3, #12]
 801bfc4:	b29b      	uxth	r3, r3
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	f7f7 ff2e 	bl	8013e28 <lwip_htons>
 801bfcc:	4603      	mov	r3, r0
 801bfce:	b2db      	uxtb	r3, r3
 801bfd0:	f003 0303 	and.w	r3, r3, #3
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d001      	beq.n	801bfdc <tcp_receive+0x6c4>
 801bfd8:	2301      	movs	r3, #1
 801bfda:	e000      	b.n	801bfde <tcp_receive+0x6c6>
 801bfdc:	2300      	movs	r3, #0
 801bfde:	4423      	add	r3, r4
 801bfe0:	b29a      	uxth	r2, r3
 801bfe2:	4b71      	ldr	r3, [pc, #452]	; (801c1a8 <tcp_receive+0x890>)
 801bfe4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bfea:	4b6f      	ldr	r3, [pc, #444]	; (801c1a8 <tcp_receive+0x890>)
 801bfec:	881b      	ldrh	r3, [r3, #0]
 801bfee:	429a      	cmp	r2, r3
 801bff0:	d275      	bcs.n	801c0de <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bff2:	4b6c      	ldr	r3, [pc, #432]	; (801c1a4 <tcp_receive+0x88c>)
 801bff4:	68db      	ldr	r3, [r3, #12]
 801bff6:	899b      	ldrh	r3, [r3, #12]
 801bff8:	b29b      	uxth	r3, r3
 801bffa:	4618      	mov	r0, r3
 801bffc:	f7f7 ff14 	bl	8013e28 <lwip_htons>
 801c000:	4603      	mov	r3, r0
 801c002:	b2db      	uxtb	r3, r3
 801c004:	f003 0301 	and.w	r3, r3, #1
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d01f      	beq.n	801c04c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c00c:	4b65      	ldr	r3, [pc, #404]	; (801c1a4 <tcp_receive+0x88c>)
 801c00e:	68db      	ldr	r3, [r3, #12]
 801c010:	899b      	ldrh	r3, [r3, #12]
 801c012:	b29b      	uxth	r3, r3
 801c014:	b21b      	sxth	r3, r3
 801c016:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c01a:	b21c      	sxth	r4, r3
 801c01c:	4b61      	ldr	r3, [pc, #388]	; (801c1a4 <tcp_receive+0x88c>)
 801c01e:	68db      	ldr	r3, [r3, #12]
 801c020:	899b      	ldrh	r3, [r3, #12]
 801c022:	b29b      	uxth	r3, r3
 801c024:	4618      	mov	r0, r3
 801c026:	f7f7 feff 	bl	8013e28 <lwip_htons>
 801c02a:	4603      	mov	r3, r0
 801c02c:	b2db      	uxtb	r3, r3
 801c02e:	b29b      	uxth	r3, r3
 801c030:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c034:	b29b      	uxth	r3, r3
 801c036:	4618      	mov	r0, r3
 801c038:	f7f7 fef6 	bl	8013e28 <lwip_htons>
 801c03c:	4603      	mov	r3, r0
 801c03e:	b21b      	sxth	r3, r3
 801c040:	4323      	orrs	r3, r4
 801c042:	b21a      	sxth	r2, r3
 801c044:	4b57      	ldr	r3, [pc, #348]	; (801c1a4 <tcp_receive+0x88c>)
 801c046:	68db      	ldr	r3, [r3, #12]
 801c048:	b292      	uxth	r2, r2
 801c04a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c050:	4b54      	ldr	r3, [pc, #336]	; (801c1a4 <tcp_receive+0x88c>)
 801c052:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c054:	4b53      	ldr	r3, [pc, #332]	; (801c1a4 <tcp_receive+0x88c>)
 801c056:	68db      	ldr	r3, [r3, #12]
 801c058:	899b      	ldrh	r3, [r3, #12]
 801c05a:	b29b      	uxth	r3, r3
 801c05c:	4618      	mov	r0, r3
 801c05e:	f7f7 fee3 	bl	8013e28 <lwip_htons>
 801c062:	4603      	mov	r3, r0
 801c064:	b2db      	uxtb	r3, r3
 801c066:	f003 0302 	and.w	r3, r3, #2
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d005      	beq.n	801c07a <tcp_receive+0x762>
            inseg.len -= 1;
 801c06e:	4b4d      	ldr	r3, [pc, #308]	; (801c1a4 <tcp_receive+0x88c>)
 801c070:	891b      	ldrh	r3, [r3, #8]
 801c072:	3b01      	subs	r3, #1
 801c074:	b29a      	uxth	r2, r3
 801c076:	4b4b      	ldr	r3, [pc, #300]	; (801c1a4 <tcp_receive+0x88c>)
 801c078:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801c07a:	4b4a      	ldr	r3, [pc, #296]	; (801c1a4 <tcp_receive+0x88c>)
 801c07c:	685b      	ldr	r3, [r3, #4]
 801c07e:	4a49      	ldr	r2, [pc, #292]	; (801c1a4 <tcp_receive+0x88c>)
 801c080:	8912      	ldrh	r2, [r2, #8]
 801c082:	4611      	mov	r1, r2
 801c084:	4618      	mov	r0, r3
 801c086:	f7fb fd1f 	bl	8017ac8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801c08a:	4b46      	ldr	r3, [pc, #280]	; (801c1a4 <tcp_receive+0x88c>)
 801c08c:	891c      	ldrh	r4, [r3, #8]
 801c08e:	4b45      	ldr	r3, [pc, #276]	; (801c1a4 <tcp_receive+0x88c>)
 801c090:	68db      	ldr	r3, [r3, #12]
 801c092:	899b      	ldrh	r3, [r3, #12]
 801c094:	b29b      	uxth	r3, r3
 801c096:	4618      	mov	r0, r3
 801c098:	f7f7 fec6 	bl	8013e28 <lwip_htons>
 801c09c:	4603      	mov	r3, r0
 801c09e:	b2db      	uxtb	r3, r3
 801c0a0:	f003 0303 	and.w	r3, r3, #3
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d001      	beq.n	801c0ac <tcp_receive+0x794>
 801c0a8:	2301      	movs	r3, #1
 801c0aa:	e000      	b.n	801c0ae <tcp_receive+0x796>
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	4423      	add	r3, r4
 801c0b0:	b29a      	uxth	r2, r3
 801c0b2:	4b3d      	ldr	r3, [pc, #244]	; (801c1a8 <tcp_receive+0x890>)
 801c0b4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c0b6:	4b3c      	ldr	r3, [pc, #240]	; (801c1a8 <tcp_receive+0x890>)
 801c0b8:	881b      	ldrh	r3, [r3, #0]
 801c0ba:	461a      	mov	r2, r3
 801c0bc:	4b38      	ldr	r3, [pc, #224]	; (801c1a0 <tcp_receive+0x888>)
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	441a      	add	r2, r3
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0c6:	6879      	ldr	r1, [r7, #4]
 801c0c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c0ca:	440b      	add	r3, r1
 801c0cc:	429a      	cmp	r2, r3
 801c0ce:	d006      	beq.n	801c0de <tcp_receive+0x7c6>
 801c0d0:	4b36      	ldr	r3, [pc, #216]	; (801c1ac <tcp_receive+0x894>)
 801c0d2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801c0d6:	4936      	ldr	r1, [pc, #216]	; (801c1b0 <tcp_receive+0x898>)
 801c0d8:	4836      	ldr	r0, [pc, #216]	; (801c1b4 <tcp_receive+0x89c>)
 801c0da:	f004 f815 	bl	8020108 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	f000 80e7 	beq.w	801c2b6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c0e8:	4b2e      	ldr	r3, [pc, #184]	; (801c1a4 <tcp_receive+0x88c>)
 801c0ea:	68db      	ldr	r3, [r3, #12]
 801c0ec:	899b      	ldrh	r3, [r3, #12]
 801c0ee:	b29b      	uxth	r3, r3
 801c0f0:	4618      	mov	r0, r3
 801c0f2:	f7f7 fe99 	bl	8013e28 <lwip_htons>
 801c0f6:	4603      	mov	r3, r0
 801c0f8:	b2db      	uxtb	r3, r3
 801c0fa:	f003 0301 	and.w	r3, r3, #1
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d010      	beq.n	801c124 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801c102:	e00a      	b.n	801c11a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c108:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c10e:	681a      	ldr	r2, [r3, #0]
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801c114:	68f8      	ldr	r0, [r7, #12]
 801c116:	f7fd fcc4 	bl	8019aa2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d1f0      	bne.n	801c104 <tcp_receive+0x7ec>
 801c122:	e0c8      	b.n	801c2b6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c128:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801c12a:	e052      	b.n	801c1d2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c12c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c12e:	68db      	ldr	r3, [r3, #12]
 801c130:	899b      	ldrh	r3, [r3, #12]
 801c132:	b29b      	uxth	r3, r3
 801c134:	4618      	mov	r0, r3
 801c136:	f7f7 fe77 	bl	8013e28 <lwip_htons>
 801c13a:	4603      	mov	r3, r0
 801c13c:	b2db      	uxtb	r3, r3
 801c13e:	f003 0301 	and.w	r3, r3, #1
 801c142:	2b00      	cmp	r3, #0
 801c144:	d03d      	beq.n	801c1c2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801c146:	4b17      	ldr	r3, [pc, #92]	; (801c1a4 <tcp_receive+0x88c>)
 801c148:	68db      	ldr	r3, [r3, #12]
 801c14a:	899b      	ldrh	r3, [r3, #12]
 801c14c:	b29b      	uxth	r3, r3
 801c14e:	4618      	mov	r0, r3
 801c150:	f7f7 fe6a 	bl	8013e28 <lwip_htons>
 801c154:	4603      	mov	r3, r0
 801c156:	b2db      	uxtb	r3, r3
 801c158:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d130      	bne.n	801c1c2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c160:	4b10      	ldr	r3, [pc, #64]	; (801c1a4 <tcp_receive+0x88c>)
 801c162:	68db      	ldr	r3, [r3, #12]
 801c164:	899b      	ldrh	r3, [r3, #12]
 801c166:	b29c      	uxth	r4, r3
 801c168:	2001      	movs	r0, #1
 801c16a:	f7f7 fe5d 	bl	8013e28 <lwip_htons>
 801c16e:	4603      	mov	r3, r0
 801c170:	461a      	mov	r2, r3
 801c172:	4b0c      	ldr	r3, [pc, #48]	; (801c1a4 <tcp_receive+0x88c>)
 801c174:	68db      	ldr	r3, [r3, #12]
 801c176:	4322      	orrs	r2, r4
 801c178:	b292      	uxth	r2, r2
 801c17a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801c17c:	4b09      	ldr	r3, [pc, #36]	; (801c1a4 <tcp_receive+0x88c>)
 801c17e:	891c      	ldrh	r4, [r3, #8]
 801c180:	4b08      	ldr	r3, [pc, #32]	; (801c1a4 <tcp_receive+0x88c>)
 801c182:	68db      	ldr	r3, [r3, #12]
 801c184:	899b      	ldrh	r3, [r3, #12]
 801c186:	b29b      	uxth	r3, r3
 801c188:	4618      	mov	r0, r3
 801c18a:	f7f7 fe4d 	bl	8013e28 <lwip_htons>
 801c18e:	4603      	mov	r3, r0
 801c190:	b2db      	uxtb	r3, r3
 801c192:	f003 0303 	and.w	r3, r3, #3
 801c196:	2b00      	cmp	r3, #0
 801c198:	d00e      	beq.n	801c1b8 <tcp_receive+0x8a0>
 801c19a:	2301      	movs	r3, #1
 801c19c:	e00d      	b.n	801c1ba <tcp_receive+0x8a2>
 801c19e:	bf00      	nop
 801c1a0:	24010050 	.word	0x24010050
 801c1a4:	24010030 	.word	0x24010030
 801c1a8:	2401005a 	.word	0x2401005a
 801c1ac:	08023744 	.word	0x08023744
 801c1b0:	08023b30 	.word	0x08023b30
 801c1b4:	080237d4 	.word	0x080237d4
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	4423      	add	r3, r4
 801c1bc:	b29a      	uxth	r2, r3
 801c1be:	4b98      	ldr	r3, [pc, #608]	; (801c420 <tcp_receive+0xb08>)
 801c1c0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801c1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1c4:	613b      	str	r3, [r7, #16]
              next = next->next;
 801c1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801c1cc:	6938      	ldr	r0, [r7, #16]
 801c1ce:	f7fd fc68 	bl	8019aa2 <tcp_seg_free>
            while (next &&
 801c1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d00e      	beq.n	801c1f6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801c1d8:	4b91      	ldr	r3, [pc, #580]	; (801c420 <tcp_receive+0xb08>)
 801c1da:	881b      	ldrh	r3, [r3, #0]
 801c1dc:	461a      	mov	r2, r3
 801c1de:	4b91      	ldr	r3, [pc, #580]	; (801c424 <tcp_receive+0xb0c>)
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	441a      	add	r2, r3
 801c1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1e6:	68db      	ldr	r3, [r3, #12]
 801c1e8:	685b      	ldr	r3, [r3, #4]
 801c1ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c1ec:	8909      	ldrh	r1, [r1, #8]
 801c1ee:	440b      	add	r3, r1
 801c1f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	da9a      	bge.n	801c12c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801c1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d059      	beq.n	801c2b0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801c1fc:	4b88      	ldr	r3, [pc, #544]	; (801c420 <tcp_receive+0xb08>)
 801c1fe:	881b      	ldrh	r3, [r3, #0]
 801c200:	461a      	mov	r2, r3
 801c202:	4b88      	ldr	r3, [pc, #544]	; (801c424 <tcp_receive+0xb0c>)
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	441a      	add	r2, r3
 801c208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c20a:	68db      	ldr	r3, [r3, #12]
 801c20c:	685b      	ldr	r3, [r3, #4]
 801c20e:	1ad3      	subs	r3, r2, r3
            if (next &&
 801c210:	2b00      	cmp	r3, #0
 801c212:	dd4d      	ble.n	801c2b0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801c214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c216:	68db      	ldr	r3, [r3, #12]
 801c218:	685b      	ldr	r3, [r3, #4]
 801c21a:	b29a      	uxth	r2, r3
 801c21c:	4b81      	ldr	r3, [pc, #516]	; (801c424 <tcp_receive+0xb0c>)
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	b29b      	uxth	r3, r3
 801c222:	1ad3      	subs	r3, r2, r3
 801c224:	b29a      	uxth	r2, r3
 801c226:	4b80      	ldr	r3, [pc, #512]	; (801c428 <tcp_receive+0xb10>)
 801c228:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c22a:	4b7f      	ldr	r3, [pc, #508]	; (801c428 <tcp_receive+0xb10>)
 801c22c:	68db      	ldr	r3, [r3, #12]
 801c22e:	899b      	ldrh	r3, [r3, #12]
 801c230:	b29b      	uxth	r3, r3
 801c232:	4618      	mov	r0, r3
 801c234:	f7f7 fdf8 	bl	8013e28 <lwip_htons>
 801c238:	4603      	mov	r3, r0
 801c23a:	b2db      	uxtb	r3, r3
 801c23c:	f003 0302 	and.w	r3, r3, #2
 801c240:	2b00      	cmp	r3, #0
 801c242:	d005      	beq.n	801c250 <tcp_receive+0x938>
                inseg.len -= 1;
 801c244:	4b78      	ldr	r3, [pc, #480]	; (801c428 <tcp_receive+0xb10>)
 801c246:	891b      	ldrh	r3, [r3, #8]
 801c248:	3b01      	subs	r3, #1
 801c24a:	b29a      	uxth	r2, r3
 801c24c:	4b76      	ldr	r3, [pc, #472]	; (801c428 <tcp_receive+0xb10>)
 801c24e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801c250:	4b75      	ldr	r3, [pc, #468]	; (801c428 <tcp_receive+0xb10>)
 801c252:	685b      	ldr	r3, [r3, #4]
 801c254:	4a74      	ldr	r2, [pc, #464]	; (801c428 <tcp_receive+0xb10>)
 801c256:	8912      	ldrh	r2, [r2, #8]
 801c258:	4611      	mov	r1, r2
 801c25a:	4618      	mov	r0, r3
 801c25c:	f7fb fc34 	bl	8017ac8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801c260:	4b71      	ldr	r3, [pc, #452]	; (801c428 <tcp_receive+0xb10>)
 801c262:	891c      	ldrh	r4, [r3, #8]
 801c264:	4b70      	ldr	r3, [pc, #448]	; (801c428 <tcp_receive+0xb10>)
 801c266:	68db      	ldr	r3, [r3, #12]
 801c268:	899b      	ldrh	r3, [r3, #12]
 801c26a:	b29b      	uxth	r3, r3
 801c26c:	4618      	mov	r0, r3
 801c26e:	f7f7 fddb 	bl	8013e28 <lwip_htons>
 801c272:	4603      	mov	r3, r0
 801c274:	b2db      	uxtb	r3, r3
 801c276:	f003 0303 	and.w	r3, r3, #3
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d001      	beq.n	801c282 <tcp_receive+0x96a>
 801c27e:	2301      	movs	r3, #1
 801c280:	e000      	b.n	801c284 <tcp_receive+0x96c>
 801c282:	2300      	movs	r3, #0
 801c284:	4423      	add	r3, r4
 801c286:	b29a      	uxth	r2, r3
 801c288:	4b65      	ldr	r3, [pc, #404]	; (801c420 <tcp_receive+0xb08>)
 801c28a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801c28c:	4b64      	ldr	r3, [pc, #400]	; (801c420 <tcp_receive+0xb08>)
 801c28e:	881b      	ldrh	r3, [r3, #0]
 801c290:	461a      	mov	r2, r3
 801c292:	4b64      	ldr	r3, [pc, #400]	; (801c424 <tcp_receive+0xb0c>)
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	441a      	add	r2, r3
 801c298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c29a:	68db      	ldr	r3, [r3, #12]
 801c29c:	685b      	ldr	r3, [r3, #4]
 801c29e:	429a      	cmp	r2, r3
 801c2a0:	d006      	beq.n	801c2b0 <tcp_receive+0x998>
 801c2a2:	4b62      	ldr	r3, [pc, #392]	; (801c42c <tcp_receive+0xb14>)
 801c2a4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801c2a8:	4961      	ldr	r1, [pc, #388]	; (801c430 <tcp_receive+0xb18>)
 801c2aa:	4862      	ldr	r0, [pc, #392]	; (801c434 <tcp_receive+0xb1c>)
 801c2ac:	f003 ff2c 	bl	8020108 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c2b4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801c2b6:	4b5a      	ldr	r3, [pc, #360]	; (801c420 <tcp_receive+0xb08>)
 801c2b8:	881b      	ldrh	r3, [r3, #0]
 801c2ba:	461a      	mov	r2, r3
 801c2bc:	4b59      	ldr	r3, [pc, #356]	; (801c424 <tcp_receive+0xb0c>)
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	441a      	add	r2, r3
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c2ca:	4b55      	ldr	r3, [pc, #340]	; (801c420 <tcp_receive+0xb08>)
 801c2cc:	881b      	ldrh	r3, [r3, #0]
 801c2ce:	429a      	cmp	r2, r3
 801c2d0:	d206      	bcs.n	801c2e0 <tcp_receive+0x9c8>
 801c2d2:	4b56      	ldr	r3, [pc, #344]	; (801c42c <tcp_receive+0xb14>)
 801c2d4:	f240 6207 	movw	r2, #1543	; 0x607
 801c2d8:	4957      	ldr	r1, [pc, #348]	; (801c438 <tcp_receive+0xb20>)
 801c2da:	4856      	ldr	r0, [pc, #344]	; (801c434 <tcp_receive+0xb1c>)
 801c2dc:	f003 ff14 	bl	8020108 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c2e4:	4b4e      	ldr	r3, [pc, #312]	; (801c420 <tcp_receive+0xb08>)
 801c2e6:	881b      	ldrh	r3, [r3, #0]
 801c2e8:	1ad3      	subs	r3, r2, r3
 801c2ea:	b29a      	uxth	r2, r3
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801c2f0:	6878      	ldr	r0, [r7, #4]
 801c2f2:	f7fc fead 	bl	8019050 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801c2f6:	4b4c      	ldr	r3, [pc, #304]	; (801c428 <tcp_receive+0xb10>)
 801c2f8:	685b      	ldr	r3, [r3, #4]
 801c2fa:	891b      	ldrh	r3, [r3, #8]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d006      	beq.n	801c30e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801c300:	4b49      	ldr	r3, [pc, #292]	; (801c428 <tcp_receive+0xb10>)
 801c302:	685b      	ldr	r3, [r3, #4]
 801c304:	4a4d      	ldr	r2, [pc, #308]	; (801c43c <tcp_receive+0xb24>)
 801c306:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801c308:	4b47      	ldr	r3, [pc, #284]	; (801c428 <tcp_receive+0xb10>)
 801c30a:	2200      	movs	r2, #0
 801c30c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c30e:	4b46      	ldr	r3, [pc, #280]	; (801c428 <tcp_receive+0xb10>)
 801c310:	68db      	ldr	r3, [r3, #12]
 801c312:	899b      	ldrh	r3, [r3, #12]
 801c314:	b29b      	uxth	r3, r3
 801c316:	4618      	mov	r0, r3
 801c318:	f7f7 fd86 	bl	8013e28 <lwip_htons>
 801c31c:	4603      	mov	r3, r0
 801c31e:	b2db      	uxtb	r3, r3
 801c320:	f003 0301 	and.w	r3, r3, #1
 801c324:	2b00      	cmp	r3, #0
 801c326:	f000 80b8 	beq.w	801c49a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801c32a:	4b45      	ldr	r3, [pc, #276]	; (801c440 <tcp_receive+0xb28>)
 801c32c:	781b      	ldrb	r3, [r3, #0]
 801c32e:	f043 0320 	orr.w	r3, r3, #32
 801c332:	b2da      	uxtb	r2, r3
 801c334:	4b42      	ldr	r3, [pc, #264]	; (801c440 <tcp_receive+0xb28>)
 801c336:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801c338:	e0af      	b.n	801c49a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c33e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c344:	68db      	ldr	r3, [r3, #12]
 801c346:	685b      	ldr	r3, [r3, #4]
 801c348:	4a36      	ldr	r2, [pc, #216]	; (801c424 <tcp_receive+0xb0c>)
 801c34a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c34c:	68bb      	ldr	r3, [r7, #8]
 801c34e:	891b      	ldrh	r3, [r3, #8]
 801c350:	461c      	mov	r4, r3
 801c352:	68bb      	ldr	r3, [r7, #8]
 801c354:	68db      	ldr	r3, [r3, #12]
 801c356:	899b      	ldrh	r3, [r3, #12]
 801c358:	b29b      	uxth	r3, r3
 801c35a:	4618      	mov	r0, r3
 801c35c:	f7f7 fd64 	bl	8013e28 <lwip_htons>
 801c360:	4603      	mov	r3, r0
 801c362:	b2db      	uxtb	r3, r3
 801c364:	f003 0303 	and.w	r3, r3, #3
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d001      	beq.n	801c370 <tcp_receive+0xa58>
 801c36c:	2301      	movs	r3, #1
 801c36e:	e000      	b.n	801c372 <tcp_receive+0xa5a>
 801c370:	2300      	movs	r3, #0
 801c372:	191a      	adds	r2, r3, r4
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c378:	441a      	add	r2, r3
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c382:	461c      	mov	r4, r3
 801c384:	68bb      	ldr	r3, [r7, #8]
 801c386:	891b      	ldrh	r3, [r3, #8]
 801c388:	461d      	mov	r5, r3
 801c38a:	68bb      	ldr	r3, [r7, #8]
 801c38c:	68db      	ldr	r3, [r3, #12]
 801c38e:	899b      	ldrh	r3, [r3, #12]
 801c390:	b29b      	uxth	r3, r3
 801c392:	4618      	mov	r0, r3
 801c394:	f7f7 fd48 	bl	8013e28 <lwip_htons>
 801c398:	4603      	mov	r3, r0
 801c39a:	b2db      	uxtb	r3, r3
 801c39c:	f003 0303 	and.w	r3, r3, #3
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d001      	beq.n	801c3a8 <tcp_receive+0xa90>
 801c3a4:	2301      	movs	r3, #1
 801c3a6:	e000      	b.n	801c3aa <tcp_receive+0xa92>
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	442b      	add	r3, r5
 801c3ac:	429c      	cmp	r4, r3
 801c3ae:	d206      	bcs.n	801c3be <tcp_receive+0xaa6>
 801c3b0:	4b1e      	ldr	r3, [pc, #120]	; (801c42c <tcp_receive+0xb14>)
 801c3b2:	f240 622b 	movw	r2, #1579	; 0x62b
 801c3b6:	4923      	ldr	r1, [pc, #140]	; (801c444 <tcp_receive+0xb2c>)
 801c3b8:	481e      	ldr	r0, [pc, #120]	; (801c434 <tcp_receive+0xb1c>)
 801c3ba:	f003 fea5 	bl	8020108 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801c3be:	68bb      	ldr	r3, [r7, #8]
 801c3c0:	891b      	ldrh	r3, [r3, #8]
 801c3c2:	461c      	mov	r4, r3
 801c3c4:	68bb      	ldr	r3, [r7, #8]
 801c3c6:	68db      	ldr	r3, [r3, #12]
 801c3c8:	899b      	ldrh	r3, [r3, #12]
 801c3ca:	b29b      	uxth	r3, r3
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	f7f7 fd2b 	bl	8013e28 <lwip_htons>
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	b2db      	uxtb	r3, r3
 801c3d6:	f003 0303 	and.w	r3, r3, #3
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d001      	beq.n	801c3e2 <tcp_receive+0xaca>
 801c3de:	2301      	movs	r3, #1
 801c3e0:	e000      	b.n	801c3e4 <tcp_receive+0xacc>
 801c3e2:	2300      	movs	r3, #0
 801c3e4:	1919      	adds	r1, r3, r4
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c3ea:	b28b      	uxth	r3, r1
 801c3ec:	1ad3      	subs	r3, r2, r3
 801c3ee:	b29a      	uxth	r2, r3
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801c3f4:	6878      	ldr	r0, [r7, #4]
 801c3f6:	f7fc fe2b 	bl	8019050 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801c3fa:	68bb      	ldr	r3, [r7, #8]
 801c3fc:	685b      	ldr	r3, [r3, #4]
 801c3fe:	891b      	ldrh	r3, [r3, #8]
 801c400:	2b00      	cmp	r3, #0
 801c402:	d028      	beq.n	801c456 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801c404:	4b0d      	ldr	r3, [pc, #52]	; (801c43c <tcp_receive+0xb24>)
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d01d      	beq.n	801c448 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801c40c:	4b0b      	ldr	r3, [pc, #44]	; (801c43c <tcp_receive+0xb24>)
 801c40e:	681a      	ldr	r2, [r3, #0]
 801c410:	68bb      	ldr	r3, [r7, #8]
 801c412:	685b      	ldr	r3, [r3, #4]
 801c414:	4619      	mov	r1, r3
 801c416:	4610      	mov	r0, r2
 801c418:	f7fb fda8 	bl	8017f6c <pbuf_cat>
 801c41c:	e018      	b.n	801c450 <tcp_receive+0xb38>
 801c41e:	bf00      	nop
 801c420:	2401005a 	.word	0x2401005a
 801c424:	24010050 	.word	0x24010050
 801c428:	24010030 	.word	0x24010030
 801c42c:	08023744 	.word	0x08023744
 801c430:	08023b68 	.word	0x08023b68
 801c434:	080237d4 	.word	0x080237d4
 801c438:	08023ba4 	.word	0x08023ba4
 801c43c:	24010060 	.word	0x24010060
 801c440:	2401005d 	.word	0x2401005d
 801c444:	08023bc4 	.word	0x08023bc4
            } else {
              recv_data = cseg->p;
 801c448:	68bb      	ldr	r3, [r7, #8]
 801c44a:	685b      	ldr	r3, [r3, #4]
 801c44c:	4a70      	ldr	r2, [pc, #448]	; (801c610 <tcp_receive+0xcf8>)
 801c44e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801c450:	68bb      	ldr	r3, [r7, #8]
 801c452:	2200      	movs	r2, #0
 801c454:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c456:	68bb      	ldr	r3, [r7, #8]
 801c458:	68db      	ldr	r3, [r3, #12]
 801c45a:	899b      	ldrh	r3, [r3, #12]
 801c45c:	b29b      	uxth	r3, r3
 801c45e:	4618      	mov	r0, r3
 801c460:	f7f7 fce2 	bl	8013e28 <lwip_htons>
 801c464:	4603      	mov	r3, r0
 801c466:	b2db      	uxtb	r3, r3
 801c468:	f003 0301 	and.w	r3, r3, #1
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d00d      	beq.n	801c48c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801c470:	4b68      	ldr	r3, [pc, #416]	; (801c614 <tcp_receive+0xcfc>)
 801c472:	781b      	ldrb	r3, [r3, #0]
 801c474:	f043 0320 	orr.w	r3, r3, #32
 801c478:	b2da      	uxtb	r2, r3
 801c47a:	4b66      	ldr	r3, [pc, #408]	; (801c614 <tcp_receive+0xcfc>)
 801c47c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	7d1b      	ldrb	r3, [r3, #20]
 801c482:	2b04      	cmp	r3, #4
 801c484:	d102      	bne.n	801c48c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	2207      	movs	r2, #7
 801c48a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801c48c:	68bb      	ldr	r3, [r7, #8]
 801c48e:	681a      	ldr	r2, [r3, #0]
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801c494:	68b8      	ldr	r0, [r7, #8]
 801c496:	f7fd fb04 	bl	8019aa2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d008      	beq.n	801c4b4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c4a6:	68db      	ldr	r3, [r3, #12]
 801c4a8:	685a      	ldr	r2, [r3, #4]
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801c4ae:	429a      	cmp	r2, r3
 801c4b0:	f43f af43 	beq.w	801c33a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	8b5b      	ldrh	r3, [r3, #26]
 801c4b8:	f003 0301 	and.w	r3, r3, #1
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d00e      	beq.n	801c4de <tcp_receive+0xbc6>
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	8b5b      	ldrh	r3, [r3, #26]
 801c4c4:	f023 0301 	bic.w	r3, r3, #1
 801c4c8:	b29a      	uxth	r2, r3
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	835a      	strh	r2, [r3, #26]
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	8b5b      	ldrh	r3, [r3, #26]
 801c4d2:	f043 0302 	orr.w	r3, r3, #2
 801c4d6:	b29a      	uxth	r2, r3
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801c4dc:	e188      	b.n	801c7f0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	8b5b      	ldrh	r3, [r3, #26]
 801c4e2:	f043 0301 	orr.w	r3, r3, #1
 801c4e6:	b29a      	uxth	r2, r3
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801c4ec:	e180      	b.n	801c7f0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d106      	bne.n	801c504 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801c4f6:	4848      	ldr	r0, [pc, #288]	; (801c618 <tcp_receive+0xd00>)
 801c4f8:	f7fd faec 	bl	8019ad4 <tcp_seg_copy>
 801c4fc:	4602      	mov	r2, r0
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	675a      	str	r2, [r3, #116]	; 0x74
 801c502:	e16d      	b.n	801c7e0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801c504:	2300      	movs	r3, #0
 801c506:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c50c:	63bb      	str	r3, [r7, #56]	; 0x38
 801c50e:	e157      	b.n	801c7c0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c512:	68db      	ldr	r3, [r3, #12]
 801c514:	685a      	ldr	r2, [r3, #4]
 801c516:	4b41      	ldr	r3, [pc, #260]	; (801c61c <tcp_receive+0xd04>)
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	429a      	cmp	r2, r3
 801c51c:	d11d      	bne.n	801c55a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801c51e:	4b3e      	ldr	r3, [pc, #248]	; (801c618 <tcp_receive+0xd00>)
 801c520:	891a      	ldrh	r2, [r3, #8]
 801c522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c524:	891b      	ldrh	r3, [r3, #8]
 801c526:	429a      	cmp	r2, r3
 801c528:	f240 814f 	bls.w	801c7ca <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c52c:	483a      	ldr	r0, [pc, #232]	; (801c618 <tcp_receive+0xd00>)
 801c52e:	f7fd fad1 	bl	8019ad4 <tcp_seg_copy>
 801c532:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801c534:	697b      	ldr	r3, [r7, #20]
 801c536:	2b00      	cmp	r3, #0
 801c538:	f000 8149 	beq.w	801c7ce <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801c53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d003      	beq.n	801c54a <tcp_receive+0xc32>
                    prev->next = cseg;
 801c542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c544:	697a      	ldr	r2, [r7, #20]
 801c546:	601a      	str	r2, [r3, #0]
 801c548:	e002      	b.n	801c550 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	697a      	ldr	r2, [r7, #20]
 801c54e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801c550:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c552:	6978      	ldr	r0, [r7, #20]
 801c554:	f7ff f8dc 	bl	801b710 <tcp_oos_insert_segment>
                }
                break;
 801c558:	e139      	b.n	801c7ce <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801c55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d117      	bne.n	801c590 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801c560:	4b2e      	ldr	r3, [pc, #184]	; (801c61c <tcp_receive+0xd04>)
 801c562:	681a      	ldr	r2, [r3, #0]
 801c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c566:	68db      	ldr	r3, [r3, #12]
 801c568:	685b      	ldr	r3, [r3, #4]
 801c56a:	1ad3      	subs	r3, r2, r3
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	da57      	bge.n	801c620 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c570:	4829      	ldr	r0, [pc, #164]	; (801c618 <tcp_receive+0xd00>)
 801c572:	f7fd faaf 	bl	8019ad4 <tcp_seg_copy>
 801c576:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801c578:	69bb      	ldr	r3, [r7, #24]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	f000 8129 	beq.w	801c7d2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	69ba      	ldr	r2, [r7, #24]
 801c584:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801c586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c588:	69b8      	ldr	r0, [r7, #24]
 801c58a:	f7ff f8c1 	bl	801b710 <tcp_oos_insert_segment>
                  }
                  break;
 801c58e:	e120      	b.n	801c7d2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801c590:	4b22      	ldr	r3, [pc, #136]	; (801c61c <tcp_receive+0xd04>)
 801c592:	681a      	ldr	r2, [r3, #0]
 801c594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c596:	68db      	ldr	r3, [r3, #12]
 801c598:	685b      	ldr	r3, [r3, #4]
 801c59a:	1ad3      	subs	r3, r2, r3
 801c59c:	3b01      	subs	r3, #1
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	db3e      	blt.n	801c620 <tcp_receive+0xd08>
 801c5a2:	4b1e      	ldr	r3, [pc, #120]	; (801c61c <tcp_receive+0xd04>)
 801c5a4:	681a      	ldr	r2, [r3, #0]
 801c5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5a8:	68db      	ldr	r3, [r3, #12]
 801c5aa:	685b      	ldr	r3, [r3, #4]
 801c5ac:	1ad3      	subs	r3, r2, r3
 801c5ae:	3301      	adds	r3, #1
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	dc35      	bgt.n	801c620 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c5b4:	4818      	ldr	r0, [pc, #96]	; (801c618 <tcp_receive+0xd00>)
 801c5b6:	f7fd fa8d 	bl	8019ad4 <tcp_seg_copy>
 801c5ba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801c5bc:	69fb      	ldr	r3, [r7, #28]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	f000 8109 	beq.w	801c7d6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801c5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5c6:	68db      	ldr	r3, [r3, #12]
 801c5c8:	685b      	ldr	r3, [r3, #4]
 801c5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c5cc:	8912      	ldrh	r2, [r2, #8]
 801c5ce:	441a      	add	r2, r3
 801c5d0:	4b12      	ldr	r3, [pc, #72]	; (801c61c <tcp_receive+0xd04>)
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	1ad3      	subs	r3, r2, r3
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	dd12      	ble.n	801c600 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c5da:	4b10      	ldr	r3, [pc, #64]	; (801c61c <tcp_receive+0xd04>)
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	b29a      	uxth	r2, r3
 801c5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5e2:	68db      	ldr	r3, [r3, #12]
 801c5e4:	685b      	ldr	r3, [r3, #4]
 801c5e6:	b29b      	uxth	r3, r3
 801c5e8:	1ad3      	subs	r3, r2, r3
 801c5ea:	b29a      	uxth	r2, r3
 801c5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801c5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5f2:	685a      	ldr	r2, [r3, #4]
 801c5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5f6:	891b      	ldrh	r3, [r3, #8]
 801c5f8:	4619      	mov	r1, r3
 801c5fa:	4610      	mov	r0, r2
 801c5fc:	f7fb fa64 	bl	8017ac8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801c600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c602:	69fa      	ldr	r2, [r7, #28]
 801c604:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801c606:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c608:	69f8      	ldr	r0, [r7, #28]
 801c60a:	f7ff f881 	bl	801b710 <tcp_oos_insert_segment>
                  }
                  break;
 801c60e:	e0e2      	b.n	801c7d6 <tcp_receive+0xebe>
 801c610:	24010060 	.word	0x24010060
 801c614:	2401005d 	.word	0x2401005d
 801c618:	24010030 	.word	0x24010030
 801c61c:	24010050 	.word	0x24010050
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c622:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801c624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	f040 80c6 	bne.w	801c7ba <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801c62e:	4b80      	ldr	r3, [pc, #512]	; (801c830 <tcp_receive+0xf18>)
 801c630:	681a      	ldr	r2, [r3, #0]
 801c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c634:	68db      	ldr	r3, [r3, #12]
 801c636:	685b      	ldr	r3, [r3, #4]
 801c638:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	f340 80bd 	ble.w	801c7ba <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c642:	68db      	ldr	r3, [r3, #12]
 801c644:	899b      	ldrh	r3, [r3, #12]
 801c646:	b29b      	uxth	r3, r3
 801c648:	4618      	mov	r0, r3
 801c64a:	f7f7 fbed 	bl	8013e28 <lwip_htons>
 801c64e:	4603      	mov	r3, r0
 801c650:	b2db      	uxtb	r3, r3
 801c652:	f003 0301 	and.w	r3, r3, #1
 801c656:	2b00      	cmp	r3, #0
 801c658:	f040 80bf 	bne.w	801c7da <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801c65c:	4875      	ldr	r0, [pc, #468]	; (801c834 <tcp_receive+0xf1c>)
 801c65e:	f7fd fa39 	bl	8019ad4 <tcp_seg_copy>
 801c662:	4602      	mov	r2, r0
 801c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c666:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	f000 80b6 	beq.w	801c7de <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c674:	68db      	ldr	r3, [r3, #12]
 801c676:	685b      	ldr	r3, [r3, #4]
 801c678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c67a:	8912      	ldrh	r2, [r2, #8]
 801c67c:	441a      	add	r2, r3
 801c67e:	4b6c      	ldr	r3, [pc, #432]	; (801c830 <tcp_receive+0xf18>)
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	1ad3      	subs	r3, r2, r3
 801c684:	2b00      	cmp	r3, #0
 801c686:	dd12      	ble.n	801c6ae <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c688:	4b69      	ldr	r3, [pc, #420]	; (801c830 <tcp_receive+0xf18>)
 801c68a:	681b      	ldr	r3, [r3, #0]
 801c68c:	b29a      	uxth	r2, r3
 801c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c690:	68db      	ldr	r3, [r3, #12]
 801c692:	685b      	ldr	r3, [r3, #4]
 801c694:	b29b      	uxth	r3, r3
 801c696:	1ad3      	subs	r3, r2, r3
 801c698:	b29a      	uxth	r2, r3
 801c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c69c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801c69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6a0:	685a      	ldr	r2, [r3, #4]
 801c6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6a4:	891b      	ldrh	r3, [r3, #8]
 801c6a6:	4619      	mov	r1, r3
 801c6a8:	4610      	mov	r0, r2
 801c6aa:	f7fb fa0d 	bl	8017ac8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801c6ae:	4b62      	ldr	r3, [pc, #392]	; (801c838 <tcp_receive+0xf20>)
 801c6b0:	881b      	ldrh	r3, [r3, #0]
 801c6b2:	461a      	mov	r2, r3
 801c6b4:	4b5e      	ldr	r3, [pc, #376]	; (801c830 <tcp_receive+0xf18>)
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	441a      	add	r2, r3
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6be:	6879      	ldr	r1, [r7, #4]
 801c6c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c6c2:	440b      	add	r3, r1
 801c6c4:	1ad3      	subs	r3, r2, r3
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	f340 8089 	ble.w	801c7de <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	68db      	ldr	r3, [r3, #12]
 801c6d2:	899b      	ldrh	r3, [r3, #12]
 801c6d4:	b29b      	uxth	r3, r3
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	f7f7 fba6 	bl	8013e28 <lwip_htons>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	b2db      	uxtb	r3, r3
 801c6e0:	f003 0301 	and.w	r3, r3, #1
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d022      	beq.n	801c72e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	68db      	ldr	r3, [r3, #12]
 801c6ee:	899b      	ldrh	r3, [r3, #12]
 801c6f0:	b29b      	uxth	r3, r3
 801c6f2:	b21b      	sxth	r3, r3
 801c6f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c6f8:	b21c      	sxth	r4, r3
 801c6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	68db      	ldr	r3, [r3, #12]
 801c700:	899b      	ldrh	r3, [r3, #12]
 801c702:	b29b      	uxth	r3, r3
 801c704:	4618      	mov	r0, r3
 801c706:	f7f7 fb8f 	bl	8013e28 <lwip_htons>
 801c70a:	4603      	mov	r3, r0
 801c70c:	b2db      	uxtb	r3, r3
 801c70e:	b29b      	uxth	r3, r3
 801c710:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c714:	b29b      	uxth	r3, r3
 801c716:	4618      	mov	r0, r3
 801c718:	f7f7 fb86 	bl	8013e28 <lwip_htons>
 801c71c:	4603      	mov	r3, r0
 801c71e:	b21b      	sxth	r3, r3
 801c720:	4323      	orrs	r3, r4
 801c722:	b21a      	sxth	r2, r3
 801c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	68db      	ldr	r3, [r3, #12]
 801c72a:	b292      	uxth	r2, r2
 801c72c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c732:	b29a      	uxth	r2, r3
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c738:	4413      	add	r3, r2
 801c73a:	b299      	uxth	r1, r3
 801c73c:	4b3c      	ldr	r3, [pc, #240]	; (801c830 <tcp_receive+0xf18>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	b29a      	uxth	r2, r3
 801c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	1a8a      	subs	r2, r1, r2
 801c748:	b292      	uxth	r2, r2
 801c74a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	685a      	ldr	r2, [r3, #4]
 801c752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	891b      	ldrh	r3, [r3, #8]
 801c758:	4619      	mov	r1, r3
 801c75a:	4610      	mov	r0, r2
 801c75c:	f7fb f9b4 	bl	8017ac8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	891c      	ldrh	r4, [r3, #8]
 801c766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	68db      	ldr	r3, [r3, #12]
 801c76c:	899b      	ldrh	r3, [r3, #12]
 801c76e:	b29b      	uxth	r3, r3
 801c770:	4618      	mov	r0, r3
 801c772:	f7f7 fb59 	bl	8013e28 <lwip_htons>
 801c776:	4603      	mov	r3, r0
 801c778:	b2db      	uxtb	r3, r3
 801c77a:	f003 0303 	and.w	r3, r3, #3
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d001      	beq.n	801c786 <tcp_receive+0xe6e>
 801c782:	2301      	movs	r3, #1
 801c784:	e000      	b.n	801c788 <tcp_receive+0xe70>
 801c786:	2300      	movs	r3, #0
 801c788:	4423      	add	r3, r4
 801c78a:	b29a      	uxth	r2, r3
 801c78c:	4b2a      	ldr	r3, [pc, #168]	; (801c838 <tcp_receive+0xf20>)
 801c78e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c790:	4b29      	ldr	r3, [pc, #164]	; (801c838 <tcp_receive+0xf20>)
 801c792:	881b      	ldrh	r3, [r3, #0]
 801c794:	461a      	mov	r2, r3
 801c796:	4b26      	ldr	r3, [pc, #152]	; (801c830 <tcp_receive+0xf18>)
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	441a      	add	r2, r3
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7a0:	6879      	ldr	r1, [r7, #4]
 801c7a2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c7a4:	440b      	add	r3, r1
 801c7a6:	429a      	cmp	r2, r3
 801c7a8:	d019      	beq.n	801c7de <tcp_receive+0xec6>
 801c7aa:	4b24      	ldr	r3, [pc, #144]	; (801c83c <tcp_receive+0xf24>)
 801c7ac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801c7b0:	4923      	ldr	r1, [pc, #140]	; (801c840 <tcp_receive+0xf28>)
 801c7b2:	4824      	ldr	r0, [pc, #144]	; (801c844 <tcp_receive+0xf2c>)
 801c7b4:	f003 fca8 	bl	8020108 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801c7b8:	e011      	b.n	801c7de <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	63bb      	str	r3, [r7, #56]	; 0x38
 801c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	f47f aea4 	bne.w	801c510 <tcp_receive+0xbf8>
 801c7c8:	e00a      	b.n	801c7e0 <tcp_receive+0xec8>
                break;
 801c7ca:	bf00      	nop
 801c7cc:	e008      	b.n	801c7e0 <tcp_receive+0xec8>
                break;
 801c7ce:	bf00      	nop
 801c7d0:	e006      	b.n	801c7e0 <tcp_receive+0xec8>
                  break;
 801c7d2:	bf00      	nop
 801c7d4:	e004      	b.n	801c7e0 <tcp_receive+0xec8>
                  break;
 801c7d6:	bf00      	nop
 801c7d8:	e002      	b.n	801c7e0 <tcp_receive+0xec8>
                  break;
 801c7da:	bf00      	nop
 801c7dc:	e000      	b.n	801c7e0 <tcp_receive+0xec8>
                break;
 801c7de:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801c7e0:	6878      	ldr	r0, [r7, #4]
 801c7e2:	f001 fe8b 	bl	801e4fc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801c7e6:	e003      	b.n	801c7f0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801c7e8:	6878      	ldr	r0, [r7, #4]
 801c7ea:	f001 fe87 	bl	801e4fc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c7ee:	e01a      	b.n	801c826 <tcp_receive+0xf0e>
 801c7f0:	e019      	b.n	801c826 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801c7f2:	4b0f      	ldr	r3, [pc, #60]	; (801c830 <tcp_receive+0xf18>)
 801c7f4:	681a      	ldr	r2, [r3, #0]
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7fa:	1ad3      	subs	r3, r2, r3
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	db0a      	blt.n	801c816 <tcp_receive+0xefe>
 801c800:	4b0b      	ldr	r3, [pc, #44]	; (801c830 <tcp_receive+0xf18>)
 801c802:	681a      	ldr	r2, [r3, #0]
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c808:	6879      	ldr	r1, [r7, #4]
 801c80a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c80c:	440b      	add	r3, r1
 801c80e:	1ad3      	subs	r3, r2, r3
 801c810:	3301      	adds	r3, #1
 801c812:	2b00      	cmp	r3, #0
 801c814:	dd07      	ble.n	801c826 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	8b5b      	ldrh	r3, [r3, #26]
 801c81a:	f043 0302 	orr.w	r3, r3, #2
 801c81e:	b29a      	uxth	r2, r3
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801c824:	e7ff      	b.n	801c826 <tcp_receive+0xf0e>
 801c826:	bf00      	nop
 801c828:	3750      	adds	r7, #80	; 0x50
 801c82a:	46bd      	mov	sp, r7
 801c82c:	bdb0      	pop	{r4, r5, r7, pc}
 801c82e:	bf00      	nop
 801c830:	24010050 	.word	0x24010050
 801c834:	24010030 	.word	0x24010030
 801c838:	2401005a 	.word	0x2401005a
 801c83c:	08023744 	.word	0x08023744
 801c840:	08023b30 	.word	0x08023b30
 801c844:	080237d4 	.word	0x080237d4

0801c848 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801c848:	b480      	push	{r7}
 801c84a:	b083      	sub	sp, #12
 801c84c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801c84e:	4b15      	ldr	r3, [pc, #84]	; (801c8a4 <tcp_get_next_optbyte+0x5c>)
 801c850:	881b      	ldrh	r3, [r3, #0]
 801c852:	1c5a      	adds	r2, r3, #1
 801c854:	b291      	uxth	r1, r2
 801c856:	4a13      	ldr	r2, [pc, #76]	; (801c8a4 <tcp_get_next_optbyte+0x5c>)
 801c858:	8011      	strh	r1, [r2, #0]
 801c85a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c85c:	4b12      	ldr	r3, [pc, #72]	; (801c8a8 <tcp_get_next_optbyte+0x60>)
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d004      	beq.n	801c86e <tcp_get_next_optbyte+0x26>
 801c864:	4b11      	ldr	r3, [pc, #68]	; (801c8ac <tcp_get_next_optbyte+0x64>)
 801c866:	881b      	ldrh	r3, [r3, #0]
 801c868:	88fa      	ldrh	r2, [r7, #6]
 801c86a:	429a      	cmp	r2, r3
 801c86c:	d208      	bcs.n	801c880 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c86e:	4b10      	ldr	r3, [pc, #64]	; (801c8b0 <tcp_get_next_optbyte+0x68>)
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	3314      	adds	r3, #20
 801c874:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801c876:	88fb      	ldrh	r3, [r7, #6]
 801c878:	683a      	ldr	r2, [r7, #0]
 801c87a:	4413      	add	r3, r2
 801c87c:	781b      	ldrb	r3, [r3, #0]
 801c87e:	e00b      	b.n	801c898 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c880:	88fb      	ldrh	r3, [r7, #6]
 801c882:	b2da      	uxtb	r2, r3
 801c884:	4b09      	ldr	r3, [pc, #36]	; (801c8ac <tcp_get_next_optbyte+0x64>)
 801c886:	881b      	ldrh	r3, [r3, #0]
 801c888:	b2db      	uxtb	r3, r3
 801c88a:	1ad3      	subs	r3, r2, r3
 801c88c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801c88e:	4b06      	ldr	r3, [pc, #24]	; (801c8a8 <tcp_get_next_optbyte+0x60>)
 801c890:	681a      	ldr	r2, [r3, #0]
 801c892:	797b      	ldrb	r3, [r7, #5]
 801c894:	4413      	add	r3, r2
 801c896:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c898:	4618      	mov	r0, r3
 801c89a:	370c      	adds	r7, #12
 801c89c:	46bd      	mov	sp, r7
 801c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8a2:	4770      	bx	lr
 801c8a4:	2401004c 	.word	0x2401004c
 801c8a8:	24010048 	.word	0x24010048
 801c8ac:	24010046 	.word	0x24010046
 801c8b0:	24010040 	.word	0x24010040

0801c8b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801c8b4:	b580      	push	{r7, lr}
 801c8b6:	b084      	sub	sp, #16
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d106      	bne.n	801c8d0 <tcp_parseopt+0x1c>
 801c8c2:	4b32      	ldr	r3, [pc, #200]	; (801c98c <tcp_parseopt+0xd8>)
 801c8c4:	f240 727d 	movw	r2, #1917	; 0x77d
 801c8c8:	4931      	ldr	r1, [pc, #196]	; (801c990 <tcp_parseopt+0xdc>)
 801c8ca:	4832      	ldr	r0, [pc, #200]	; (801c994 <tcp_parseopt+0xe0>)
 801c8cc:	f003 fc1c 	bl	8020108 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801c8d0:	4b31      	ldr	r3, [pc, #196]	; (801c998 <tcp_parseopt+0xe4>)
 801c8d2:	881b      	ldrh	r3, [r3, #0]
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d056      	beq.n	801c986 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c8d8:	4b30      	ldr	r3, [pc, #192]	; (801c99c <tcp_parseopt+0xe8>)
 801c8da:	2200      	movs	r2, #0
 801c8dc:	801a      	strh	r2, [r3, #0]
 801c8de:	e046      	b.n	801c96e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801c8e0:	f7ff ffb2 	bl	801c848 <tcp_get_next_optbyte>
 801c8e4:	4603      	mov	r3, r0
 801c8e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801c8e8:	7bfb      	ldrb	r3, [r7, #15]
 801c8ea:	2b02      	cmp	r3, #2
 801c8ec:	d006      	beq.n	801c8fc <tcp_parseopt+0x48>
 801c8ee:	2b02      	cmp	r3, #2
 801c8f0:	dc2c      	bgt.n	801c94c <tcp_parseopt+0x98>
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d042      	beq.n	801c97c <tcp_parseopt+0xc8>
 801c8f6:	2b01      	cmp	r3, #1
 801c8f8:	d128      	bne.n	801c94c <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801c8fa:	e038      	b.n	801c96e <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801c8fc:	f7ff ffa4 	bl	801c848 <tcp_get_next_optbyte>
 801c900:	4603      	mov	r3, r0
 801c902:	2b04      	cmp	r3, #4
 801c904:	d13c      	bne.n	801c980 <tcp_parseopt+0xcc>
 801c906:	4b25      	ldr	r3, [pc, #148]	; (801c99c <tcp_parseopt+0xe8>)
 801c908:	881b      	ldrh	r3, [r3, #0]
 801c90a:	3301      	adds	r3, #1
 801c90c:	4a22      	ldr	r2, [pc, #136]	; (801c998 <tcp_parseopt+0xe4>)
 801c90e:	8812      	ldrh	r2, [r2, #0]
 801c910:	4293      	cmp	r3, r2
 801c912:	da35      	bge.n	801c980 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c914:	f7ff ff98 	bl	801c848 <tcp_get_next_optbyte>
 801c918:	4603      	mov	r3, r0
 801c91a:	b29b      	uxth	r3, r3
 801c91c:	021b      	lsls	r3, r3, #8
 801c91e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801c920:	f7ff ff92 	bl	801c848 <tcp_get_next_optbyte>
 801c924:	4603      	mov	r3, r0
 801c926:	b29a      	uxth	r2, r3
 801c928:	89bb      	ldrh	r3, [r7, #12]
 801c92a:	4313      	orrs	r3, r2
 801c92c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c92e:	89bb      	ldrh	r3, [r7, #12]
 801c930:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801c934:	4293      	cmp	r3, r2
 801c936:	d804      	bhi.n	801c942 <tcp_parseopt+0x8e>
 801c938:	89bb      	ldrh	r3, [r7, #12]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d001      	beq.n	801c942 <tcp_parseopt+0x8e>
 801c93e:	89ba      	ldrh	r2, [r7, #12]
 801c940:	e001      	b.n	801c946 <tcp_parseopt+0x92>
 801c942:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801c94a:	e010      	b.n	801c96e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801c94c:	f7ff ff7c 	bl	801c848 <tcp_get_next_optbyte>
 801c950:	4603      	mov	r3, r0
 801c952:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801c954:	7afb      	ldrb	r3, [r7, #11]
 801c956:	2b01      	cmp	r3, #1
 801c958:	d914      	bls.n	801c984 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801c95a:	7afb      	ldrb	r3, [r7, #11]
 801c95c:	b29a      	uxth	r2, r3
 801c95e:	4b0f      	ldr	r3, [pc, #60]	; (801c99c <tcp_parseopt+0xe8>)
 801c960:	881b      	ldrh	r3, [r3, #0]
 801c962:	4413      	add	r3, r2
 801c964:	b29b      	uxth	r3, r3
 801c966:	3b02      	subs	r3, #2
 801c968:	b29a      	uxth	r2, r3
 801c96a:	4b0c      	ldr	r3, [pc, #48]	; (801c99c <tcp_parseopt+0xe8>)
 801c96c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c96e:	4b0b      	ldr	r3, [pc, #44]	; (801c99c <tcp_parseopt+0xe8>)
 801c970:	881a      	ldrh	r2, [r3, #0]
 801c972:	4b09      	ldr	r3, [pc, #36]	; (801c998 <tcp_parseopt+0xe4>)
 801c974:	881b      	ldrh	r3, [r3, #0]
 801c976:	429a      	cmp	r2, r3
 801c978:	d3b2      	bcc.n	801c8e0 <tcp_parseopt+0x2c>
 801c97a:	e004      	b.n	801c986 <tcp_parseopt+0xd2>
          return;
 801c97c:	bf00      	nop
 801c97e:	e002      	b.n	801c986 <tcp_parseopt+0xd2>
            return;
 801c980:	bf00      	nop
 801c982:	e000      	b.n	801c986 <tcp_parseopt+0xd2>
            return;
 801c984:	bf00      	nop
      }
    }
  }
}
 801c986:	3710      	adds	r7, #16
 801c988:	46bd      	mov	sp, r7
 801c98a:	bd80      	pop	{r7, pc}
 801c98c:	08023744 	.word	0x08023744
 801c990:	08023bec 	.word	0x08023bec
 801c994:	080237d4 	.word	0x080237d4
 801c998:	24010044 	.word	0x24010044
 801c99c:	2401004c 	.word	0x2401004c

0801c9a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801c9a0:	b480      	push	{r7}
 801c9a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801c9a4:	4b05      	ldr	r3, [pc, #20]	; (801c9bc <tcp_trigger_input_pcb_close+0x1c>)
 801c9a6:	781b      	ldrb	r3, [r3, #0]
 801c9a8:	f043 0310 	orr.w	r3, r3, #16
 801c9ac:	b2da      	uxtb	r2, r3
 801c9ae:	4b03      	ldr	r3, [pc, #12]	; (801c9bc <tcp_trigger_input_pcb_close+0x1c>)
 801c9b0:	701a      	strb	r2, [r3, #0]
}
 801c9b2:	bf00      	nop
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ba:	4770      	bx	lr
 801c9bc:	2401005d 	.word	0x2401005d

0801c9c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801c9c0:	b580      	push	{r7, lr}
 801c9c2:	b084      	sub	sp, #16
 801c9c4:	af00      	add	r7, sp, #0
 801c9c6:	60f8      	str	r0, [r7, #12]
 801c9c8:	60b9      	str	r1, [r7, #8]
 801c9ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d00a      	beq.n	801c9e8 <tcp_route+0x28>
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	7a1b      	ldrb	r3, [r3, #8]
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d006      	beq.n	801c9e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	7a1b      	ldrb	r3, [r3, #8]
 801c9de:	4618      	mov	r0, r3
 801c9e0:	f7fa fe68 	bl	80176b4 <netif_get_by_index>
 801c9e4:	4603      	mov	r3, r0
 801c9e6:	e003      	b.n	801c9f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801c9e8:	6878      	ldr	r0, [r7, #4]
 801c9ea:	f7f8 fcf5 	bl	80153d8 <ip4_route>
 801c9ee:	4603      	mov	r3, r0
  }
}
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	3710      	adds	r7, #16
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd80      	pop	{r7, pc}

0801c9f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801c9f8:	b590      	push	{r4, r7, lr}
 801c9fa:	b087      	sub	sp, #28
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	60f8      	str	r0, [r7, #12]
 801ca00:	60b9      	str	r1, [r7, #8]
 801ca02:	603b      	str	r3, [r7, #0]
 801ca04:	4613      	mov	r3, r2
 801ca06:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d105      	bne.n	801ca1a <tcp_create_segment+0x22>
 801ca0e:	4b44      	ldr	r3, [pc, #272]	; (801cb20 <tcp_create_segment+0x128>)
 801ca10:	22a3      	movs	r2, #163	; 0xa3
 801ca12:	4944      	ldr	r1, [pc, #272]	; (801cb24 <tcp_create_segment+0x12c>)
 801ca14:	4844      	ldr	r0, [pc, #272]	; (801cb28 <tcp_create_segment+0x130>)
 801ca16:	f003 fb77 	bl	8020108 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801ca1a:	68bb      	ldr	r3, [r7, #8]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d105      	bne.n	801ca2c <tcp_create_segment+0x34>
 801ca20:	4b3f      	ldr	r3, [pc, #252]	; (801cb20 <tcp_create_segment+0x128>)
 801ca22:	22a4      	movs	r2, #164	; 0xa4
 801ca24:	4941      	ldr	r1, [pc, #260]	; (801cb2c <tcp_create_segment+0x134>)
 801ca26:	4840      	ldr	r0, [pc, #256]	; (801cb28 <tcp_create_segment+0x130>)
 801ca28:	f003 fb6e 	bl	8020108 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ca2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ca30:	009b      	lsls	r3, r3, #2
 801ca32:	b2db      	uxtb	r3, r3
 801ca34:	f003 0304 	and.w	r3, r3, #4
 801ca38:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ca3a:	2003      	movs	r0, #3
 801ca3c:	f7fa fa5e 	bl	8016efc <memp_malloc>
 801ca40:	6138      	str	r0, [r7, #16]
 801ca42:	693b      	ldr	r3, [r7, #16]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d104      	bne.n	801ca52 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801ca48:	68b8      	ldr	r0, [r7, #8]
 801ca4a:	f7fb f9c1 	bl	8017dd0 <pbuf_free>
    return NULL;
 801ca4e:	2300      	movs	r3, #0
 801ca50:	e061      	b.n	801cb16 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801ca52:	693b      	ldr	r3, [r7, #16]
 801ca54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ca58:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801ca5a:	693b      	ldr	r3, [r7, #16]
 801ca5c:	2200      	movs	r2, #0
 801ca5e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801ca60:	693b      	ldr	r3, [r7, #16]
 801ca62:	68ba      	ldr	r2, [r7, #8]
 801ca64:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ca66:	68bb      	ldr	r3, [r7, #8]
 801ca68:	891a      	ldrh	r2, [r3, #8]
 801ca6a:	7dfb      	ldrb	r3, [r7, #23]
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	429a      	cmp	r2, r3
 801ca70:	d205      	bcs.n	801ca7e <tcp_create_segment+0x86>
 801ca72:	4b2b      	ldr	r3, [pc, #172]	; (801cb20 <tcp_create_segment+0x128>)
 801ca74:	22b0      	movs	r2, #176	; 0xb0
 801ca76:	492e      	ldr	r1, [pc, #184]	; (801cb30 <tcp_create_segment+0x138>)
 801ca78:	482b      	ldr	r0, [pc, #172]	; (801cb28 <tcp_create_segment+0x130>)
 801ca7a:	f003 fb45 	bl	8020108 <iprintf>
  seg->len = p->tot_len - optlen;
 801ca7e:	68bb      	ldr	r3, [r7, #8]
 801ca80:	891a      	ldrh	r2, [r3, #8]
 801ca82:	7dfb      	ldrb	r3, [r7, #23]
 801ca84:	b29b      	uxth	r3, r3
 801ca86:	1ad3      	subs	r3, r2, r3
 801ca88:	b29a      	uxth	r2, r3
 801ca8a:	693b      	ldr	r3, [r7, #16]
 801ca8c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ca8e:	2114      	movs	r1, #20
 801ca90:	68b8      	ldr	r0, [r7, #8]
 801ca92:	f7fb f907 	bl	8017ca4 <pbuf_add_header>
 801ca96:	4603      	mov	r3, r0
 801ca98:	2b00      	cmp	r3, #0
 801ca9a:	d004      	beq.n	801caa6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801ca9c:	6938      	ldr	r0, [r7, #16]
 801ca9e:	f7fd f800 	bl	8019aa2 <tcp_seg_free>
    return NULL;
 801caa2:	2300      	movs	r3, #0
 801caa4:	e037      	b.n	801cb16 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801caa6:	693b      	ldr	r3, [r7, #16]
 801caa8:	685b      	ldr	r3, [r3, #4]
 801caaa:	685a      	ldr	r2, [r3, #4]
 801caac:	693b      	ldr	r3, [r7, #16]
 801caae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	8ada      	ldrh	r2, [r3, #22]
 801cab4:	693b      	ldr	r3, [r7, #16]
 801cab6:	68dc      	ldr	r4, [r3, #12]
 801cab8:	4610      	mov	r0, r2
 801caba:	f7f7 f9b5 	bl	8013e28 <lwip_htons>
 801cabe:	4603      	mov	r3, r0
 801cac0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801cac2:	68fb      	ldr	r3, [r7, #12]
 801cac4:	8b1a      	ldrh	r2, [r3, #24]
 801cac6:	693b      	ldr	r3, [r7, #16]
 801cac8:	68dc      	ldr	r4, [r3, #12]
 801caca:	4610      	mov	r0, r2
 801cacc:	f7f7 f9ac 	bl	8013e28 <lwip_htons>
 801cad0:	4603      	mov	r3, r0
 801cad2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801cad4:	693b      	ldr	r3, [r7, #16]
 801cad6:	68dc      	ldr	r4, [r3, #12]
 801cad8:	6838      	ldr	r0, [r7, #0]
 801cada:	f7f7 f9ba 	bl	8013e52 <lwip_htonl>
 801cade:	4603      	mov	r3, r0
 801cae0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801cae2:	7dfb      	ldrb	r3, [r7, #23]
 801cae4:	089b      	lsrs	r3, r3, #2
 801cae6:	b2db      	uxtb	r3, r3
 801cae8:	b29b      	uxth	r3, r3
 801caea:	3305      	adds	r3, #5
 801caec:	b29b      	uxth	r3, r3
 801caee:	031b      	lsls	r3, r3, #12
 801caf0:	b29a      	uxth	r2, r3
 801caf2:	79fb      	ldrb	r3, [r7, #7]
 801caf4:	b29b      	uxth	r3, r3
 801caf6:	4313      	orrs	r3, r2
 801caf8:	b29a      	uxth	r2, r3
 801cafa:	693b      	ldr	r3, [r7, #16]
 801cafc:	68dc      	ldr	r4, [r3, #12]
 801cafe:	4610      	mov	r0, r2
 801cb00:	f7f7 f992 	bl	8013e28 <lwip_htons>
 801cb04:	4603      	mov	r3, r0
 801cb06:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801cb08:	693b      	ldr	r3, [r7, #16]
 801cb0a:	68db      	ldr	r3, [r3, #12]
 801cb0c:	2200      	movs	r2, #0
 801cb0e:	749a      	strb	r2, [r3, #18]
 801cb10:	2200      	movs	r2, #0
 801cb12:	74da      	strb	r2, [r3, #19]
  return seg;
 801cb14:	693b      	ldr	r3, [r7, #16]
}
 801cb16:	4618      	mov	r0, r3
 801cb18:	371c      	adds	r7, #28
 801cb1a:	46bd      	mov	sp, r7
 801cb1c:	bd90      	pop	{r4, r7, pc}
 801cb1e:	bf00      	nop
 801cb20:	08023c08 	.word	0x08023c08
 801cb24:	08023c80 	.word	0x08023c80
 801cb28:	08023ca0 	.word	0x08023ca0
 801cb2c:	08023cc8 	.word	0x08023cc8
 801cb30:	08023cec 	.word	0x08023cec

0801cb34 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b086      	sub	sp, #24
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	607b      	str	r3, [r7, #4]
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	73fb      	strb	r3, [r7, #15]
 801cb40:	460b      	mov	r3, r1
 801cb42:	81bb      	strh	r3, [r7, #12]
 801cb44:	4613      	mov	r3, r2
 801cb46:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801cb48:	89bb      	ldrh	r3, [r7, #12]
 801cb4a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d105      	bne.n	801cb5e <tcp_pbuf_prealloc+0x2a>
 801cb52:	4b30      	ldr	r3, [pc, #192]	; (801cc14 <tcp_pbuf_prealloc+0xe0>)
 801cb54:	22e8      	movs	r2, #232	; 0xe8
 801cb56:	4930      	ldr	r1, [pc, #192]	; (801cc18 <tcp_pbuf_prealloc+0xe4>)
 801cb58:	4830      	ldr	r0, [pc, #192]	; (801cc1c <tcp_pbuf_prealloc+0xe8>)
 801cb5a:	f003 fad5 	bl	8020108 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801cb5e:	6a3b      	ldr	r3, [r7, #32]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d105      	bne.n	801cb70 <tcp_pbuf_prealloc+0x3c>
 801cb64:	4b2b      	ldr	r3, [pc, #172]	; (801cc14 <tcp_pbuf_prealloc+0xe0>)
 801cb66:	22e9      	movs	r2, #233	; 0xe9
 801cb68:	492d      	ldr	r1, [pc, #180]	; (801cc20 <tcp_pbuf_prealloc+0xec>)
 801cb6a:	482c      	ldr	r0, [pc, #176]	; (801cc1c <tcp_pbuf_prealloc+0xe8>)
 801cb6c:	f003 facc 	bl	8020108 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801cb70:	89ba      	ldrh	r2, [r7, #12]
 801cb72:	897b      	ldrh	r3, [r7, #10]
 801cb74:	429a      	cmp	r2, r3
 801cb76:	d221      	bcs.n	801cbbc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801cb78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cb7c:	f003 0302 	and.w	r3, r3, #2
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d111      	bne.n	801cba8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801cb84:	6a3b      	ldr	r3, [r7, #32]
 801cb86:	8b5b      	ldrh	r3, [r3, #26]
 801cb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d115      	bne.n	801cbbc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801cb90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d007      	beq.n	801cba8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801cb98:	6a3b      	ldr	r3, [r7, #32]
 801cb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d103      	bne.n	801cba8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801cba0:	6a3b      	ldr	r3, [r7, #32]
 801cba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d009      	beq.n	801cbbc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801cba8:	89bb      	ldrh	r3, [r7, #12]
 801cbaa:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 801cbae:	f023 0203 	bic.w	r2, r3, #3
 801cbb2:	897b      	ldrh	r3, [r7, #10]
 801cbb4:	4293      	cmp	r3, r2
 801cbb6:	bf28      	it	cs
 801cbb8:	4613      	movcs	r3, r2
 801cbba:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801cbbc:	8af9      	ldrh	r1, [r7, #22]
 801cbbe:	7bfb      	ldrb	r3, [r7, #15]
 801cbc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cbc4:	4618      	mov	r0, r3
 801cbc6:	f7fa fe1f 	bl	8017808 <pbuf_alloc>
 801cbca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cbcc:	693b      	ldr	r3, [r7, #16]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d101      	bne.n	801cbd6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	e019      	b.n	801cc0a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801cbd6:	693b      	ldr	r3, [r7, #16]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d006      	beq.n	801cbec <tcp_pbuf_prealloc+0xb8>
 801cbde:	4b0d      	ldr	r3, [pc, #52]	; (801cc14 <tcp_pbuf_prealloc+0xe0>)
 801cbe0:	f240 120b 	movw	r2, #267	; 0x10b
 801cbe4:	490f      	ldr	r1, [pc, #60]	; (801cc24 <tcp_pbuf_prealloc+0xf0>)
 801cbe6:	480d      	ldr	r0, [pc, #52]	; (801cc1c <tcp_pbuf_prealloc+0xe8>)
 801cbe8:	f003 fa8e 	bl	8020108 <iprintf>
  *oversize = p->len - length;
 801cbec:	693b      	ldr	r3, [r7, #16]
 801cbee:	895a      	ldrh	r2, [r3, #10]
 801cbf0:	89bb      	ldrh	r3, [r7, #12]
 801cbf2:	1ad3      	subs	r3, r2, r3
 801cbf4:	b29a      	uxth	r2, r3
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801cbfa:	693b      	ldr	r3, [r7, #16]
 801cbfc:	89ba      	ldrh	r2, [r7, #12]
 801cbfe:	811a      	strh	r2, [r3, #8]
 801cc00:	693b      	ldr	r3, [r7, #16]
 801cc02:	891a      	ldrh	r2, [r3, #8]
 801cc04:	693b      	ldr	r3, [r7, #16]
 801cc06:	815a      	strh	r2, [r3, #10]
  return p;
 801cc08:	693b      	ldr	r3, [r7, #16]
}
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	3718      	adds	r7, #24
 801cc0e:	46bd      	mov	sp, r7
 801cc10:	bd80      	pop	{r7, pc}
 801cc12:	bf00      	nop
 801cc14:	08023c08 	.word	0x08023c08
 801cc18:	08023d04 	.word	0x08023d04
 801cc1c:	08023ca0 	.word	0x08023ca0
 801cc20:	08023d28 	.word	0x08023d28
 801cc24:	08023d48 	.word	0x08023d48

0801cc28 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b082      	sub	sp, #8
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
 801cc30:	460b      	mov	r3, r1
 801cc32:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d106      	bne.n	801cc48 <tcp_write_checks+0x20>
 801cc3a:	4b33      	ldr	r3, [pc, #204]	; (801cd08 <tcp_write_checks+0xe0>)
 801cc3c:	f240 1233 	movw	r2, #307	; 0x133
 801cc40:	4932      	ldr	r1, [pc, #200]	; (801cd0c <tcp_write_checks+0xe4>)
 801cc42:	4833      	ldr	r0, [pc, #204]	; (801cd10 <tcp_write_checks+0xe8>)
 801cc44:	f003 fa60 	bl	8020108 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	7d1b      	ldrb	r3, [r3, #20]
 801cc4c:	2b04      	cmp	r3, #4
 801cc4e:	d00e      	beq.n	801cc6e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801cc54:	2b07      	cmp	r3, #7
 801cc56:	d00a      	beq.n	801cc6e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801cc5c:	2b02      	cmp	r3, #2
 801cc5e:	d006      	beq.n	801cc6e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801cc64:	2b03      	cmp	r3, #3
 801cc66:	d002      	beq.n	801cc6e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801cc68:	f06f 030a 	mvn.w	r3, #10
 801cc6c:	e048      	b.n	801cd00 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801cc6e:	887b      	ldrh	r3, [r7, #2]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d101      	bne.n	801cc78 <tcp_write_checks+0x50>
    return ERR_OK;
 801cc74:	2300      	movs	r3, #0
 801cc76:	e043      	b.n	801cd00 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801cc7e:	887a      	ldrh	r2, [r7, #2]
 801cc80:	429a      	cmp	r2, r3
 801cc82:	d909      	bls.n	801cc98 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	8b5b      	ldrh	r3, [r3, #26]
 801cc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc8c:	b29a      	uxth	r2, r3
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801cc92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc96:	e033      	b.n	801cd00 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cc9e:	2b0f      	cmp	r3, #15
 801cca0:	d909      	bls.n	801ccb6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	8b5b      	ldrh	r3, [r3, #26]
 801cca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ccaa:	b29a      	uxth	r2, r3
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ccb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ccb4:	e024      	b.n	801cd00 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d00f      	beq.n	801cce0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d11a      	bne.n	801ccfe <tcp_write_checks+0xd6>
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d116      	bne.n	801ccfe <tcp_write_checks+0xd6>
 801ccd0:	4b0d      	ldr	r3, [pc, #52]	; (801cd08 <tcp_write_checks+0xe0>)
 801ccd2:	f240 1255 	movw	r2, #341	; 0x155
 801ccd6:	490f      	ldr	r1, [pc, #60]	; (801cd14 <tcp_write_checks+0xec>)
 801ccd8:	480d      	ldr	r0, [pc, #52]	; (801cd10 <tcp_write_checks+0xe8>)
 801ccda:	f003 fa15 	bl	8020108 <iprintf>
 801ccde:	e00e      	b.n	801ccfe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d103      	bne.n	801ccf0 <tcp_write_checks+0xc8>
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d006      	beq.n	801ccfe <tcp_write_checks+0xd6>
 801ccf0:	4b05      	ldr	r3, [pc, #20]	; (801cd08 <tcp_write_checks+0xe0>)
 801ccf2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801ccf6:	4908      	ldr	r1, [pc, #32]	; (801cd18 <tcp_write_checks+0xf0>)
 801ccf8:	4805      	ldr	r0, [pc, #20]	; (801cd10 <tcp_write_checks+0xe8>)
 801ccfa:	f003 fa05 	bl	8020108 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ccfe:	2300      	movs	r3, #0
}
 801cd00:	4618      	mov	r0, r3
 801cd02:	3708      	adds	r7, #8
 801cd04:	46bd      	mov	sp, r7
 801cd06:	bd80      	pop	{r7, pc}
 801cd08:	08023c08 	.word	0x08023c08
 801cd0c:	08023d5c 	.word	0x08023d5c
 801cd10:	08023ca0 	.word	0x08023ca0
 801cd14:	08023d7c 	.word	0x08023d7c
 801cd18:	08023db8 	.word	0x08023db8

0801cd1c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801cd1c:	b590      	push	{r4, r7, lr}
 801cd1e:	b09b      	sub	sp, #108	; 0x6c
 801cd20:	af04      	add	r7, sp, #16
 801cd22:	60f8      	str	r0, [r7, #12]
 801cd24:	60b9      	str	r1, [r7, #8]
 801cd26:	4611      	mov	r1, r2
 801cd28:	461a      	mov	r2, r3
 801cd2a:	460b      	mov	r3, r1
 801cd2c:	80fb      	strh	r3, [r7, #6]
 801cd2e:	4613      	mov	r3, r2
 801cd30:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801cd32:	2300      	movs	r3, #0
 801cd34:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801cd36:	2300      	movs	r3, #0
 801cd38:	653b      	str	r3, [r7, #80]	; 0x50
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cd3e:	2300      	movs	r3, #0
 801cd40:	64bb      	str	r3, [r7, #72]	; 0x48
 801cd42:	2300      	movs	r3, #0
 801cd44:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801cd46:	2300      	movs	r3, #0
 801cd48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801cd4c:	2300      	movs	r3, #0
 801cd4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801cd52:	2300      	movs	r3, #0
 801cd54:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801cd56:	2300      	movs	r3, #0
 801cd58:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801cd5e:	68fb      	ldr	r3, [r7, #12]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d109      	bne.n	801cd78 <tcp_write+0x5c>
 801cd64:	4ba4      	ldr	r3, [pc, #656]	; (801cff8 <tcp_write+0x2dc>)
 801cd66:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801cd6a:	49a4      	ldr	r1, [pc, #656]	; (801cffc <tcp_write+0x2e0>)
 801cd6c:	48a4      	ldr	r0, [pc, #656]	; (801d000 <tcp_write+0x2e4>)
 801cd6e:	f003 f9cb 	bl	8020108 <iprintf>
 801cd72:	f06f 030f 	mvn.w	r3, #15
 801cd76:	e32a      	b.n	801d3ce <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801cd7e:	085b      	lsrs	r3, r3, #1
 801cd80:	b29a      	uxth	r2, r3
 801cd82:	68fb      	ldr	r3, [r7, #12]
 801cd84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cd86:	4293      	cmp	r3, r2
 801cd88:	bf28      	it	cs
 801cd8a:	4613      	movcs	r3, r2
 801cd8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801cd8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d102      	bne.n	801cd9a <tcp_write+0x7e>
 801cd94:	68fb      	ldr	r3, [r7, #12]
 801cd96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cd98:	e000      	b.n	801cd9c <tcp_write+0x80>
 801cd9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cd9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801cd9e:	68bb      	ldr	r3, [r7, #8]
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	d109      	bne.n	801cdb8 <tcp_write+0x9c>
 801cda4:	4b94      	ldr	r3, [pc, #592]	; (801cff8 <tcp_write+0x2dc>)
 801cda6:	f240 12ad 	movw	r2, #429	; 0x1ad
 801cdaa:	4996      	ldr	r1, [pc, #600]	; (801d004 <tcp_write+0x2e8>)
 801cdac:	4894      	ldr	r0, [pc, #592]	; (801d000 <tcp_write+0x2e4>)
 801cdae:	f003 f9ab 	bl	8020108 <iprintf>
 801cdb2:	f06f 030f 	mvn.w	r3, #15
 801cdb6:	e30a      	b.n	801d3ce <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801cdb8:	88fb      	ldrh	r3, [r7, #6]
 801cdba:	4619      	mov	r1, r3
 801cdbc:	68f8      	ldr	r0, [r7, #12]
 801cdbe:	f7ff ff33 	bl	801cc28 <tcp_write_checks>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801cdc8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d002      	beq.n	801cdd6 <tcp_write+0xba>
    return err;
 801cdd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801cdd4:	e2fb      	b.n	801d3ce <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801cde0:	2300      	movs	r3, #0
 801cde2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	f000 80f6 	beq.w	801cfdc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cdf4:	653b      	str	r3, [r7, #80]	; 0x50
 801cdf6:	e002      	b.n	801cdfe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801cdf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801cdfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d1f8      	bne.n	801cdf8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801ce06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce08:	7a9b      	ldrb	r3, [r3, #10]
 801ce0a:	009b      	lsls	r3, r3, #2
 801ce0c:	b29b      	uxth	r3, r3
 801ce0e:	f003 0304 	and.w	r3, r3, #4
 801ce12:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ce14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ce16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce18:	891b      	ldrh	r3, [r3, #8]
 801ce1a:	4619      	mov	r1, r3
 801ce1c:	8c3b      	ldrh	r3, [r7, #32]
 801ce1e:	440b      	add	r3, r1
 801ce20:	429a      	cmp	r2, r3
 801ce22:	da06      	bge.n	801ce32 <tcp_write+0x116>
 801ce24:	4b74      	ldr	r3, [pc, #464]	; (801cff8 <tcp_write+0x2dc>)
 801ce26:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ce2a:	4977      	ldr	r1, [pc, #476]	; (801d008 <tcp_write+0x2ec>)
 801ce2c:	4874      	ldr	r0, [pc, #464]	; (801d000 <tcp_write+0x2e4>)
 801ce2e:	f003 f96b 	bl	8020108 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ce32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce34:	891a      	ldrh	r2, [r3, #8]
 801ce36:	8c3b      	ldrh	r3, [r7, #32]
 801ce38:	4413      	add	r3, r2
 801ce3a:	b29b      	uxth	r3, r3
 801ce3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801ce3e:	1ad3      	subs	r3, r2, r3
 801ce40:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801ce48:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801ce4a:	8a7b      	ldrh	r3, [r7, #18]
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d026      	beq.n	801ce9e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ce50:	8a7b      	ldrh	r3, [r7, #18]
 801ce52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ce54:	429a      	cmp	r2, r3
 801ce56:	d206      	bcs.n	801ce66 <tcp_write+0x14a>
 801ce58:	4b67      	ldr	r3, [pc, #412]	; (801cff8 <tcp_write+0x2dc>)
 801ce5a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ce5e:	496b      	ldr	r1, [pc, #428]	; (801d00c <tcp_write+0x2f0>)
 801ce60:	4867      	ldr	r0, [pc, #412]	; (801d000 <tcp_write+0x2e4>)
 801ce62:	f003 f951 	bl	8020108 <iprintf>
      seg = last_unsent;
 801ce66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ce68:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ce6a:	8a7b      	ldrh	r3, [r7, #18]
 801ce6c:	88fa      	ldrh	r2, [r7, #6]
 801ce6e:	4293      	cmp	r3, r2
 801ce70:	bf28      	it	cs
 801ce72:	4613      	movcs	r3, r2
 801ce74:	b29b      	uxth	r3, r3
 801ce76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ce78:	4293      	cmp	r3, r2
 801ce7a:	bf28      	it	cs
 801ce7c:	4613      	movcs	r3, r2
 801ce7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801ce80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ce84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ce86:	4413      	add	r3, r2
 801ce88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801ce8c:	8a7a      	ldrh	r2, [r7, #18]
 801ce8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ce90:	1ad3      	subs	r3, r2, r3
 801ce92:	b29b      	uxth	r3, r3
 801ce94:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801ce96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ce98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ce9a:	1ad3      	subs	r3, r2, r3
 801ce9c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ce9e:	8a7b      	ldrh	r3, [r7, #18]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d00b      	beq.n	801cebc <tcp_write+0x1a0>
 801cea4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cea8:	88fb      	ldrh	r3, [r7, #6]
 801ceaa:	429a      	cmp	r2, r3
 801ceac:	d006      	beq.n	801cebc <tcp_write+0x1a0>
 801ceae:	4b52      	ldr	r3, [pc, #328]	; (801cff8 <tcp_write+0x2dc>)
 801ceb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ceb4:	4956      	ldr	r1, [pc, #344]	; (801d010 <tcp_write+0x2f4>)
 801ceb6:	4852      	ldr	r0, [pc, #328]	; (801d000 <tcp_write+0x2e4>)
 801ceb8:	f003 f926 	bl	8020108 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801cebc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cec0:	88fb      	ldrh	r3, [r7, #6]
 801cec2:	429a      	cmp	r2, r3
 801cec4:	f080 8167 	bcs.w	801d196 <tcp_write+0x47a>
 801cec8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	f000 8163 	beq.w	801d196 <tcp_write+0x47a>
 801ced0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ced2:	891b      	ldrh	r3, [r3, #8]
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	f000 815e 	beq.w	801d196 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ceda:	88fa      	ldrh	r2, [r7, #6]
 801cedc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cee0:	1ad2      	subs	r2, r2, r3
 801cee2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cee4:	4293      	cmp	r3, r2
 801cee6:	bfa8      	it	ge
 801cee8:	4613      	movge	r3, r2
 801ceea:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ceec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ceee:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cef0:	797b      	ldrb	r3, [r7, #5]
 801cef2:	f003 0301 	and.w	r3, r3, #1
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d027      	beq.n	801cf4a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801cefa:	f107 0012 	add.w	r0, r7, #18
 801cefe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cf00:	8bf9      	ldrh	r1, [r7, #30]
 801cf02:	2301      	movs	r3, #1
 801cf04:	9302      	str	r3, [sp, #8]
 801cf06:	797b      	ldrb	r3, [r7, #5]
 801cf08:	9301      	str	r3, [sp, #4]
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	9300      	str	r3, [sp, #0]
 801cf0e:	4603      	mov	r3, r0
 801cf10:	2000      	movs	r0, #0
 801cf12:	f7ff fe0f 	bl	801cb34 <tcp_pbuf_prealloc>
 801cf16:	6578      	str	r0, [r7, #84]	; 0x54
 801cf18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	f000 8225 	beq.w	801d36a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801cf20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf22:	6858      	ldr	r0, [r3, #4]
 801cf24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cf28:	68ba      	ldr	r2, [r7, #8]
 801cf2a:	4413      	add	r3, r2
 801cf2c:	8bfa      	ldrh	r2, [r7, #30]
 801cf2e:	4619      	mov	r1, r3
 801cf30:	f002 fcec 	bl	801f90c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801cf34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801cf36:	f7fa ffd9 	bl	8017eec <pbuf_clen>
 801cf3a:	4603      	mov	r3, r0
 801cf3c:	461a      	mov	r2, r3
 801cf3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cf42:	4413      	add	r3, r2
 801cf44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801cf48:	e041      	b.n	801cfce <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801cf4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cf4c:	685b      	ldr	r3, [r3, #4]
 801cf4e:	637b      	str	r3, [r7, #52]	; 0x34
 801cf50:	e002      	b.n	801cf58 <tcp_write+0x23c>
 801cf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	637b      	str	r3, [r7, #52]	; 0x34
 801cf58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d1f8      	bne.n	801cf52 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801cf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf62:	7b1b      	ldrb	r3, [r3, #12]
 801cf64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	d115      	bne.n	801cf98 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801cf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf6e:	685b      	ldr	r3, [r3, #4]
 801cf70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cf72:	8952      	ldrh	r2, [r2, #10]
 801cf74:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801cf76:	68ba      	ldr	r2, [r7, #8]
 801cf78:	429a      	cmp	r2, r3
 801cf7a:	d10d      	bne.n	801cf98 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801cf7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d006      	beq.n	801cf92 <tcp_write+0x276>
 801cf84:	4b1c      	ldr	r3, [pc, #112]	; (801cff8 <tcp_write+0x2dc>)
 801cf86:	f240 2231 	movw	r2, #561	; 0x231
 801cf8a:	4922      	ldr	r1, [pc, #136]	; (801d014 <tcp_write+0x2f8>)
 801cf8c:	481c      	ldr	r0, [pc, #112]	; (801d000 <tcp_write+0x2e4>)
 801cf8e:	f003 f8bb 	bl	8020108 <iprintf>
          extendlen = seglen;
 801cf92:	8bfb      	ldrh	r3, [r7, #30]
 801cf94:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801cf96:	e01a      	b.n	801cfce <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801cf98:	8bfb      	ldrh	r3, [r7, #30]
 801cf9a:	2201      	movs	r2, #1
 801cf9c:	4619      	mov	r1, r3
 801cf9e:	2000      	movs	r0, #0
 801cfa0:	f7fa fc32 	bl	8017808 <pbuf_alloc>
 801cfa4:	6578      	str	r0, [r7, #84]	; 0x54
 801cfa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	f000 81e0 	beq.w	801d36e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801cfae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cfb2:	68ba      	ldr	r2, [r7, #8]
 801cfb4:	441a      	add	r2, r3
 801cfb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cfb8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801cfba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801cfbc:	f7fa ff96 	bl	8017eec <pbuf_clen>
 801cfc0:	4603      	mov	r3, r0
 801cfc2:	461a      	mov	r2, r3
 801cfc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801cfc8:	4413      	add	r3, r2
 801cfca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801cfce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cfd2:	8bfb      	ldrh	r3, [r7, #30]
 801cfd4:	4413      	add	r3, r2
 801cfd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801cfda:	e0dc      	b.n	801d196 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801cfdc:	68fb      	ldr	r3, [r7, #12]
 801cfde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	f000 80d7 	beq.w	801d196 <tcp_write+0x47a>
 801cfe8:	4b03      	ldr	r3, [pc, #12]	; (801cff8 <tcp_write+0x2dc>)
 801cfea:	f240 224a 	movw	r2, #586	; 0x24a
 801cfee:	490a      	ldr	r1, [pc, #40]	; (801d018 <tcp_write+0x2fc>)
 801cff0:	4803      	ldr	r0, [pc, #12]	; (801d000 <tcp_write+0x2e4>)
 801cff2:	f003 f889 	bl	8020108 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801cff6:	e0ce      	b.n	801d196 <tcp_write+0x47a>
 801cff8:	08023c08 	.word	0x08023c08
 801cffc:	08023dec 	.word	0x08023dec
 801d000:	08023ca0 	.word	0x08023ca0
 801d004:	08023e04 	.word	0x08023e04
 801d008:	08023e38 	.word	0x08023e38
 801d00c:	08023e50 	.word	0x08023e50
 801d010:	08023e70 	.word	0x08023e70
 801d014:	08023e90 	.word	0x08023e90
 801d018:	08023ebc 	.word	0x08023ebc
    struct pbuf *p;
    u16_t left = len - pos;
 801d01c:	88fa      	ldrh	r2, [r7, #6]
 801d01e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d022:	1ad3      	subs	r3, r2, r3
 801d024:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801d026:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d02a:	b29b      	uxth	r3, r3
 801d02c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d02e:	1ad3      	subs	r3, r2, r3
 801d030:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801d032:	8b7a      	ldrh	r2, [r7, #26]
 801d034:	8bbb      	ldrh	r3, [r7, #28]
 801d036:	4293      	cmp	r3, r2
 801d038:	bf28      	it	cs
 801d03a:	4613      	movcs	r3, r2
 801d03c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d03e:	797b      	ldrb	r3, [r7, #5]
 801d040:	f003 0301 	and.w	r3, r3, #1
 801d044:	2b00      	cmp	r3, #0
 801d046:	d036      	beq.n	801d0b6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801d048:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d04c:	b29a      	uxth	r2, r3
 801d04e:	8b3b      	ldrh	r3, [r7, #24]
 801d050:	4413      	add	r3, r2
 801d052:	b299      	uxth	r1, r3
 801d054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d056:	2b00      	cmp	r3, #0
 801d058:	bf0c      	ite	eq
 801d05a:	2301      	moveq	r3, #1
 801d05c:	2300      	movne	r3, #0
 801d05e:	b2db      	uxtb	r3, r3
 801d060:	f107 0012 	add.w	r0, r7, #18
 801d064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d066:	9302      	str	r3, [sp, #8]
 801d068:	797b      	ldrb	r3, [r7, #5]
 801d06a:	9301      	str	r3, [sp, #4]
 801d06c:	68fb      	ldr	r3, [r7, #12]
 801d06e:	9300      	str	r3, [sp, #0]
 801d070:	4603      	mov	r3, r0
 801d072:	2036      	movs	r0, #54	; 0x36
 801d074:	f7ff fd5e 	bl	801cb34 <tcp_pbuf_prealloc>
 801d078:	6338      	str	r0, [r7, #48]	; 0x30
 801d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	f000 8178 	beq.w	801d372 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d084:	895b      	ldrh	r3, [r3, #10]
 801d086:	8b3a      	ldrh	r2, [r7, #24]
 801d088:	429a      	cmp	r2, r3
 801d08a:	d906      	bls.n	801d09a <tcp_write+0x37e>
 801d08c:	4b8c      	ldr	r3, [pc, #560]	; (801d2c0 <tcp_write+0x5a4>)
 801d08e:	f240 2266 	movw	r2, #614	; 0x266
 801d092:	498c      	ldr	r1, [pc, #560]	; (801d2c4 <tcp_write+0x5a8>)
 801d094:	488c      	ldr	r0, [pc, #560]	; (801d2c8 <tcp_write+0x5ac>)
 801d096:	f003 f837 	bl	8020108 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801d09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d09c:	685a      	ldr	r2, [r3, #4]
 801d09e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d0a2:	18d0      	adds	r0, r2, r3
 801d0a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d0a8:	68ba      	ldr	r2, [r7, #8]
 801d0aa:	4413      	add	r3, r2
 801d0ac:	8b3a      	ldrh	r2, [r7, #24]
 801d0ae:	4619      	mov	r1, r3
 801d0b0:	f002 fc2c 	bl	801f90c <memcpy>
 801d0b4:	e02f      	b.n	801d116 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801d0b6:	8a7b      	ldrh	r3, [r7, #18]
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d006      	beq.n	801d0ca <tcp_write+0x3ae>
 801d0bc:	4b80      	ldr	r3, [pc, #512]	; (801d2c0 <tcp_write+0x5a4>)
 801d0be:	f240 2271 	movw	r2, #625	; 0x271
 801d0c2:	4982      	ldr	r1, [pc, #520]	; (801d2cc <tcp_write+0x5b0>)
 801d0c4:	4880      	ldr	r0, [pc, #512]	; (801d2c8 <tcp_write+0x5ac>)
 801d0c6:	f003 f81f 	bl	8020108 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801d0ca:	8b3b      	ldrh	r3, [r7, #24]
 801d0cc:	2201      	movs	r2, #1
 801d0ce:	4619      	mov	r1, r3
 801d0d0:	2036      	movs	r0, #54	; 0x36
 801d0d2:	f7fa fb99 	bl	8017808 <pbuf_alloc>
 801d0d6:	6178      	str	r0, [r7, #20]
 801d0d8:	697b      	ldr	r3, [r7, #20]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	f000 814b 	beq.w	801d376 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d0e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d0e4:	68ba      	ldr	r2, [r7, #8]
 801d0e6:	441a      	add	r2, r3
 801d0e8:	697b      	ldr	r3, [r7, #20]
 801d0ea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d0ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d0f0:	b29b      	uxth	r3, r3
 801d0f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d0f6:	4619      	mov	r1, r3
 801d0f8:	2036      	movs	r0, #54	; 0x36
 801d0fa:	f7fa fb85 	bl	8017808 <pbuf_alloc>
 801d0fe:	6338      	str	r0, [r7, #48]	; 0x30
 801d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d102:	2b00      	cmp	r3, #0
 801d104:	d103      	bne.n	801d10e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801d106:	6978      	ldr	r0, [r7, #20]
 801d108:	f7fa fe62 	bl	8017dd0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801d10c:	e136      	b.n	801d37c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801d10e:	6979      	ldr	r1, [r7, #20]
 801d110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d112:	f7fa ff2b 	bl	8017f6c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801d116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d118:	f7fa fee8 	bl	8017eec <pbuf_clen>
 801d11c:	4603      	mov	r3, r0
 801d11e:	461a      	mov	r2, r3
 801d120:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d124:	4413      	add	r3, r2
 801d126:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801d12a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d12e:	2b10      	cmp	r3, #16
 801d130:	d903      	bls.n	801d13a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801d132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d134:	f7fa fe4c 	bl	8017dd0 <pbuf_free>
      goto memerr;
 801d138:	e120      	b.n	801d37c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d13e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d142:	441a      	add	r2, r3
 801d144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d148:	9300      	str	r3, [sp, #0]
 801d14a:	4613      	mov	r3, r2
 801d14c:	2200      	movs	r2, #0
 801d14e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d150:	68f8      	ldr	r0, [r7, #12]
 801d152:	f7ff fc51 	bl	801c9f8 <tcp_create_segment>
 801d156:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	f000 810d 	beq.w	801d37a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801d160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d162:	2b00      	cmp	r3, #0
 801d164:	d102      	bne.n	801d16c <tcp_write+0x450>
      queue = seg;
 801d166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d168:	647b      	str	r3, [r7, #68]	; 0x44
 801d16a:	e00c      	b.n	801d186 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801d16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d106      	bne.n	801d180 <tcp_write+0x464>
 801d172:	4b53      	ldr	r3, [pc, #332]	; (801d2c0 <tcp_write+0x5a4>)
 801d174:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d178:	4955      	ldr	r1, [pc, #340]	; (801d2d0 <tcp_write+0x5b4>)
 801d17a:	4853      	ldr	r0, [pc, #332]	; (801d2c8 <tcp_write+0x5ac>)
 801d17c:	f002 ffc4 	bl	8020108 <iprintf>
      prev_seg->next = seg;
 801d180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d184:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801d186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d188:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801d18a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d18e:	8b3b      	ldrh	r3, [r7, #24]
 801d190:	4413      	add	r3, r2
 801d192:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801d196:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d19a:	88fb      	ldrh	r3, [r7, #6]
 801d19c:	429a      	cmp	r2, r3
 801d19e:	f4ff af3d 	bcc.w	801d01c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801d1a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d02c      	beq.n	801d202 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801d1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d1aa:	685b      	ldr	r3, [r3, #4]
 801d1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d1ae:	e01e      	b.n	801d1ee <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801d1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1b2:	891a      	ldrh	r2, [r3, #8]
 801d1b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d1b6:	4413      	add	r3, r2
 801d1b8:	b29a      	uxth	r2, r3
 801d1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1bc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c0:	681b      	ldr	r3, [r3, #0]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d110      	bne.n	801d1e8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801d1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c8:	685b      	ldr	r3, [r3, #4]
 801d1ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d1cc:	8952      	ldrh	r2, [r2, #10]
 801d1ce:	4413      	add	r3, r2
 801d1d0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d1d2:	68b9      	ldr	r1, [r7, #8]
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	f002 fb99 	bl	801f90c <memcpy>
        p->len += oversize_used;
 801d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1dc:	895a      	ldrh	r2, [r3, #10]
 801d1de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d1e0:	4413      	add	r3, r2
 801d1e2:	b29a      	uxth	r2, r3
 801d1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1e6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d1dd      	bne.n	801d1b0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801d1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d1f6:	891a      	ldrh	r2, [r3, #8]
 801d1f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d1fa:	4413      	add	r3, r2
 801d1fc:	b29a      	uxth	r2, r3
 801d1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d200:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801d202:	8a7a      	ldrh	r2, [r7, #18]
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801d20a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d018      	beq.n	801d242 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801d210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d212:	2b00      	cmp	r3, #0
 801d214:	d106      	bne.n	801d224 <tcp_write+0x508>
 801d216:	4b2a      	ldr	r3, [pc, #168]	; (801d2c0 <tcp_write+0x5a4>)
 801d218:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801d21c:	492d      	ldr	r1, [pc, #180]	; (801d2d4 <tcp_write+0x5b8>)
 801d21e:	482a      	ldr	r0, [pc, #168]	; (801d2c8 <tcp_write+0x5ac>)
 801d220:	f002 ff72 	bl	8020108 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801d224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d226:	685b      	ldr	r3, [r3, #4]
 801d228:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d22a:	4618      	mov	r0, r3
 801d22c:	f7fa fe9e 	bl	8017f6c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801d230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d232:	891a      	ldrh	r2, [r3, #8]
 801d234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d236:	891b      	ldrh	r3, [r3, #8]
 801d238:	4413      	add	r3, r2
 801d23a:	b29a      	uxth	r2, r3
 801d23c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d23e:	811a      	strh	r2, [r3, #8]
 801d240:	e037      	b.n	801d2b2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801d242:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d244:	2b00      	cmp	r3, #0
 801d246:	d034      	beq.n	801d2b2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801d248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d003      	beq.n	801d256 <tcp_write+0x53a>
 801d24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d250:	685b      	ldr	r3, [r3, #4]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d106      	bne.n	801d264 <tcp_write+0x548>
 801d256:	4b1a      	ldr	r3, [pc, #104]	; (801d2c0 <tcp_write+0x5a4>)
 801d258:	f240 22e6 	movw	r2, #742	; 0x2e6
 801d25c:	491e      	ldr	r1, [pc, #120]	; (801d2d8 <tcp_write+0x5bc>)
 801d25e:	481a      	ldr	r0, [pc, #104]	; (801d2c8 <tcp_write+0x5ac>)
 801d260:	f002 ff52 	bl	8020108 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801d264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d266:	685b      	ldr	r3, [r3, #4]
 801d268:	62bb      	str	r3, [r7, #40]	; 0x28
 801d26a:	e009      	b.n	801d280 <tcp_write+0x564>
      p->tot_len += extendlen;
 801d26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d26e:	891a      	ldrh	r2, [r3, #8]
 801d270:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d272:	4413      	add	r3, r2
 801d274:	b29a      	uxth	r2, r3
 801d276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d278:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	2b00      	cmp	r3, #0
 801d286:	d1f1      	bne.n	801d26c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d28a:	891a      	ldrh	r2, [r3, #8]
 801d28c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d28e:	4413      	add	r3, r2
 801d290:	b29a      	uxth	r2, r3
 801d292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d294:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d298:	895a      	ldrh	r2, [r3, #10]
 801d29a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d29c:	4413      	add	r3, r2
 801d29e:	b29a      	uxth	r2, r3
 801d2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2a2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801d2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d2a6:	891a      	ldrh	r2, [r3, #8]
 801d2a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d2aa:	4413      	add	r3, r2
 801d2ac:	b29a      	uxth	r2, r3
 801d2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d2b0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801d2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d111      	bne.n	801d2dc <tcp_write+0x5c0>
    pcb->unsent = queue;
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d2bc:	66da      	str	r2, [r3, #108]	; 0x6c
 801d2be:	e010      	b.n	801d2e2 <tcp_write+0x5c6>
 801d2c0:	08023c08 	.word	0x08023c08
 801d2c4:	08023eec 	.word	0x08023eec
 801d2c8:	08023ca0 	.word	0x08023ca0
 801d2cc:	08023f2c 	.word	0x08023f2c
 801d2d0:	08023f3c 	.word	0x08023f3c
 801d2d4:	08023f50 	.word	0x08023f50
 801d2d8:	08023f88 	.word	0x08023f88
  } else {
    last_unsent->next = queue;
 801d2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d2de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d2e0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d2e6:	88fb      	ldrh	r3, [r7, #6]
 801d2e8:	441a      	add	r2, r3
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801d2f4:	88fb      	ldrh	r3, [r7, #6]
 801d2f6:	1ad3      	subs	r3, r2, r3
 801d2f8:	b29a      	uxth	r2, r3
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d306:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d310:	2b00      	cmp	r3, #0
 801d312:	d00e      	beq.n	801d332 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d318:	2b00      	cmp	r3, #0
 801d31a:	d10a      	bne.n	801d332 <tcp_write+0x616>
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d320:	2b00      	cmp	r3, #0
 801d322:	d106      	bne.n	801d332 <tcp_write+0x616>
 801d324:	4b2c      	ldr	r3, [pc, #176]	; (801d3d8 <tcp_write+0x6bc>)
 801d326:	f240 3212 	movw	r2, #786	; 0x312
 801d32a:	492c      	ldr	r1, [pc, #176]	; (801d3dc <tcp_write+0x6c0>)
 801d32c:	482c      	ldr	r0, [pc, #176]	; (801d3e0 <tcp_write+0x6c4>)
 801d32e:	f002 feeb 	bl	8020108 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801d332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d334:	2b00      	cmp	r3, #0
 801d336:	d016      	beq.n	801d366 <tcp_write+0x64a>
 801d338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d33a:	68db      	ldr	r3, [r3, #12]
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d012      	beq.n	801d366 <tcp_write+0x64a>
 801d340:	797b      	ldrb	r3, [r7, #5]
 801d342:	f003 0302 	and.w	r3, r3, #2
 801d346:	2b00      	cmp	r3, #0
 801d348:	d10d      	bne.n	801d366 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801d34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d34c:	68db      	ldr	r3, [r3, #12]
 801d34e:	899b      	ldrh	r3, [r3, #12]
 801d350:	b29c      	uxth	r4, r3
 801d352:	2008      	movs	r0, #8
 801d354:	f7f6 fd68 	bl	8013e28 <lwip_htons>
 801d358:	4603      	mov	r3, r0
 801d35a:	461a      	mov	r2, r3
 801d35c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d35e:	68db      	ldr	r3, [r3, #12]
 801d360:	4322      	orrs	r2, r4
 801d362:	b292      	uxth	r2, r2
 801d364:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801d366:	2300      	movs	r3, #0
 801d368:	e031      	b.n	801d3ce <tcp_write+0x6b2>
          goto memerr;
 801d36a:	bf00      	nop
 801d36c:	e006      	b.n	801d37c <tcp_write+0x660>
            goto memerr;
 801d36e:	bf00      	nop
 801d370:	e004      	b.n	801d37c <tcp_write+0x660>
        goto memerr;
 801d372:	bf00      	nop
 801d374:	e002      	b.n	801d37c <tcp_write+0x660>
        goto memerr;
 801d376:	bf00      	nop
 801d378:	e000      	b.n	801d37c <tcp_write+0x660>
      goto memerr;
 801d37a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d37c:	68fb      	ldr	r3, [r7, #12]
 801d37e:	8b5b      	ldrh	r3, [r3, #26]
 801d380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d384:	b29a      	uxth	r2, r3
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801d38a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d002      	beq.n	801d396 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801d390:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d392:	f7fa fd1d 	bl	8017dd0 <pbuf_free>
  }
  if (queue != NULL) {
 801d396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d002      	beq.n	801d3a2 <tcp_write+0x686>
    tcp_segs_free(queue);
 801d39c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d39e:	f7fc fb6b 	bl	8019a78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801d3a2:	68fb      	ldr	r3, [r7, #12]
 801d3a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d00e      	beq.n	801d3ca <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d10a      	bne.n	801d3ca <tcp_write+0x6ae>
 801d3b4:	68fb      	ldr	r3, [r7, #12]
 801d3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d106      	bne.n	801d3ca <tcp_write+0x6ae>
 801d3bc:	4b06      	ldr	r3, [pc, #24]	; (801d3d8 <tcp_write+0x6bc>)
 801d3be:	f240 3227 	movw	r2, #807	; 0x327
 801d3c2:	4906      	ldr	r1, [pc, #24]	; (801d3dc <tcp_write+0x6c0>)
 801d3c4:	4806      	ldr	r0, [pc, #24]	; (801d3e0 <tcp_write+0x6c4>)
 801d3c6:	f002 fe9f 	bl	8020108 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801d3ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	375c      	adds	r7, #92	; 0x5c
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	bd90      	pop	{r4, r7, pc}
 801d3d6:	bf00      	nop
 801d3d8:	08023c08 	.word	0x08023c08
 801d3dc:	08023fc0 	.word	0x08023fc0
 801d3e0:	08023ca0 	.word	0x08023ca0

0801d3e4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801d3e4:	b590      	push	{r4, r7, lr}
 801d3e6:	b08b      	sub	sp, #44	; 0x2c
 801d3e8:	af02      	add	r7, sp, #8
 801d3ea:	6078      	str	r0, [r7, #4]
 801d3ec:	460b      	mov	r3, r1
 801d3ee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801d3f0:	2300      	movs	r3, #0
 801d3f2:	61fb      	str	r3, [r7, #28]
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801d3f8:	2300      	movs	r3, #0
 801d3fa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d106      	bne.n	801d410 <tcp_split_unsent_seg+0x2c>
 801d402:	4b95      	ldr	r3, [pc, #596]	; (801d658 <tcp_split_unsent_seg+0x274>)
 801d404:	f240 324b 	movw	r2, #843	; 0x34b
 801d408:	4994      	ldr	r1, [pc, #592]	; (801d65c <tcp_split_unsent_seg+0x278>)
 801d40a:	4895      	ldr	r0, [pc, #596]	; (801d660 <tcp_split_unsent_seg+0x27c>)
 801d40c:	f002 fe7c 	bl	8020108 <iprintf>

  useg = pcb->unsent;
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d414:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801d416:	697b      	ldr	r3, [r7, #20]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d102      	bne.n	801d422 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801d41c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d420:	e116      	b.n	801d650 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801d422:	887b      	ldrh	r3, [r7, #2]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d109      	bne.n	801d43c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801d428:	4b8b      	ldr	r3, [pc, #556]	; (801d658 <tcp_split_unsent_seg+0x274>)
 801d42a:	f240 3253 	movw	r2, #851	; 0x353
 801d42e:	498d      	ldr	r1, [pc, #564]	; (801d664 <tcp_split_unsent_seg+0x280>)
 801d430:	488b      	ldr	r0, [pc, #556]	; (801d660 <tcp_split_unsent_seg+0x27c>)
 801d432:	f002 fe69 	bl	8020108 <iprintf>
    return ERR_VAL;
 801d436:	f06f 0305 	mvn.w	r3, #5
 801d43a:	e109      	b.n	801d650 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801d43c:	697b      	ldr	r3, [r7, #20]
 801d43e:	891b      	ldrh	r3, [r3, #8]
 801d440:	887a      	ldrh	r2, [r7, #2]
 801d442:	429a      	cmp	r2, r3
 801d444:	d301      	bcc.n	801d44a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801d446:	2300      	movs	r3, #0
 801d448:	e102      	b.n	801d650 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d44e:	887a      	ldrh	r2, [r7, #2]
 801d450:	429a      	cmp	r2, r3
 801d452:	d906      	bls.n	801d462 <tcp_split_unsent_seg+0x7e>
 801d454:	4b80      	ldr	r3, [pc, #512]	; (801d658 <tcp_split_unsent_seg+0x274>)
 801d456:	f240 325b 	movw	r2, #859	; 0x35b
 801d45a:	4983      	ldr	r1, [pc, #524]	; (801d668 <tcp_split_unsent_seg+0x284>)
 801d45c:	4880      	ldr	r0, [pc, #512]	; (801d660 <tcp_split_unsent_seg+0x27c>)
 801d45e:	f002 fe53 	bl	8020108 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801d462:	697b      	ldr	r3, [r7, #20]
 801d464:	891b      	ldrh	r3, [r3, #8]
 801d466:	2b00      	cmp	r3, #0
 801d468:	d106      	bne.n	801d478 <tcp_split_unsent_seg+0x94>
 801d46a:	4b7b      	ldr	r3, [pc, #492]	; (801d658 <tcp_split_unsent_seg+0x274>)
 801d46c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801d470:	497e      	ldr	r1, [pc, #504]	; (801d66c <tcp_split_unsent_seg+0x288>)
 801d472:	487b      	ldr	r0, [pc, #492]	; (801d660 <tcp_split_unsent_seg+0x27c>)
 801d474:	f002 fe48 	bl	8020108 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801d478:	697b      	ldr	r3, [r7, #20]
 801d47a:	7a9b      	ldrb	r3, [r3, #10]
 801d47c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801d47e:	7bfb      	ldrb	r3, [r7, #15]
 801d480:	009b      	lsls	r3, r3, #2
 801d482:	b2db      	uxtb	r3, r3
 801d484:	f003 0304 	and.w	r3, r3, #4
 801d488:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801d48a:	697b      	ldr	r3, [r7, #20]
 801d48c:	891a      	ldrh	r2, [r3, #8]
 801d48e:	887b      	ldrh	r3, [r7, #2]
 801d490:	1ad3      	subs	r3, r2, r3
 801d492:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801d494:	7bbb      	ldrb	r3, [r7, #14]
 801d496:	b29a      	uxth	r2, r3
 801d498:	89bb      	ldrh	r3, [r7, #12]
 801d49a:	4413      	add	r3, r2
 801d49c:	b29b      	uxth	r3, r3
 801d49e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d4a2:	4619      	mov	r1, r3
 801d4a4:	2036      	movs	r0, #54	; 0x36
 801d4a6:	f7fa f9af 	bl	8017808 <pbuf_alloc>
 801d4aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d4ac:	693b      	ldr	r3, [r7, #16]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	f000 80b7 	beq.w	801d622 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801d4b4:	697b      	ldr	r3, [r7, #20]
 801d4b6:	685b      	ldr	r3, [r3, #4]
 801d4b8:	891a      	ldrh	r2, [r3, #8]
 801d4ba:	697b      	ldr	r3, [r7, #20]
 801d4bc:	891b      	ldrh	r3, [r3, #8]
 801d4be:	1ad3      	subs	r3, r2, r3
 801d4c0:	b29a      	uxth	r2, r3
 801d4c2:	887b      	ldrh	r3, [r7, #2]
 801d4c4:	4413      	add	r3, r2
 801d4c6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801d4c8:	697b      	ldr	r3, [r7, #20]
 801d4ca:	6858      	ldr	r0, [r3, #4]
 801d4cc:	693b      	ldr	r3, [r7, #16]
 801d4ce:	685a      	ldr	r2, [r3, #4]
 801d4d0:	7bbb      	ldrb	r3, [r7, #14]
 801d4d2:	18d1      	adds	r1, r2, r3
 801d4d4:	897b      	ldrh	r3, [r7, #10]
 801d4d6:	89ba      	ldrh	r2, [r7, #12]
 801d4d8:	f7fa fe70 	bl	80181bc <pbuf_copy_partial>
 801d4dc:	4603      	mov	r3, r0
 801d4de:	461a      	mov	r2, r3
 801d4e0:	89bb      	ldrh	r3, [r7, #12]
 801d4e2:	4293      	cmp	r3, r2
 801d4e4:	f040 809f 	bne.w	801d626 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801d4e8:	697b      	ldr	r3, [r7, #20]
 801d4ea:	68db      	ldr	r3, [r3, #12]
 801d4ec:	899b      	ldrh	r3, [r3, #12]
 801d4ee:	b29b      	uxth	r3, r3
 801d4f0:	4618      	mov	r0, r3
 801d4f2:	f7f6 fc99 	bl	8013e28 <lwip_htons>
 801d4f6:	4603      	mov	r3, r0
 801d4f8:	b2db      	uxtb	r3, r3
 801d4fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d4fe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801d500:	2300      	movs	r3, #0
 801d502:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801d504:	7efb      	ldrb	r3, [r7, #27]
 801d506:	f003 0308 	and.w	r3, r3, #8
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d007      	beq.n	801d51e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801d50e:	7efb      	ldrb	r3, [r7, #27]
 801d510:	f023 0308 	bic.w	r3, r3, #8
 801d514:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801d516:	7ebb      	ldrb	r3, [r7, #26]
 801d518:	f043 0308 	orr.w	r3, r3, #8
 801d51c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801d51e:	7efb      	ldrb	r3, [r7, #27]
 801d520:	f003 0301 	and.w	r3, r3, #1
 801d524:	2b00      	cmp	r3, #0
 801d526:	d007      	beq.n	801d538 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801d528:	7efb      	ldrb	r3, [r7, #27]
 801d52a:	f023 0301 	bic.w	r3, r3, #1
 801d52e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801d530:	7ebb      	ldrb	r3, [r7, #26]
 801d532:	f043 0301 	orr.w	r3, r3, #1
 801d536:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801d538:	697b      	ldr	r3, [r7, #20]
 801d53a:	68db      	ldr	r3, [r3, #12]
 801d53c:	685b      	ldr	r3, [r3, #4]
 801d53e:	4618      	mov	r0, r3
 801d540:	f7f6 fc87 	bl	8013e52 <lwip_htonl>
 801d544:	4602      	mov	r2, r0
 801d546:	887b      	ldrh	r3, [r7, #2]
 801d548:	18d1      	adds	r1, r2, r3
 801d54a:	7eba      	ldrb	r2, [r7, #26]
 801d54c:	7bfb      	ldrb	r3, [r7, #15]
 801d54e:	9300      	str	r3, [sp, #0]
 801d550:	460b      	mov	r3, r1
 801d552:	6939      	ldr	r1, [r7, #16]
 801d554:	6878      	ldr	r0, [r7, #4]
 801d556:	f7ff fa4f 	bl	801c9f8 <tcp_create_segment>
 801d55a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801d55c:	69fb      	ldr	r3, [r7, #28]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d063      	beq.n	801d62a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d562:	697b      	ldr	r3, [r7, #20]
 801d564:	685b      	ldr	r3, [r3, #4]
 801d566:	4618      	mov	r0, r3
 801d568:	f7fa fcc0 	bl	8017eec <pbuf_clen>
 801d56c:	4603      	mov	r3, r0
 801d56e:	461a      	mov	r2, r3
 801d570:	687b      	ldr	r3, [r7, #4]
 801d572:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d576:	1a9b      	subs	r3, r3, r2
 801d578:	b29a      	uxth	r2, r3
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d580:	697b      	ldr	r3, [r7, #20]
 801d582:	6858      	ldr	r0, [r3, #4]
 801d584:	697b      	ldr	r3, [r7, #20]
 801d586:	685b      	ldr	r3, [r3, #4]
 801d588:	891a      	ldrh	r2, [r3, #8]
 801d58a:	89bb      	ldrh	r3, [r7, #12]
 801d58c:	1ad3      	subs	r3, r2, r3
 801d58e:	b29b      	uxth	r3, r3
 801d590:	4619      	mov	r1, r3
 801d592:	f7fa fa99 	bl	8017ac8 <pbuf_realloc>
  useg->len -= remainder;
 801d596:	697b      	ldr	r3, [r7, #20]
 801d598:	891a      	ldrh	r2, [r3, #8]
 801d59a:	89bb      	ldrh	r3, [r7, #12]
 801d59c:	1ad3      	subs	r3, r2, r3
 801d59e:	b29a      	uxth	r2, r3
 801d5a0:	697b      	ldr	r3, [r7, #20]
 801d5a2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801d5a4:	697b      	ldr	r3, [r7, #20]
 801d5a6:	68db      	ldr	r3, [r3, #12]
 801d5a8:	899b      	ldrh	r3, [r3, #12]
 801d5aa:	b29c      	uxth	r4, r3
 801d5ac:	7efb      	ldrb	r3, [r7, #27]
 801d5ae:	b29b      	uxth	r3, r3
 801d5b0:	4618      	mov	r0, r3
 801d5b2:	f7f6 fc39 	bl	8013e28 <lwip_htons>
 801d5b6:	4603      	mov	r3, r0
 801d5b8:	461a      	mov	r2, r3
 801d5ba:	697b      	ldr	r3, [r7, #20]
 801d5bc:	68db      	ldr	r3, [r3, #12]
 801d5be:	4322      	orrs	r2, r4
 801d5c0:	b292      	uxth	r2, r2
 801d5c2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801d5c4:	697b      	ldr	r3, [r7, #20]
 801d5c6:	685b      	ldr	r3, [r3, #4]
 801d5c8:	4618      	mov	r0, r3
 801d5ca:	f7fa fc8f 	bl	8017eec <pbuf_clen>
 801d5ce:	4603      	mov	r3, r0
 801d5d0:	461a      	mov	r2, r3
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d5d8:	4413      	add	r3, r2
 801d5da:	b29a      	uxth	r2, r3
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d5e2:	69fb      	ldr	r3, [r7, #28]
 801d5e4:	685b      	ldr	r3, [r3, #4]
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7fa fc80 	bl	8017eec <pbuf_clen>
 801d5ec:	4603      	mov	r3, r0
 801d5ee:	461a      	mov	r2, r3
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d5f6:	4413      	add	r3, r2
 801d5f8:	b29a      	uxth	r2, r3
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801d600:	697b      	ldr	r3, [r7, #20]
 801d602:	681a      	ldr	r2, [r3, #0]
 801d604:	69fb      	ldr	r3, [r7, #28]
 801d606:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801d608:	697b      	ldr	r3, [r7, #20]
 801d60a:	69fa      	ldr	r2, [r7, #28]
 801d60c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801d60e:	69fb      	ldr	r3, [r7, #28]
 801d610:	681b      	ldr	r3, [r3, #0]
 801d612:	2b00      	cmp	r3, #0
 801d614:	d103      	bne.n	801d61e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	2200      	movs	r2, #0
 801d61a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801d61e:	2300      	movs	r3, #0
 801d620:	e016      	b.n	801d650 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801d622:	bf00      	nop
 801d624:	e002      	b.n	801d62c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d626:	bf00      	nop
 801d628:	e000      	b.n	801d62c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d62a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801d62c:	69fb      	ldr	r3, [r7, #28]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d006      	beq.n	801d640 <tcp_split_unsent_seg+0x25c>
 801d632:	4b09      	ldr	r3, [pc, #36]	; (801d658 <tcp_split_unsent_seg+0x274>)
 801d634:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801d638:	490d      	ldr	r1, [pc, #52]	; (801d670 <tcp_split_unsent_seg+0x28c>)
 801d63a:	4809      	ldr	r0, [pc, #36]	; (801d660 <tcp_split_unsent_seg+0x27c>)
 801d63c:	f002 fd64 	bl	8020108 <iprintf>
  if (p != NULL) {
 801d640:	693b      	ldr	r3, [r7, #16]
 801d642:	2b00      	cmp	r3, #0
 801d644:	d002      	beq.n	801d64c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801d646:	6938      	ldr	r0, [r7, #16]
 801d648:	f7fa fbc2 	bl	8017dd0 <pbuf_free>
  }

  return ERR_MEM;
 801d64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801d650:	4618      	mov	r0, r3
 801d652:	3724      	adds	r7, #36	; 0x24
 801d654:	46bd      	mov	sp, r7
 801d656:	bd90      	pop	{r4, r7, pc}
 801d658:	08023c08 	.word	0x08023c08
 801d65c:	08023fe0 	.word	0x08023fe0
 801d660:	08023ca0 	.word	0x08023ca0
 801d664:	08024004 	.word	0x08024004
 801d668:	08024028 	.word	0x08024028
 801d66c:	08024038 	.word	0x08024038
 801d670:	08024048 	.word	0x08024048

0801d674 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801d674:	b590      	push	{r4, r7, lr}
 801d676:	b085      	sub	sp, #20
 801d678:	af00      	add	r7, sp, #0
 801d67a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d106      	bne.n	801d690 <tcp_send_fin+0x1c>
 801d682:	4b21      	ldr	r3, [pc, #132]	; (801d708 <tcp_send_fin+0x94>)
 801d684:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801d688:	4920      	ldr	r1, [pc, #128]	; (801d70c <tcp_send_fin+0x98>)
 801d68a:	4821      	ldr	r0, [pc, #132]	; (801d710 <tcp_send_fin+0x9c>)
 801d68c:	f002 fd3c 	bl	8020108 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d694:	2b00      	cmp	r3, #0
 801d696:	d02e      	beq.n	801d6f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d69c:	60fb      	str	r3, [r7, #12]
 801d69e:	e002      	b.n	801d6a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d6a6:	68fb      	ldr	r3, [r7, #12]
 801d6a8:	681b      	ldr	r3, [r3, #0]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d1f8      	bne.n	801d6a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	68db      	ldr	r3, [r3, #12]
 801d6b2:	899b      	ldrh	r3, [r3, #12]
 801d6b4:	b29b      	uxth	r3, r3
 801d6b6:	4618      	mov	r0, r3
 801d6b8:	f7f6 fbb6 	bl	8013e28 <lwip_htons>
 801d6bc:	4603      	mov	r3, r0
 801d6be:	b2db      	uxtb	r3, r3
 801d6c0:	f003 0307 	and.w	r3, r3, #7
 801d6c4:	2b00      	cmp	r3, #0
 801d6c6:	d116      	bne.n	801d6f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	68db      	ldr	r3, [r3, #12]
 801d6cc:	899b      	ldrh	r3, [r3, #12]
 801d6ce:	b29c      	uxth	r4, r3
 801d6d0:	2001      	movs	r0, #1
 801d6d2:	f7f6 fba9 	bl	8013e28 <lwip_htons>
 801d6d6:	4603      	mov	r3, r0
 801d6d8:	461a      	mov	r2, r3
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	68db      	ldr	r3, [r3, #12]
 801d6de:	4322      	orrs	r2, r4
 801d6e0:	b292      	uxth	r2, r2
 801d6e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	8b5b      	ldrh	r3, [r3, #26]
 801d6e8:	f043 0320 	orr.w	r3, r3, #32
 801d6ec:	b29a      	uxth	r2, r3
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	e004      	b.n	801d700 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801d6f6:	2101      	movs	r1, #1
 801d6f8:	6878      	ldr	r0, [r7, #4]
 801d6fa:	f000 f80b 	bl	801d714 <tcp_enqueue_flags>
 801d6fe:	4603      	mov	r3, r0
}
 801d700:	4618      	mov	r0, r3
 801d702:	3714      	adds	r7, #20
 801d704:	46bd      	mov	sp, r7
 801d706:	bd90      	pop	{r4, r7, pc}
 801d708:	08023c08 	.word	0x08023c08
 801d70c:	08024054 	.word	0x08024054
 801d710:	08023ca0 	.word	0x08023ca0

0801d714 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801d714:	b580      	push	{r7, lr}
 801d716:	b08a      	sub	sp, #40	; 0x28
 801d718:	af02      	add	r7, sp, #8
 801d71a:	6078      	str	r0, [r7, #4]
 801d71c:	460b      	mov	r3, r1
 801d71e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801d720:	2300      	movs	r3, #0
 801d722:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801d724:	2300      	movs	r3, #0
 801d726:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801d728:	78fb      	ldrb	r3, [r7, #3]
 801d72a:	f003 0303 	and.w	r3, r3, #3
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d106      	bne.n	801d740 <tcp_enqueue_flags+0x2c>
 801d732:	4b67      	ldr	r3, [pc, #412]	; (801d8d0 <tcp_enqueue_flags+0x1bc>)
 801d734:	f240 4211 	movw	r2, #1041	; 0x411
 801d738:	4966      	ldr	r1, [pc, #408]	; (801d8d4 <tcp_enqueue_flags+0x1c0>)
 801d73a:	4867      	ldr	r0, [pc, #412]	; (801d8d8 <tcp_enqueue_flags+0x1c4>)
 801d73c:	f002 fce4 	bl	8020108 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	2b00      	cmp	r3, #0
 801d744:	d106      	bne.n	801d754 <tcp_enqueue_flags+0x40>
 801d746:	4b62      	ldr	r3, [pc, #392]	; (801d8d0 <tcp_enqueue_flags+0x1bc>)
 801d748:	f240 4213 	movw	r2, #1043	; 0x413
 801d74c:	4963      	ldr	r1, [pc, #396]	; (801d8dc <tcp_enqueue_flags+0x1c8>)
 801d74e:	4862      	ldr	r0, [pc, #392]	; (801d8d8 <tcp_enqueue_flags+0x1c4>)
 801d750:	f002 fcda 	bl	8020108 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801d754:	78fb      	ldrb	r3, [r7, #3]
 801d756:	f003 0302 	and.w	r3, r3, #2
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d001      	beq.n	801d762 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801d75e:	2301      	movs	r3, #1
 801d760:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d762:	7ffb      	ldrb	r3, [r7, #31]
 801d764:	009b      	lsls	r3, r3, #2
 801d766:	b2db      	uxtb	r3, r3
 801d768:	f003 0304 	and.w	r3, r3, #4
 801d76c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d76e:	7dfb      	ldrb	r3, [r7, #23]
 801d770:	b29b      	uxth	r3, r3
 801d772:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d776:	4619      	mov	r1, r3
 801d778:	2036      	movs	r0, #54	; 0x36
 801d77a:	f7fa f845 	bl	8017808 <pbuf_alloc>
 801d77e:	6138      	str	r0, [r7, #16]
 801d780:	693b      	ldr	r3, [r7, #16]
 801d782:	2b00      	cmp	r3, #0
 801d784:	d109      	bne.n	801d79a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	8b5b      	ldrh	r3, [r3, #26]
 801d78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d78e:	b29a      	uxth	r2, r3
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d798:	e095      	b.n	801d8c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801d79a:	693b      	ldr	r3, [r7, #16]
 801d79c:	895a      	ldrh	r2, [r3, #10]
 801d79e:	7dfb      	ldrb	r3, [r7, #23]
 801d7a0:	b29b      	uxth	r3, r3
 801d7a2:	429a      	cmp	r2, r3
 801d7a4:	d206      	bcs.n	801d7b4 <tcp_enqueue_flags+0xa0>
 801d7a6:	4b4a      	ldr	r3, [pc, #296]	; (801d8d0 <tcp_enqueue_flags+0x1bc>)
 801d7a8:	f240 4239 	movw	r2, #1081	; 0x439
 801d7ac:	494c      	ldr	r1, [pc, #304]	; (801d8e0 <tcp_enqueue_flags+0x1cc>)
 801d7ae:	484a      	ldr	r0, [pc, #296]	; (801d8d8 <tcp_enqueue_flags+0x1c4>)
 801d7b0:	f002 fcaa 	bl	8020108 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801d7b8:	78fa      	ldrb	r2, [r7, #3]
 801d7ba:	7ffb      	ldrb	r3, [r7, #31]
 801d7bc:	9300      	str	r3, [sp, #0]
 801d7be:	460b      	mov	r3, r1
 801d7c0:	6939      	ldr	r1, [r7, #16]
 801d7c2:	6878      	ldr	r0, [r7, #4]
 801d7c4:	f7ff f918 	bl	801c9f8 <tcp_create_segment>
 801d7c8:	60f8      	str	r0, [r7, #12]
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	d109      	bne.n	801d7e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	8b5b      	ldrh	r3, [r3, #26]
 801d7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d7d8:	b29a      	uxth	r2, r3
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7e2:	e070      	b.n	801d8c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801d7e4:	68fb      	ldr	r3, [r7, #12]
 801d7e6:	68db      	ldr	r3, [r3, #12]
 801d7e8:	f003 0303 	and.w	r3, r3, #3
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d006      	beq.n	801d7fe <tcp_enqueue_flags+0xea>
 801d7f0:	4b37      	ldr	r3, [pc, #220]	; (801d8d0 <tcp_enqueue_flags+0x1bc>)
 801d7f2:	f240 4242 	movw	r2, #1090	; 0x442
 801d7f6:	493b      	ldr	r1, [pc, #236]	; (801d8e4 <tcp_enqueue_flags+0x1d0>)
 801d7f8:	4837      	ldr	r0, [pc, #220]	; (801d8d8 <tcp_enqueue_flags+0x1c4>)
 801d7fa:	f002 fc85 	bl	8020108 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	891b      	ldrh	r3, [r3, #8]
 801d802:	2b00      	cmp	r3, #0
 801d804:	d006      	beq.n	801d814 <tcp_enqueue_flags+0x100>
 801d806:	4b32      	ldr	r3, [pc, #200]	; (801d8d0 <tcp_enqueue_flags+0x1bc>)
 801d808:	f240 4243 	movw	r2, #1091	; 0x443
 801d80c:	4936      	ldr	r1, [pc, #216]	; (801d8e8 <tcp_enqueue_flags+0x1d4>)
 801d80e:	4832      	ldr	r0, [pc, #200]	; (801d8d8 <tcp_enqueue_flags+0x1c4>)
 801d810:	f002 fc7a 	bl	8020108 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d818:	2b00      	cmp	r3, #0
 801d81a:	d103      	bne.n	801d824 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	68fa      	ldr	r2, [r7, #12]
 801d820:	66da      	str	r2, [r3, #108]	; 0x6c
 801d822:	e00d      	b.n	801d840 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d828:	61bb      	str	r3, [r7, #24]
 801d82a:	e002      	b.n	801d832 <tcp_enqueue_flags+0x11e>
 801d82c:	69bb      	ldr	r3, [r7, #24]
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	61bb      	str	r3, [r7, #24]
 801d832:	69bb      	ldr	r3, [r7, #24]
 801d834:	681b      	ldr	r3, [r3, #0]
 801d836:	2b00      	cmp	r3, #0
 801d838:	d1f8      	bne.n	801d82c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801d83a:	69bb      	ldr	r3, [r7, #24]
 801d83c:	68fa      	ldr	r2, [r7, #12]
 801d83e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	2200      	movs	r2, #0
 801d844:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801d848:	78fb      	ldrb	r3, [r7, #3]
 801d84a:	f003 0302 	and.w	r3, r3, #2
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d104      	bne.n	801d85c <tcp_enqueue_flags+0x148>
 801d852:	78fb      	ldrb	r3, [r7, #3]
 801d854:	f003 0301 	and.w	r3, r3, #1
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d004      	beq.n	801d866 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d860:	1c5a      	adds	r2, r3, #1
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801d866:	78fb      	ldrb	r3, [r7, #3]
 801d868:	f003 0301 	and.w	r3, r3, #1
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d006      	beq.n	801d87e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	8b5b      	ldrh	r3, [r3, #26]
 801d874:	f043 0320 	orr.w	r3, r3, #32
 801d878:	b29a      	uxth	r2, r3
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	685b      	ldr	r3, [r3, #4]
 801d882:	4618      	mov	r0, r3
 801d884:	f7fa fb32 	bl	8017eec <pbuf_clen>
 801d888:	4603      	mov	r3, r0
 801d88a:	461a      	mov	r2, r3
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d892:	4413      	add	r3, r2
 801d894:	b29a      	uxth	r2, r3
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d00e      	beq.n	801d8c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d10a      	bne.n	801d8c4 <tcp_enqueue_flags+0x1b0>
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	d106      	bne.n	801d8c4 <tcp_enqueue_flags+0x1b0>
 801d8b6:	4b06      	ldr	r3, [pc, #24]	; (801d8d0 <tcp_enqueue_flags+0x1bc>)
 801d8b8:	f240 4265 	movw	r2, #1125	; 0x465
 801d8bc:	490b      	ldr	r1, [pc, #44]	; (801d8ec <tcp_enqueue_flags+0x1d8>)
 801d8be:	4806      	ldr	r0, [pc, #24]	; (801d8d8 <tcp_enqueue_flags+0x1c4>)
 801d8c0:	f002 fc22 	bl	8020108 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801d8c4:	2300      	movs	r3, #0
}
 801d8c6:	4618      	mov	r0, r3
 801d8c8:	3720      	adds	r7, #32
 801d8ca:	46bd      	mov	sp, r7
 801d8cc:	bd80      	pop	{r7, pc}
 801d8ce:	bf00      	nop
 801d8d0:	08023c08 	.word	0x08023c08
 801d8d4:	08024070 	.word	0x08024070
 801d8d8:	08023ca0 	.word	0x08023ca0
 801d8dc:	080240c8 	.word	0x080240c8
 801d8e0:	080240e8 	.word	0x080240e8
 801d8e4:	08024124 	.word	0x08024124
 801d8e8:	0802413c 	.word	0x0802413c
 801d8ec:	08024168 	.word	0x08024168

0801d8f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801d8f0:	b5b0      	push	{r4, r5, r7, lr}
 801d8f2:	b08a      	sub	sp, #40	; 0x28
 801d8f4:	af00      	add	r7, sp, #0
 801d8f6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d106      	bne.n	801d90c <tcp_output+0x1c>
 801d8fe:	4b8a      	ldr	r3, [pc, #552]	; (801db28 <tcp_output+0x238>)
 801d900:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801d904:	4989      	ldr	r1, [pc, #548]	; (801db2c <tcp_output+0x23c>)
 801d906:	488a      	ldr	r0, [pc, #552]	; (801db30 <tcp_output+0x240>)
 801d908:	f002 fbfe 	bl	8020108 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	7d1b      	ldrb	r3, [r3, #20]
 801d910:	2b01      	cmp	r3, #1
 801d912:	d106      	bne.n	801d922 <tcp_output+0x32>
 801d914:	4b84      	ldr	r3, [pc, #528]	; (801db28 <tcp_output+0x238>)
 801d916:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801d91a:	4986      	ldr	r1, [pc, #536]	; (801db34 <tcp_output+0x244>)
 801d91c:	4884      	ldr	r0, [pc, #528]	; (801db30 <tcp_output+0x240>)
 801d91e:	f002 fbf3 	bl	8020108 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801d922:	4b85      	ldr	r3, [pc, #532]	; (801db38 <tcp_output+0x248>)
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	687a      	ldr	r2, [r7, #4]
 801d928:	429a      	cmp	r2, r3
 801d92a:	d101      	bne.n	801d930 <tcp_output+0x40>
    return ERR_OK;
 801d92c:	2300      	movs	r3, #0
 801d92e:	e1ce      	b.n	801dcce <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d93c:	4293      	cmp	r3, r2
 801d93e:	bf28      	it	cs
 801d940:	4613      	movcs	r3, r2
 801d942:	b29b      	uxth	r3, r3
 801d944:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d94a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d94e:	2b00      	cmp	r3, #0
 801d950:	d10b      	bne.n	801d96a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	8b5b      	ldrh	r3, [r3, #26]
 801d956:	f003 0302 	and.w	r3, r3, #2
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	f000 81aa 	beq.w	801dcb4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801d960:	6878      	ldr	r0, [r7, #4]
 801d962:	f000 fdcb 	bl	801e4fc <tcp_send_empty_ack>
 801d966:	4603      	mov	r3, r0
 801d968:	e1b1      	b.n	801dcce <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801d96a:	6879      	ldr	r1, [r7, #4]
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	3304      	adds	r3, #4
 801d970:	461a      	mov	r2, r3
 801d972:	6878      	ldr	r0, [r7, #4]
 801d974:	f7ff f824 	bl	801c9c0 <tcp_route>
 801d978:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801d97a:	697b      	ldr	r3, [r7, #20]
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d102      	bne.n	801d986 <tcp_output+0x96>
    return ERR_RTE;
 801d980:	f06f 0303 	mvn.w	r3, #3
 801d984:	e1a3      	b.n	801dcce <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d003      	beq.n	801d994 <tcp_output+0xa4>
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	2b00      	cmp	r3, #0
 801d992:	d111      	bne.n	801d9b8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801d994:	697b      	ldr	r3, [r7, #20]
 801d996:	2b00      	cmp	r3, #0
 801d998:	d002      	beq.n	801d9a0 <tcp_output+0xb0>
 801d99a:	697b      	ldr	r3, [r7, #20]
 801d99c:	3304      	adds	r3, #4
 801d99e:	e000      	b.n	801d9a2 <tcp_output+0xb2>
 801d9a0:	2300      	movs	r3, #0
 801d9a2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801d9a4:	693b      	ldr	r3, [r7, #16]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d102      	bne.n	801d9b0 <tcp_output+0xc0>
      return ERR_RTE;
 801d9aa:	f06f 0303 	mvn.w	r3, #3
 801d9ae:	e18e      	b.n	801dcce <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801d9b0:	693b      	ldr	r3, [r7, #16]
 801d9b2:	681a      	ldr	r2, [r3, #0]
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9ba:	68db      	ldr	r3, [r3, #12]
 801d9bc:	685b      	ldr	r3, [r3, #4]
 801d9be:	4618      	mov	r0, r3
 801d9c0:	f7f6 fa47 	bl	8013e52 <lwip_htonl>
 801d9c4:	4602      	mov	r2, r0
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9ca:	1ad3      	subs	r3, r2, r3
 801d9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d9ce:	8912      	ldrh	r2, [r2, #8]
 801d9d0:	4413      	add	r3, r2
 801d9d2:	69ba      	ldr	r2, [r7, #24]
 801d9d4:	429a      	cmp	r2, r3
 801d9d6:	d227      	bcs.n	801da28 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d9de:	461a      	mov	r2, r3
 801d9e0:	69bb      	ldr	r3, [r7, #24]
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	d114      	bne.n	801da10 <tcp_output+0x120>
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d110      	bne.n	801da10 <tcp_output+0x120>
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d10b      	bne.n	801da10 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	2200      	movs	r2, #0
 801d9fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	2201      	movs	r2, #1
 801da04:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	2200      	movs	r2, #0
 801da0c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	8b5b      	ldrh	r3, [r3, #26]
 801da14:	f003 0302 	and.w	r3, r3, #2
 801da18:	2b00      	cmp	r3, #0
 801da1a:	f000 814d 	beq.w	801dcb8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801da1e:	6878      	ldr	r0, [r7, #4]
 801da20:	f000 fd6c 	bl	801e4fc <tcp_send_empty_ack>
 801da24:	4603      	mov	r3, r0
 801da26:	e152      	b.n	801dcce <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	2200      	movs	r2, #0
 801da2c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da34:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801da36:	6a3b      	ldr	r3, [r7, #32]
 801da38:	2b00      	cmp	r3, #0
 801da3a:	f000 811c 	beq.w	801dc76 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801da3e:	e002      	b.n	801da46 <tcp_output+0x156>
 801da40:	6a3b      	ldr	r3, [r7, #32]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	623b      	str	r3, [r7, #32]
 801da46:	6a3b      	ldr	r3, [r7, #32]
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d1f8      	bne.n	801da40 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801da4e:	e112      	b.n	801dc76 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801da52:	68db      	ldr	r3, [r3, #12]
 801da54:	899b      	ldrh	r3, [r3, #12]
 801da56:	b29b      	uxth	r3, r3
 801da58:	4618      	mov	r0, r3
 801da5a:	f7f6 f9e5 	bl	8013e28 <lwip_htons>
 801da5e:	4603      	mov	r3, r0
 801da60:	b2db      	uxtb	r3, r3
 801da62:	f003 0304 	and.w	r3, r3, #4
 801da66:	2b00      	cmp	r3, #0
 801da68:	d006      	beq.n	801da78 <tcp_output+0x188>
 801da6a:	4b2f      	ldr	r3, [pc, #188]	; (801db28 <tcp_output+0x238>)
 801da6c:	f240 5236 	movw	r2, #1334	; 0x536
 801da70:	4932      	ldr	r1, [pc, #200]	; (801db3c <tcp_output+0x24c>)
 801da72:	482f      	ldr	r0, [pc, #188]	; (801db30 <tcp_output+0x240>)
 801da74:	f002 fb48 	bl	8020108 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d01f      	beq.n	801dac0 <tcp_output+0x1d0>
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	8b5b      	ldrh	r3, [r3, #26]
 801da84:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801da88:	2b00      	cmp	r3, #0
 801da8a:	d119      	bne.n	801dac0 <tcp_output+0x1d0>
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801da90:	2b00      	cmp	r3, #0
 801da92:	d00b      	beq.n	801daac <tcp_output+0x1bc>
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d110      	bne.n	801dac0 <tcp_output+0x1d0>
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801daa2:	891a      	ldrh	r2, [r3, #8]
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d209      	bcs.n	801dac0 <tcp_output+0x1d0>
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	d004      	beq.n	801dac0 <tcp_output+0x1d0>
 801dab6:	687b      	ldr	r3, [r7, #4]
 801dab8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dabc:	2b0f      	cmp	r3, #15
 801dabe:	d901      	bls.n	801dac4 <tcp_output+0x1d4>
 801dac0:	2301      	movs	r3, #1
 801dac2:	e000      	b.n	801dac6 <tcp_output+0x1d6>
 801dac4:	2300      	movs	r3, #0
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d106      	bne.n	801dad8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	8b5b      	ldrh	r3, [r3, #26]
 801dace:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	f000 80e4 	beq.w	801dca0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	7d1b      	ldrb	r3, [r3, #20]
 801dadc:	2b02      	cmp	r3, #2
 801dade:	d00d      	beq.n	801dafc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dae2:	68db      	ldr	r3, [r3, #12]
 801dae4:	899b      	ldrh	r3, [r3, #12]
 801dae6:	b29c      	uxth	r4, r3
 801dae8:	2010      	movs	r0, #16
 801daea:	f7f6 f99d 	bl	8013e28 <lwip_htons>
 801daee:	4603      	mov	r3, r0
 801daf0:	461a      	mov	r2, r3
 801daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801daf4:	68db      	ldr	r3, [r3, #12]
 801daf6:	4322      	orrs	r2, r4
 801daf8:	b292      	uxth	r2, r2
 801dafa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801dafc:	697a      	ldr	r2, [r7, #20]
 801dafe:	6879      	ldr	r1, [r7, #4]
 801db00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db02:	f000 f909 	bl	801dd18 <tcp_output_segment>
 801db06:	4603      	mov	r3, r0
 801db08:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801db0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d016      	beq.n	801db40 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	8b5b      	ldrh	r3, [r3, #26]
 801db16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db1a:	b29a      	uxth	r2, r3
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	835a      	strh	r2, [r3, #26]
      return err;
 801db20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801db24:	e0d3      	b.n	801dcce <tcp_output+0x3de>
 801db26:	bf00      	nop
 801db28:	08023c08 	.word	0x08023c08
 801db2c:	08024190 	.word	0x08024190
 801db30:	08023ca0 	.word	0x08023ca0
 801db34:	080241a8 	.word	0x080241a8
 801db38:	24010064 	.word	0x24010064
 801db3c:	080241d0 	.word	0x080241d0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db42:	681a      	ldr	r2, [r3, #0]
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	7d1b      	ldrb	r3, [r3, #20]
 801db4c:	2b02      	cmp	r3, #2
 801db4e:	d006      	beq.n	801db5e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	8b5b      	ldrh	r3, [r3, #26]
 801db54:	f023 0303 	bic.w	r3, r3, #3
 801db58:	b29a      	uxth	r2, r3
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db60:	68db      	ldr	r3, [r3, #12]
 801db62:	685b      	ldr	r3, [r3, #4]
 801db64:	4618      	mov	r0, r3
 801db66:	f7f6 f974 	bl	8013e52 <lwip_htonl>
 801db6a:	4604      	mov	r4, r0
 801db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db6e:	891b      	ldrh	r3, [r3, #8]
 801db70:	461d      	mov	r5, r3
 801db72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db74:	68db      	ldr	r3, [r3, #12]
 801db76:	899b      	ldrh	r3, [r3, #12]
 801db78:	b29b      	uxth	r3, r3
 801db7a:	4618      	mov	r0, r3
 801db7c:	f7f6 f954 	bl	8013e28 <lwip_htons>
 801db80:	4603      	mov	r3, r0
 801db82:	b2db      	uxtb	r3, r3
 801db84:	f003 0303 	and.w	r3, r3, #3
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d001      	beq.n	801db90 <tcp_output+0x2a0>
 801db8c:	2301      	movs	r3, #1
 801db8e:	e000      	b.n	801db92 <tcp_output+0x2a2>
 801db90:	2300      	movs	r3, #0
 801db92:	442b      	add	r3, r5
 801db94:	4423      	add	r3, r4
 801db96:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801db9c:	68bb      	ldr	r3, [r7, #8]
 801db9e:	1ad3      	subs	r3, r2, r3
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	da02      	bge.n	801dbaa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	68ba      	ldr	r2, [r7, #8]
 801dba8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbac:	891b      	ldrh	r3, [r3, #8]
 801dbae:	461c      	mov	r4, r3
 801dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbb2:	68db      	ldr	r3, [r3, #12]
 801dbb4:	899b      	ldrh	r3, [r3, #12]
 801dbb6:	b29b      	uxth	r3, r3
 801dbb8:	4618      	mov	r0, r3
 801dbba:	f7f6 f935 	bl	8013e28 <lwip_htons>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	b2db      	uxtb	r3, r3
 801dbc2:	f003 0303 	and.w	r3, r3, #3
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d001      	beq.n	801dbce <tcp_output+0x2de>
 801dbca:	2301      	movs	r3, #1
 801dbcc:	e000      	b.n	801dbd0 <tcp_output+0x2e0>
 801dbce:	2300      	movs	r3, #0
 801dbd0:	4423      	add	r3, r4
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	d049      	beq.n	801dc6a <tcp_output+0x37a>
      seg->next = NULL;
 801dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbd8:	2200      	movs	r2, #0
 801dbda:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	d105      	bne.n	801dbf0 <tcp_output+0x300>
        pcb->unacked = seg;
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbe8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbec:	623b      	str	r3, [r7, #32]
 801dbee:	e03f      	b.n	801dc70 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801dbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbf2:	68db      	ldr	r3, [r3, #12]
 801dbf4:	685b      	ldr	r3, [r3, #4]
 801dbf6:	4618      	mov	r0, r3
 801dbf8:	f7f6 f92b 	bl	8013e52 <lwip_htonl>
 801dbfc:	4604      	mov	r4, r0
 801dbfe:	6a3b      	ldr	r3, [r7, #32]
 801dc00:	68db      	ldr	r3, [r3, #12]
 801dc02:	685b      	ldr	r3, [r3, #4]
 801dc04:	4618      	mov	r0, r3
 801dc06:	f7f6 f924 	bl	8013e52 <lwip_htonl>
 801dc0a:	4603      	mov	r3, r0
 801dc0c:	1ae3      	subs	r3, r4, r3
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	da24      	bge.n	801dc5c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	3370      	adds	r3, #112	; 0x70
 801dc16:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801dc18:	e002      	b.n	801dc20 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801dc1a:	69fb      	ldr	r3, [r7, #28]
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801dc20:	69fb      	ldr	r3, [r7, #28]
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d011      	beq.n	801dc4c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801dc28:	69fb      	ldr	r3, [r7, #28]
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	68db      	ldr	r3, [r3, #12]
 801dc2e:	685b      	ldr	r3, [r3, #4]
 801dc30:	4618      	mov	r0, r3
 801dc32:	f7f6 f90e 	bl	8013e52 <lwip_htonl>
 801dc36:	4604      	mov	r4, r0
 801dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc3a:	68db      	ldr	r3, [r3, #12]
 801dc3c:	685b      	ldr	r3, [r3, #4]
 801dc3e:	4618      	mov	r0, r3
 801dc40:	f7f6 f907 	bl	8013e52 <lwip_htonl>
 801dc44:	4603      	mov	r3, r0
 801dc46:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	dbe6      	blt.n	801dc1a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801dc4c:	69fb      	ldr	r3, [r7, #28]
 801dc4e:	681a      	ldr	r2, [r3, #0]
 801dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc52:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801dc54:	69fb      	ldr	r3, [r7, #28]
 801dc56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc58:	601a      	str	r2, [r3, #0]
 801dc5a:	e009      	b.n	801dc70 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801dc5c:	6a3b      	ldr	r3, [r7, #32]
 801dc5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc60:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801dc62:	6a3b      	ldr	r3, [r7, #32]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	623b      	str	r3, [r7, #32]
 801dc68:	e002      	b.n	801dc70 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801dc6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dc6c:	f7fb ff19 	bl	8019aa2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dc74:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc78:	2b00      	cmp	r3, #0
 801dc7a:	d012      	beq.n	801dca2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801dc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc7e:	68db      	ldr	r3, [r3, #12]
 801dc80:	685b      	ldr	r3, [r3, #4]
 801dc82:	4618      	mov	r0, r3
 801dc84:	f7f6 f8e5 	bl	8013e52 <lwip_htonl>
 801dc88:	4602      	mov	r2, r0
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc8e:	1ad3      	subs	r3, r2, r3
 801dc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc92:	8912      	ldrh	r2, [r2, #8]
 801dc94:	4413      	add	r3, r2
  while (seg != NULL &&
 801dc96:	69ba      	ldr	r2, [r7, #24]
 801dc98:	429a      	cmp	r2, r3
 801dc9a:	f4bf aed9 	bcs.w	801da50 <tcp_output+0x160>
 801dc9e:	e000      	b.n	801dca2 <tcp_output+0x3b2>
      break;
 801dca0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d108      	bne.n	801dcbc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	2200      	movs	r2, #0
 801dcae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801dcb2:	e004      	b.n	801dcbe <tcp_output+0x3ce>
    goto output_done;
 801dcb4:	bf00      	nop
 801dcb6:	e002      	b.n	801dcbe <tcp_output+0x3ce>
    goto output_done;
 801dcb8:	bf00      	nop
 801dcba:	e000      	b.n	801dcbe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801dcbc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	8b5b      	ldrh	r3, [r3, #26]
 801dcc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801dcc6:	b29a      	uxth	r2, r3
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801dccc:	2300      	movs	r3, #0
}
 801dcce:	4618      	mov	r0, r3
 801dcd0:	3728      	adds	r7, #40	; 0x28
 801dcd2:	46bd      	mov	sp, r7
 801dcd4:	bdb0      	pop	{r4, r5, r7, pc}
 801dcd6:	bf00      	nop

0801dcd8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801dcd8:	b580      	push	{r7, lr}
 801dcda:	b082      	sub	sp, #8
 801dcdc:	af00      	add	r7, sp, #0
 801dcde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d106      	bne.n	801dcf4 <tcp_output_segment_busy+0x1c>
 801dce6:	4b09      	ldr	r3, [pc, #36]	; (801dd0c <tcp_output_segment_busy+0x34>)
 801dce8:	f240 529a 	movw	r2, #1434	; 0x59a
 801dcec:	4908      	ldr	r1, [pc, #32]	; (801dd10 <tcp_output_segment_busy+0x38>)
 801dcee:	4809      	ldr	r0, [pc, #36]	; (801dd14 <tcp_output_segment_busy+0x3c>)
 801dcf0:	f002 fa0a 	bl	8020108 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	685b      	ldr	r3, [r3, #4]
 801dcf8:	7b9b      	ldrb	r3, [r3, #14]
 801dcfa:	2b01      	cmp	r3, #1
 801dcfc:	d001      	beq.n	801dd02 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801dcfe:	2301      	movs	r3, #1
 801dd00:	e000      	b.n	801dd04 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801dd02:	2300      	movs	r3, #0
}
 801dd04:	4618      	mov	r0, r3
 801dd06:	3708      	adds	r7, #8
 801dd08:	46bd      	mov	sp, r7
 801dd0a:	bd80      	pop	{r7, pc}
 801dd0c:	08023c08 	.word	0x08023c08
 801dd10:	080241e8 	.word	0x080241e8
 801dd14:	08023ca0 	.word	0x08023ca0

0801dd18 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801dd18:	b5b0      	push	{r4, r5, r7, lr}
 801dd1a:	b08c      	sub	sp, #48	; 0x30
 801dd1c:	af04      	add	r7, sp, #16
 801dd1e:	60f8      	str	r0, [r7, #12]
 801dd20:	60b9      	str	r1, [r7, #8]
 801dd22:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801dd24:	68fb      	ldr	r3, [r7, #12]
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	d106      	bne.n	801dd38 <tcp_output_segment+0x20>
 801dd2a:	4b63      	ldr	r3, [pc, #396]	; (801deb8 <tcp_output_segment+0x1a0>)
 801dd2c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801dd30:	4962      	ldr	r1, [pc, #392]	; (801debc <tcp_output_segment+0x1a4>)
 801dd32:	4863      	ldr	r0, [pc, #396]	; (801dec0 <tcp_output_segment+0x1a8>)
 801dd34:	f002 f9e8 	bl	8020108 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801dd38:	68bb      	ldr	r3, [r7, #8]
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	d106      	bne.n	801dd4c <tcp_output_segment+0x34>
 801dd3e:	4b5e      	ldr	r3, [pc, #376]	; (801deb8 <tcp_output_segment+0x1a0>)
 801dd40:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801dd44:	495f      	ldr	r1, [pc, #380]	; (801dec4 <tcp_output_segment+0x1ac>)
 801dd46:	485e      	ldr	r0, [pc, #376]	; (801dec0 <tcp_output_segment+0x1a8>)
 801dd48:	f002 f9de 	bl	8020108 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d106      	bne.n	801dd60 <tcp_output_segment+0x48>
 801dd52:	4b59      	ldr	r3, [pc, #356]	; (801deb8 <tcp_output_segment+0x1a0>)
 801dd54:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801dd58:	495b      	ldr	r1, [pc, #364]	; (801dec8 <tcp_output_segment+0x1b0>)
 801dd5a:	4859      	ldr	r0, [pc, #356]	; (801dec0 <tcp_output_segment+0x1a8>)
 801dd5c:	f002 f9d4 	bl	8020108 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801dd60:	68f8      	ldr	r0, [r7, #12]
 801dd62:	f7ff ffb9 	bl	801dcd8 <tcp_output_segment_busy>
 801dd66:	4603      	mov	r3, r0
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d001      	beq.n	801dd70 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801dd6c:	2300      	movs	r3, #0
 801dd6e:	e09f      	b.n	801deb0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801dd70:	68bb      	ldr	r3, [r7, #8]
 801dd72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	68dc      	ldr	r4, [r3, #12]
 801dd78:	4610      	mov	r0, r2
 801dd7a:	f7f6 f86a 	bl	8013e52 <lwip_htonl>
 801dd7e:	4603      	mov	r3, r0
 801dd80:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801dd82:	68bb      	ldr	r3, [r7, #8]
 801dd84:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801dd86:	68fb      	ldr	r3, [r7, #12]
 801dd88:	68dc      	ldr	r4, [r3, #12]
 801dd8a:	4610      	mov	r0, r2
 801dd8c:	f7f6 f84c 	bl	8013e28 <lwip_htons>
 801dd90:	4603      	mov	r3, r0
 801dd92:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801dd94:	68bb      	ldr	r3, [r7, #8]
 801dd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dd98:	68ba      	ldr	r2, [r7, #8]
 801dd9a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801dd9c:	441a      	add	r2, r3
 801dd9e:	68bb      	ldr	r3, [r7, #8]
 801dda0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	68db      	ldr	r3, [r3, #12]
 801dda6:	3314      	adds	r3, #20
 801dda8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	7a9b      	ldrb	r3, [r3, #10]
 801ddae:	f003 0301 	and.w	r3, r3, #1
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	d015      	beq.n	801dde2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ddb6:	68bb      	ldr	r3, [r7, #8]
 801ddb8:	3304      	adds	r3, #4
 801ddba:	461a      	mov	r2, r3
 801ddbc:	6879      	ldr	r1, [r7, #4]
 801ddbe:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801ddc2:	f7fc fa33 	bl	801a22c <tcp_eff_send_mss_netif>
 801ddc6:	4603      	mov	r3, r0
 801ddc8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ddca:	8b7b      	ldrh	r3, [r7, #26]
 801ddcc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801ddd0:	4618      	mov	r0, r3
 801ddd2:	f7f6 f83e 	bl	8013e52 <lwip_htonl>
 801ddd6:	4602      	mov	r2, r0
 801ddd8:	69fb      	ldr	r3, [r7, #28]
 801ddda:	601a      	str	r2, [r3, #0]
    opts += 1;
 801dddc:	69fb      	ldr	r3, [r7, #28]
 801ddde:	3304      	adds	r3, #4
 801dde0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801dde2:	68bb      	ldr	r3, [r7, #8]
 801dde4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	da02      	bge.n	801ddf2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ddec:	68bb      	ldr	r3, [r7, #8]
 801ddee:	2200      	movs	r2, #0
 801ddf0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801ddf2:	68bb      	ldr	r3, [r7, #8]
 801ddf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d10c      	bne.n	801de14 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801ddfa:	4b34      	ldr	r3, [pc, #208]	; (801decc <tcp_output_segment+0x1b4>)
 801ddfc:	681a      	ldr	r2, [r3, #0]
 801ddfe:	68bb      	ldr	r3, [r7, #8]
 801de00:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801de02:	68fb      	ldr	r3, [r7, #12]
 801de04:	68db      	ldr	r3, [r3, #12]
 801de06:	685b      	ldr	r3, [r3, #4]
 801de08:	4618      	mov	r0, r3
 801de0a:	f7f6 f822 	bl	8013e52 <lwip_htonl>
 801de0e:	4602      	mov	r2, r0
 801de10:	68bb      	ldr	r3, [r7, #8]
 801de12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	68da      	ldr	r2, [r3, #12]
 801de18:	68fb      	ldr	r3, [r7, #12]
 801de1a:	685b      	ldr	r3, [r3, #4]
 801de1c:	685b      	ldr	r3, [r3, #4]
 801de1e:	1ad3      	subs	r3, r2, r3
 801de20:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	685b      	ldr	r3, [r3, #4]
 801de26:	8959      	ldrh	r1, [r3, #10]
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	685b      	ldr	r3, [r3, #4]
 801de2c:	8b3a      	ldrh	r2, [r7, #24]
 801de2e:	1a8a      	subs	r2, r1, r2
 801de30:	b292      	uxth	r2, r2
 801de32:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	685b      	ldr	r3, [r3, #4]
 801de38:	8919      	ldrh	r1, [r3, #8]
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	685b      	ldr	r3, [r3, #4]
 801de3e:	8b3a      	ldrh	r2, [r7, #24]
 801de40:	1a8a      	subs	r2, r1, r2
 801de42:	b292      	uxth	r2, r2
 801de44:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801de46:	68fb      	ldr	r3, [r7, #12]
 801de48:	685b      	ldr	r3, [r3, #4]
 801de4a:	68fa      	ldr	r2, [r7, #12]
 801de4c:	68d2      	ldr	r2, [r2, #12]
 801de4e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	68db      	ldr	r3, [r3, #12]
 801de54:	2200      	movs	r2, #0
 801de56:	741a      	strb	r2, [r3, #16]
 801de58:	2200      	movs	r2, #0
 801de5a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	68db      	ldr	r3, [r3, #12]
 801de60:	f103 0214 	add.w	r2, r3, #20
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	7a9b      	ldrb	r3, [r3, #10]
 801de68:	009b      	lsls	r3, r3, #2
 801de6a:	f003 0304 	and.w	r3, r3, #4
 801de6e:	4413      	add	r3, r2
 801de70:	69fa      	ldr	r2, [r7, #28]
 801de72:	429a      	cmp	r2, r3
 801de74:	d006      	beq.n	801de84 <tcp_output_segment+0x16c>
 801de76:	4b10      	ldr	r3, [pc, #64]	; (801deb8 <tcp_output_segment+0x1a0>)
 801de78:	f240 621c 	movw	r2, #1564	; 0x61c
 801de7c:	4914      	ldr	r1, [pc, #80]	; (801ded0 <tcp_output_segment+0x1b8>)
 801de7e:	4810      	ldr	r0, [pc, #64]	; (801dec0 <tcp_output_segment+0x1a8>)
 801de80:	f002 f942 	bl	8020108 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801de84:	68fb      	ldr	r3, [r7, #12]
 801de86:	6858      	ldr	r0, [r3, #4]
 801de88:	68b9      	ldr	r1, [r7, #8]
 801de8a:	68bb      	ldr	r3, [r7, #8]
 801de8c:	1d1c      	adds	r4, r3, #4
 801de8e:	68bb      	ldr	r3, [r7, #8]
 801de90:	7add      	ldrb	r5, [r3, #11]
 801de92:	68bb      	ldr	r3, [r7, #8]
 801de94:	7a9b      	ldrb	r3, [r3, #10]
 801de96:	687a      	ldr	r2, [r7, #4]
 801de98:	9202      	str	r2, [sp, #8]
 801de9a:	2206      	movs	r2, #6
 801de9c:	9201      	str	r2, [sp, #4]
 801de9e:	9300      	str	r3, [sp, #0]
 801dea0:	462b      	mov	r3, r5
 801dea2:	4622      	mov	r2, r4
 801dea4:	f7f7 fc56 	bl	8015754 <ip4_output_if>
 801dea8:	4603      	mov	r3, r0
 801deaa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801deac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801deb0:	4618      	mov	r0, r3
 801deb2:	3720      	adds	r7, #32
 801deb4:	46bd      	mov	sp, r7
 801deb6:	bdb0      	pop	{r4, r5, r7, pc}
 801deb8:	08023c08 	.word	0x08023c08
 801debc:	08024210 	.word	0x08024210
 801dec0:	08023ca0 	.word	0x08023ca0
 801dec4:	08024230 	.word	0x08024230
 801dec8:	08024250 	.word	0x08024250
 801decc:	24010018 	.word	0x24010018
 801ded0:	08024274 	.word	0x08024274

0801ded4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801ded4:	b5b0      	push	{r4, r5, r7, lr}
 801ded6:	b084      	sub	sp, #16
 801ded8:	af00      	add	r7, sp, #0
 801deda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d106      	bne.n	801def0 <tcp_rexmit_rto_prepare+0x1c>
 801dee2:	4b31      	ldr	r3, [pc, #196]	; (801dfa8 <tcp_rexmit_rto_prepare+0xd4>)
 801dee4:	f240 6263 	movw	r2, #1635	; 0x663
 801dee8:	4930      	ldr	r1, [pc, #192]	; (801dfac <tcp_rexmit_rto_prepare+0xd8>)
 801deea:	4831      	ldr	r0, [pc, #196]	; (801dfb0 <tcp_rexmit_rto_prepare+0xdc>)
 801deec:	f002 f90c 	bl	8020108 <iprintf>

  if (pcb->unacked == NULL) {
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801def4:	2b00      	cmp	r3, #0
 801def6:	d102      	bne.n	801defe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801def8:	f06f 0305 	mvn.w	r3, #5
 801defc:	e050      	b.n	801dfa0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df02:	60fb      	str	r3, [r7, #12]
 801df04:	e00b      	b.n	801df1e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801df06:	68f8      	ldr	r0, [r7, #12]
 801df08:	f7ff fee6 	bl	801dcd8 <tcp_output_segment_busy>
 801df0c:	4603      	mov	r3, r0
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d002      	beq.n	801df18 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801df12:	f06f 0305 	mvn.w	r3, #5
 801df16:	e043      	b.n	801dfa0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801df18:	68fb      	ldr	r3, [r7, #12]
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	60fb      	str	r3, [r7, #12]
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	2b00      	cmp	r3, #0
 801df24:	d1ef      	bne.n	801df06 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801df26:	68f8      	ldr	r0, [r7, #12]
 801df28:	f7ff fed6 	bl	801dcd8 <tcp_output_segment_busy>
 801df2c:	4603      	mov	r3, r0
 801df2e:	2b00      	cmp	r3, #0
 801df30:	d002      	beq.n	801df38 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801df32:	f06f 0305 	mvn.w	r3, #5
 801df36:	e033      	b.n	801dfa0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	2200      	movs	r2, #0
 801df4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	8b5b      	ldrh	r3, [r3, #26]
 801df52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801df56:	b29a      	uxth	r2, r3
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801df5c:	68fb      	ldr	r3, [r7, #12]
 801df5e:	68db      	ldr	r3, [r3, #12]
 801df60:	685b      	ldr	r3, [r3, #4]
 801df62:	4618      	mov	r0, r3
 801df64:	f7f5 ff75 	bl	8013e52 <lwip_htonl>
 801df68:	4604      	mov	r4, r0
 801df6a:	68fb      	ldr	r3, [r7, #12]
 801df6c:	891b      	ldrh	r3, [r3, #8]
 801df6e:	461d      	mov	r5, r3
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	68db      	ldr	r3, [r3, #12]
 801df74:	899b      	ldrh	r3, [r3, #12]
 801df76:	b29b      	uxth	r3, r3
 801df78:	4618      	mov	r0, r3
 801df7a:	f7f5 ff55 	bl	8013e28 <lwip_htons>
 801df7e:	4603      	mov	r3, r0
 801df80:	b2db      	uxtb	r3, r3
 801df82:	f003 0303 	and.w	r3, r3, #3
 801df86:	2b00      	cmp	r3, #0
 801df88:	d001      	beq.n	801df8e <tcp_rexmit_rto_prepare+0xba>
 801df8a:	2301      	movs	r3, #1
 801df8c:	e000      	b.n	801df90 <tcp_rexmit_rto_prepare+0xbc>
 801df8e:	2300      	movs	r3, #0
 801df90:	442b      	add	r3, r5
 801df92:	18e2      	adds	r2, r4, r3
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	2200      	movs	r2, #0
 801df9c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801df9e:	2300      	movs	r3, #0
}
 801dfa0:	4618      	mov	r0, r3
 801dfa2:	3710      	adds	r7, #16
 801dfa4:	46bd      	mov	sp, r7
 801dfa6:	bdb0      	pop	{r4, r5, r7, pc}
 801dfa8:	08023c08 	.word	0x08023c08
 801dfac:	08024288 	.word	0x08024288
 801dfb0:	08023ca0 	.word	0x08023ca0

0801dfb4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801dfb4:	b580      	push	{r7, lr}
 801dfb6:	b082      	sub	sp, #8
 801dfb8:	af00      	add	r7, sp, #0
 801dfba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d106      	bne.n	801dfd0 <tcp_rexmit_rto_commit+0x1c>
 801dfc2:	4b0d      	ldr	r3, [pc, #52]	; (801dff8 <tcp_rexmit_rto_commit+0x44>)
 801dfc4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801dfc8:	490c      	ldr	r1, [pc, #48]	; (801dffc <tcp_rexmit_rto_commit+0x48>)
 801dfca:	480d      	ldr	r0, [pc, #52]	; (801e000 <tcp_rexmit_rto_commit+0x4c>)
 801dfcc:	f002 f89c 	bl	8020108 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dfd6:	2bff      	cmp	r3, #255	; 0xff
 801dfd8:	d007      	beq.n	801dfea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801dfda:	687b      	ldr	r3, [r7, #4]
 801dfdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801dfe0:	3301      	adds	r3, #1
 801dfe2:	b2da      	uxtb	r2, r3
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801dfea:	6878      	ldr	r0, [r7, #4]
 801dfec:	f7ff fc80 	bl	801d8f0 <tcp_output>
}
 801dff0:	bf00      	nop
 801dff2:	3708      	adds	r7, #8
 801dff4:	46bd      	mov	sp, r7
 801dff6:	bd80      	pop	{r7, pc}
 801dff8:	08023c08 	.word	0x08023c08
 801dffc:	080242ac 	.word	0x080242ac
 801e000:	08023ca0 	.word	0x08023ca0

0801e004 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801e004:	b580      	push	{r7, lr}
 801e006:	b082      	sub	sp, #8
 801e008:	af00      	add	r7, sp, #0
 801e00a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	2b00      	cmp	r3, #0
 801e010:	d106      	bne.n	801e020 <tcp_rexmit_rto+0x1c>
 801e012:	4b0a      	ldr	r3, [pc, #40]	; (801e03c <tcp_rexmit_rto+0x38>)
 801e014:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e018:	4909      	ldr	r1, [pc, #36]	; (801e040 <tcp_rexmit_rto+0x3c>)
 801e01a:	480a      	ldr	r0, [pc, #40]	; (801e044 <tcp_rexmit_rto+0x40>)
 801e01c:	f002 f874 	bl	8020108 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e020:	6878      	ldr	r0, [r7, #4]
 801e022:	f7ff ff57 	bl	801ded4 <tcp_rexmit_rto_prepare>
 801e026:	4603      	mov	r3, r0
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d102      	bne.n	801e032 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801e02c:	6878      	ldr	r0, [r7, #4]
 801e02e:	f7ff ffc1 	bl	801dfb4 <tcp_rexmit_rto_commit>
  }
}
 801e032:	bf00      	nop
 801e034:	3708      	adds	r7, #8
 801e036:	46bd      	mov	sp, r7
 801e038:	bd80      	pop	{r7, pc}
 801e03a:	bf00      	nop
 801e03c:	08023c08 	.word	0x08023c08
 801e040:	080242d0 	.word	0x080242d0
 801e044:	08023ca0 	.word	0x08023ca0

0801e048 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801e048:	b590      	push	{r4, r7, lr}
 801e04a:	b085      	sub	sp, #20
 801e04c:	af00      	add	r7, sp, #0
 801e04e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	2b00      	cmp	r3, #0
 801e054:	d106      	bne.n	801e064 <tcp_rexmit+0x1c>
 801e056:	4b2f      	ldr	r3, [pc, #188]	; (801e114 <tcp_rexmit+0xcc>)
 801e058:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801e05c:	492e      	ldr	r1, [pc, #184]	; (801e118 <tcp_rexmit+0xd0>)
 801e05e:	482f      	ldr	r0, [pc, #188]	; (801e11c <tcp_rexmit+0xd4>)
 801e060:	f002 f852 	bl	8020108 <iprintf>

  if (pcb->unacked == NULL) {
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d102      	bne.n	801e072 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801e06c:	f06f 0305 	mvn.w	r3, #5
 801e070:	e04c      	b.n	801e10c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e076:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801e078:	68b8      	ldr	r0, [r7, #8]
 801e07a:	f7ff fe2d 	bl	801dcd8 <tcp_output_segment_busy>
 801e07e:	4603      	mov	r3, r0
 801e080:	2b00      	cmp	r3, #0
 801e082:	d002      	beq.n	801e08a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801e084:	f06f 0305 	mvn.w	r3, #5
 801e088:	e040      	b.n	801e10c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801e08a:	68bb      	ldr	r3, [r7, #8]
 801e08c:	681a      	ldr	r2, [r3, #0]
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	336c      	adds	r3, #108	; 0x6c
 801e096:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e098:	e002      	b.n	801e0a0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d011      	beq.n	801e0cc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e0a8:	68fb      	ldr	r3, [r7, #12]
 801e0aa:	681b      	ldr	r3, [r3, #0]
 801e0ac:	68db      	ldr	r3, [r3, #12]
 801e0ae:	685b      	ldr	r3, [r3, #4]
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	f7f5 fece 	bl	8013e52 <lwip_htonl>
 801e0b6:	4604      	mov	r4, r0
 801e0b8:	68bb      	ldr	r3, [r7, #8]
 801e0ba:	68db      	ldr	r3, [r3, #12]
 801e0bc:	685b      	ldr	r3, [r3, #4]
 801e0be:	4618      	mov	r0, r3
 801e0c0:	f7f5 fec7 	bl	8013e52 <lwip_htonl>
 801e0c4:	4603      	mov	r3, r0
 801e0c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	dbe6      	blt.n	801e09a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801e0cc:	68fb      	ldr	r3, [r7, #12]
 801e0ce:	681a      	ldr	r2, [r3, #0]
 801e0d0:	68bb      	ldr	r3, [r7, #8]
 801e0d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	68ba      	ldr	r2, [r7, #8]
 801e0d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801e0da:	68bb      	ldr	r3, [r7, #8]
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d103      	bne.n	801e0ea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	2200      	movs	r2, #0
 801e0e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e0f0:	2bff      	cmp	r3, #255	; 0xff
 801e0f2:	d007      	beq.n	801e104 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e0fa:	3301      	adds	r3, #1
 801e0fc:	b2da      	uxtb	r2, r3
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	2200      	movs	r2, #0
 801e108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801e10a:	2300      	movs	r3, #0
}
 801e10c:	4618      	mov	r0, r3
 801e10e:	3714      	adds	r7, #20
 801e110:	46bd      	mov	sp, r7
 801e112:	bd90      	pop	{r4, r7, pc}
 801e114:	08023c08 	.word	0x08023c08
 801e118:	080242ec 	.word	0x080242ec
 801e11c:	08023ca0 	.word	0x08023ca0

0801e120 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801e120:	b580      	push	{r7, lr}
 801e122:	b082      	sub	sp, #8
 801e124:	af00      	add	r7, sp, #0
 801e126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d106      	bne.n	801e13c <tcp_rexmit_fast+0x1c>
 801e12e:	4b2a      	ldr	r3, [pc, #168]	; (801e1d8 <tcp_rexmit_fast+0xb8>)
 801e130:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801e134:	4929      	ldr	r1, [pc, #164]	; (801e1dc <tcp_rexmit_fast+0xbc>)
 801e136:	482a      	ldr	r0, [pc, #168]	; (801e1e0 <tcp_rexmit_fast+0xc0>)
 801e138:	f001 ffe6 	bl	8020108 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e140:	2b00      	cmp	r3, #0
 801e142:	d045      	beq.n	801e1d0 <tcp_rexmit_fast+0xb0>
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	8b5b      	ldrh	r3, [r3, #26]
 801e148:	f003 0304 	and.w	r3, r3, #4
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d13f      	bne.n	801e1d0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801e150:	6878      	ldr	r0, [r7, #4]
 801e152:	f7ff ff79 	bl	801e048 <tcp_rexmit>
 801e156:	4603      	mov	r3, r0
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d139      	bne.n	801e1d0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801e168:	4293      	cmp	r3, r2
 801e16a:	bf28      	it	cs
 801e16c:	4613      	movcs	r3, r2
 801e16e:	b29b      	uxth	r3, r3
 801e170:	2b00      	cmp	r3, #0
 801e172:	da00      	bge.n	801e176 <tcp_rexmit_fast+0x56>
 801e174:	3301      	adds	r3, #1
 801e176:	105b      	asrs	r3, r3, #1
 801e178:	b29a      	uxth	r2, r3
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801e186:	461a      	mov	r2, r3
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e18c:	005b      	lsls	r3, r3, #1
 801e18e:	429a      	cmp	r2, r3
 801e190:	d206      	bcs.n	801e1a0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e196:	005b      	lsls	r3, r3, #1
 801e198:	b29a      	uxth	r2, r3
 801e19a:	687b      	ldr	r3, [r7, #4]
 801e19c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e1aa:	4619      	mov	r1, r3
 801e1ac:	0049      	lsls	r1, r1, #1
 801e1ae:	440b      	add	r3, r1
 801e1b0:	b29b      	uxth	r3, r3
 801e1b2:	4413      	add	r3, r2
 801e1b4:	b29a      	uxth	r2, r3
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	8b5b      	ldrh	r3, [r3, #26]
 801e1c0:	f043 0304 	orr.w	r3, r3, #4
 801e1c4:	b29a      	uxth	r2, r3
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	2200      	movs	r2, #0
 801e1ce:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801e1d0:	bf00      	nop
 801e1d2:	3708      	adds	r7, #8
 801e1d4:	46bd      	mov	sp, r7
 801e1d6:	bd80      	pop	{r7, pc}
 801e1d8:	08023c08 	.word	0x08023c08
 801e1dc:	08024304 	.word	0x08024304
 801e1e0:	08023ca0 	.word	0x08023ca0

0801e1e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801e1e4:	b580      	push	{r7, lr}
 801e1e6:	b086      	sub	sp, #24
 801e1e8:	af00      	add	r7, sp, #0
 801e1ea:	60f8      	str	r0, [r7, #12]
 801e1ec:	607b      	str	r3, [r7, #4]
 801e1ee:	460b      	mov	r3, r1
 801e1f0:	817b      	strh	r3, [r7, #10]
 801e1f2:	4613      	mov	r3, r2
 801e1f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e1f6:	897a      	ldrh	r2, [r7, #10]
 801e1f8:	893b      	ldrh	r3, [r7, #8]
 801e1fa:	4413      	add	r3, r2
 801e1fc:	b29b      	uxth	r3, r3
 801e1fe:	3314      	adds	r3, #20
 801e200:	b29b      	uxth	r3, r3
 801e202:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e206:	4619      	mov	r1, r3
 801e208:	2022      	movs	r0, #34	; 0x22
 801e20a:	f7f9 fafd 	bl	8017808 <pbuf_alloc>
 801e20e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801e210:	697b      	ldr	r3, [r7, #20]
 801e212:	2b00      	cmp	r3, #0
 801e214:	d04d      	beq.n	801e2b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e216:	897b      	ldrh	r3, [r7, #10]
 801e218:	3313      	adds	r3, #19
 801e21a:	697a      	ldr	r2, [r7, #20]
 801e21c:	8952      	ldrh	r2, [r2, #10]
 801e21e:	4293      	cmp	r3, r2
 801e220:	db06      	blt.n	801e230 <tcp_output_alloc_header_common+0x4c>
 801e222:	4b26      	ldr	r3, [pc, #152]	; (801e2bc <tcp_output_alloc_header_common+0xd8>)
 801e224:	f240 7223 	movw	r2, #1827	; 0x723
 801e228:	4925      	ldr	r1, [pc, #148]	; (801e2c0 <tcp_output_alloc_header_common+0xdc>)
 801e22a:	4826      	ldr	r0, [pc, #152]	; (801e2c4 <tcp_output_alloc_header_common+0xe0>)
 801e22c:	f001 ff6c 	bl	8020108 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801e230:	697b      	ldr	r3, [r7, #20]
 801e232:	685b      	ldr	r3, [r3, #4]
 801e234:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801e236:	8c3b      	ldrh	r3, [r7, #32]
 801e238:	4618      	mov	r0, r3
 801e23a:	f7f5 fdf5 	bl	8013e28 <lwip_htons>
 801e23e:	4603      	mov	r3, r0
 801e240:	461a      	mov	r2, r3
 801e242:	693b      	ldr	r3, [r7, #16]
 801e244:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801e246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e248:	4618      	mov	r0, r3
 801e24a:	f7f5 fded 	bl	8013e28 <lwip_htons>
 801e24e:	4603      	mov	r3, r0
 801e250:	461a      	mov	r2, r3
 801e252:	693b      	ldr	r3, [r7, #16]
 801e254:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801e256:	693b      	ldr	r3, [r7, #16]
 801e258:	687a      	ldr	r2, [r7, #4]
 801e25a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801e25c:	68f8      	ldr	r0, [r7, #12]
 801e25e:	f7f5 fdf8 	bl	8013e52 <lwip_htonl>
 801e262:	4602      	mov	r2, r0
 801e264:	693b      	ldr	r3, [r7, #16]
 801e266:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e268:	897b      	ldrh	r3, [r7, #10]
 801e26a:	089b      	lsrs	r3, r3, #2
 801e26c:	b29b      	uxth	r3, r3
 801e26e:	3305      	adds	r3, #5
 801e270:	b29b      	uxth	r3, r3
 801e272:	031b      	lsls	r3, r3, #12
 801e274:	b29a      	uxth	r2, r3
 801e276:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e27a:	b29b      	uxth	r3, r3
 801e27c:	4313      	orrs	r3, r2
 801e27e:	b29b      	uxth	r3, r3
 801e280:	4618      	mov	r0, r3
 801e282:	f7f5 fdd1 	bl	8013e28 <lwip_htons>
 801e286:	4603      	mov	r3, r0
 801e288:	461a      	mov	r2, r3
 801e28a:	693b      	ldr	r3, [r7, #16]
 801e28c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801e28e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e290:	4618      	mov	r0, r3
 801e292:	f7f5 fdc9 	bl	8013e28 <lwip_htons>
 801e296:	4603      	mov	r3, r0
 801e298:	461a      	mov	r2, r3
 801e29a:	693b      	ldr	r3, [r7, #16]
 801e29c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801e29e:	693b      	ldr	r3, [r7, #16]
 801e2a0:	2200      	movs	r2, #0
 801e2a2:	741a      	strb	r2, [r3, #16]
 801e2a4:	2200      	movs	r2, #0
 801e2a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801e2a8:	693b      	ldr	r3, [r7, #16]
 801e2aa:	2200      	movs	r2, #0
 801e2ac:	749a      	strb	r2, [r3, #18]
 801e2ae:	2200      	movs	r2, #0
 801e2b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801e2b2:	697b      	ldr	r3, [r7, #20]
}
 801e2b4:	4618      	mov	r0, r3
 801e2b6:	3718      	adds	r7, #24
 801e2b8:	46bd      	mov	sp, r7
 801e2ba:	bd80      	pop	{r7, pc}
 801e2bc:	08023c08 	.word	0x08023c08
 801e2c0:	08024324 	.word	0x08024324
 801e2c4:	08023ca0 	.word	0x08023ca0

0801e2c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801e2c8:	b5b0      	push	{r4, r5, r7, lr}
 801e2ca:	b08a      	sub	sp, #40	; 0x28
 801e2cc:	af04      	add	r7, sp, #16
 801e2ce:	60f8      	str	r0, [r7, #12]
 801e2d0:	607b      	str	r3, [r7, #4]
 801e2d2:	460b      	mov	r3, r1
 801e2d4:	817b      	strh	r3, [r7, #10]
 801e2d6:	4613      	mov	r3, r2
 801e2d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d106      	bne.n	801e2ee <tcp_output_alloc_header+0x26>
 801e2e0:	4b15      	ldr	r3, [pc, #84]	; (801e338 <tcp_output_alloc_header+0x70>)
 801e2e2:	f240 7242 	movw	r2, #1858	; 0x742
 801e2e6:	4915      	ldr	r1, [pc, #84]	; (801e33c <tcp_output_alloc_header+0x74>)
 801e2e8:	4815      	ldr	r0, [pc, #84]	; (801e340 <tcp_output_alloc_header+0x78>)
 801e2ea:	f001 ff0d 	bl	8020108 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	8adb      	ldrh	r3, [r3, #22]
 801e2f6:	68fa      	ldr	r2, [r7, #12]
 801e2f8:	8b12      	ldrh	r2, [r2, #24]
 801e2fa:	68f9      	ldr	r1, [r7, #12]
 801e2fc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801e2fe:	893d      	ldrh	r5, [r7, #8]
 801e300:	897c      	ldrh	r4, [r7, #10]
 801e302:	9103      	str	r1, [sp, #12]
 801e304:	2110      	movs	r1, #16
 801e306:	9102      	str	r1, [sp, #8]
 801e308:	9201      	str	r2, [sp, #4]
 801e30a:	9300      	str	r3, [sp, #0]
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	462a      	mov	r2, r5
 801e310:	4621      	mov	r1, r4
 801e312:	f7ff ff67 	bl	801e1e4 <tcp_output_alloc_header_common>
 801e316:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801e318:	697b      	ldr	r3, [r7, #20]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d006      	beq.n	801e32c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e31e:	68fb      	ldr	r3, [r7, #12]
 801e320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e322:	68fa      	ldr	r2, [r7, #12]
 801e324:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e326:	441a      	add	r2, r3
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801e32c:	697b      	ldr	r3, [r7, #20]
}
 801e32e:	4618      	mov	r0, r3
 801e330:	3718      	adds	r7, #24
 801e332:	46bd      	mov	sp, r7
 801e334:	bdb0      	pop	{r4, r5, r7, pc}
 801e336:	bf00      	nop
 801e338:	08023c08 	.word	0x08023c08
 801e33c:	08024354 	.word	0x08024354
 801e340:	08023ca0 	.word	0x08023ca0

0801e344 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801e344:	b580      	push	{r7, lr}
 801e346:	b088      	sub	sp, #32
 801e348:	af00      	add	r7, sp, #0
 801e34a:	60f8      	str	r0, [r7, #12]
 801e34c:	60b9      	str	r1, [r7, #8]
 801e34e:	4611      	mov	r1, r2
 801e350:	461a      	mov	r2, r3
 801e352:	460b      	mov	r3, r1
 801e354:	71fb      	strb	r3, [r7, #7]
 801e356:	4613      	mov	r3, r2
 801e358:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801e35a:	2300      	movs	r3, #0
 801e35c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801e35e:	68bb      	ldr	r3, [r7, #8]
 801e360:	2b00      	cmp	r3, #0
 801e362:	d106      	bne.n	801e372 <tcp_output_fill_options+0x2e>
 801e364:	4b13      	ldr	r3, [pc, #76]	; (801e3b4 <tcp_output_fill_options+0x70>)
 801e366:	f240 7256 	movw	r2, #1878	; 0x756
 801e36a:	4913      	ldr	r1, [pc, #76]	; (801e3b8 <tcp_output_fill_options+0x74>)
 801e36c:	4813      	ldr	r0, [pc, #76]	; (801e3bc <tcp_output_fill_options+0x78>)
 801e36e:	f001 fecb 	bl	8020108 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801e372:	68bb      	ldr	r3, [r7, #8]
 801e374:	685b      	ldr	r3, [r3, #4]
 801e376:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801e378:	69bb      	ldr	r3, [r7, #24]
 801e37a:	3314      	adds	r3, #20
 801e37c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801e37e:	69bb      	ldr	r3, [r7, #24]
 801e380:	f103 0214 	add.w	r2, r3, #20
 801e384:	8bfb      	ldrh	r3, [r7, #30]
 801e386:	009b      	lsls	r3, r3, #2
 801e388:	4619      	mov	r1, r3
 801e38a:	79fb      	ldrb	r3, [r7, #7]
 801e38c:	009b      	lsls	r3, r3, #2
 801e38e:	f003 0304 	and.w	r3, r3, #4
 801e392:	440b      	add	r3, r1
 801e394:	4413      	add	r3, r2
 801e396:	697a      	ldr	r2, [r7, #20]
 801e398:	429a      	cmp	r2, r3
 801e39a:	d006      	beq.n	801e3aa <tcp_output_fill_options+0x66>
 801e39c:	4b05      	ldr	r3, [pc, #20]	; (801e3b4 <tcp_output_fill_options+0x70>)
 801e39e:	f240 7275 	movw	r2, #1909	; 0x775
 801e3a2:	4907      	ldr	r1, [pc, #28]	; (801e3c0 <tcp_output_fill_options+0x7c>)
 801e3a4:	4805      	ldr	r0, [pc, #20]	; (801e3bc <tcp_output_fill_options+0x78>)
 801e3a6:	f001 feaf 	bl	8020108 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801e3aa:	bf00      	nop
 801e3ac:	3720      	adds	r7, #32
 801e3ae:	46bd      	mov	sp, r7
 801e3b0:	bd80      	pop	{r7, pc}
 801e3b2:	bf00      	nop
 801e3b4:	08023c08 	.word	0x08023c08
 801e3b8:	0802437c 	.word	0x0802437c
 801e3bc:	08023ca0 	.word	0x08023ca0
 801e3c0:	08024274 	.word	0x08024274

0801e3c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801e3c4:	b580      	push	{r7, lr}
 801e3c6:	b08a      	sub	sp, #40	; 0x28
 801e3c8:	af04      	add	r7, sp, #16
 801e3ca:	60f8      	str	r0, [r7, #12]
 801e3cc:	60b9      	str	r1, [r7, #8]
 801e3ce:	607a      	str	r2, [r7, #4]
 801e3d0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e3d2:	68bb      	ldr	r3, [r7, #8]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d106      	bne.n	801e3e6 <tcp_output_control_segment+0x22>
 801e3d8:	4b1c      	ldr	r3, [pc, #112]	; (801e44c <tcp_output_control_segment+0x88>)
 801e3da:	f240 7287 	movw	r2, #1927	; 0x787
 801e3de:	491c      	ldr	r1, [pc, #112]	; (801e450 <tcp_output_control_segment+0x8c>)
 801e3e0:	481c      	ldr	r0, [pc, #112]	; (801e454 <tcp_output_control_segment+0x90>)
 801e3e2:	f001 fe91 	bl	8020108 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801e3e6:	683a      	ldr	r2, [r7, #0]
 801e3e8:	6879      	ldr	r1, [r7, #4]
 801e3ea:	68f8      	ldr	r0, [r7, #12]
 801e3ec:	f7fe fae8 	bl	801c9c0 <tcp_route>
 801e3f0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801e3f2:	693b      	ldr	r3, [r7, #16]
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	d102      	bne.n	801e3fe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801e3f8:	23fc      	movs	r3, #252	; 0xfc
 801e3fa:	75fb      	strb	r3, [r7, #23]
 801e3fc:	e01c      	b.n	801e438 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	2b00      	cmp	r3, #0
 801e402:	d006      	beq.n	801e412 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	7adb      	ldrb	r3, [r3, #11]
 801e408:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801e40a:	68fb      	ldr	r3, [r7, #12]
 801e40c:	7a9b      	ldrb	r3, [r3, #10]
 801e40e:	757b      	strb	r3, [r7, #21]
 801e410:	e003      	b.n	801e41a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801e412:	23ff      	movs	r3, #255	; 0xff
 801e414:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801e416:	2300      	movs	r3, #0
 801e418:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801e41a:	7dba      	ldrb	r2, [r7, #22]
 801e41c:	693b      	ldr	r3, [r7, #16]
 801e41e:	9302      	str	r3, [sp, #8]
 801e420:	2306      	movs	r3, #6
 801e422:	9301      	str	r3, [sp, #4]
 801e424:	7d7b      	ldrb	r3, [r7, #21]
 801e426:	9300      	str	r3, [sp, #0]
 801e428:	4613      	mov	r3, r2
 801e42a:	683a      	ldr	r2, [r7, #0]
 801e42c:	6879      	ldr	r1, [r7, #4]
 801e42e:	68b8      	ldr	r0, [r7, #8]
 801e430:	f7f7 f990 	bl	8015754 <ip4_output_if>
 801e434:	4603      	mov	r3, r0
 801e436:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e438:	68b8      	ldr	r0, [r7, #8]
 801e43a:	f7f9 fcc9 	bl	8017dd0 <pbuf_free>
  return err;
 801e43e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e442:	4618      	mov	r0, r3
 801e444:	3718      	adds	r7, #24
 801e446:	46bd      	mov	sp, r7
 801e448:	bd80      	pop	{r7, pc}
 801e44a:	bf00      	nop
 801e44c:	08023c08 	.word	0x08023c08
 801e450:	080243a4 	.word	0x080243a4
 801e454:	08023ca0 	.word	0x08023ca0

0801e458 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801e458:	b590      	push	{r4, r7, lr}
 801e45a:	b08b      	sub	sp, #44	; 0x2c
 801e45c:	af04      	add	r7, sp, #16
 801e45e:	60f8      	str	r0, [r7, #12]
 801e460:	60b9      	str	r1, [r7, #8]
 801e462:	607a      	str	r2, [r7, #4]
 801e464:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e466:	683b      	ldr	r3, [r7, #0]
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d106      	bne.n	801e47a <tcp_rst+0x22>
 801e46c:	4b1f      	ldr	r3, [pc, #124]	; (801e4ec <tcp_rst+0x94>)
 801e46e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801e472:	491f      	ldr	r1, [pc, #124]	; (801e4f0 <tcp_rst+0x98>)
 801e474:	481f      	ldr	r0, [pc, #124]	; (801e4f4 <tcp_rst+0x9c>)
 801e476:	f001 fe47 	bl	8020108 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801e47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d106      	bne.n	801e48e <tcp_rst+0x36>
 801e480:	4b1a      	ldr	r3, [pc, #104]	; (801e4ec <tcp_rst+0x94>)
 801e482:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801e486:	491c      	ldr	r1, [pc, #112]	; (801e4f8 <tcp_rst+0xa0>)
 801e488:	481a      	ldr	r0, [pc, #104]	; (801e4f4 <tcp_rst+0x9c>)
 801e48a:	f001 fe3d 	bl	8020108 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e48e:	2300      	movs	r3, #0
 801e490:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801e492:	f24d 0316 	movw	r3, #53270	; 0xd016
 801e496:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801e498:	7dfb      	ldrb	r3, [r7, #23]
 801e49a:	b29c      	uxth	r4, r3
 801e49c:	68b8      	ldr	r0, [r7, #8]
 801e49e:	f7f5 fcd8 	bl	8013e52 <lwip_htonl>
 801e4a2:	4602      	mov	r2, r0
 801e4a4:	8abb      	ldrh	r3, [r7, #20]
 801e4a6:	9303      	str	r3, [sp, #12]
 801e4a8:	2314      	movs	r3, #20
 801e4aa:	9302      	str	r3, [sp, #8]
 801e4ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801e4ae:	9301      	str	r3, [sp, #4]
 801e4b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e4b2:	9300      	str	r3, [sp, #0]
 801e4b4:	4613      	mov	r3, r2
 801e4b6:	2200      	movs	r2, #0
 801e4b8:	4621      	mov	r1, r4
 801e4ba:	6878      	ldr	r0, [r7, #4]
 801e4bc:	f7ff fe92 	bl	801e1e4 <tcp_output_alloc_header_common>
 801e4c0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801e4c2:	693b      	ldr	r3, [r7, #16]
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	d00c      	beq.n	801e4e2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e4c8:	7dfb      	ldrb	r3, [r7, #23]
 801e4ca:	2200      	movs	r2, #0
 801e4cc:	6939      	ldr	r1, [r7, #16]
 801e4ce:	68f8      	ldr	r0, [r7, #12]
 801e4d0:	f7ff ff38 	bl	801e344 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4d6:	683a      	ldr	r2, [r7, #0]
 801e4d8:	6939      	ldr	r1, [r7, #16]
 801e4da:	68f8      	ldr	r0, [r7, #12]
 801e4dc:	f7ff ff72 	bl	801e3c4 <tcp_output_control_segment>
 801e4e0:	e000      	b.n	801e4e4 <tcp_rst+0x8c>
    return;
 801e4e2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801e4e4:	371c      	adds	r7, #28
 801e4e6:	46bd      	mov	sp, r7
 801e4e8:	bd90      	pop	{r4, r7, pc}
 801e4ea:	bf00      	nop
 801e4ec:	08023c08 	.word	0x08023c08
 801e4f0:	080243d0 	.word	0x080243d0
 801e4f4:	08023ca0 	.word	0x08023ca0
 801e4f8:	080243ec 	.word	0x080243ec

0801e4fc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801e4fc:	b590      	push	{r4, r7, lr}
 801e4fe:	b087      	sub	sp, #28
 801e500:	af00      	add	r7, sp, #0
 801e502:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801e504:	2300      	movs	r3, #0
 801e506:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801e508:	2300      	movs	r3, #0
 801e50a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d106      	bne.n	801e520 <tcp_send_empty_ack+0x24>
 801e512:	4b28      	ldr	r3, [pc, #160]	; (801e5b4 <tcp_send_empty_ack+0xb8>)
 801e514:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801e518:	4927      	ldr	r1, [pc, #156]	; (801e5b8 <tcp_send_empty_ack+0xbc>)
 801e51a:	4828      	ldr	r0, [pc, #160]	; (801e5bc <tcp_send_empty_ack+0xc0>)
 801e51c:	f001 fdf4 	bl	8020108 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e520:	7dfb      	ldrb	r3, [r7, #23]
 801e522:	009b      	lsls	r3, r3, #2
 801e524:	b2db      	uxtb	r3, r3
 801e526:	f003 0304 	and.w	r3, r3, #4
 801e52a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801e52c:	7d7b      	ldrb	r3, [r7, #21]
 801e52e:	b29c      	uxth	r4, r3
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e534:	4618      	mov	r0, r3
 801e536:	f7f5 fc8c 	bl	8013e52 <lwip_htonl>
 801e53a:	4603      	mov	r3, r0
 801e53c:	2200      	movs	r2, #0
 801e53e:	4621      	mov	r1, r4
 801e540:	6878      	ldr	r0, [r7, #4]
 801e542:	f7ff fec1 	bl	801e2c8 <tcp_output_alloc_header>
 801e546:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e548:	693b      	ldr	r3, [r7, #16]
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d109      	bne.n	801e562 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	8b5b      	ldrh	r3, [r3, #26]
 801e552:	f043 0303 	orr.w	r3, r3, #3
 801e556:	b29a      	uxth	r2, r3
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801e55c:	f06f 0301 	mvn.w	r3, #1
 801e560:	e023      	b.n	801e5aa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801e562:	7dbb      	ldrb	r3, [r7, #22]
 801e564:	7dfa      	ldrb	r2, [r7, #23]
 801e566:	6939      	ldr	r1, [r7, #16]
 801e568:	6878      	ldr	r0, [r7, #4]
 801e56a:	f7ff feeb 	bl	801e344 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e56e:	687a      	ldr	r2, [r7, #4]
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	3304      	adds	r3, #4
 801e574:	6939      	ldr	r1, [r7, #16]
 801e576:	6878      	ldr	r0, [r7, #4]
 801e578:	f7ff ff24 	bl	801e3c4 <tcp_output_control_segment>
 801e57c:	4603      	mov	r3, r0
 801e57e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801e580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e584:	2b00      	cmp	r3, #0
 801e586:	d007      	beq.n	801e598 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	8b5b      	ldrh	r3, [r3, #26]
 801e58c:	f043 0303 	orr.w	r3, r3, #3
 801e590:	b29a      	uxth	r2, r3
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	835a      	strh	r2, [r3, #26]
 801e596:	e006      	b.n	801e5a6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	8b5b      	ldrh	r3, [r3, #26]
 801e59c:	f023 0303 	bic.w	r3, r3, #3
 801e5a0:	b29a      	uxth	r2, r3
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801e5a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e5aa:	4618      	mov	r0, r3
 801e5ac:	371c      	adds	r7, #28
 801e5ae:	46bd      	mov	sp, r7
 801e5b0:	bd90      	pop	{r4, r7, pc}
 801e5b2:	bf00      	nop
 801e5b4:	08023c08 	.word	0x08023c08
 801e5b8:	08024408 	.word	0x08024408
 801e5bc:	08023ca0 	.word	0x08023ca0

0801e5c0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801e5c0:	b590      	push	{r4, r7, lr}
 801e5c2:	b087      	sub	sp, #28
 801e5c4:	af00      	add	r7, sp, #0
 801e5c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d106      	bne.n	801e5e0 <tcp_keepalive+0x20>
 801e5d2:	4b18      	ldr	r3, [pc, #96]	; (801e634 <tcp_keepalive+0x74>)
 801e5d4:	f640 0224 	movw	r2, #2084	; 0x824
 801e5d8:	4917      	ldr	r1, [pc, #92]	; (801e638 <tcp_keepalive+0x78>)
 801e5da:	4818      	ldr	r0, [pc, #96]	; (801e63c <tcp_keepalive+0x7c>)
 801e5dc:	f001 fd94 	bl	8020108 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801e5e0:	7dfb      	ldrb	r3, [r7, #23]
 801e5e2:	b29c      	uxth	r4, r3
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e5e8:	3b01      	subs	r3, #1
 801e5ea:	4618      	mov	r0, r3
 801e5ec:	f7f5 fc31 	bl	8013e52 <lwip_htonl>
 801e5f0:	4603      	mov	r3, r0
 801e5f2:	2200      	movs	r2, #0
 801e5f4:	4621      	mov	r1, r4
 801e5f6:	6878      	ldr	r0, [r7, #4]
 801e5f8:	f7ff fe66 	bl	801e2c8 <tcp_output_alloc_header>
 801e5fc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e5fe:	693b      	ldr	r3, [r7, #16]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d102      	bne.n	801e60a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801e604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e608:	e010      	b.n	801e62c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e60a:	7dfb      	ldrb	r3, [r7, #23]
 801e60c:	2200      	movs	r2, #0
 801e60e:	6939      	ldr	r1, [r7, #16]
 801e610:	6878      	ldr	r0, [r7, #4]
 801e612:	f7ff fe97 	bl	801e344 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e616:	687a      	ldr	r2, [r7, #4]
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	3304      	adds	r3, #4
 801e61c:	6939      	ldr	r1, [r7, #16]
 801e61e:	6878      	ldr	r0, [r7, #4]
 801e620:	f7ff fed0 	bl	801e3c4 <tcp_output_control_segment>
 801e624:	4603      	mov	r3, r0
 801e626:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e628:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e62c:	4618      	mov	r0, r3
 801e62e:	371c      	adds	r7, #28
 801e630:	46bd      	mov	sp, r7
 801e632:	bd90      	pop	{r4, r7, pc}
 801e634:	08023c08 	.word	0x08023c08
 801e638:	08024428 	.word	0x08024428
 801e63c:	08023ca0 	.word	0x08023ca0

0801e640 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801e640:	b590      	push	{r4, r7, lr}
 801e642:	b08b      	sub	sp, #44	; 0x2c
 801e644:	af00      	add	r7, sp, #0
 801e646:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e648:	2300      	movs	r3, #0
 801e64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	2b00      	cmp	r3, #0
 801e652:	d106      	bne.n	801e662 <tcp_zero_window_probe+0x22>
 801e654:	4b4c      	ldr	r3, [pc, #304]	; (801e788 <tcp_zero_window_probe+0x148>)
 801e656:	f640 024f 	movw	r2, #2127	; 0x84f
 801e65a:	494c      	ldr	r1, [pc, #304]	; (801e78c <tcp_zero_window_probe+0x14c>)
 801e65c:	484c      	ldr	r0, [pc, #304]	; (801e790 <tcp_zero_window_probe+0x150>)
 801e65e:	f001 fd53 	bl	8020108 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e666:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801e668:	6a3b      	ldr	r3, [r7, #32]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d101      	bne.n	801e672 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801e66e:	2300      	movs	r3, #0
 801e670:	e086      	b.n	801e780 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e678:	2bff      	cmp	r3, #255	; 0xff
 801e67a:	d007      	beq.n	801e68c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e682:	3301      	adds	r3, #1
 801e684:	b2da      	uxtb	r2, r3
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801e68c:	6a3b      	ldr	r3, [r7, #32]
 801e68e:	68db      	ldr	r3, [r3, #12]
 801e690:	899b      	ldrh	r3, [r3, #12]
 801e692:	b29b      	uxth	r3, r3
 801e694:	4618      	mov	r0, r3
 801e696:	f7f5 fbc7 	bl	8013e28 <lwip_htons>
 801e69a:	4603      	mov	r3, r0
 801e69c:	b2db      	uxtb	r3, r3
 801e69e:	f003 0301 	and.w	r3, r3, #1
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d005      	beq.n	801e6b2 <tcp_zero_window_probe+0x72>
 801e6a6:	6a3b      	ldr	r3, [r7, #32]
 801e6a8:	891b      	ldrh	r3, [r3, #8]
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d101      	bne.n	801e6b2 <tcp_zero_window_probe+0x72>
 801e6ae:	2301      	movs	r3, #1
 801e6b0:	e000      	b.n	801e6b4 <tcp_zero_window_probe+0x74>
 801e6b2:	2300      	movs	r3, #0
 801e6b4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801e6b6:	7ffb      	ldrb	r3, [r7, #31]
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	bf0c      	ite	eq
 801e6bc:	2301      	moveq	r3, #1
 801e6be:	2300      	movne	r3, #0
 801e6c0:	b2db      	uxtb	r3, r3
 801e6c2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801e6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e6c8:	b299      	uxth	r1, r3
 801e6ca:	6a3b      	ldr	r3, [r7, #32]
 801e6cc:	68db      	ldr	r3, [r3, #12]
 801e6ce:	685b      	ldr	r3, [r3, #4]
 801e6d0:	8bba      	ldrh	r2, [r7, #28]
 801e6d2:	6878      	ldr	r0, [r7, #4]
 801e6d4:	f7ff fdf8 	bl	801e2c8 <tcp_output_alloc_header>
 801e6d8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801e6da:	69bb      	ldr	r3, [r7, #24]
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d102      	bne.n	801e6e6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801e6e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e6e4:	e04c      	b.n	801e780 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801e6e6:	69bb      	ldr	r3, [r7, #24]
 801e6e8:	685b      	ldr	r3, [r3, #4]
 801e6ea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801e6ec:	7ffb      	ldrb	r3, [r7, #31]
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	d011      	beq.n	801e716 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801e6f2:	697b      	ldr	r3, [r7, #20]
 801e6f4:	899b      	ldrh	r3, [r3, #12]
 801e6f6:	b29b      	uxth	r3, r3
 801e6f8:	b21b      	sxth	r3, r3
 801e6fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e6fe:	b21c      	sxth	r4, r3
 801e700:	2011      	movs	r0, #17
 801e702:	f7f5 fb91 	bl	8013e28 <lwip_htons>
 801e706:	4603      	mov	r3, r0
 801e708:	b21b      	sxth	r3, r3
 801e70a:	4323      	orrs	r3, r4
 801e70c:	b21b      	sxth	r3, r3
 801e70e:	b29a      	uxth	r2, r3
 801e710:	697b      	ldr	r3, [r7, #20]
 801e712:	819a      	strh	r2, [r3, #12]
 801e714:	e010      	b.n	801e738 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801e716:	69bb      	ldr	r3, [r7, #24]
 801e718:	685b      	ldr	r3, [r3, #4]
 801e71a:	3314      	adds	r3, #20
 801e71c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801e71e:	6a3b      	ldr	r3, [r7, #32]
 801e720:	6858      	ldr	r0, [r3, #4]
 801e722:	6a3b      	ldr	r3, [r7, #32]
 801e724:	685b      	ldr	r3, [r3, #4]
 801e726:	891a      	ldrh	r2, [r3, #8]
 801e728:	6a3b      	ldr	r3, [r7, #32]
 801e72a:	891b      	ldrh	r3, [r3, #8]
 801e72c:	1ad3      	subs	r3, r2, r3
 801e72e:	b29b      	uxth	r3, r3
 801e730:	2201      	movs	r2, #1
 801e732:	6939      	ldr	r1, [r7, #16]
 801e734:	f7f9 fd42 	bl	80181bc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e738:	6a3b      	ldr	r3, [r7, #32]
 801e73a:	68db      	ldr	r3, [r3, #12]
 801e73c:	685b      	ldr	r3, [r3, #4]
 801e73e:	4618      	mov	r0, r3
 801e740:	f7f5 fb87 	bl	8013e52 <lwip_htonl>
 801e744:	4603      	mov	r3, r0
 801e746:	3301      	adds	r3, #1
 801e748:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e74e:	68fb      	ldr	r3, [r7, #12]
 801e750:	1ad3      	subs	r3, r2, r3
 801e752:	2b00      	cmp	r3, #0
 801e754:	da02      	bge.n	801e75c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	68fa      	ldr	r2, [r7, #12]
 801e75a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e760:	2200      	movs	r2, #0
 801e762:	69b9      	ldr	r1, [r7, #24]
 801e764:	6878      	ldr	r0, [r7, #4]
 801e766:	f7ff fded 	bl	801e344 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e76a:	687a      	ldr	r2, [r7, #4]
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	3304      	adds	r3, #4
 801e770:	69b9      	ldr	r1, [r7, #24]
 801e772:	6878      	ldr	r0, [r7, #4]
 801e774:	f7ff fe26 	bl	801e3c4 <tcp_output_control_segment>
 801e778:	4603      	mov	r3, r0
 801e77a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e77c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801e780:	4618      	mov	r0, r3
 801e782:	372c      	adds	r7, #44	; 0x2c
 801e784:	46bd      	mov	sp, r7
 801e786:	bd90      	pop	{r4, r7, pc}
 801e788:	08023c08 	.word	0x08023c08
 801e78c:	08024444 	.word	0x08024444
 801e790:	08023ca0 	.word	0x08023ca0

0801e794 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801e794:	b580      	push	{r7, lr}
 801e796:	b084      	sub	sp, #16
 801e798:	af00      	add	r7, sp, #0
 801e79a:	6078      	str	r0, [r7, #4]
 801e79c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801e79e:	f000 fb17 	bl	801edd0 <sys_timeouts_sleeptime>
 801e7a2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801e7a4:	68fb      	ldr	r3, [r7, #12]
 801e7a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e7aa:	d10b      	bne.n	801e7c4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801e7ac:	4813      	ldr	r0, [pc, #76]	; (801e7fc <tcpip_timeouts_mbox_fetch+0x68>)
 801e7ae:	f7f9 ff3a 	bl	8018626 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801e7b2:	2200      	movs	r2, #0
 801e7b4:	6839      	ldr	r1, [r7, #0]
 801e7b6:	6878      	ldr	r0, [r7, #4]
 801e7b8:	f7f9 fdf2 	bl	80183a0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801e7bc:	480f      	ldr	r0, [pc, #60]	; (801e7fc <tcpip_timeouts_mbox_fetch+0x68>)
 801e7be:	f7f9 ff23 	bl	8018608 <sys_mutex_lock>
    return;
 801e7c2:	e018      	b.n	801e7f6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801e7c4:	68fb      	ldr	r3, [r7, #12]
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d102      	bne.n	801e7d0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801e7ca:	f000 fac7 	bl	801ed5c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801e7ce:	e7e6      	b.n	801e79e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801e7d0:	480a      	ldr	r0, [pc, #40]	; (801e7fc <tcpip_timeouts_mbox_fetch+0x68>)
 801e7d2:	f7f9 ff28 	bl	8018626 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801e7d6:	68fa      	ldr	r2, [r7, #12]
 801e7d8:	6839      	ldr	r1, [r7, #0]
 801e7da:	6878      	ldr	r0, [r7, #4]
 801e7dc:	f7f9 fde0 	bl	80183a0 <sys_arch_mbox_fetch>
 801e7e0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801e7e2:	4806      	ldr	r0, [pc, #24]	; (801e7fc <tcpip_timeouts_mbox_fetch+0x68>)
 801e7e4:	f7f9 ff10 	bl	8018608 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801e7e8:	68bb      	ldr	r3, [r7, #8]
 801e7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e7ee:	d102      	bne.n	801e7f6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801e7f0:	f000 fab4 	bl	801ed5c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801e7f4:	e7d3      	b.n	801e79e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801e7f6:	3710      	adds	r7, #16
 801e7f8:	46bd      	mov	sp, r7
 801e7fa:	bd80      	pop	{r7, pc}
 801e7fc:	24010074 	.word	0x24010074

0801e800 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801e800:	b580      	push	{r7, lr}
 801e802:	b084      	sub	sp, #16
 801e804:	af00      	add	r7, sp, #0
 801e806:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801e808:	4810      	ldr	r0, [pc, #64]	; (801e84c <tcpip_thread+0x4c>)
 801e80a:	f7f9 fefd 	bl	8018608 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801e80e:	4b10      	ldr	r3, [pc, #64]	; (801e850 <tcpip_thread+0x50>)
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	2b00      	cmp	r3, #0
 801e814:	d005      	beq.n	801e822 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801e816:	4b0e      	ldr	r3, [pc, #56]	; (801e850 <tcpip_thread+0x50>)
 801e818:	681b      	ldr	r3, [r3, #0]
 801e81a:	4a0e      	ldr	r2, [pc, #56]	; (801e854 <tcpip_thread+0x54>)
 801e81c:	6812      	ldr	r2, [r2, #0]
 801e81e:	4610      	mov	r0, r2
 801e820:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801e822:	f107 030c 	add.w	r3, r7, #12
 801e826:	4619      	mov	r1, r3
 801e828:	480b      	ldr	r0, [pc, #44]	; (801e858 <tcpip_thread+0x58>)
 801e82a:	f7ff ffb3 	bl	801e794 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801e82e:	68fb      	ldr	r3, [r7, #12]
 801e830:	2b00      	cmp	r3, #0
 801e832:	d106      	bne.n	801e842 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801e834:	4b09      	ldr	r3, [pc, #36]	; (801e85c <tcpip_thread+0x5c>)
 801e836:	2291      	movs	r2, #145	; 0x91
 801e838:	4909      	ldr	r1, [pc, #36]	; (801e860 <tcpip_thread+0x60>)
 801e83a:	480a      	ldr	r0, [pc, #40]	; (801e864 <tcpip_thread+0x64>)
 801e83c:	f001 fc64 	bl	8020108 <iprintf>
      continue;
 801e840:	e003      	b.n	801e84a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801e842:	68fb      	ldr	r3, [r7, #12]
 801e844:	4618      	mov	r0, r3
 801e846:	f000 f80f 	bl	801e868 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801e84a:	e7ea      	b.n	801e822 <tcpip_thread+0x22>
 801e84c:	24010074 	.word	0x24010074
 801e850:	24010068 	.word	0x24010068
 801e854:	2401006c 	.word	0x2401006c
 801e858:	24010070 	.word	0x24010070
 801e85c:	08024468 	.word	0x08024468
 801e860:	080244dc 	.word	0x080244dc
 801e864:	080244fc 	.word	0x080244fc

0801e868 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801e868:	b580      	push	{r7, lr}
 801e86a:	b082      	sub	sp, #8
 801e86c:	af00      	add	r7, sp, #0
 801e86e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801e870:	687b      	ldr	r3, [r7, #4]
 801e872:	781b      	ldrb	r3, [r3, #0]
 801e874:	2b02      	cmp	r3, #2
 801e876:	d026      	beq.n	801e8c6 <tcpip_thread_handle_msg+0x5e>
 801e878:	2b02      	cmp	r3, #2
 801e87a:	dc2b      	bgt.n	801e8d4 <tcpip_thread_handle_msg+0x6c>
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d002      	beq.n	801e886 <tcpip_thread_handle_msg+0x1e>
 801e880:	2b01      	cmp	r3, #1
 801e882:	d015      	beq.n	801e8b0 <tcpip_thread_handle_msg+0x48>
 801e884:	e026      	b.n	801e8d4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	68db      	ldr	r3, [r3, #12]
 801e88a:	687a      	ldr	r2, [r7, #4]
 801e88c:	6850      	ldr	r0, [r2, #4]
 801e88e:	687a      	ldr	r2, [r7, #4]
 801e890:	6892      	ldr	r2, [r2, #8]
 801e892:	4611      	mov	r1, r2
 801e894:	4798      	blx	r3
 801e896:	4603      	mov	r3, r0
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d004      	beq.n	801e8a6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	685b      	ldr	r3, [r3, #4]
 801e8a0:	4618      	mov	r0, r3
 801e8a2:	f7f9 fa95 	bl	8017dd0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801e8a6:	6879      	ldr	r1, [r7, #4]
 801e8a8:	2009      	movs	r0, #9
 801e8aa:	f7f8 fb9d 	bl	8016fe8 <memp_free>
      break;
 801e8ae:	e018      	b.n	801e8e2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	685b      	ldr	r3, [r3, #4]
 801e8b4:	687a      	ldr	r2, [r7, #4]
 801e8b6:	6892      	ldr	r2, [r2, #8]
 801e8b8:	4610      	mov	r0, r2
 801e8ba:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801e8bc:	6879      	ldr	r1, [r7, #4]
 801e8be:	2008      	movs	r0, #8
 801e8c0:	f7f8 fb92 	bl	8016fe8 <memp_free>
      break;
 801e8c4:	e00d      	b.n	801e8e2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801e8c6:	687b      	ldr	r3, [r7, #4]
 801e8c8:	685b      	ldr	r3, [r3, #4]
 801e8ca:	687a      	ldr	r2, [r7, #4]
 801e8cc:	6892      	ldr	r2, [r2, #8]
 801e8ce:	4610      	mov	r0, r2
 801e8d0:	4798      	blx	r3
      break;
 801e8d2:	e006      	b.n	801e8e2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801e8d4:	4b05      	ldr	r3, [pc, #20]	; (801e8ec <tcpip_thread_handle_msg+0x84>)
 801e8d6:	22cf      	movs	r2, #207	; 0xcf
 801e8d8:	4905      	ldr	r1, [pc, #20]	; (801e8f0 <tcpip_thread_handle_msg+0x88>)
 801e8da:	4806      	ldr	r0, [pc, #24]	; (801e8f4 <tcpip_thread_handle_msg+0x8c>)
 801e8dc:	f001 fc14 	bl	8020108 <iprintf>
      break;
 801e8e0:	bf00      	nop
  }
}
 801e8e2:	bf00      	nop
 801e8e4:	3708      	adds	r7, #8
 801e8e6:	46bd      	mov	sp, r7
 801e8e8:	bd80      	pop	{r7, pc}
 801e8ea:	bf00      	nop
 801e8ec:	08024468 	.word	0x08024468
 801e8f0:	080244dc 	.word	0x080244dc
 801e8f4:	080244fc 	.word	0x080244fc

0801e8f8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801e8f8:	b580      	push	{r7, lr}
 801e8fa:	b086      	sub	sp, #24
 801e8fc:	af00      	add	r7, sp, #0
 801e8fe:	60f8      	str	r0, [r7, #12]
 801e900:	60b9      	str	r1, [r7, #8]
 801e902:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801e904:	481a      	ldr	r0, [pc, #104]	; (801e970 <tcpip_inpkt+0x78>)
 801e906:	f7f9 fda6 	bl	8018456 <sys_mbox_valid>
 801e90a:	4603      	mov	r3, r0
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d105      	bne.n	801e91c <tcpip_inpkt+0x24>
 801e910:	4b18      	ldr	r3, [pc, #96]	; (801e974 <tcpip_inpkt+0x7c>)
 801e912:	22fc      	movs	r2, #252	; 0xfc
 801e914:	4918      	ldr	r1, [pc, #96]	; (801e978 <tcpip_inpkt+0x80>)
 801e916:	4819      	ldr	r0, [pc, #100]	; (801e97c <tcpip_inpkt+0x84>)
 801e918:	f001 fbf6 	bl	8020108 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801e91c:	2009      	movs	r0, #9
 801e91e:	f7f8 faed 	bl	8016efc <memp_malloc>
 801e922:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801e924:	697b      	ldr	r3, [r7, #20]
 801e926:	2b00      	cmp	r3, #0
 801e928:	d102      	bne.n	801e930 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801e92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e92e:	e01a      	b.n	801e966 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801e930:	697b      	ldr	r3, [r7, #20]
 801e932:	2200      	movs	r2, #0
 801e934:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801e936:	697b      	ldr	r3, [r7, #20]
 801e938:	68fa      	ldr	r2, [r7, #12]
 801e93a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801e93c:	697b      	ldr	r3, [r7, #20]
 801e93e:	68ba      	ldr	r2, [r7, #8]
 801e940:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801e942:	697b      	ldr	r3, [r7, #20]
 801e944:	687a      	ldr	r2, [r7, #4]
 801e946:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801e948:	6979      	ldr	r1, [r7, #20]
 801e94a:	4809      	ldr	r0, [pc, #36]	; (801e970 <tcpip_inpkt+0x78>)
 801e94c:	f7f9 fd0e 	bl	801836c <sys_mbox_trypost>
 801e950:	4603      	mov	r3, r0
 801e952:	2b00      	cmp	r3, #0
 801e954:	d006      	beq.n	801e964 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801e956:	6979      	ldr	r1, [r7, #20]
 801e958:	2009      	movs	r0, #9
 801e95a:	f7f8 fb45 	bl	8016fe8 <memp_free>
    return ERR_MEM;
 801e95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e962:	e000      	b.n	801e966 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801e964:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801e966:	4618      	mov	r0, r3
 801e968:	3718      	adds	r7, #24
 801e96a:	46bd      	mov	sp, r7
 801e96c:	bd80      	pop	{r7, pc}
 801e96e:	bf00      	nop
 801e970:	24010070 	.word	0x24010070
 801e974:	08024468 	.word	0x08024468
 801e978:	08024524 	.word	0x08024524
 801e97c:	080244fc 	.word	0x080244fc

0801e980 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b082      	sub	sp, #8
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
 801e988:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801e98a:	683b      	ldr	r3, [r7, #0]
 801e98c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e990:	f003 0318 	and.w	r3, r3, #24
 801e994:	2b00      	cmp	r3, #0
 801e996:	d006      	beq.n	801e9a6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801e998:	4a08      	ldr	r2, [pc, #32]	; (801e9bc <tcpip_input+0x3c>)
 801e99a:	6839      	ldr	r1, [r7, #0]
 801e99c:	6878      	ldr	r0, [r7, #4]
 801e99e:	f7ff ffab 	bl	801e8f8 <tcpip_inpkt>
 801e9a2:	4603      	mov	r3, r0
 801e9a4:	e005      	b.n	801e9b2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801e9a6:	4a06      	ldr	r2, [pc, #24]	; (801e9c0 <tcpip_input+0x40>)
 801e9a8:	6839      	ldr	r1, [r7, #0]
 801e9aa:	6878      	ldr	r0, [r7, #4]
 801e9ac:	f7ff ffa4 	bl	801e8f8 <tcpip_inpkt>
 801e9b0:	4603      	mov	r3, r0
}
 801e9b2:	4618      	mov	r0, r3
 801e9b4:	3708      	adds	r7, #8
 801e9b6:	46bd      	mov	sp, r7
 801e9b8:	bd80      	pop	{r7, pc}
 801e9ba:	bf00      	nop
 801e9bc:	08014d1d 	.word	0x08014d1d
 801e9c0:	0801550d 	.word	0x0801550d

0801e9c4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801e9c4:	b580      	push	{r7, lr}
 801e9c6:	b084      	sub	sp, #16
 801e9c8:	af00      	add	r7, sp, #0
 801e9ca:	6078      	str	r0, [r7, #4]
 801e9cc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801e9ce:	4819      	ldr	r0, [pc, #100]	; (801ea34 <tcpip_try_callback+0x70>)
 801e9d0:	f7f9 fd41 	bl	8018456 <sys_mbox_valid>
 801e9d4:	4603      	mov	r3, r0
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d106      	bne.n	801e9e8 <tcpip_try_callback+0x24>
 801e9da:	4b17      	ldr	r3, [pc, #92]	; (801ea38 <tcpip_try_callback+0x74>)
 801e9dc:	f240 125d 	movw	r2, #349	; 0x15d
 801e9e0:	4916      	ldr	r1, [pc, #88]	; (801ea3c <tcpip_try_callback+0x78>)
 801e9e2:	4817      	ldr	r0, [pc, #92]	; (801ea40 <tcpip_try_callback+0x7c>)
 801e9e4:	f001 fb90 	bl	8020108 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801e9e8:	2008      	movs	r0, #8
 801e9ea:	f7f8 fa87 	bl	8016efc <memp_malloc>
 801e9ee:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801e9f0:	68fb      	ldr	r3, [r7, #12]
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d102      	bne.n	801e9fc <tcpip_try_callback+0x38>
    return ERR_MEM;
 801e9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e9fa:	e017      	b.n	801ea2c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801e9fc:	68fb      	ldr	r3, [r7, #12]
 801e9fe:	2201      	movs	r2, #1
 801ea00:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801ea02:	68fb      	ldr	r3, [r7, #12]
 801ea04:	687a      	ldr	r2, [r7, #4]
 801ea06:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801ea08:	68fb      	ldr	r3, [r7, #12]
 801ea0a:	683a      	ldr	r2, [r7, #0]
 801ea0c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801ea0e:	68f9      	ldr	r1, [r7, #12]
 801ea10:	4808      	ldr	r0, [pc, #32]	; (801ea34 <tcpip_try_callback+0x70>)
 801ea12:	f7f9 fcab 	bl	801836c <sys_mbox_trypost>
 801ea16:	4603      	mov	r3, r0
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	d006      	beq.n	801ea2a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801ea1c:	68f9      	ldr	r1, [r7, #12]
 801ea1e:	2008      	movs	r0, #8
 801ea20:	f7f8 fae2 	bl	8016fe8 <memp_free>
    return ERR_MEM;
 801ea24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ea28:	e000      	b.n	801ea2c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801ea2a:	2300      	movs	r3, #0
}
 801ea2c:	4618      	mov	r0, r3
 801ea2e:	3710      	adds	r7, #16
 801ea30:	46bd      	mov	sp, r7
 801ea32:	bd80      	pop	{r7, pc}
 801ea34:	24010070 	.word	0x24010070
 801ea38:	08024468 	.word	0x08024468
 801ea3c:	08024524 	.word	0x08024524
 801ea40:	080244fc 	.word	0x080244fc

0801ea44 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801ea44:	b580      	push	{r7, lr}
 801ea46:	b084      	sub	sp, #16
 801ea48:	af00      	add	r7, sp, #0
 801ea4a:	60f8      	str	r0, [r7, #12]
 801ea4c:	60b9      	str	r1, [r7, #8]
 801ea4e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801ea50:	4806      	ldr	r0, [pc, #24]	; (801ea6c <tcpip_send_msg_wait_sem+0x28>)
 801ea52:	f7f9 fdd9 	bl	8018608 <sys_mutex_lock>
  fn(apimsg);
 801ea56:	68fb      	ldr	r3, [r7, #12]
 801ea58:	68b8      	ldr	r0, [r7, #8]
 801ea5a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801ea5c:	4803      	ldr	r0, [pc, #12]	; (801ea6c <tcpip_send_msg_wait_sem+0x28>)
 801ea5e:	f7f9 fde2 	bl	8018626 <sys_mutex_unlock>
  return ERR_OK;
 801ea62:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801ea64:	4618      	mov	r0, r3
 801ea66:	3710      	adds	r7, #16
 801ea68:	46bd      	mov	sp, r7
 801ea6a:	bd80      	pop	{r7, pc}
 801ea6c:	24010074 	.word	0x24010074

0801ea70 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801ea70:	b580      	push	{r7, lr}
 801ea72:	b084      	sub	sp, #16
 801ea74:	af02      	add	r7, sp, #8
 801ea76:	6078      	str	r0, [r7, #4]
 801ea78:	6039      	str	r1, [r7, #0]
  lwip_init();
 801ea7a:	f7f6 fc95 	bl	80153a8 <lwip_init>

  tcpip_init_done = initfunc;
 801ea7e:	4a17      	ldr	r2, [pc, #92]	; (801eadc <tcpip_init+0x6c>)
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801ea84:	4a16      	ldr	r2, [pc, #88]	; (801eae0 <tcpip_init+0x70>)
 801ea86:	683b      	ldr	r3, [r7, #0]
 801ea88:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801ea8a:	2106      	movs	r1, #6
 801ea8c:	4815      	ldr	r0, [pc, #84]	; (801eae4 <tcpip_init+0x74>)
 801ea8e:	f7f9 fc39 	bl	8018304 <sys_mbox_new>
 801ea92:	4603      	mov	r3, r0
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	d006      	beq.n	801eaa6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801ea98:	4b13      	ldr	r3, [pc, #76]	; (801eae8 <tcpip_init+0x78>)
 801ea9a:	f240 2261 	movw	r2, #609	; 0x261
 801ea9e:	4913      	ldr	r1, [pc, #76]	; (801eaec <tcpip_init+0x7c>)
 801eaa0:	4813      	ldr	r0, [pc, #76]	; (801eaf0 <tcpip_init+0x80>)
 801eaa2:	f001 fb31 	bl	8020108 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801eaa6:	4813      	ldr	r0, [pc, #76]	; (801eaf4 <tcpip_init+0x84>)
 801eaa8:	f7f9 fd92 	bl	80185d0 <sys_mutex_new>
 801eaac:	4603      	mov	r3, r0
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d006      	beq.n	801eac0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801eab2:	4b0d      	ldr	r3, [pc, #52]	; (801eae8 <tcpip_init+0x78>)
 801eab4:	f240 2265 	movw	r2, #613	; 0x265
 801eab8:	490f      	ldr	r1, [pc, #60]	; (801eaf8 <tcpip_init+0x88>)
 801eaba:	480d      	ldr	r0, [pc, #52]	; (801eaf0 <tcpip_init+0x80>)
 801eabc:	f001 fb24 	bl	8020108 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801eac0:	2300      	movs	r3, #0
 801eac2:	9300      	str	r3, [sp, #0]
 801eac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eac8:	2200      	movs	r2, #0
 801eaca:	490c      	ldr	r1, [pc, #48]	; (801eafc <tcpip_init+0x8c>)
 801eacc:	480c      	ldr	r0, [pc, #48]	; (801eb00 <tcpip_init+0x90>)
 801eace:	f7f9 fdb7 	bl	8018640 <sys_thread_new>
}
 801ead2:	bf00      	nop
 801ead4:	3708      	adds	r7, #8
 801ead6:	46bd      	mov	sp, r7
 801ead8:	bd80      	pop	{r7, pc}
 801eada:	bf00      	nop
 801eadc:	24010068 	.word	0x24010068
 801eae0:	2401006c 	.word	0x2401006c
 801eae4:	24010070 	.word	0x24010070
 801eae8:	08024468 	.word	0x08024468
 801eaec:	08024534 	.word	0x08024534
 801eaf0:	080244fc 	.word	0x080244fc
 801eaf4:	24010074 	.word	0x24010074
 801eaf8:	08024558 	.word	0x08024558
 801eafc:	0801e801 	.word	0x0801e801
 801eb00:	0802457c 	.word	0x0802457c

0801eb04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801eb04:	b580      	push	{r7, lr}
 801eb06:	b082      	sub	sp, #8
 801eb08:	af00      	add	r7, sp, #0
 801eb0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801eb0c:	f7f9 fe26 	bl	801875c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801eb10:	4b0a      	ldr	r3, [pc, #40]	; (801eb3c <tcpip_tcp_timer+0x38>)
 801eb12:	681b      	ldr	r3, [r3, #0]
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	d103      	bne.n	801eb20 <tcpip_tcp_timer+0x1c>
 801eb18:	4b09      	ldr	r3, [pc, #36]	; (801eb40 <tcpip_tcp_timer+0x3c>)
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	d005      	beq.n	801eb2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801eb20:	2200      	movs	r2, #0
 801eb22:	4908      	ldr	r1, [pc, #32]	; (801eb44 <tcpip_tcp_timer+0x40>)
 801eb24:	20fa      	movs	r0, #250	; 0xfa
 801eb26:	f000 f8f3 	bl	801ed10 <sys_timeout>
 801eb2a:	e003      	b.n	801eb34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801eb2c:	4b06      	ldr	r3, [pc, #24]	; (801eb48 <tcpip_tcp_timer+0x44>)
 801eb2e:	2200      	movs	r2, #0
 801eb30:	601a      	str	r2, [r3, #0]
  }
}
 801eb32:	bf00      	nop
 801eb34:	bf00      	nop
 801eb36:	3708      	adds	r7, #8
 801eb38:	46bd      	mov	sp, r7
 801eb3a:	bd80      	pop	{r7, pc}
 801eb3c:	24010024 	.word	0x24010024
 801eb40:	24010028 	.word	0x24010028
 801eb44:	0801eb05 	.word	0x0801eb05
 801eb48:	24010080 	.word	0x24010080

0801eb4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801eb4c:	b580      	push	{r7, lr}
 801eb4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801eb50:	4b0a      	ldr	r3, [pc, #40]	; (801eb7c <tcp_timer_needed+0x30>)
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d10f      	bne.n	801eb78 <tcp_timer_needed+0x2c>
 801eb58:	4b09      	ldr	r3, [pc, #36]	; (801eb80 <tcp_timer_needed+0x34>)
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d103      	bne.n	801eb68 <tcp_timer_needed+0x1c>
 801eb60:	4b08      	ldr	r3, [pc, #32]	; (801eb84 <tcp_timer_needed+0x38>)
 801eb62:	681b      	ldr	r3, [r3, #0]
 801eb64:	2b00      	cmp	r3, #0
 801eb66:	d007      	beq.n	801eb78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801eb68:	4b04      	ldr	r3, [pc, #16]	; (801eb7c <tcp_timer_needed+0x30>)
 801eb6a:	2201      	movs	r2, #1
 801eb6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801eb6e:	2200      	movs	r2, #0
 801eb70:	4905      	ldr	r1, [pc, #20]	; (801eb88 <tcp_timer_needed+0x3c>)
 801eb72:	20fa      	movs	r0, #250	; 0xfa
 801eb74:	f000 f8cc 	bl	801ed10 <sys_timeout>
  }
}
 801eb78:	bf00      	nop
 801eb7a:	bd80      	pop	{r7, pc}
 801eb7c:	24010080 	.word	0x24010080
 801eb80:	24010024 	.word	0x24010024
 801eb84:	24010028 	.word	0x24010028
 801eb88:	0801eb05 	.word	0x0801eb05

0801eb8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	b086      	sub	sp, #24
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	60f8      	str	r0, [r7, #12]
 801eb94:	60b9      	str	r1, [r7, #8]
 801eb96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801eb98:	200a      	movs	r0, #10
 801eb9a:	f7f8 f9af 	bl	8016efc <memp_malloc>
 801eb9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801eba0:	693b      	ldr	r3, [r7, #16]
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d109      	bne.n	801ebba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801eba6:	693b      	ldr	r3, [r7, #16]
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d151      	bne.n	801ec50 <sys_timeout_abs+0xc4>
 801ebac:	4b2a      	ldr	r3, [pc, #168]	; (801ec58 <sys_timeout_abs+0xcc>)
 801ebae:	22be      	movs	r2, #190	; 0xbe
 801ebb0:	492a      	ldr	r1, [pc, #168]	; (801ec5c <sys_timeout_abs+0xd0>)
 801ebb2:	482b      	ldr	r0, [pc, #172]	; (801ec60 <sys_timeout_abs+0xd4>)
 801ebb4:	f001 faa8 	bl	8020108 <iprintf>
    return;
 801ebb8:	e04a      	b.n	801ec50 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ebba:	693b      	ldr	r3, [r7, #16]
 801ebbc:	2200      	movs	r2, #0
 801ebbe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ebc0:	693b      	ldr	r3, [r7, #16]
 801ebc2:	68ba      	ldr	r2, [r7, #8]
 801ebc4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ebc6:	693b      	ldr	r3, [r7, #16]
 801ebc8:	687a      	ldr	r2, [r7, #4]
 801ebca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ebcc:	693b      	ldr	r3, [r7, #16]
 801ebce:	68fa      	ldr	r2, [r7, #12]
 801ebd0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ebd2:	4b24      	ldr	r3, [pc, #144]	; (801ec64 <sys_timeout_abs+0xd8>)
 801ebd4:	681b      	ldr	r3, [r3, #0]
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d103      	bne.n	801ebe2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ebda:	4a22      	ldr	r2, [pc, #136]	; (801ec64 <sys_timeout_abs+0xd8>)
 801ebdc:	693b      	ldr	r3, [r7, #16]
 801ebde:	6013      	str	r3, [r2, #0]
    return;
 801ebe0:	e037      	b.n	801ec52 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ebe2:	693b      	ldr	r3, [r7, #16]
 801ebe4:	685a      	ldr	r2, [r3, #4]
 801ebe6:	4b1f      	ldr	r3, [pc, #124]	; (801ec64 <sys_timeout_abs+0xd8>)
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	685b      	ldr	r3, [r3, #4]
 801ebec:	1ad3      	subs	r3, r2, r3
 801ebee:	0fdb      	lsrs	r3, r3, #31
 801ebf0:	f003 0301 	and.w	r3, r3, #1
 801ebf4:	b2db      	uxtb	r3, r3
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	d007      	beq.n	801ec0a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801ebfa:	4b1a      	ldr	r3, [pc, #104]	; (801ec64 <sys_timeout_abs+0xd8>)
 801ebfc:	681a      	ldr	r2, [r3, #0]
 801ebfe:	693b      	ldr	r3, [r7, #16]
 801ec00:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801ec02:	4a18      	ldr	r2, [pc, #96]	; (801ec64 <sys_timeout_abs+0xd8>)
 801ec04:	693b      	ldr	r3, [r7, #16]
 801ec06:	6013      	str	r3, [r2, #0]
 801ec08:	e023      	b.n	801ec52 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ec0a:	4b16      	ldr	r3, [pc, #88]	; (801ec64 <sys_timeout_abs+0xd8>)
 801ec0c:	681b      	ldr	r3, [r3, #0]
 801ec0e:	617b      	str	r3, [r7, #20]
 801ec10:	e01a      	b.n	801ec48 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ec12:	697b      	ldr	r3, [r7, #20]
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d00b      	beq.n	801ec32 <sys_timeout_abs+0xa6>
 801ec1a:	693b      	ldr	r3, [r7, #16]
 801ec1c:	685a      	ldr	r2, [r3, #4]
 801ec1e:	697b      	ldr	r3, [r7, #20]
 801ec20:	681b      	ldr	r3, [r3, #0]
 801ec22:	685b      	ldr	r3, [r3, #4]
 801ec24:	1ad3      	subs	r3, r2, r3
 801ec26:	0fdb      	lsrs	r3, r3, #31
 801ec28:	f003 0301 	and.w	r3, r3, #1
 801ec2c:	b2db      	uxtb	r3, r3
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	d007      	beq.n	801ec42 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ec32:	697b      	ldr	r3, [r7, #20]
 801ec34:	681a      	ldr	r2, [r3, #0]
 801ec36:	693b      	ldr	r3, [r7, #16]
 801ec38:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ec3a:	697b      	ldr	r3, [r7, #20]
 801ec3c:	693a      	ldr	r2, [r7, #16]
 801ec3e:	601a      	str	r2, [r3, #0]
        break;
 801ec40:	e007      	b.n	801ec52 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ec42:	697b      	ldr	r3, [r7, #20]
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	617b      	str	r3, [r7, #20]
 801ec48:	697b      	ldr	r3, [r7, #20]
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d1e1      	bne.n	801ec12 <sys_timeout_abs+0x86>
 801ec4e:	e000      	b.n	801ec52 <sys_timeout_abs+0xc6>
    return;
 801ec50:	bf00      	nop
      }
    }
  }
}
 801ec52:	3718      	adds	r7, #24
 801ec54:	46bd      	mov	sp, r7
 801ec56:	bd80      	pop	{r7, pc}
 801ec58:	0802458c 	.word	0x0802458c
 801ec5c:	08024604 	.word	0x08024604
 801ec60:	08024644 	.word	0x08024644
 801ec64:	24010078 	.word	0x24010078

0801ec68 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ec68:	b580      	push	{r7, lr}
 801ec6a:	b086      	sub	sp, #24
 801ec6c:	af00      	add	r7, sp, #0
 801ec6e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ec74:	697b      	ldr	r3, [r7, #20]
 801ec76:	685b      	ldr	r3, [r3, #4]
 801ec78:	4798      	blx	r3

  now = sys_now();
 801ec7a:	f7ec fe39 	bl	800b8f0 <sys_now>
 801ec7e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ec80:	697b      	ldr	r3, [r7, #20]
 801ec82:	681a      	ldr	r2, [r3, #0]
 801ec84:	4b0f      	ldr	r3, [pc, #60]	; (801ecc4 <lwip_cyclic_timer+0x5c>)
 801ec86:	681b      	ldr	r3, [r3, #0]
 801ec88:	4413      	add	r3, r2
 801ec8a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ec8c:	68fa      	ldr	r2, [r7, #12]
 801ec8e:	693b      	ldr	r3, [r7, #16]
 801ec90:	1ad3      	subs	r3, r2, r3
 801ec92:	0fdb      	lsrs	r3, r3, #31
 801ec94:	f003 0301 	and.w	r3, r3, #1
 801ec98:	b2db      	uxtb	r3, r3
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d009      	beq.n	801ecb2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ec9e:	697b      	ldr	r3, [r7, #20]
 801eca0:	681a      	ldr	r2, [r3, #0]
 801eca2:	693b      	ldr	r3, [r7, #16]
 801eca4:	4413      	add	r3, r2
 801eca6:	687a      	ldr	r2, [r7, #4]
 801eca8:	4907      	ldr	r1, [pc, #28]	; (801ecc8 <lwip_cyclic_timer+0x60>)
 801ecaa:	4618      	mov	r0, r3
 801ecac:	f7ff ff6e 	bl	801eb8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ecb0:	e004      	b.n	801ecbc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ecb2:	687a      	ldr	r2, [r7, #4]
 801ecb4:	4904      	ldr	r1, [pc, #16]	; (801ecc8 <lwip_cyclic_timer+0x60>)
 801ecb6:	68f8      	ldr	r0, [r7, #12]
 801ecb8:	f7ff ff68 	bl	801eb8c <sys_timeout_abs>
}
 801ecbc:	bf00      	nop
 801ecbe:	3718      	adds	r7, #24
 801ecc0:	46bd      	mov	sp, r7
 801ecc2:	bd80      	pop	{r7, pc}
 801ecc4:	2401007c 	.word	0x2401007c
 801ecc8:	0801ec69 	.word	0x0801ec69

0801eccc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b082      	sub	sp, #8
 801ecd0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ecd2:	2301      	movs	r3, #1
 801ecd4:	607b      	str	r3, [r7, #4]
 801ecd6:	e00e      	b.n	801ecf6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ecd8:	4a0b      	ldr	r2, [pc, #44]	; (801ed08 <sys_timeouts_init+0x3c>)
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	00db      	lsls	r3, r3, #3
 801ece4:	4a08      	ldr	r2, [pc, #32]	; (801ed08 <sys_timeouts_init+0x3c>)
 801ece6:	4413      	add	r3, r2
 801ece8:	461a      	mov	r2, r3
 801ecea:	4908      	ldr	r1, [pc, #32]	; (801ed0c <sys_timeouts_init+0x40>)
 801ecec:	f000 f810 	bl	801ed10 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	3301      	adds	r3, #1
 801ecf4:	607b      	str	r3, [r7, #4]
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	2b02      	cmp	r3, #2
 801ecfa:	d9ed      	bls.n	801ecd8 <sys_timeouts_init+0xc>
  }
}
 801ecfc:	bf00      	nop
 801ecfe:	bf00      	nop
 801ed00:	3708      	adds	r7, #8
 801ed02:	46bd      	mov	sp, r7
 801ed04:	bd80      	pop	{r7, pc}
 801ed06:	bf00      	nop
 801ed08:	08024bd8 	.word	0x08024bd8
 801ed0c:	0801ec69 	.word	0x0801ec69

0801ed10 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ed10:	b580      	push	{r7, lr}
 801ed12:	b086      	sub	sp, #24
 801ed14:	af00      	add	r7, sp, #0
 801ed16:	60f8      	str	r0, [r7, #12]
 801ed18:	60b9      	str	r1, [r7, #8]
 801ed1a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ed1c:	68fb      	ldr	r3, [r7, #12]
 801ed1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ed22:	d306      	bcc.n	801ed32 <sys_timeout+0x22>
 801ed24:	4b0a      	ldr	r3, [pc, #40]	; (801ed50 <sys_timeout+0x40>)
 801ed26:	f240 1229 	movw	r2, #297	; 0x129
 801ed2a:	490a      	ldr	r1, [pc, #40]	; (801ed54 <sys_timeout+0x44>)
 801ed2c:	480a      	ldr	r0, [pc, #40]	; (801ed58 <sys_timeout+0x48>)
 801ed2e:	f001 f9eb 	bl	8020108 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ed32:	f7ec fddd 	bl	800b8f0 <sys_now>
 801ed36:	4602      	mov	r2, r0
 801ed38:	68fb      	ldr	r3, [r7, #12]
 801ed3a:	4413      	add	r3, r2
 801ed3c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ed3e:	687a      	ldr	r2, [r7, #4]
 801ed40:	68b9      	ldr	r1, [r7, #8]
 801ed42:	6978      	ldr	r0, [r7, #20]
 801ed44:	f7ff ff22 	bl	801eb8c <sys_timeout_abs>
#endif
}
 801ed48:	bf00      	nop
 801ed4a:	3718      	adds	r7, #24
 801ed4c:	46bd      	mov	sp, r7
 801ed4e:	bd80      	pop	{r7, pc}
 801ed50:	0802458c 	.word	0x0802458c
 801ed54:	0802466c 	.word	0x0802466c
 801ed58:	08024644 	.word	0x08024644

0801ed5c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ed5c:	b580      	push	{r7, lr}
 801ed5e:	b084      	sub	sp, #16
 801ed60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ed62:	f7ec fdc5 	bl	800b8f0 <sys_now>
 801ed66:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ed68:	4b17      	ldr	r3, [pc, #92]	; (801edc8 <sys_check_timeouts+0x6c>)
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ed6e:	68bb      	ldr	r3, [r7, #8]
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	d022      	beq.n	801edba <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ed74:	68bb      	ldr	r3, [r7, #8]
 801ed76:	685b      	ldr	r3, [r3, #4]
 801ed78:	68fa      	ldr	r2, [r7, #12]
 801ed7a:	1ad3      	subs	r3, r2, r3
 801ed7c:	0fdb      	lsrs	r3, r3, #31
 801ed7e:	f003 0301 	and.w	r3, r3, #1
 801ed82:	b2db      	uxtb	r3, r3
 801ed84:	2b00      	cmp	r3, #0
 801ed86:	d11a      	bne.n	801edbe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ed88:	68bb      	ldr	r3, [r7, #8]
 801ed8a:	681b      	ldr	r3, [r3, #0]
 801ed8c:	4a0e      	ldr	r2, [pc, #56]	; (801edc8 <sys_check_timeouts+0x6c>)
 801ed8e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801ed90:	68bb      	ldr	r3, [r7, #8]
 801ed92:	689b      	ldr	r3, [r3, #8]
 801ed94:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801ed96:	68bb      	ldr	r3, [r7, #8]
 801ed98:	68db      	ldr	r3, [r3, #12]
 801ed9a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801ed9c:	68bb      	ldr	r3, [r7, #8]
 801ed9e:	685b      	ldr	r3, [r3, #4]
 801eda0:	4a0a      	ldr	r2, [pc, #40]	; (801edcc <sys_check_timeouts+0x70>)
 801eda2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801eda4:	68b9      	ldr	r1, [r7, #8]
 801eda6:	200a      	movs	r0, #10
 801eda8:	f7f8 f91e 	bl	8016fe8 <memp_free>
    if (handler != NULL) {
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d0da      	beq.n	801ed68 <sys_check_timeouts+0xc>
      handler(arg);
 801edb2:	687b      	ldr	r3, [r7, #4]
 801edb4:	6838      	ldr	r0, [r7, #0]
 801edb6:	4798      	blx	r3
  do {
 801edb8:	e7d6      	b.n	801ed68 <sys_check_timeouts+0xc>
      return;
 801edba:	bf00      	nop
 801edbc:	e000      	b.n	801edc0 <sys_check_timeouts+0x64>
      return;
 801edbe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801edc0:	3710      	adds	r7, #16
 801edc2:	46bd      	mov	sp, r7
 801edc4:	bd80      	pop	{r7, pc}
 801edc6:	bf00      	nop
 801edc8:	24010078 	.word	0x24010078
 801edcc:	2401007c 	.word	0x2401007c

0801edd0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801edd0:	b580      	push	{r7, lr}
 801edd2:	b082      	sub	sp, #8
 801edd4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801edd6:	4b16      	ldr	r3, [pc, #88]	; (801ee30 <sys_timeouts_sleeptime+0x60>)
 801edd8:	681b      	ldr	r3, [r3, #0]
 801edda:	2b00      	cmp	r3, #0
 801eddc:	d102      	bne.n	801ede4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801edde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ede2:	e020      	b.n	801ee26 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ede4:	f7ec fd84 	bl	800b8f0 <sys_now>
 801ede8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801edea:	4b11      	ldr	r3, [pc, #68]	; (801ee30 <sys_timeouts_sleeptime+0x60>)
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	685a      	ldr	r2, [r3, #4]
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	1ad3      	subs	r3, r2, r3
 801edf4:	0fdb      	lsrs	r3, r3, #31
 801edf6:	f003 0301 	and.w	r3, r3, #1
 801edfa:	b2db      	uxtb	r3, r3
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d001      	beq.n	801ee04 <sys_timeouts_sleeptime+0x34>
    return 0;
 801ee00:	2300      	movs	r3, #0
 801ee02:	e010      	b.n	801ee26 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ee04:	4b0a      	ldr	r3, [pc, #40]	; (801ee30 <sys_timeouts_sleeptime+0x60>)
 801ee06:	681b      	ldr	r3, [r3, #0]
 801ee08:	685a      	ldr	r2, [r3, #4]
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	1ad3      	subs	r3, r2, r3
 801ee0e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ee10:	683b      	ldr	r3, [r7, #0]
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	da06      	bge.n	801ee24 <sys_timeouts_sleeptime+0x54>
 801ee16:	4b07      	ldr	r3, [pc, #28]	; (801ee34 <sys_timeouts_sleeptime+0x64>)
 801ee18:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ee1c:	4906      	ldr	r1, [pc, #24]	; (801ee38 <sys_timeouts_sleeptime+0x68>)
 801ee1e:	4807      	ldr	r0, [pc, #28]	; (801ee3c <sys_timeouts_sleeptime+0x6c>)
 801ee20:	f001 f972 	bl	8020108 <iprintf>
    return ret;
 801ee24:	683b      	ldr	r3, [r7, #0]
  }
}
 801ee26:	4618      	mov	r0, r3
 801ee28:	3708      	adds	r7, #8
 801ee2a:	46bd      	mov	sp, r7
 801ee2c:	bd80      	pop	{r7, pc}
 801ee2e:	bf00      	nop
 801ee30:	24010078 	.word	0x24010078
 801ee34:	0802458c 	.word	0x0802458c
 801ee38:	080246a4 	.word	0x080246a4
 801ee3c:	08024644 	.word	0x08024644

0801ee40 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ee40:	b580      	push	{r7, lr}
 801ee42:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ee44:	f001 f9ee 	bl	8020224 <rand>
 801ee48:	4603      	mov	r3, r0
 801ee4a:	b29b      	uxth	r3, r3
 801ee4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ee50:	b29b      	uxth	r3, r3
 801ee52:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ee56:	b29a      	uxth	r2, r3
 801ee58:	4b01      	ldr	r3, [pc, #4]	; (801ee60 <udp_init+0x20>)
 801ee5a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ee5c:	bf00      	nop
 801ee5e:	bd80      	pop	{r7, pc}
 801ee60:	24000030 	.word	0x24000030

0801ee64 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ee64:	b480      	push	{r7}
 801ee66:	b083      	sub	sp, #12
 801ee68:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ee6a:	2300      	movs	r3, #0
 801ee6c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ee6e:	4b17      	ldr	r3, [pc, #92]	; (801eecc <udp_new_port+0x68>)
 801ee70:	881b      	ldrh	r3, [r3, #0]
 801ee72:	1c5a      	adds	r2, r3, #1
 801ee74:	b291      	uxth	r1, r2
 801ee76:	4a15      	ldr	r2, [pc, #84]	; (801eecc <udp_new_port+0x68>)
 801ee78:	8011      	strh	r1, [r2, #0]
 801ee7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ee7e:	4293      	cmp	r3, r2
 801ee80:	d103      	bne.n	801ee8a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ee82:	4b12      	ldr	r3, [pc, #72]	; (801eecc <udp_new_port+0x68>)
 801ee84:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ee88:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ee8a:	4b11      	ldr	r3, [pc, #68]	; (801eed0 <udp_new_port+0x6c>)
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	603b      	str	r3, [r7, #0]
 801ee90:	e011      	b.n	801eeb6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ee92:	683b      	ldr	r3, [r7, #0]
 801ee94:	8a5a      	ldrh	r2, [r3, #18]
 801ee96:	4b0d      	ldr	r3, [pc, #52]	; (801eecc <udp_new_port+0x68>)
 801ee98:	881b      	ldrh	r3, [r3, #0]
 801ee9a:	429a      	cmp	r2, r3
 801ee9c:	d108      	bne.n	801eeb0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ee9e:	88fb      	ldrh	r3, [r7, #6]
 801eea0:	3301      	adds	r3, #1
 801eea2:	80fb      	strh	r3, [r7, #6]
 801eea4:	88fb      	ldrh	r3, [r7, #6]
 801eea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801eeaa:	d3e0      	bcc.n	801ee6e <udp_new_port+0xa>
        return 0;
 801eeac:	2300      	movs	r3, #0
 801eeae:	e007      	b.n	801eec0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801eeb0:	683b      	ldr	r3, [r7, #0]
 801eeb2:	68db      	ldr	r3, [r3, #12]
 801eeb4:	603b      	str	r3, [r7, #0]
 801eeb6:	683b      	ldr	r3, [r7, #0]
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d1ea      	bne.n	801ee92 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801eebc:	4b03      	ldr	r3, [pc, #12]	; (801eecc <udp_new_port+0x68>)
 801eebe:	881b      	ldrh	r3, [r3, #0]
}
 801eec0:	4618      	mov	r0, r3
 801eec2:	370c      	adds	r7, #12
 801eec4:	46bd      	mov	sp, r7
 801eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeca:	4770      	bx	lr
 801eecc:	24000030 	.word	0x24000030
 801eed0:	24010084 	.word	0x24010084

0801eed4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801eed4:	b580      	push	{r7, lr}
 801eed6:	b084      	sub	sp, #16
 801eed8:	af00      	add	r7, sp, #0
 801eeda:	60f8      	str	r0, [r7, #12]
 801eedc:	60b9      	str	r1, [r7, #8]
 801eede:	4613      	mov	r3, r2
 801eee0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801eee2:	68fb      	ldr	r3, [r7, #12]
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d105      	bne.n	801eef4 <udp_input_local_match+0x20>
 801eee8:	4b27      	ldr	r3, [pc, #156]	; (801ef88 <udp_input_local_match+0xb4>)
 801eeea:	2287      	movs	r2, #135	; 0x87
 801eeec:	4927      	ldr	r1, [pc, #156]	; (801ef8c <udp_input_local_match+0xb8>)
 801eeee:	4828      	ldr	r0, [pc, #160]	; (801ef90 <udp_input_local_match+0xbc>)
 801eef0:	f001 f90a 	bl	8020108 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801eef4:	68bb      	ldr	r3, [r7, #8]
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d105      	bne.n	801ef06 <udp_input_local_match+0x32>
 801eefa:	4b23      	ldr	r3, [pc, #140]	; (801ef88 <udp_input_local_match+0xb4>)
 801eefc:	2288      	movs	r2, #136	; 0x88
 801eefe:	4925      	ldr	r1, [pc, #148]	; (801ef94 <udp_input_local_match+0xc0>)
 801ef00:	4823      	ldr	r0, [pc, #140]	; (801ef90 <udp_input_local_match+0xbc>)
 801ef02:	f001 f901 	bl	8020108 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ef06:	68fb      	ldr	r3, [r7, #12]
 801ef08:	7a1b      	ldrb	r3, [r3, #8]
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	d00b      	beq.n	801ef26 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ef0e:	68fb      	ldr	r3, [r7, #12]
 801ef10:	7a1a      	ldrb	r2, [r3, #8]
 801ef12:	4b21      	ldr	r3, [pc, #132]	; (801ef98 <udp_input_local_match+0xc4>)
 801ef14:	685b      	ldr	r3, [r3, #4]
 801ef16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ef1a:	3301      	adds	r3, #1
 801ef1c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ef1e:	429a      	cmp	r2, r3
 801ef20:	d001      	beq.n	801ef26 <udp_input_local_match+0x52>
    return 0;
 801ef22:	2300      	movs	r3, #0
 801ef24:	e02b      	b.n	801ef7e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ef26:	79fb      	ldrb	r3, [r7, #7]
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d018      	beq.n	801ef5e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	d013      	beq.n	801ef5a <udp_input_local_match+0x86>
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d00f      	beq.n	801ef5a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ef3a:	4b17      	ldr	r3, [pc, #92]	; (801ef98 <udp_input_local_match+0xc4>)
 801ef3c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ef3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ef42:	d00a      	beq.n	801ef5a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ef44:	68fb      	ldr	r3, [r7, #12]
 801ef46:	681a      	ldr	r2, [r3, #0]
 801ef48:	4b13      	ldr	r3, [pc, #76]	; (801ef98 <udp_input_local_match+0xc4>)
 801ef4a:	695b      	ldr	r3, [r3, #20]
 801ef4c:	405a      	eors	r2, r3
 801ef4e:	68bb      	ldr	r3, [r7, #8]
 801ef50:	3308      	adds	r3, #8
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d110      	bne.n	801ef7c <udp_input_local_match+0xa8>
          return 1;
 801ef5a:	2301      	movs	r3, #1
 801ef5c:	e00f      	b.n	801ef7e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ef5e:	68fb      	ldr	r3, [r7, #12]
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	d009      	beq.n	801ef78 <udp_input_local_match+0xa4>
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	681b      	ldr	r3, [r3, #0]
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	d005      	beq.n	801ef78 <udp_input_local_match+0xa4>
 801ef6c:	68fb      	ldr	r3, [r7, #12]
 801ef6e:	681a      	ldr	r2, [r3, #0]
 801ef70:	4b09      	ldr	r3, [pc, #36]	; (801ef98 <udp_input_local_match+0xc4>)
 801ef72:	695b      	ldr	r3, [r3, #20]
 801ef74:	429a      	cmp	r2, r3
 801ef76:	d101      	bne.n	801ef7c <udp_input_local_match+0xa8>
        return 1;
 801ef78:	2301      	movs	r3, #1
 801ef7a:	e000      	b.n	801ef7e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ef7c:	2300      	movs	r3, #0
}
 801ef7e:	4618      	mov	r0, r3
 801ef80:	3710      	adds	r7, #16
 801ef82:	46bd      	mov	sp, r7
 801ef84:	bd80      	pop	{r7, pc}
 801ef86:	bf00      	nop
 801ef88:	080246b8 	.word	0x080246b8
 801ef8c:	0802472c 	.word	0x0802472c
 801ef90:	08024750 	.word	0x08024750
 801ef94:	08024778 	.word	0x08024778
 801ef98:	24009548 	.word	0x24009548

0801ef9c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ef9c:	b590      	push	{r4, r7, lr}
 801ef9e:	b08d      	sub	sp, #52	; 0x34
 801efa0:	af02      	add	r7, sp, #8
 801efa2:	6078      	str	r0, [r7, #4]
 801efa4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801efa6:	2300      	movs	r3, #0
 801efa8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	2b00      	cmp	r3, #0
 801efae:	d105      	bne.n	801efbc <udp_input+0x20>
 801efb0:	4b7c      	ldr	r3, [pc, #496]	; (801f1a4 <udp_input+0x208>)
 801efb2:	22cf      	movs	r2, #207	; 0xcf
 801efb4:	497c      	ldr	r1, [pc, #496]	; (801f1a8 <udp_input+0x20c>)
 801efb6:	487d      	ldr	r0, [pc, #500]	; (801f1ac <udp_input+0x210>)
 801efb8:	f001 f8a6 	bl	8020108 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801efbc:	683b      	ldr	r3, [r7, #0]
 801efbe:	2b00      	cmp	r3, #0
 801efc0:	d105      	bne.n	801efce <udp_input+0x32>
 801efc2:	4b78      	ldr	r3, [pc, #480]	; (801f1a4 <udp_input+0x208>)
 801efc4:	22d0      	movs	r2, #208	; 0xd0
 801efc6:	497a      	ldr	r1, [pc, #488]	; (801f1b0 <udp_input+0x214>)
 801efc8:	4878      	ldr	r0, [pc, #480]	; (801f1ac <udp_input+0x210>)
 801efca:	f001 f89d 	bl	8020108 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	895b      	ldrh	r3, [r3, #10]
 801efd2:	2b07      	cmp	r3, #7
 801efd4:	d803      	bhi.n	801efde <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801efd6:	6878      	ldr	r0, [r7, #4]
 801efd8:	f7f8 fefa 	bl	8017dd0 <pbuf_free>
    goto end;
 801efdc:	e0de      	b.n	801f19c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	685b      	ldr	r3, [r3, #4]
 801efe2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801efe4:	4b73      	ldr	r3, [pc, #460]	; (801f1b4 <udp_input+0x218>)
 801efe6:	695b      	ldr	r3, [r3, #20]
 801efe8:	4a72      	ldr	r2, [pc, #456]	; (801f1b4 <udp_input+0x218>)
 801efea:	6812      	ldr	r2, [r2, #0]
 801efec:	4611      	mov	r1, r2
 801efee:	4618      	mov	r0, r3
 801eff0:	f7f6 fc88 	bl	8015904 <ip4_addr_isbroadcast_u32>
 801eff4:	4603      	mov	r3, r0
 801eff6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801eff8:	697b      	ldr	r3, [r7, #20]
 801effa:	881b      	ldrh	r3, [r3, #0]
 801effc:	b29b      	uxth	r3, r3
 801effe:	4618      	mov	r0, r3
 801f000:	f7f4 ff12 	bl	8013e28 <lwip_htons>
 801f004:	4603      	mov	r3, r0
 801f006:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f008:	697b      	ldr	r3, [r7, #20]
 801f00a:	885b      	ldrh	r3, [r3, #2]
 801f00c:	b29b      	uxth	r3, r3
 801f00e:	4618      	mov	r0, r3
 801f010:	f7f4 ff0a 	bl	8013e28 <lwip_htons>
 801f014:	4603      	mov	r3, r0
 801f016:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f018:	2300      	movs	r3, #0
 801f01a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f01c:	2300      	movs	r3, #0
 801f01e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f020:	2300      	movs	r3, #0
 801f022:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f024:	4b64      	ldr	r3, [pc, #400]	; (801f1b8 <udp_input+0x21c>)
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	627b      	str	r3, [r7, #36]	; 0x24
 801f02a:	e054      	b.n	801f0d6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f02e:	8a5b      	ldrh	r3, [r3, #18]
 801f030:	89fa      	ldrh	r2, [r7, #14]
 801f032:	429a      	cmp	r2, r3
 801f034:	d14a      	bne.n	801f0cc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f036:	7cfb      	ldrb	r3, [r7, #19]
 801f038:	461a      	mov	r2, r3
 801f03a:	6839      	ldr	r1, [r7, #0]
 801f03c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f03e:	f7ff ff49 	bl	801eed4 <udp_input_local_match>
 801f042:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f044:	2b00      	cmp	r3, #0
 801f046:	d041      	beq.n	801f0cc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f04a:	7c1b      	ldrb	r3, [r3, #16]
 801f04c:	f003 0304 	and.w	r3, r3, #4
 801f050:	2b00      	cmp	r3, #0
 801f052:	d11d      	bne.n	801f090 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f054:	69fb      	ldr	r3, [r7, #28]
 801f056:	2b00      	cmp	r3, #0
 801f058:	d102      	bne.n	801f060 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f05c:	61fb      	str	r3, [r7, #28]
 801f05e:	e017      	b.n	801f090 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f060:	7cfb      	ldrb	r3, [r7, #19]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d014      	beq.n	801f090 <udp_input+0xf4>
 801f066:	4b53      	ldr	r3, [pc, #332]	; (801f1b4 <udp_input+0x218>)
 801f068:	695b      	ldr	r3, [r3, #20]
 801f06a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f06e:	d10f      	bne.n	801f090 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f070:	69fb      	ldr	r3, [r7, #28]
 801f072:	681a      	ldr	r2, [r3, #0]
 801f074:	683b      	ldr	r3, [r7, #0]
 801f076:	3304      	adds	r3, #4
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	429a      	cmp	r2, r3
 801f07c:	d008      	beq.n	801f090 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f080:	681a      	ldr	r2, [r3, #0]
 801f082:	683b      	ldr	r3, [r7, #0]
 801f084:	3304      	adds	r3, #4
 801f086:	681b      	ldr	r3, [r3, #0]
 801f088:	429a      	cmp	r2, r3
 801f08a:	d101      	bne.n	801f090 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f08e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f092:	8a9b      	ldrh	r3, [r3, #20]
 801f094:	8a3a      	ldrh	r2, [r7, #16]
 801f096:	429a      	cmp	r2, r3
 801f098:	d118      	bne.n	801f0cc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f09c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	d005      	beq.n	801f0ae <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0a4:	685a      	ldr	r2, [r3, #4]
 801f0a6:	4b43      	ldr	r3, [pc, #268]	; (801f1b4 <udp_input+0x218>)
 801f0a8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f0aa:	429a      	cmp	r2, r3
 801f0ac:	d10e      	bne.n	801f0cc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f0ae:	6a3b      	ldr	r3, [r7, #32]
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	d014      	beq.n	801f0de <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0b6:	68da      	ldr	r2, [r3, #12]
 801f0b8:	6a3b      	ldr	r3, [r7, #32]
 801f0ba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f0bc:	4b3e      	ldr	r3, [pc, #248]	; (801f1b8 <udp_input+0x21c>)
 801f0be:	681a      	ldr	r2, [r3, #0]
 801f0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0c2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f0c4:	4a3c      	ldr	r2, [pc, #240]	; (801f1b8 <udp_input+0x21c>)
 801f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0c8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f0ca:	e008      	b.n	801f0de <udp_input+0x142>
      }
    }

    prev = pcb;
 801f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ce:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0d2:	68db      	ldr	r3, [r3, #12]
 801f0d4:	627b      	str	r3, [r7, #36]	; 0x24
 801f0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d1a7      	bne.n	801f02c <udp_input+0x90>
 801f0dc:	e000      	b.n	801f0e0 <udp_input+0x144>
        break;
 801f0de:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d101      	bne.n	801f0ea <udp_input+0x14e>
    pcb = uncon_pcb;
 801f0e6:	69fb      	ldr	r3, [r7, #28]
 801f0e8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d002      	beq.n	801f0f6 <udp_input+0x15a>
    for_us = 1;
 801f0f0:	2301      	movs	r3, #1
 801f0f2:	76fb      	strb	r3, [r7, #27]
 801f0f4:	e00a      	b.n	801f10c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f0f6:	683b      	ldr	r3, [r7, #0]
 801f0f8:	3304      	adds	r3, #4
 801f0fa:	681a      	ldr	r2, [r3, #0]
 801f0fc:	4b2d      	ldr	r3, [pc, #180]	; (801f1b4 <udp_input+0x218>)
 801f0fe:	695b      	ldr	r3, [r3, #20]
 801f100:	429a      	cmp	r2, r3
 801f102:	bf0c      	ite	eq
 801f104:	2301      	moveq	r3, #1
 801f106:	2300      	movne	r3, #0
 801f108:	b2db      	uxtb	r3, r3
 801f10a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f10c:	7efb      	ldrb	r3, [r7, #27]
 801f10e:	2b00      	cmp	r3, #0
 801f110:	d041      	beq.n	801f196 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f112:	2108      	movs	r1, #8
 801f114:	6878      	ldr	r0, [r7, #4]
 801f116:	f7f8 fdd5 	bl	8017cc4 <pbuf_remove_header>
 801f11a:	4603      	mov	r3, r0
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d00a      	beq.n	801f136 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f120:	4b20      	ldr	r3, [pc, #128]	; (801f1a4 <udp_input+0x208>)
 801f122:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f126:	4925      	ldr	r1, [pc, #148]	; (801f1bc <udp_input+0x220>)
 801f128:	4820      	ldr	r0, [pc, #128]	; (801f1ac <udp_input+0x210>)
 801f12a:	f000 ffed 	bl	8020108 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f12e:	6878      	ldr	r0, [r7, #4]
 801f130:	f7f8 fe4e 	bl	8017dd0 <pbuf_free>
      goto end;
 801f134:	e032      	b.n	801f19c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f138:	2b00      	cmp	r3, #0
 801f13a:	d012      	beq.n	801f162 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f13e:	699b      	ldr	r3, [r3, #24]
 801f140:	2b00      	cmp	r3, #0
 801f142:	d00a      	beq.n	801f15a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f146:	699c      	ldr	r4, [r3, #24]
 801f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f14a:	69d8      	ldr	r0, [r3, #28]
 801f14c:	8a3b      	ldrh	r3, [r7, #16]
 801f14e:	9300      	str	r3, [sp, #0]
 801f150:	4b1b      	ldr	r3, [pc, #108]	; (801f1c0 <udp_input+0x224>)
 801f152:	687a      	ldr	r2, [r7, #4]
 801f154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f156:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f158:	e021      	b.n	801f19e <udp_input+0x202>
        pbuf_free(p);
 801f15a:	6878      	ldr	r0, [r7, #4]
 801f15c:	f7f8 fe38 	bl	8017dd0 <pbuf_free>
        goto end;
 801f160:	e01c      	b.n	801f19c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f162:	7cfb      	ldrb	r3, [r7, #19]
 801f164:	2b00      	cmp	r3, #0
 801f166:	d112      	bne.n	801f18e <udp_input+0x1f2>
 801f168:	4b12      	ldr	r3, [pc, #72]	; (801f1b4 <udp_input+0x218>)
 801f16a:	695b      	ldr	r3, [r3, #20]
 801f16c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f170:	2be0      	cmp	r3, #224	; 0xe0
 801f172:	d00c      	beq.n	801f18e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f174:	4b0f      	ldr	r3, [pc, #60]	; (801f1b4 <udp_input+0x218>)
 801f176:	899b      	ldrh	r3, [r3, #12]
 801f178:	3308      	adds	r3, #8
 801f17a:	b29b      	uxth	r3, r3
 801f17c:	b21b      	sxth	r3, r3
 801f17e:	4619      	mov	r1, r3
 801f180:	6878      	ldr	r0, [r7, #4]
 801f182:	f7f8 fe12 	bl	8017daa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f186:	2103      	movs	r1, #3
 801f188:	6878      	ldr	r0, [r7, #4]
 801f18a:	f7f5 ffbd 	bl	8015108 <icmp_dest_unreach>
      pbuf_free(p);
 801f18e:	6878      	ldr	r0, [r7, #4]
 801f190:	f7f8 fe1e 	bl	8017dd0 <pbuf_free>
  return;
 801f194:	e003      	b.n	801f19e <udp_input+0x202>
    pbuf_free(p);
 801f196:	6878      	ldr	r0, [r7, #4]
 801f198:	f7f8 fe1a 	bl	8017dd0 <pbuf_free>
  return;
 801f19c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f19e:	372c      	adds	r7, #44	; 0x2c
 801f1a0:	46bd      	mov	sp, r7
 801f1a2:	bd90      	pop	{r4, r7, pc}
 801f1a4:	080246b8 	.word	0x080246b8
 801f1a8:	080247a0 	.word	0x080247a0
 801f1ac:	08024750 	.word	0x08024750
 801f1b0:	080247b8 	.word	0x080247b8
 801f1b4:	24009548 	.word	0x24009548
 801f1b8:	24010084 	.word	0x24010084
 801f1bc:	080247d4 	.word	0x080247d4
 801f1c0:	24009558 	.word	0x24009558

0801f1c4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f1c4:	b580      	push	{r7, lr}
 801f1c6:	b086      	sub	sp, #24
 801f1c8:	af00      	add	r7, sp, #0
 801f1ca:	60f8      	str	r0, [r7, #12]
 801f1cc:	60b9      	str	r1, [r7, #8]
 801f1ce:	4613      	mov	r3, r2
 801f1d0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801f1d2:	68bb      	ldr	r3, [r7, #8]
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	d101      	bne.n	801f1dc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801f1d8:	4b39      	ldr	r3, [pc, #228]	; (801f2c0 <udp_bind+0xfc>)
 801f1da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f1dc:	68fb      	ldr	r3, [r7, #12]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d109      	bne.n	801f1f6 <udp_bind+0x32>
 801f1e2:	4b38      	ldr	r3, [pc, #224]	; (801f2c4 <udp_bind+0x100>)
 801f1e4:	f240 32b7 	movw	r2, #951	; 0x3b7
 801f1e8:	4937      	ldr	r1, [pc, #220]	; (801f2c8 <udp_bind+0x104>)
 801f1ea:	4838      	ldr	r0, [pc, #224]	; (801f2cc <udp_bind+0x108>)
 801f1ec:	f000 ff8c 	bl	8020108 <iprintf>
 801f1f0:	f06f 030f 	mvn.w	r3, #15
 801f1f4:	e060      	b.n	801f2b8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801f1f6:	2300      	movs	r3, #0
 801f1f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f1fa:	4b35      	ldr	r3, [pc, #212]	; (801f2d0 <udp_bind+0x10c>)
 801f1fc:	681b      	ldr	r3, [r3, #0]
 801f1fe:	617b      	str	r3, [r7, #20]
 801f200:	e009      	b.n	801f216 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801f202:	68fa      	ldr	r2, [r7, #12]
 801f204:	697b      	ldr	r3, [r7, #20]
 801f206:	429a      	cmp	r2, r3
 801f208:	d102      	bne.n	801f210 <udp_bind+0x4c>
      rebind = 1;
 801f20a:	2301      	movs	r3, #1
 801f20c:	74fb      	strb	r3, [r7, #19]
      break;
 801f20e:	e005      	b.n	801f21c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f210:	697b      	ldr	r3, [r7, #20]
 801f212:	68db      	ldr	r3, [r3, #12]
 801f214:	617b      	str	r3, [r7, #20]
 801f216:	697b      	ldr	r3, [r7, #20]
 801f218:	2b00      	cmp	r3, #0
 801f21a:	d1f2      	bne.n	801f202 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801f21c:	88fb      	ldrh	r3, [r7, #6]
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d109      	bne.n	801f236 <udp_bind+0x72>
    port = udp_new_port();
 801f222:	f7ff fe1f 	bl	801ee64 <udp_new_port>
 801f226:	4603      	mov	r3, r0
 801f228:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801f22a:	88fb      	ldrh	r3, [r7, #6]
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	d12c      	bne.n	801f28a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801f230:	f06f 0307 	mvn.w	r3, #7
 801f234:	e040      	b.n	801f2b8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f236:	4b26      	ldr	r3, [pc, #152]	; (801f2d0 <udp_bind+0x10c>)
 801f238:	681b      	ldr	r3, [r3, #0]
 801f23a:	617b      	str	r3, [r7, #20]
 801f23c:	e022      	b.n	801f284 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801f23e:	68fa      	ldr	r2, [r7, #12]
 801f240:	697b      	ldr	r3, [r7, #20]
 801f242:	429a      	cmp	r2, r3
 801f244:	d01b      	beq.n	801f27e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801f246:	697b      	ldr	r3, [r7, #20]
 801f248:	8a5b      	ldrh	r3, [r3, #18]
 801f24a:	88fa      	ldrh	r2, [r7, #6]
 801f24c:	429a      	cmp	r2, r3
 801f24e:	d116      	bne.n	801f27e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f250:	697b      	ldr	r3, [r7, #20]
 801f252:	681a      	ldr	r2, [r3, #0]
 801f254:	68bb      	ldr	r3, [r7, #8]
 801f256:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801f258:	429a      	cmp	r2, r3
 801f25a:	d00d      	beq.n	801f278 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f25c:	68bb      	ldr	r3, [r7, #8]
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d00a      	beq.n	801f278 <udp_bind+0xb4>
 801f262:	68bb      	ldr	r3, [r7, #8]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	2b00      	cmp	r3, #0
 801f268:	d006      	beq.n	801f278 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f26a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d003      	beq.n	801f278 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f270:	697b      	ldr	r3, [r7, #20]
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	2b00      	cmp	r3, #0
 801f276:	d102      	bne.n	801f27e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801f278:	f06f 0307 	mvn.w	r3, #7
 801f27c:	e01c      	b.n	801f2b8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f27e:	697b      	ldr	r3, [r7, #20]
 801f280:	68db      	ldr	r3, [r3, #12]
 801f282:	617b      	str	r3, [r7, #20]
 801f284:	697b      	ldr	r3, [r7, #20]
 801f286:	2b00      	cmp	r3, #0
 801f288:	d1d9      	bne.n	801f23e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801f28a:	68bb      	ldr	r3, [r7, #8]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	d002      	beq.n	801f296 <udp_bind+0xd2>
 801f290:	68bb      	ldr	r3, [r7, #8]
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	e000      	b.n	801f298 <udp_bind+0xd4>
 801f296:	2300      	movs	r3, #0
 801f298:	68fa      	ldr	r2, [r7, #12]
 801f29a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801f29c:	68fb      	ldr	r3, [r7, #12]
 801f29e:	88fa      	ldrh	r2, [r7, #6]
 801f2a0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801f2a2:	7cfb      	ldrb	r3, [r7, #19]
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d106      	bne.n	801f2b6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801f2a8:	4b09      	ldr	r3, [pc, #36]	; (801f2d0 <udp_bind+0x10c>)
 801f2aa:	681a      	ldr	r2, [r3, #0]
 801f2ac:	68fb      	ldr	r3, [r7, #12]
 801f2ae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801f2b0:	4a07      	ldr	r2, [pc, #28]	; (801f2d0 <udp_bind+0x10c>)
 801f2b2:	68fb      	ldr	r3, [r7, #12]
 801f2b4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801f2b6:	2300      	movs	r3, #0
}
 801f2b8:	4618      	mov	r0, r3
 801f2ba:	3718      	adds	r7, #24
 801f2bc:	46bd      	mov	sp, r7
 801f2be:	bd80      	pop	{r7, pc}
 801f2c0:	08024ad4 	.word	0x08024ad4
 801f2c4:	080246b8 	.word	0x080246b8
 801f2c8:	080249c4 	.word	0x080249c4
 801f2cc:	08024750 	.word	0x08024750
 801f2d0:	24010084 	.word	0x24010084

0801f2d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801f2d4:	b580      	push	{r7, lr}
 801f2d6:	b084      	sub	sp, #16
 801f2d8:	af00      	add	r7, sp, #0
 801f2da:	60f8      	str	r0, [r7, #12]
 801f2dc:	60b9      	str	r1, [r7, #8]
 801f2de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f2e0:	68fb      	ldr	r3, [r7, #12]
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	d107      	bne.n	801f2f6 <udp_recv+0x22>
 801f2e6:	4b08      	ldr	r3, [pc, #32]	; (801f308 <udp_recv+0x34>)
 801f2e8:	f240 428a 	movw	r2, #1162	; 0x48a
 801f2ec:	4907      	ldr	r1, [pc, #28]	; (801f30c <udp_recv+0x38>)
 801f2ee:	4808      	ldr	r0, [pc, #32]	; (801f310 <udp_recv+0x3c>)
 801f2f0:	f000 ff0a 	bl	8020108 <iprintf>
 801f2f4:	e005      	b.n	801f302 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	68ba      	ldr	r2, [r7, #8]
 801f2fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801f2fc:	68fb      	ldr	r3, [r7, #12]
 801f2fe:	687a      	ldr	r2, [r7, #4]
 801f300:	61da      	str	r2, [r3, #28]
}
 801f302:	3710      	adds	r7, #16
 801f304:	46bd      	mov	sp, r7
 801f306:	bd80      	pop	{r7, pc}
 801f308:	080246b8 	.word	0x080246b8
 801f30c:	08024a30 	.word	0x08024a30
 801f310:	08024750 	.word	0x08024750

0801f314 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801f314:	b580      	push	{r7, lr}
 801f316:	b084      	sub	sp, #16
 801f318:	af00      	add	r7, sp, #0
 801f31a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	d107      	bne.n	801f332 <udp_remove+0x1e>
 801f322:	4b19      	ldr	r3, [pc, #100]	; (801f388 <udp_remove+0x74>)
 801f324:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801f328:	4918      	ldr	r1, [pc, #96]	; (801f38c <udp_remove+0x78>)
 801f32a:	4819      	ldr	r0, [pc, #100]	; (801f390 <udp_remove+0x7c>)
 801f32c:	f000 feec 	bl	8020108 <iprintf>
 801f330:	e026      	b.n	801f380 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801f332:	4b18      	ldr	r3, [pc, #96]	; (801f394 <udp_remove+0x80>)
 801f334:	681b      	ldr	r3, [r3, #0]
 801f336:	687a      	ldr	r2, [r7, #4]
 801f338:	429a      	cmp	r2, r3
 801f33a:	d105      	bne.n	801f348 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801f33c:	4b15      	ldr	r3, [pc, #84]	; (801f394 <udp_remove+0x80>)
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	68db      	ldr	r3, [r3, #12]
 801f342:	4a14      	ldr	r2, [pc, #80]	; (801f394 <udp_remove+0x80>)
 801f344:	6013      	str	r3, [r2, #0]
 801f346:	e017      	b.n	801f378 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f348:	4b12      	ldr	r3, [pc, #72]	; (801f394 <udp_remove+0x80>)
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	60fb      	str	r3, [r7, #12]
 801f34e:	e010      	b.n	801f372 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	68db      	ldr	r3, [r3, #12]
 801f354:	2b00      	cmp	r3, #0
 801f356:	d009      	beq.n	801f36c <udp_remove+0x58>
 801f358:	68fb      	ldr	r3, [r7, #12]
 801f35a:	68db      	ldr	r3, [r3, #12]
 801f35c:	687a      	ldr	r2, [r7, #4]
 801f35e:	429a      	cmp	r2, r3
 801f360:	d104      	bne.n	801f36c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	68da      	ldr	r2, [r3, #12]
 801f366:	68fb      	ldr	r3, [r7, #12]
 801f368:	60da      	str	r2, [r3, #12]
        break;
 801f36a:	e005      	b.n	801f378 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	68db      	ldr	r3, [r3, #12]
 801f370:	60fb      	str	r3, [r7, #12]
 801f372:	68fb      	ldr	r3, [r7, #12]
 801f374:	2b00      	cmp	r3, #0
 801f376:	d1eb      	bne.n	801f350 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801f378:	6879      	ldr	r1, [r7, #4]
 801f37a:	2000      	movs	r0, #0
 801f37c:	f7f7 fe34 	bl	8016fe8 <memp_free>
}
 801f380:	3710      	adds	r7, #16
 801f382:	46bd      	mov	sp, r7
 801f384:	bd80      	pop	{r7, pc}
 801f386:	bf00      	nop
 801f388:	080246b8 	.word	0x080246b8
 801f38c:	08024a48 	.word	0x08024a48
 801f390:	08024750 	.word	0x08024750
 801f394:	24010084 	.word	0x24010084

0801f398 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801f398:	b580      	push	{r7, lr}
 801f39a:	b082      	sub	sp, #8
 801f39c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f39e:	2000      	movs	r0, #0
 801f3a0:	f7f7 fdac 	bl	8016efc <memp_malloc>
 801f3a4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	d007      	beq.n	801f3bc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f3ac:	2220      	movs	r2, #32
 801f3ae:	2100      	movs	r1, #0
 801f3b0:	6878      	ldr	r0, [r7, #4]
 801f3b2:	f000 fad3 	bl	801f95c <memset>
    pcb->ttl = UDP_TTL;
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	22ff      	movs	r2, #255	; 0xff
 801f3ba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801f3bc:	687b      	ldr	r3, [r7, #4]
}
 801f3be:	4618      	mov	r0, r3
 801f3c0:	3708      	adds	r7, #8
 801f3c2:	46bd      	mov	sp, r7
 801f3c4:	bd80      	pop	{r7, pc}

0801f3c6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801f3c6:	b580      	push	{r7, lr}
 801f3c8:	b084      	sub	sp, #16
 801f3ca:	af00      	add	r7, sp, #0
 801f3cc:	4603      	mov	r3, r0
 801f3ce:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801f3d0:	f7ff ffe2 	bl	801f398 <udp_new>
 801f3d4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801f3d6:	68fb      	ldr	r3, [r7, #12]
}
 801f3d8:	4618      	mov	r0, r3
 801f3da:	3710      	adds	r7, #16
 801f3dc:	46bd      	mov	sp, r7
 801f3de:	bd80      	pop	{r7, pc}

0801f3e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801f3e0:	b480      	push	{r7}
 801f3e2:	b085      	sub	sp, #20
 801f3e4:	af00      	add	r7, sp, #0
 801f3e6:	6078      	str	r0, [r7, #4]
 801f3e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d01e      	beq.n	801f42e <udp_netif_ip_addr_changed+0x4e>
 801f3f0:	687b      	ldr	r3, [r7, #4]
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d01a      	beq.n	801f42e <udp_netif_ip_addr_changed+0x4e>
 801f3f8:	683b      	ldr	r3, [r7, #0]
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d017      	beq.n	801f42e <udp_netif_ip_addr_changed+0x4e>
 801f3fe:	683b      	ldr	r3, [r7, #0]
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	2b00      	cmp	r3, #0
 801f404:	d013      	beq.n	801f42e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f406:	4b0d      	ldr	r3, [pc, #52]	; (801f43c <udp_netif_ip_addr_changed+0x5c>)
 801f408:	681b      	ldr	r3, [r3, #0]
 801f40a:	60fb      	str	r3, [r7, #12]
 801f40c:	e00c      	b.n	801f428 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801f40e:	68fb      	ldr	r3, [r7, #12]
 801f410:	681a      	ldr	r2, [r3, #0]
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	429a      	cmp	r2, r3
 801f418:	d103      	bne.n	801f422 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801f41a:	683b      	ldr	r3, [r7, #0]
 801f41c:	681a      	ldr	r2, [r3, #0]
 801f41e:	68fb      	ldr	r3, [r7, #12]
 801f420:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f422:	68fb      	ldr	r3, [r7, #12]
 801f424:	68db      	ldr	r3, [r3, #12]
 801f426:	60fb      	str	r3, [r7, #12]
 801f428:	68fb      	ldr	r3, [r7, #12]
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d1ef      	bne.n	801f40e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801f42e:	bf00      	nop
 801f430:	3714      	adds	r7, #20
 801f432:	46bd      	mov	sp, r7
 801f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f438:	4770      	bx	lr
 801f43a:	bf00      	nop
 801f43c:	24010084 	.word	0x24010084

0801f440 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 801f440:	b580      	push	{r7, lr}
 801f442:	b082      	sub	sp, #8
 801f444:	af00      	add	r7, sp, #0
 801f446:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 801f448:	4b04      	ldr	r3, [pc, #16]	; (801f45c <HAL_HSEM_FreeCallback+0x1c>)
 801f44a:	2201      	movs	r2, #1
 801f44c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 801f44e:	2002      	movs	r0, #2
 801f450:	f7e4 fcc6 	bl	8003de0 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 801f454:	bf00      	nop
 801f456:	3708      	adds	r7, #8
 801f458:	46bd      	mov	sp, r7
 801f45a:	bd80      	pop	{r7, pc}
 801f45c:	24010088 	.word	0x24010088

0801f460 <_ZNSaIcEC1Ev>:
 801f460:	4770      	bx	lr

0801f462 <_ZNSaIcED1Ev>:
 801f462:	4770      	bx	lr

0801f464 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801f464:	b10a      	cbz	r2, 801f46a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801f466:	f000 ba51 	b.w	801f90c <memcpy>
 801f46a:	4770      	bx	lr

0801f46c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801f46c:	b508      	push	{r3, lr}
 801f46e:	680b      	ldr	r3, [r1, #0]
 801f470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f474:	d302      	bcc.n	801f47c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801f476:	480d      	ldr	r0, [pc, #52]	; (801f4ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801f478:	f000 f8c6 	bl	801f608 <_ZSt20__throw_length_errorPKc>
 801f47c:	4293      	cmp	r3, r2
 801f47e:	d90b      	bls.n	801f498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801f480:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801f484:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801f488:	d206      	bcs.n	801f498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801f48a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801f48e:	bf2a      	itet	cs
 801f490:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 801f494:	6008      	strcc	r0, [r1, #0]
 801f496:	600b      	strcs	r3, [r1, #0]
 801f498:	6808      	ldr	r0, [r1, #0]
 801f49a:	3001      	adds	r0, #1
 801f49c:	d501      	bpl.n	801f4a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801f49e:	f000 f8ad 	bl	801f5fc <_ZSt17__throw_bad_allocv>
 801f4a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f4a6:	f000 b898 	b.w	801f5da <_Znwj>
 801f4aa:	bf00      	nop
 801f4ac:	08024bf0 	.word	0x08024bf0

0801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801f4b0:	f850 3b08 	ldr.w	r3, [r0], #8
 801f4b4:	4283      	cmp	r3, r0
 801f4b6:	d002      	beq.n	801f4be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801f4b8:	4618      	mov	r0, r3
 801f4ba:	f000 b88c 	b.w	801f5d6 <_ZdlPv>
 801f4be:	4770      	bx	lr

0801f4c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801f4c0:	2a01      	cmp	r2, #1
 801f4c2:	b410      	push	{r4}
 801f4c4:	d104      	bne.n	801f4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801f4c6:	780a      	ldrb	r2, [r1, #0]
 801f4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4cc:	7002      	strb	r2, [r0, #0]
 801f4ce:	4770      	bx	lr
 801f4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4d4:	f7ff bfc6 	b.w	801f464 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801f4d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801f4d8:	b508      	push	{r3, lr}
 801f4da:	1a52      	subs	r2, r2, r1
 801f4dc:	f7ff fff0 	bl	801f4c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f4e0:	bd08      	pop	{r3, pc}

0801f4e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 801f4e2:	4288      	cmp	r0, r1
 801f4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f4e6:	4604      	mov	r4, r0
 801f4e8:	460e      	mov	r6, r1
 801f4ea:	d01e      	beq.n	801f52a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 801f4ec:	4603      	mov	r3, r0
 801f4ee:	684d      	ldr	r5, [r1, #4]
 801f4f0:	f853 2b08 	ldr.w	r2, [r3], #8
 801f4f4:	429a      	cmp	r2, r3
 801f4f6:	bf14      	ite	ne
 801f4f8:	6882      	ldrne	r2, [r0, #8]
 801f4fa:	220f      	moveq	r2, #15
 801f4fc:	42aa      	cmp	r2, r5
 801f4fe:	d20a      	bcs.n	801f516 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 801f500:	a901      	add	r1, sp, #4
 801f502:	9501      	str	r5, [sp, #4]
 801f504:	f7ff ffb2 	bl	801f46c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801f508:	4607      	mov	r7, r0
 801f50a:	4620      	mov	r0, r4
 801f50c:	f7ff ffd0 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f510:	9b01      	ldr	r3, [sp, #4]
 801f512:	6027      	str	r7, [r4, #0]
 801f514:	60a3      	str	r3, [r4, #8]
 801f516:	b125      	cbz	r5, 801f522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 801f518:	6831      	ldr	r1, [r6, #0]
 801f51a:	6820      	ldr	r0, [r4, #0]
 801f51c:	462a      	mov	r2, r5
 801f51e:	f7ff ffcf 	bl	801f4c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f522:	6823      	ldr	r3, [r4, #0]
 801f524:	6065      	str	r5, [r4, #4]
 801f526:	2200      	movs	r2, #0
 801f528:	555a      	strb	r2, [r3, r5]
 801f52a:	b003      	add	sp, #12
 801f52c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f52e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801f52e:	f100 0208 	add.w	r2, r0, #8
 801f532:	6002      	str	r2, [r0, #0]
 801f534:	2200      	movs	r2, #0
 801f536:	6042      	str	r2, [r0, #4]
 801f538:	7202      	strb	r2, [r0, #8]
 801f53a:	4770      	bx	lr

0801f53c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801f53c:	b510      	push	{r4, lr}
 801f53e:	4604      	mov	r4, r0
 801f540:	f7ff ffb6 	bl	801f4b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f544:	4620      	mov	r0, r4
 801f546:	bd10      	pop	{r4, pc}

0801f548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 801f548:	b510      	push	{r4, lr}
 801f54a:	4604      	mov	r4, r0
 801f54c:	f7ff ffc9 	bl	801f4e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801f550:	4620      	mov	r0, r4
 801f552:	bd10      	pop	{r4, pc}

0801f554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801f554:	6802      	ldr	r2, [r0, #0]
 801f556:	2300      	movs	r3, #0
 801f558:	6043      	str	r3, [r0, #4]
 801f55a:	7013      	strb	r3, [r2, #0]
 801f55c:	4770      	bx	lr

0801f55e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801f55e:	6800      	ldr	r0, [r0, #0]
 801f560:	4770      	bx	lr
	...

0801f564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801f564:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f566:	4604      	mov	r4, r0
 801f568:	4616      	mov	r6, r2
 801f56a:	460d      	mov	r5, r1
 801f56c:	b919      	cbnz	r1, 801f576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801f56e:	b112      	cbz	r2, 801f576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801f570:	480d      	ldr	r0, [pc, #52]	; (801f5a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801f572:	f000 f846 	bl	801f602 <_ZSt19__throw_logic_errorPKc>
 801f576:	1b73      	subs	r3, r6, r5
 801f578:	2b0f      	cmp	r3, #15
 801f57a:	9301      	str	r3, [sp, #4]
 801f57c:	d907      	bls.n	801f58e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801f57e:	2200      	movs	r2, #0
 801f580:	a901      	add	r1, sp, #4
 801f582:	4620      	mov	r0, r4
 801f584:	f7ff ff72 	bl	801f46c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801f588:	9b01      	ldr	r3, [sp, #4]
 801f58a:	6020      	str	r0, [r4, #0]
 801f58c:	60a3      	str	r3, [r4, #8]
 801f58e:	4632      	mov	r2, r6
 801f590:	4629      	mov	r1, r5
 801f592:	6820      	ldr	r0, [r4, #0]
 801f594:	f7ff ffa0 	bl	801f4d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801f598:	9b01      	ldr	r3, [sp, #4]
 801f59a:	6822      	ldr	r2, [r4, #0]
 801f59c:	6063      	str	r3, [r4, #4]
 801f59e:	2100      	movs	r1, #0
 801f5a0:	54d1      	strb	r1, [r2, r3]
 801f5a2:	b002      	add	sp, #8
 801f5a4:	bd70      	pop	{r4, r5, r6, pc}
 801f5a6:	bf00      	nop
 801f5a8:	08024c08 	.word	0x08024c08

0801f5ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 801f5ac:	b538      	push	{r3, r4, r5, lr}
 801f5ae:	f100 0308 	add.w	r3, r0, #8
 801f5b2:	4604      	mov	r4, r0
 801f5b4:	6003      	str	r3, [r0, #0]
 801f5b6:	460d      	mov	r5, r1
 801f5b8:	b159      	cbz	r1, 801f5d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801f5ba:	4608      	mov	r0, r1
 801f5bc:	f7e0 fee0 	bl	8000380 <strlen>
 801f5c0:	182a      	adds	r2, r5, r0
 801f5c2:	4620      	mov	r0, r4
 801f5c4:	f04f 0300 	mov.w	r3, #0
 801f5c8:	4629      	mov	r1, r5
 801f5ca:	f7ff ffcb 	bl	801f564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 801f5ce:	4620      	mov	r0, r4
 801f5d0:	bd38      	pop	{r3, r4, r5, pc}
 801f5d2:	2201      	movs	r2, #1
 801f5d4:	e7f5      	b.n	801f5c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0801f5d6 <_ZdlPv>:
 801f5d6:	f000 b981 	b.w	801f8dc <free>

0801f5da <_Znwj>:
 801f5da:	2801      	cmp	r0, #1
 801f5dc:	bf38      	it	cc
 801f5de:	2001      	movcc	r0, #1
 801f5e0:	b510      	push	{r4, lr}
 801f5e2:	4604      	mov	r4, r0
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	f000 f971 	bl	801f8cc <malloc>
 801f5ea:	b930      	cbnz	r0, 801f5fa <_Znwj+0x20>
 801f5ec:	f000 f810 	bl	801f610 <_ZSt15get_new_handlerv>
 801f5f0:	b908      	cbnz	r0, 801f5f6 <_Znwj+0x1c>
 801f5f2:	f000 f815 	bl	801f620 <abort>
 801f5f6:	4780      	blx	r0
 801f5f8:	e7f4      	b.n	801f5e4 <_Znwj+0xa>
 801f5fa:	bd10      	pop	{r4, pc}

0801f5fc <_ZSt17__throw_bad_allocv>:
 801f5fc:	b508      	push	{r3, lr}
 801f5fe:	f000 f80f 	bl	801f620 <abort>

0801f602 <_ZSt19__throw_logic_errorPKc>:
 801f602:	b508      	push	{r3, lr}
 801f604:	f000 f80c 	bl	801f620 <abort>

0801f608 <_ZSt20__throw_length_errorPKc>:
 801f608:	b508      	push	{r3, lr}
 801f60a:	f000 f809 	bl	801f620 <abort>
	...

0801f610 <_ZSt15get_new_handlerv>:
 801f610:	4b02      	ldr	r3, [pc, #8]	; (801f61c <_ZSt15get_new_handlerv+0xc>)
 801f612:	6818      	ldr	r0, [r3, #0]
 801f614:	f3bf 8f5b 	dmb	ish
 801f618:	4770      	bx	lr
 801f61a:	bf00      	nop
 801f61c:	2401008c 	.word	0x2401008c

0801f620 <abort>:
 801f620:	b508      	push	{r3, lr}
 801f622:	2006      	movs	r0, #6
 801f624:	f000 fede 	bl	80203e4 <raise>
 801f628:	2001      	movs	r0, #1
 801f62a:	f7e2 f823 	bl	8001674 <_exit>
	...

0801f630 <__assert_func>:
 801f630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f632:	4614      	mov	r4, r2
 801f634:	461a      	mov	r2, r3
 801f636:	4b09      	ldr	r3, [pc, #36]	; (801f65c <__assert_func+0x2c>)
 801f638:	681b      	ldr	r3, [r3, #0]
 801f63a:	4605      	mov	r5, r0
 801f63c:	68d8      	ldr	r0, [r3, #12]
 801f63e:	b14c      	cbz	r4, 801f654 <__assert_func+0x24>
 801f640:	4b07      	ldr	r3, [pc, #28]	; (801f660 <__assert_func+0x30>)
 801f642:	9100      	str	r1, [sp, #0]
 801f644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f648:	4906      	ldr	r1, [pc, #24]	; (801f664 <__assert_func+0x34>)
 801f64a:	462b      	mov	r3, r5
 801f64c:	f000 f8e4 	bl	801f818 <fiprintf>
 801f650:	f7ff ffe6 	bl	801f620 <abort>
 801f654:	4b04      	ldr	r3, [pc, #16]	; (801f668 <__assert_func+0x38>)
 801f656:	461c      	mov	r4, r3
 801f658:	e7f3      	b.n	801f642 <__assert_func+0x12>
 801f65a:	bf00      	nop
 801f65c:	24000034 	.word	0x24000034
 801f660:	08024c32 	.word	0x08024c32
 801f664:	08024c3f 	.word	0x08024c3f
 801f668:	08024c6d 	.word	0x08024c6d

0801f66c <std>:
 801f66c:	2300      	movs	r3, #0
 801f66e:	b510      	push	{r4, lr}
 801f670:	4604      	mov	r4, r0
 801f672:	e9c0 3300 	strd	r3, r3, [r0]
 801f676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f67a:	6083      	str	r3, [r0, #8]
 801f67c:	8181      	strh	r1, [r0, #12]
 801f67e:	6643      	str	r3, [r0, #100]	; 0x64
 801f680:	81c2      	strh	r2, [r0, #14]
 801f682:	6183      	str	r3, [r0, #24]
 801f684:	4619      	mov	r1, r3
 801f686:	2208      	movs	r2, #8
 801f688:	305c      	adds	r0, #92	; 0x5c
 801f68a:	f000 f967 	bl	801f95c <memset>
 801f68e:	4b05      	ldr	r3, [pc, #20]	; (801f6a4 <std+0x38>)
 801f690:	6263      	str	r3, [r4, #36]	; 0x24
 801f692:	4b05      	ldr	r3, [pc, #20]	; (801f6a8 <std+0x3c>)
 801f694:	62a3      	str	r3, [r4, #40]	; 0x28
 801f696:	4b05      	ldr	r3, [pc, #20]	; (801f6ac <std+0x40>)
 801f698:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f69a:	4b05      	ldr	r3, [pc, #20]	; (801f6b0 <std+0x44>)
 801f69c:	6224      	str	r4, [r4, #32]
 801f69e:	6323      	str	r3, [r4, #48]	; 0x30
 801f6a0:	bd10      	pop	{r4, pc}
 801f6a2:	bf00      	nop
 801f6a4:	0802045d 	.word	0x0802045d
 801f6a8:	0802047f 	.word	0x0802047f
 801f6ac:	080204b7 	.word	0x080204b7
 801f6b0:	080204db 	.word	0x080204db

0801f6b4 <_cleanup_r>:
 801f6b4:	4901      	ldr	r1, [pc, #4]	; (801f6bc <_cleanup_r+0x8>)
 801f6b6:	f000 b8c1 	b.w	801f83c <_fwalk_reent>
 801f6ba:	bf00      	nop
 801f6bc:	080207f5 	.word	0x080207f5

0801f6c0 <__sfmoreglue>:
 801f6c0:	b570      	push	{r4, r5, r6, lr}
 801f6c2:	2268      	movs	r2, #104	; 0x68
 801f6c4:	1e4d      	subs	r5, r1, #1
 801f6c6:	4355      	muls	r5, r2
 801f6c8:	460e      	mov	r6, r1
 801f6ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f6ce:	f000 f9b9 	bl	801fa44 <_malloc_r>
 801f6d2:	4604      	mov	r4, r0
 801f6d4:	b140      	cbz	r0, 801f6e8 <__sfmoreglue+0x28>
 801f6d6:	2100      	movs	r1, #0
 801f6d8:	e9c0 1600 	strd	r1, r6, [r0]
 801f6dc:	300c      	adds	r0, #12
 801f6de:	60a0      	str	r0, [r4, #8]
 801f6e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f6e4:	f000 f93a 	bl	801f95c <memset>
 801f6e8:	4620      	mov	r0, r4
 801f6ea:	bd70      	pop	{r4, r5, r6, pc}

0801f6ec <__sfp_lock_acquire>:
 801f6ec:	4801      	ldr	r0, [pc, #4]	; (801f6f4 <__sfp_lock_acquire+0x8>)
 801f6ee:	f000 b8ea 	b.w	801f8c6 <__retarget_lock_acquire_recursive>
 801f6f2:	bf00      	nop
 801f6f4:	24010091 	.word	0x24010091

0801f6f8 <__sfp_lock_release>:
 801f6f8:	4801      	ldr	r0, [pc, #4]	; (801f700 <__sfp_lock_release+0x8>)
 801f6fa:	f000 b8e5 	b.w	801f8c8 <__retarget_lock_release_recursive>
 801f6fe:	bf00      	nop
 801f700:	24010091 	.word	0x24010091

0801f704 <__sinit_lock_acquire>:
 801f704:	4801      	ldr	r0, [pc, #4]	; (801f70c <__sinit_lock_acquire+0x8>)
 801f706:	f000 b8de 	b.w	801f8c6 <__retarget_lock_acquire_recursive>
 801f70a:	bf00      	nop
 801f70c:	24010092 	.word	0x24010092

0801f710 <__sinit_lock_release>:
 801f710:	4801      	ldr	r0, [pc, #4]	; (801f718 <__sinit_lock_release+0x8>)
 801f712:	f000 b8d9 	b.w	801f8c8 <__retarget_lock_release_recursive>
 801f716:	bf00      	nop
 801f718:	24010092 	.word	0x24010092

0801f71c <__sinit>:
 801f71c:	b510      	push	{r4, lr}
 801f71e:	4604      	mov	r4, r0
 801f720:	f7ff fff0 	bl	801f704 <__sinit_lock_acquire>
 801f724:	69a3      	ldr	r3, [r4, #24]
 801f726:	b11b      	cbz	r3, 801f730 <__sinit+0x14>
 801f728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f72c:	f7ff bff0 	b.w	801f710 <__sinit_lock_release>
 801f730:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f734:	6523      	str	r3, [r4, #80]	; 0x50
 801f736:	4b13      	ldr	r3, [pc, #76]	; (801f784 <__sinit+0x68>)
 801f738:	4a13      	ldr	r2, [pc, #76]	; (801f788 <__sinit+0x6c>)
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	62a2      	str	r2, [r4, #40]	; 0x28
 801f73e:	42a3      	cmp	r3, r4
 801f740:	bf04      	itt	eq
 801f742:	2301      	moveq	r3, #1
 801f744:	61a3      	streq	r3, [r4, #24]
 801f746:	4620      	mov	r0, r4
 801f748:	f000 f820 	bl	801f78c <__sfp>
 801f74c:	6060      	str	r0, [r4, #4]
 801f74e:	4620      	mov	r0, r4
 801f750:	f000 f81c 	bl	801f78c <__sfp>
 801f754:	60a0      	str	r0, [r4, #8]
 801f756:	4620      	mov	r0, r4
 801f758:	f000 f818 	bl	801f78c <__sfp>
 801f75c:	2200      	movs	r2, #0
 801f75e:	60e0      	str	r0, [r4, #12]
 801f760:	2104      	movs	r1, #4
 801f762:	6860      	ldr	r0, [r4, #4]
 801f764:	f7ff ff82 	bl	801f66c <std>
 801f768:	68a0      	ldr	r0, [r4, #8]
 801f76a:	2201      	movs	r2, #1
 801f76c:	2109      	movs	r1, #9
 801f76e:	f7ff ff7d 	bl	801f66c <std>
 801f772:	68e0      	ldr	r0, [r4, #12]
 801f774:	2202      	movs	r2, #2
 801f776:	2112      	movs	r1, #18
 801f778:	f7ff ff78 	bl	801f66c <std>
 801f77c:	2301      	movs	r3, #1
 801f77e:	61a3      	str	r3, [r4, #24]
 801f780:	e7d2      	b.n	801f728 <__sinit+0xc>
 801f782:	bf00      	nop
 801f784:	08024cd0 	.word	0x08024cd0
 801f788:	0801f6b5 	.word	0x0801f6b5

0801f78c <__sfp>:
 801f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f78e:	4607      	mov	r7, r0
 801f790:	f7ff ffac 	bl	801f6ec <__sfp_lock_acquire>
 801f794:	4b1e      	ldr	r3, [pc, #120]	; (801f810 <__sfp+0x84>)
 801f796:	681e      	ldr	r6, [r3, #0]
 801f798:	69b3      	ldr	r3, [r6, #24]
 801f79a:	b913      	cbnz	r3, 801f7a2 <__sfp+0x16>
 801f79c:	4630      	mov	r0, r6
 801f79e:	f7ff ffbd 	bl	801f71c <__sinit>
 801f7a2:	3648      	adds	r6, #72	; 0x48
 801f7a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f7a8:	3b01      	subs	r3, #1
 801f7aa:	d503      	bpl.n	801f7b4 <__sfp+0x28>
 801f7ac:	6833      	ldr	r3, [r6, #0]
 801f7ae:	b30b      	cbz	r3, 801f7f4 <__sfp+0x68>
 801f7b0:	6836      	ldr	r6, [r6, #0]
 801f7b2:	e7f7      	b.n	801f7a4 <__sfp+0x18>
 801f7b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f7b8:	b9d5      	cbnz	r5, 801f7f0 <__sfp+0x64>
 801f7ba:	4b16      	ldr	r3, [pc, #88]	; (801f814 <__sfp+0x88>)
 801f7bc:	60e3      	str	r3, [r4, #12]
 801f7be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f7c2:	6665      	str	r5, [r4, #100]	; 0x64
 801f7c4:	f000 f87e 	bl	801f8c4 <__retarget_lock_init_recursive>
 801f7c8:	f7ff ff96 	bl	801f6f8 <__sfp_lock_release>
 801f7cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f7d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f7d4:	6025      	str	r5, [r4, #0]
 801f7d6:	61a5      	str	r5, [r4, #24]
 801f7d8:	2208      	movs	r2, #8
 801f7da:	4629      	mov	r1, r5
 801f7dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f7e0:	f000 f8bc 	bl	801f95c <memset>
 801f7e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f7e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f7ec:	4620      	mov	r0, r4
 801f7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7f0:	3468      	adds	r4, #104	; 0x68
 801f7f2:	e7d9      	b.n	801f7a8 <__sfp+0x1c>
 801f7f4:	2104      	movs	r1, #4
 801f7f6:	4638      	mov	r0, r7
 801f7f8:	f7ff ff62 	bl	801f6c0 <__sfmoreglue>
 801f7fc:	4604      	mov	r4, r0
 801f7fe:	6030      	str	r0, [r6, #0]
 801f800:	2800      	cmp	r0, #0
 801f802:	d1d5      	bne.n	801f7b0 <__sfp+0x24>
 801f804:	f7ff ff78 	bl	801f6f8 <__sfp_lock_release>
 801f808:	230c      	movs	r3, #12
 801f80a:	603b      	str	r3, [r7, #0]
 801f80c:	e7ee      	b.n	801f7ec <__sfp+0x60>
 801f80e:	bf00      	nop
 801f810:	08024cd0 	.word	0x08024cd0
 801f814:	ffff0001 	.word	0xffff0001

0801f818 <fiprintf>:
 801f818:	b40e      	push	{r1, r2, r3}
 801f81a:	b503      	push	{r0, r1, lr}
 801f81c:	4601      	mov	r1, r0
 801f81e:	ab03      	add	r3, sp, #12
 801f820:	4805      	ldr	r0, [pc, #20]	; (801f838 <fiprintf+0x20>)
 801f822:	f853 2b04 	ldr.w	r2, [r3], #4
 801f826:	6800      	ldr	r0, [r0, #0]
 801f828:	9301      	str	r3, [sp, #4]
 801f82a:	f000 f9a9 	bl	801fb80 <_vfiprintf_r>
 801f82e:	b002      	add	sp, #8
 801f830:	f85d eb04 	ldr.w	lr, [sp], #4
 801f834:	b003      	add	sp, #12
 801f836:	4770      	bx	lr
 801f838:	24000034 	.word	0x24000034

0801f83c <_fwalk_reent>:
 801f83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f840:	4606      	mov	r6, r0
 801f842:	4688      	mov	r8, r1
 801f844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f848:	2700      	movs	r7, #0
 801f84a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f84e:	f1b9 0901 	subs.w	r9, r9, #1
 801f852:	d505      	bpl.n	801f860 <_fwalk_reent+0x24>
 801f854:	6824      	ldr	r4, [r4, #0]
 801f856:	2c00      	cmp	r4, #0
 801f858:	d1f7      	bne.n	801f84a <_fwalk_reent+0xe>
 801f85a:	4638      	mov	r0, r7
 801f85c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f860:	89ab      	ldrh	r3, [r5, #12]
 801f862:	2b01      	cmp	r3, #1
 801f864:	d907      	bls.n	801f876 <_fwalk_reent+0x3a>
 801f866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f86a:	3301      	adds	r3, #1
 801f86c:	d003      	beq.n	801f876 <_fwalk_reent+0x3a>
 801f86e:	4629      	mov	r1, r5
 801f870:	4630      	mov	r0, r6
 801f872:	47c0      	blx	r8
 801f874:	4307      	orrs	r7, r0
 801f876:	3568      	adds	r5, #104	; 0x68
 801f878:	e7e9      	b.n	801f84e <_fwalk_reent+0x12>
	...

0801f87c <__libc_init_array>:
 801f87c:	b570      	push	{r4, r5, r6, lr}
 801f87e:	4d0d      	ldr	r5, [pc, #52]	; (801f8b4 <__libc_init_array+0x38>)
 801f880:	4c0d      	ldr	r4, [pc, #52]	; (801f8b8 <__libc_init_array+0x3c>)
 801f882:	1b64      	subs	r4, r4, r5
 801f884:	10a4      	asrs	r4, r4, #2
 801f886:	2600      	movs	r6, #0
 801f888:	42a6      	cmp	r6, r4
 801f88a:	d109      	bne.n	801f8a0 <__libc_init_array+0x24>
 801f88c:	4d0b      	ldr	r5, [pc, #44]	; (801f8bc <__libc_init_array+0x40>)
 801f88e:	4c0c      	ldr	r4, [pc, #48]	; (801f8c0 <__libc_init_array+0x44>)
 801f890:	f001 fa36 	bl	8020d00 <_init>
 801f894:	1b64      	subs	r4, r4, r5
 801f896:	10a4      	asrs	r4, r4, #2
 801f898:	2600      	movs	r6, #0
 801f89a:	42a6      	cmp	r6, r4
 801f89c:	d105      	bne.n	801f8aa <__libc_init_array+0x2e>
 801f89e:	bd70      	pop	{r4, r5, r6, pc}
 801f8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f8a4:	4798      	blx	r3
 801f8a6:	3601      	adds	r6, #1
 801f8a8:	e7ee      	b.n	801f888 <__libc_init_array+0xc>
 801f8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 801f8ae:	4798      	blx	r3
 801f8b0:	3601      	adds	r6, #1
 801f8b2:	e7f2      	b.n	801f89a <__libc_init_array+0x1e>
 801f8b4:	08024d7c 	.word	0x08024d7c
 801f8b8:	08024d7c 	.word	0x08024d7c
 801f8bc:	08024d7c 	.word	0x08024d7c
 801f8c0:	08024d84 	.word	0x08024d84

0801f8c4 <__retarget_lock_init_recursive>:
 801f8c4:	4770      	bx	lr

0801f8c6 <__retarget_lock_acquire_recursive>:
 801f8c6:	4770      	bx	lr

0801f8c8 <__retarget_lock_release_recursive>:
 801f8c8:	4770      	bx	lr
	...

0801f8cc <malloc>:
 801f8cc:	4b02      	ldr	r3, [pc, #8]	; (801f8d8 <malloc+0xc>)
 801f8ce:	4601      	mov	r1, r0
 801f8d0:	6818      	ldr	r0, [r3, #0]
 801f8d2:	f000 b8b7 	b.w	801fa44 <_malloc_r>
 801f8d6:	bf00      	nop
 801f8d8:	24000034 	.word	0x24000034

0801f8dc <free>:
 801f8dc:	4b02      	ldr	r3, [pc, #8]	; (801f8e8 <free+0xc>)
 801f8de:	4601      	mov	r1, r0
 801f8e0:	6818      	ldr	r0, [r3, #0]
 801f8e2:	f000 b843 	b.w	801f96c <_free_r>
 801f8e6:	bf00      	nop
 801f8e8:	24000034 	.word	0x24000034

0801f8ec <memcmp>:
 801f8ec:	b510      	push	{r4, lr}
 801f8ee:	3901      	subs	r1, #1
 801f8f0:	4402      	add	r2, r0
 801f8f2:	4290      	cmp	r0, r2
 801f8f4:	d101      	bne.n	801f8fa <memcmp+0xe>
 801f8f6:	2000      	movs	r0, #0
 801f8f8:	e005      	b.n	801f906 <memcmp+0x1a>
 801f8fa:	7803      	ldrb	r3, [r0, #0]
 801f8fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f900:	42a3      	cmp	r3, r4
 801f902:	d001      	beq.n	801f908 <memcmp+0x1c>
 801f904:	1b18      	subs	r0, r3, r4
 801f906:	bd10      	pop	{r4, pc}
 801f908:	3001      	adds	r0, #1
 801f90a:	e7f2      	b.n	801f8f2 <memcmp+0x6>

0801f90c <memcpy>:
 801f90c:	440a      	add	r2, r1
 801f90e:	4291      	cmp	r1, r2
 801f910:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801f914:	d100      	bne.n	801f918 <memcpy+0xc>
 801f916:	4770      	bx	lr
 801f918:	b510      	push	{r4, lr}
 801f91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f91e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f922:	4291      	cmp	r1, r2
 801f924:	d1f9      	bne.n	801f91a <memcpy+0xe>
 801f926:	bd10      	pop	{r4, pc}

0801f928 <memmove>:
 801f928:	4288      	cmp	r0, r1
 801f92a:	b510      	push	{r4, lr}
 801f92c:	eb01 0402 	add.w	r4, r1, r2
 801f930:	d902      	bls.n	801f938 <memmove+0x10>
 801f932:	4284      	cmp	r4, r0
 801f934:	4623      	mov	r3, r4
 801f936:	d807      	bhi.n	801f948 <memmove+0x20>
 801f938:	1e43      	subs	r3, r0, #1
 801f93a:	42a1      	cmp	r1, r4
 801f93c:	d008      	beq.n	801f950 <memmove+0x28>
 801f93e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f942:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f946:	e7f8      	b.n	801f93a <memmove+0x12>
 801f948:	4402      	add	r2, r0
 801f94a:	4601      	mov	r1, r0
 801f94c:	428a      	cmp	r2, r1
 801f94e:	d100      	bne.n	801f952 <memmove+0x2a>
 801f950:	bd10      	pop	{r4, pc}
 801f952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f95a:	e7f7      	b.n	801f94c <memmove+0x24>

0801f95c <memset>:
 801f95c:	4402      	add	r2, r0
 801f95e:	4603      	mov	r3, r0
 801f960:	4293      	cmp	r3, r2
 801f962:	d100      	bne.n	801f966 <memset+0xa>
 801f964:	4770      	bx	lr
 801f966:	f803 1b01 	strb.w	r1, [r3], #1
 801f96a:	e7f9      	b.n	801f960 <memset+0x4>

0801f96c <_free_r>:
 801f96c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f96e:	2900      	cmp	r1, #0
 801f970:	d044      	beq.n	801f9fc <_free_r+0x90>
 801f972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f976:	9001      	str	r0, [sp, #4]
 801f978:	2b00      	cmp	r3, #0
 801f97a:	f1a1 0404 	sub.w	r4, r1, #4
 801f97e:	bfb8      	it	lt
 801f980:	18e4      	addlt	r4, r4, r3
 801f982:	f000 ffeb 	bl	802095c <__malloc_lock>
 801f986:	4a1e      	ldr	r2, [pc, #120]	; (801fa00 <_free_r+0x94>)
 801f988:	9801      	ldr	r0, [sp, #4]
 801f98a:	6813      	ldr	r3, [r2, #0]
 801f98c:	b933      	cbnz	r3, 801f99c <_free_r+0x30>
 801f98e:	6063      	str	r3, [r4, #4]
 801f990:	6014      	str	r4, [r2, #0]
 801f992:	b003      	add	sp, #12
 801f994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f998:	f000 bfe6 	b.w	8020968 <__malloc_unlock>
 801f99c:	42a3      	cmp	r3, r4
 801f99e:	d908      	bls.n	801f9b2 <_free_r+0x46>
 801f9a0:	6825      	ldr	r5, [r4, #0]
 801f9a2:	1961      	adds	r1, r4, r5
 801f9a4:	428b      	cmp	r3, r1
 801f9a6:	bf01      	itttt	eq
 801f9a8:	6819      	ldreq	r1, [r3, #0]
 801f9aa:	685b      	ldreq	r3, [r3, #4]
 801f9ac:	1949      	addeq	r1, r1, r5
 801f9ae:	6021      	streq	r1, [r4, #0]
 801f9b0:	e7ed      	b.n	801f98e <_free_r+0x22>
 801f9b2:	461a      	mov	r2, r3
 801f9b4:	685b      	ldr	r3, [r3, #4]
 801f9b6:	b10b      	cbz	r3, 801f9bc <_free_r+0x50>
 801f9b8:	42a3      	cmp	r3, r4
 801f9ba:	d9fa      	bls.n	801f9b2 <_free_r+0x46>
 801f9bc:	6811      	ldr	r1, [r2, #0]
 801f9be:	1855      	adds	r5, r2, r1
 801f9c0:	42a5      	cmp	r5, r4
 801f9c2:	d10b      	bne.n	801f9dc <_free_r+0x70>
 801f9c4:	6824      	ldr	r4, [r4, #0]
 801f9c6:	4421      	add	r1, r4
 801f9c8:	1854      	adds	r4, r2, r1
 801f9ca:	42a3      	cmp	r3, r4
 801f9cc:	6011      	str	r1, [r2, #0]
 801f9ce:	d1e0      	bne.n	801f992 <_free_r+0x26>
 801f9d0:	681c      	ldr	r4, [r3, #0]
 801f9d2:	685b      	ldr	r3, [r3, #4]
 801f9d4:	6053      	str	r3, [r2, #4]
 801f9d6:	4421      	add	r1, r4
 801f9d8:	6011      	str	r1, [r2, #0]
 801f9da:	e7da      	b.n	801f992 <_free_r+0x26>
 801f9dc:	d902      	bls.n	801f9e4 <_free_r+0x78>
 801f9de:	230c      	movs	r3, #12
 801f9e0:	6003      	str	r3, [r0, #0]
 801f9e2:	e7d6      	b.n	801f992 <_free_r+0x26>
 801f9e4:	6825      	ldr	r5, [r4, #0]
 801f9e6:	1961      	adds	r1, r4, r5
 801f9e8:	428b      	cmp	r3, r1
 801f9ea:	bf04      	itt	eq
 801f9ec:	6819      	ldreq	r1, [r3, #0]
 801f9ee:	685b      	ldreq	r3, [r3, #4]
 801f9f0:	6063      	str	r3, [r4, #4]
 801f9f2:	bf04      	itt	eq
 801f9f4:	1949      	addeq	r1, r1, r5
 801f9f6:	6021      	streq	r1, [r4, #0]
 801f9f8:	6054      	str	r4, [r2, #4]
 801f9fa:	e7ca      	b.n	801f992 <_free_r+0x26>
 801f9fc:	b003      	add	sp, #12
 801f9fe:	bd30      	pop	{r4, r5, pc}
 801fa00:	24010094 	.word	0x24010094

0801fa04 <sbrk_aligned>:
 801fa04:	b570      	push	{r4, r5, r6, lr}
 801fa06:	4e0e      	ldr	r6, [pc, #56]	; (801fa40 <sbrk_aligned+0x3c>)
 801fa08:	460c      	mov	r4, r1
 801fa0a:	6831      	ldr	r1, [r6, #0]
 801fa0c:	4605      	mov	r5, r0
 801fa0e:	b911      	cbnz	r1, 801fa16 <sbrk_aligned+0x12>
 801fa10:	f000 fcb0 	bl	8020374 <_sbrk_r>
 801fa14:	6030      	str	r0, [r6, #0]
 801fa16:	4621      	mov	r1, r4
 801fa18:	4628      	mov	r0, r5
 801fa1a:	f000 fcab 	bl	8020374 <_sbrk_r>
 801fa1e:	1c43      	adds	r3, r0, #1
 801fa20:	d00a      	beq.n	801fa38 <sbrk_aligned+0x34>
 801fa22:	1cc4      	adds	r4, r0, #3
 801fa24:	f024 0403 	bic.w	r4, r4, #3
 801fa28:	42a0      	cmp	r0, r4
 801fa2a:	d007      	beq.n	801fa3c <sbrk_aligned+0x38>
 801fa2c:	1a21      	subs	r1, r4, r0
 801fa2e:	4628      	mov	r0, r5
 801fa30:	f000 fca0 	bl	8020374 <_sbrk_r>
 801fa34:	3001      	adds	r0, #1
 801fa36:	d101      	bne.n	801fa3c <sbrk_aligned+0x38>
 801fa38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801fa3c:	4620      	mov	r0, r4
 801fa3e:	bd70      	pop	{r4, r5, r6, pc}
 801fa40:	24010098 	.word	0x24010098

0801fa44 <_malloc_r>:
 801fa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa48:	1ccd      	adds	r5, r1, #3
 801fa4a:	f025 0503 	bic.w	r5, r5, #3
 801fa4e:	3508      	adds	r5, #8
 801fa50:	2d0c      	cmp	r5, #12
 801fa52:	bf38      	it	cc
 801fa54:	250c      	movcc	r5, #12
 801fa56:	2d00      	cmp	r5, #0
 801fa58:	4607      	mov	r7, r0
 801fa5a:	db01      	blt.n	801fa60 <_malloc_r+0x1c>
 801fa5c:	42a9      	cmp	r1, r5
 801fa5e:	d905      	bls.n	801fa6c <_malloc_r+0x28>
 801fa60:	230c      	movs	r3, #12
 801fa62:	603b      	str	r3, [r7, #0]
 801fa64:	2600      	movs	r6, #0
 801fa66:	4630      	mov	r0, r6
 801fa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa6c:	4e2e      	ldr	r6, [pc, #184]	; (801fb28 <_malloc_r+0xe4>)
 801fa6e:	f000 ff75 	bl	802095c <__malloc_lock>
 801fa72:	6833      	ldr	r3, [r6, #0]
 801fa74:	461c      	mov	r4, r3
 801fa76:	bb34      	cbnz	r4, 801fac6 <_malloc_r+0x82>
 801fa78:	4629      	mov	r1, r5
 801fa7a:	4638      	mov	r0, r7
 801fa7c:	f7ff ffc2 	bl	801fa04 <sbrk_aligned>
 801fa80:	1c43      	adds	r3, r0, #1
 801fa82:	4604      	mov	r4, r0
 801fa84:	d14d      	bne.n	801fb22 <_malloc_r+0xde>
 801fa86:	6834      	ldr	r4, [r6, #0]
 801fa88:	4626      	mov	r6, r4
 801fa8a:	2e00      	cmp	r6, #0
 801fa8c:	d140      	bne.n	801fb10 <_malloc_r+0xcc>
 801fa8e:	6823      	ldr	r3, [r4, #0]
 801fa90:	4631      	mov	r1, r6
 801fa92:	4638      	mov	r0, r7
 801fa94:	eb04 0803 	add.w	r8, r4, r3
 801fa98:	f000 fc6c 	bl	8020374 <_sbrk_r>
 801fa9c:	4580      	cmp	r8, r0
 801fa9e:	d13a      	bne.n	801fb16 <_malloc_r+0xd2>
 801faa0:	6821      	ldr	r1, [r4, #0]
 801faa2:	3503      	adds	r5, #3
 801faa4:	1a6d      	subs	r5, r5, r1
 801faa6:	f025 0503 	bic.w	r5, r5, #3
 801faaa:	3508      	adds	r5, #8
 801faac:	2d0c      	cmp	r5, #12
 801faae:	bf38      	it	cc
 801fab0:	250c      	movcc	r5, #12
 801fab2:	4629      	mov	r1, r5
 801fab4:	4638      	mov	r0, r7
 801fab6:	f7ff ffa5 	bl	801fa04 <sbrk_aligned>
 801faba:	3001      	adds	r0, #1
 801fabc:	d02b      	beq.n	801fb16 <_malloc_r+0xd2>
 801fabe:	6823      	ldr	r3, [r4, #0]
 801fac0:	442b      	add	r3, r5
 801fac2:	6023      	str	r3, [r4, #0]
 801fac4:	e00e      	b.n	801fae4 <_malloc_r+0xa0>
 801fac6:	6822      	ldr	r2, [r4, #0]
 801fac8:	1b52      	subs	r2, r2, r5
 801faca:	d41e      	bmi.n	801fb0a <_malloc_r+0xc6>
 801facc:	2a0b      	cmp	r2, #11
 801face:	d916      	bls.n	801fafe <_malloc_r+0xba>
 801fad0:	1961      	adds	r1, r4, r5
 801fad2:	42a3      	cmp	r3, r4
 801fad4:	6025      	str	r5, [r4, #0]
 801fad6:	bf18      	it	ne
 801fad8:	6059      	strne	r1, [r3, #4]
 801fada:	6863      	ldr	r3, [r4, #4]
 801fadc:	bf08      	it	eq
 801fade:	6031      	streq	r1, [r6, #0]
 801fae0:	5162      	str	r2, [r4, r5]
 801fae2:	604b      	str	r3, [r1, #4]
 801fae4:	4638      	mov	r0, r7
 801fae6:	f104 060b 	add.w	r6, r4, #11
 801faea:	f000 ff3d 	bl	8020968 <__malloc_unlock>
 801faee:	f026 0607 	bic.w	r6, r6, #7
 801faf2:	1d23      	adds	r3, r4, #4
 801faf4:	1af2      	subs	r2, r6, r3
 801faf6:	d0b6      	beq.n	801fa66 <_malloc_r+0x22>
 801faf8:	1b9b      	subs	r3, r3, r6
 801fafa:	50a3      	str	r3, [r4, r2]
 801fafc:	e7b3      	b.n	801fa66 <_malloc_r+0x22>
 801fafe:	6862      	ldr	r2, [r4, #4]
 801fb00:	42a3      	cmp	r3, r4
 801fb02:	bf0c      	ite	eq
 801fb04:	6032      	streq	r2, [r6, #0]
 801fb06:	605a      	strne	r2, [r3, #4]
 801fb08:	e7ec      	b.n	801fae4 <_malloc_r+0xa0>
 801fb0a:	4623      	mov	r3, r4
 801fb0c:	6864      	ldr	r4, [r4, #4]
 801fb0e:	e7b2      	b.n	801fa76 <_malloc_r+0x32>
 801fb10:	4634      	mov	r4, r6
 801fb12:	6876      	ldr	r6, [r6, #4]
 801fb14:	e7b9      	b.n	801fa8a <_malloc_r+0x46>
 801fb16:	230c      	movs	r3, #12
 801fb18:	603b      	str	r3, [r7, #0]
 801fb1a:	4638      	mov	r0, r7
 801fb1c:	f000 ff24 	bl	8020968 <__malloc_unlock>
 801fb20:	e7a1      	b.n	801fa66 <_malloc_r+0x22>
 801fb22:	6025      	str	r5, [r4, #0]
 801fb24:	e7de      	b.n	801fae4 <_malloc_r+0xa0>
 801fb26:	bf00      	nop
 801fb28:	24010094 	.word	0x24010094

0801fb2c <__sfputc_r>:
 801fb2c:	6893      	ldr	r3, [r2, #8]
 801fb2e:	3b01      	subs	r3, #1
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	b410      	push	{r4}
 801fb34:	6093      	str	r3, [r2, #8]
 801fb36:	da08      	bge.n	801fb4a <__sfputc_r+0x1e>
 801fb38:	6994      	ldr	r4, [r2, #24]
 801fb3a:	42a3      	cmp	r3, r4
 801fb3c:	db01      	blt.n	801fb42 <__sfputc_r+0x16>
 801fb3e:	290a      	cmp	r1, #10
 801fb40:	d103      	bne.n	801fb4a <__sfputc_r+0x1e>
 801fb42:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb46:	f000 bced 	b.w	8020524 <__swbuf_r>
 801fb4a:	6813      	ldr	r3, [r2, #0]
 801fb4c:	1c58      	adds	r0, r3, #1
 801fb4e:	6010      	str	r0, [r2, #0]
 801fb50:	7019      	strb	r1, [r3, #0]
 801fb52:	4608      	mov	r0, r1
 801fb54:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb58:	4770      	bx	lr

0801fb5a <__sfputs_r>:
 801fb5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb5c:	4606      	mov	r6, r0
 801fb5e:	460f      	mov	r7, r1
 801fb60:	4614      	mov	r4, r2
 801fb62:	18d5      	adds	r5, r2, r3
 801fb64:	42ac      	cmp	r4, r5
 801fb66:	d101      	bne.n	801fb6c <__sfputs_r+0x12>
 801fb68:	2000      	movs	r0, #0
 801fb6a:	e007      	b.n	801fb7c <__sfputs_r+0x22>
 801fb6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb70:	463a      	mov	r2, r7
 801fb72:	4630      	mov	r0, r6
 801fb74:	f7ff ffda 	bl	801fb2c <__sfputc_r>
 801fb78:	1c43      	adds	r3, r0, #1
 801fb7a:	d1f3      	bne.n	801fb64 <__sfputs_r+0xa>
 801fb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fb80 <_vfiprintf_r>:
 801fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb84:	460d      	mov	r5, r1
 801fb86:	b09d      	sub	sp, #116	; 0x74
 801fb88:	4614      	mov	r4, r2
 801fb8a:	4698      	mov	r8, r3
 801fb8c:	4606      	mov	r6, r0
 801fb8e:	b118      	cbz	r0, 801fb98 <_vfiprintf_r+0x18>
 801fb90:	6983      	ldr	r3, [r0, #24]
 801fb92:	b90b      	cbnz	r3, 801fb98 <_vfiprintf_r+0x18>
 801fb94:	f7ff fdc2 	bl	801f71c <__sinit>
 801fb98:	4b89      	ldr	r3, [pc, #548]	; (801fdc0 <_vfiprintf_r+0x240>)
 801fb9a:	429d      	cmp	r5, r3
 801fb9c:	d11b      	bne.n	801fbd6 <_vfiprintf_r+0x56>
 801fb9e:	6875      	ldr	r5, [r6, #4]
 801fba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fba2:	07d9      	lsls	r1, r3, #31
 801fba4:	d405      	bmi.n	801fbb2 <_vfiprintf_r+0x32>
 801fba6:	89ab      	ldrh	r3, [r5, #12]
 801fba8:	059a      	lsls	r2, r3, #22
 801fbaa:	d402      	bmi.n	801fbb2 <_vfiprintf_r+0x32>
 801fbac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fbae:	f7ff fe8a 	bl	801f8c6 <__retarget_lock_acquire_recursive>
 801fbb2:	89ab      	ldrh	r3, [r5, #12]
 801fbb4:	071b      	lsls	r3, r3, #28
 801fbb6:	d501      	bpl.n	801fbbc <_vfiprintf_r+0x3c>
 801fbb8:	692b      	ldr	r3, [r5, #16]
 801fbba:	b9eb      	cbnz	r3, 801fbf8 <_vfiprintf_r+0x78>
 801fbbc:	4629      	mov	r1, r5
 801fbbe:	4630      	mov	r0, r6
 801fbc0:	f000 fd14 	bl	80205ec <__swsetup_r>
 801fbc4:	b1c0      	cbz	r0, 801fbf8 <_vfiprintf_r+0x78>
 801fbc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fbc8:	07dc      	lsls	r4, r3, #31
 801fbca:	d50e      	bpl.n	801fbea <_vfiprintf_r+0x6a>
 801fbcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fbd0:	b01d      	add	sp, #116	; 0x74
 801fbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbd6:	4b7b      	ldr	r3, [pc, #492]	; (801fdc4 <_vfiprintf_r+0x244>)
 801fbd8:	429d      	cmp	r5, r3
 801fbda:	d101      	bne.n	801fbe0 <_vfiprintf_r+0x60>
 801fbdc:	68b5      	ldr	r5, [r6, #8]
 801fbde:	e7df      	b.n	801fba0 <_vfiprintf_r+0x20>
 801fbe0:	4b79      	ldr	r3, [pc, #484]	; (801fdc8 <_vfiprintf_r+0x248>)
 801fbe2:	429d      	cmp	r5, r3
 801fbe4:	bf08      	it	eq
 801fbe6:	68f5      	ldreq	r5, [r6, #12]
 801fbe8:	e7da      	b.n	801fba0 <_vfiprintf_r+0x20>
 801fbea:	89ab      	ldrh	r3, [r5, #12]
 801fbec:	0598      	lsls	r0, r3, #22
 801fbee:	d4ed      	bmi.n	801fbcc <_vfiprintf_r+0x4c>
 801fbf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fbf2:	f7ff fe69 	bl	801f8c8 <__retarget_lock_release_recursive>
 801fbf6:	e7e9      	b.n	801fbcc <_vfiprintf_r+0x4c>
 801fbf8:	2300      	movs	r3, #0
 801fbfa:	9309      	str	r3, [sp, #36]	; 0x24
 801fbfc:	2320      	movs	r3, #32
 801fbfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fc02:	f8cd 800c 	str.w	r8, [sp, #12]
 801fc06:	2330      	movs	r3, #48	; 0x30
 801fc08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fdcc <_vfiprintf_r+0x24c>
 801fc0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fc10:	f04f 0901 	mov.w	r9, #1
 801fc14:	4623      	mov	r3, r4
 801fc16:	469a      	mov	sl, r3
 801fc18:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fc1c:	b10a      	cbz	r2, 801fc22 <_vfiprintf_r+0xa2>
 801fc1e:	2a25      	cmp	r2, #37	; 0x25
 801fc20:	d1f9      	bne.n	801fc16 <_vfiprintf_r+0x96>
 801fc22:	ebba 0b04 	subs.w	fp, sl, r4
 801fc26:	d00b      	beq.n	801fc40 <_vfiprintf_r+0xc0>
 801fc28:	465b      	mov	r3, fp
 801fc2a:	4622      	mov	r2, r4
 801fc2c:	4629      	mov	r1, r5
 801fc2e:	4630      	mov	r0, r6
 801fc30:	f7ff ff93 	bl	801fb5a <__sfputs_r>
 801fc34:	3001      	adds	r0, #1
 801fc36:	f000 80aa 	beq.w	801fd8e <_vfiprintf_r+0x20e>
 801fc3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fc3c:	445a      	add	r2, fp
 801fc3e:	9209      	str	r2, [sp, #36]	; 0x24
 801fc40:	f89a 3000 	ldrb.w	r3, [sl]
 801fc44:	2b00      	cmp	r3, #0
 801fc46:	f000 80a2 	beq.w	801fd8e <_vfiprintf_r+0x20e>
 801fc4a:	2300      	movs	r3, #0
 801fc4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fc50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fc54:	f10a 0a01 	add.w	sl, sl, #1
 801fc58:	9304      	str	r3, [sp, #16]
 801fc5a:	9307      	str	r3, [sp, #28]
 801fc5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fc60:	931a      	str	r3, [sp, #104]	; 0x68
 801fc62:	4654      	mov	r4, sl
 801fc64:	2205      	movs	r2, #5
 801fc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc6a:	4858      	ldr	r0, [pc, #352]	; (801fdcc <_vfiprintf_r+0x24c>)
 801fc6c:	f7e0 fb38 	bl	80002e0 <memchr>
 801fc70:	9a04      	ldr	r2, [sp, #16]
 801fc72:	b9d8      	cbnz	r0, 801fcac <_vfiprintf_r+0x12c>
 801fc74:	06d1      	lsls	r1, r2, #27
 801fc76:	bf44      	itt	mi
 801fc78:	2320      	movmi	r3, #32
 801fc7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc7e:	0713      	lsls	r3, r2, #28
 801fc80:	bf44      	itt	mi
 801fc82:	232b      	movmi	r3, #43	; 0x2b
 801fc84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fc88:	f89a 3000 	ldrb.w	r3, [sl]
 801fc8c:	2b2a      	cmp	r3, #42	; 0x2a
 801fc8e:	d015      	beq.n	801fcbc <_vfiprintf_r+0x13c>
 801fc90:	9a07      	ldr	r2, [sp, #28]
 801fc92:	4654      	mov	r4, sl
 801fc94:	2000      	movs	r0, #0
 801fc96:	f04f 0c0a 	mov.w	ip, #10
 801fc9a:	4621      	mov	r1, r4
 801fc9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fca0:	3b30      	subs	r3, #48	; 0x30
 801fca2:	2b09      	cmp	r3, #9
 801fca4:	d94e      	bls.n	801fd44 <_vfiprintf_r+0x1c4>
 801fca6:	b1b0      	cbz	r0, 801fcd6 <_vfiprintf_r+0x156>
 801fca8:	9207      	str	r2, [sp, #28]
 801fcaa:	e014      	b.n	801fcd6 <_vfiprintf_r+0x156>
 801fcac:	eba0 0308 	sub.w	r3, r0, r8
 801fcb0:	fa09 f303 	lsl.w	r3, r9, r3
 801fcb4:	4313      	orrs	r3, r2
 801fcb6:	9304      	str	r3, [sp, #16]
 801fcb8:	46a2      	mov	sl, r4
 801fcba:	e7d2      	b.n	801fc62 <_vfiprintf_r+0xe2>
 801fcbc:	9b03      	ldr	r3, [sp, #12]
 801fcbe:	1d19      	adds	r1, r3, #4
 801fcc0:	681b      	ldr	r3, [r3, #0]
 801fcc2:	9103      	str	r1, [sp, #12]
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	bfbb      	ittet	lt
 801fcc8:	425b      	neglt	r3, r3
 801fcca:	f042 0202 	orrlt.w	r2, r2, #2
 801fcce:	9307      	strge	r3, [sp, #28]
 801fcd0:	9307      	strlt	r3, [sp, #28]
 801fcd2:	bfb8      	it	lt
 801fcd4:	9204      	strlt	r2, [sp, #16]
 801fcd6:	7823      	ldrb	r3, [r4, #0]
 801fcd8:	2b2e      	cmp	r3, #46	; 0x2e
 801fcda:	d10c      	bne.n	801fcf6 <_vfiprintf_r+0x176>
 801fcdc:	7863      	ldrb	r3, [r4, #1]
 801fcde:	2b2a      	cmp	r3, #42	; 0x2a
 801fce0:	d135      	bne.n	801fd4e <_vfiprintf_r+0x1ce>
 801fce2:	9b03      	ldr	r3, [sp, #12]
 801fce4:	1d1a      	adds	r2, r3, #4
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	9203      	str	r2, [sp, #12]
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	bfb8      	it	lt
 801fcee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801fcf2:	3402      	adds	r4, #2
 801fcf4:	9305      	str	r3, [sp, #20]
 801fcf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fddc <_vfiprintf_r+0x25c>
 801fcfa:	7821      	ldrb	r1, [r4, #0]
 801fcfc:	2203      	movs	r2, #3
 801fcfe:	4650      	mov	r0, sl
 801fd00:	f7e0 faee 	bl	80002e0 <memchr>
 801fd04:	b140      	cbz	r0, 801fd18 <_vfiprintf_r+0x198>
 801fd06:	2340      	movs	r3, #64	; 0x40
 801fd08:	eba0 000a 	sub.w	r0, r0, sl
 801fd0c:	fa03 f000 	lsl.w	r0, r3, r0
 801fd10:	9b04      	ldr	r3, [sp, #16]
 801fd12:	4303      	orrs	r3, r0
 801fd14:	3401      	adds	r4, #1
 801fd16:	9304      	str	r3, [sp, #16]
 801fd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fd1c:	482c      	ldr	r0, [pc, #176]	; (801fdd0 <_vfiprintf_r+0x250>)
 801fd1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fd22:	2206      	movs	r2, #6
 801fd24:	f7e0 fadc 	bl	80002e0 <memchr>
 801fd28:	2800      	cmp	r0, #0
 801fd2a:	d03f      	beq.n	801fdac <_vfiprintf_r+0x22c>
 801fd2c:	4b29      	ldr	r3, [pc, #164]	; (801fdd4 <_vfiprintf_r+0x254>)
 801fd2e:	bb1b      	cbnz	r3, 801fd78 <_vfiprintf_r+0x1f8>
 801fd30:	9b03      	ldr	r3, [sp, #12]
 801fd32:	3307      	adds	r3, #7
 801fd34:	f023 0307 	bic.w	r3, r3, #7
 801fd38:	3308      	adds	r3, #8
 801fd3a:	9303      	str	r3, [sp, #12]
 801fd3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd3e:	443b      	add	r3, r7
 801fd40:	9309      	str	r3, [sp, #36]	; 0x24
 801fd42:	e767      	b.n	801fc14 <_vfiprintf_r+0x94>
 801fd44:	fb0c 3202 	mla	r2, ip, r2, r3
 801fd48:	460c      	mov	r4, r1
 801fd4a:	2001      	movs	r0, #1
 801fd4c:	e7a5      	b.n	801fc9a <_vfiprintf_r+0x11a>
 801fd4e:	2300      	movs	r3, #0
 801fd50:	3401      	adds	r4, #1
 801fd52:	9305      	str	r3, [sp, #20]
 801fd54:	4619      	mov	r1, r3
 801fd56:	f04f 0c0a 	mov.w	ip, #10
 801fd5a:	4620      	mov	r0, r4
 801fd5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fd60:	3a30      	subs	r2, #48	; 0x30
 801fd62:	2a09      	cmp	r2, #9
 801fd64:	d903      	bls.n	801fd6e <_vfiprintf_r+0x1ee>
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d0c5      	beq.n	801fcf6 <_vfiprintf_r+0x176>
 801fd6a:	9105      	str	r1, [sp, #20]
 801fd6c:	e7c3      	b.n	801fcf6 <_vfiprintf_r+0x176>
 801fd6e:	fb0c 2101 	mla	r1, ip, r1, r2
 801fd72:	4604      	mov	r4, r0
 801fd74:	2301      	movs	r3, #1
 801fd76:	e7f0      	b.n	801fd5a <_vfiprintf_r+0x1da>
 801fd78:	ab03      	add	r3, sp, #12
 801fd7a:	9300      	str	r3, [sp, #0]
 801fd7c:	462a      	mov	r2, r5
 801fd7e:	4b16      	ldr	r3, [pc, #88]	; (801fdd8 <_vfiprintf_r+0x258>)
 801fd80:	a904      	add	r1, sp, #16
 801fd82:	4630      	mov	r0, r6
 801fd84:	f3af 8000 	nop.w
 801fd88:	4607      	mov	r7, r0
 801fd8a:	1c78      	adds	r0, r7, #1
 801fd8c:	d1d6      	bne.n	801fd3c <_vfiprintf_r+0x1bc>
 801fd8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fd90:	07d9      	lsls	r1, r3, #31
 801fd92:	d405      	bmi.n	801fda0 <_vfiprintf_r+0x220>
 801fd94:	89ab      	ldrh	r3, [r5, #12]
 801fd96:	059a      	lsls	r2, r3, #22
 801fd98:	d402      	bmi.n	801fda0 <_vfiprintf_r+0x220>
 801fd9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fd9c:	f7ff fd94 	bl	801f8c8 <__retarget_lock_release_recursive>
 801fda0:	89ab      	ldrh	r3, [r5, #12]
 801fda2:	065b      	lsls	r3, r3, #25
 801fda4:	f53f af12 	bmi.w	801fbcc <_vfiprintf_r+0x4c>
 801fda8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fdaa:	e711      	b.n	801fbd0 <_vfiprintf_r+0x50>
 801fdac:	ab03      	add	r3, sp, #12
 801fdae:	9300      	str	r3, [sp, #0]
 801fdb0:	462a      	mov	r2, r5
 801fdb2:	4b09      	ldr	r3, [pc, #36]	; (801fdd8 <_vfiprintf_r+0x258>)
 801fdb4:	a904      	add	r1, sp, #16
 801fdb6:	4630      	mov	r0, r6
 801fdb8:	f000 f880 	bl	801febc <_printf_i>
 801fdbc:	e7e4      	b.n	801fd88 <_vfiprintf_r+0x208>
 801fdbe:	bf00      	nop
 801fdc0:	08024c90 	.word	0x08024c90
 801fdc4:	08024cb0 	.word	0x08024cb0
 801fdc8:	08024c70 	.word	0x08024c70
 801fdcc:	08024cd4 	.word	0x08024cd4
 801fdd0:	08024cde 	.word	0x08024cde
 801fdd4:	00000000 	.word	0x00000000
 801fdd8:	0801fb5b 	.word	0x0801fb5b
 801fddc:	08024cda 	.word	0x08024cda

0801fde0 <_printf_common>:
 801fde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fde4:	4616      	mov	r6, r2
 801fde6:	4699      	mov	r9, r3
 801fde8:	688a      	ldr	r2, [r1, #8]
 801fdea:	690b      	ldr	r3, [r1, #16]
 801fdec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fdf0:	4293      	cmp	r3, r2
 801fdf2:	bfb8      	it	lt
 801fdf4:	4613      	movlt	r3, r2
 801fdf6:	6033      	str	r3, [r6, #0]
 801fdf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fdfc:	4607      	mov	r7, r0
 801fdfe:	460c      	mov	r4, r1
 801fe00:	b10a      	cbz	r2, 801fe06 <_printf_common+0x26>
 801fe02:	3301      	adds	r3, #1
 801fe04:	6033      	str	r3, [r6, #0]
 801fe06:	6823      	ldr	r3, [r4, #0]
 801fe08:	0699      	lsls	r1, r3, #26
 801fe0a:	bf42      	ittt	mi
 801fe0c:	6833      	ldrmi	r3, [r6, #0]
 801fe0e:	3302      	addmi	r3, #2
 801fe10:	6033      	strmi	r3, [r6, #0]
 801fe12:	6825      	ldr	r5, [r4, #0]
 801fe14:	f015 0506 	ands.w	r5, r5, #6
 801fe18:	d106      	bne.n	801fe28 <_printf_common+0x48>
 801fe1a:	f104 0a19 	add.w	sl, r4, #25
 801fe1e:	68e3      	ldr	r3, [r4, #12]
 801fe20:	6832      	ldr	r2, [r6, #0]
 801fe22:	1a9b      	subs	r3, r3, r2
 801fe24:	42ab      	cmp	r3, r5
 801fe26:	dc26      	bgt.n	801fe76 <_printf_common+0x96>
 801fe28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fe2c:	1e13      	subs	r3, r2, #0
 801fe2e:	6822      	ldr	r2, [r4, #0]
 801fe30:	bf18      	it	ne
 801fe32:	2301      	movne	r3, #1
 801fe34:	0692      	lsls	r2, r2, #26
 801fe36:	d42b      	bmi.n	801fe90 <_printf_common+0xb0>
 801fe38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fe3c:	4649      	mov	r1, r9
 801fe3e:	4638      	mov	r0, r7
 801fe40:	47c0      	blx	r8
 801fe42:	3001      	adds	r0, #1
 801fe44:	d01e      	beq.n	801fe84 <_printf_common+0xa4>
 801fe46:	6823      	ldr	r3, [r4, #0]
 801fe48:	68e5      	ldr	r5, [r4, #12]
 801fe4a:	6832      	ldr	r2, [r6, #0]
 801fe4c:	f003 0306 	and.w	r3, r3, #6
 801fe50:	2b04      	cmp	r3, #4
 801fe52:	bf08      	it	eq
 801fe54:	1aad      	subeq	r5, r5, r2
 801fe56:	68a3      	ldr	r3, [r4, #8]
 801fe58:	6922      	ldr	r2, [r4, #16]
 801fe5a:	bf0c      	ite	eq
 801fe5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fe60:	2500      	movne	r5, #0
 801fe62:	4293      	cmp	r3, r2
 801fe64:	bfc4      	itt	gt
 801fe66:	1a9b      	subgt	r3, r3, r2
 801fe68:	18ed      	addgt	r5, r5, r3
 801fe6a:	2600      	movs	r6, #0
 801fe6c:	341a      	adds	r4, #26
 801fe6e:	42b5      	cmp	r5, r6
 801fe70:	d11a      	bne.n	801fea8 <_printf_common+0xc8>
 801fe72:	2000      	movs	r0, #0
 801fe74:	e008      	b.n	801fe88 <_printf_common+0xa8>
 801fe76:	2301      	movs	r3, #1
 801fe78:	4652      	mov	r2, sl
 801fe7a:	4649      	mov	r1, r9
 801fe7c:	4638      	mov	r0, r7
 801fe7e:	47c0      	blx	r8
 801fe80:	3001      	adds	r0, #1
 801fe82:	d103      	bne.n	801fe8c <_printf_common+0xac>
 801fe84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fe88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe8c:	3501      	adds	r5, #1
 801fe8e:	e7c6      	b.n	801fe1e <_printf_common+0x3e>
 801fe90:	18e1      	adds	r1, r4, r3
 801fe92:	1c5a      	adds	r2, r3, #1
 801fe94:	2030      	movs	r0, #48	; 0x30
 801fe96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fe9a:	4422      	add	r2, r4
 801fe9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fea4:	3302      	adds	r3, #2
 801fea6:	e7c7      	b.n	801fe38 <_printf_common+0x58>
 801fea8:	2301      	movs	r3, #1
 801feaa:	4622      	mov	r2, r4
 801feac:	4649      	mov	r1, r9
 801feae:	4638      	mov	r0, r7
 801feb0:	47c0      	blx	r8
 801feb2:	3001      	adds	r0, #1
 801feb4:	d0e6      	beq.n	801fe84 <_printf_common+0xa4>
 801feb6:	3601      	adds	r6, #1
 801feb8:	e7d9      	b.n	801fe6e <_printf_common+0x8e>
	...

0801febc <_printf_i>:
 801febc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fec0:	7e0f      	ldrb	r7, [r1, #24]
 801fec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fec4:	2f78      	cmp	r7, #120	; 0x78
 801fec6:	4691      	mov	r9, r2
 801fec8:	4680      	mov	r8, r0
 801feca:	460c      	mov	r4, r1
 801fecc:	469a      	mov	sl, r3
 801fece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801fed2:	d807      	bhi.n	801fee4 <_printf_i+0x28>
 801fed4:	2f62      	cmp	r7, #98	; 0x62
 801fed6:	d80a      	bhi.n	801feee <_printf_i+0x32>
 801fed8:	2f00      	cmp	r7, #0
 801feda:	f000 80d8 	beq.w	802008e <_printf_i+0x1d2>
 801fede:	2f58      	cmp	r7, #88	; 0x58
 801fee0:	f000 80a3 	beq.w	802002a <_printf_i+0x16e>
 801fee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801feec:	e03a      	b.n	801ff64 <_printf_i+0xa8>
 801feee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fef2:	2b15      	cmp	r3, #21
 801fef4:	d8f6      	bhi.n	801fee4 <_printf_i+0x28>
 801fef6:	a101      	add	r1, pc, #4	; (adr r1, 801fefc <_printf_i+0x40>)
 801fef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fefc:	0801ff55 	.word	0x0801ff55
 801ff00:	0801ff69 	.word	0x0801ff69
 801ff04:	0801fee5 	.word	0x0801fee5
 801ff08:	0801fee5 	.word	0x0801fee5
 801ff0c:	0801fee5 	.word	0x0801fee5
 801ff10:	0801fee5 	.word	0x0801fee5
 801ff14:	0801ff69 	.word	0x0801ff69
 801ff18:	0801fee5 	.word	0x0801fee5
 801ff1c:	0801fee5 	.word	0x0801fee5
 801ff20:	0801fee5 	.word	0x0801fee5
 801ff24:	0801fee5 	.word	0x0801fee5
 801ff28:	08020075 	.word	0x08020075
 801ff2c:	0801ff99 	.word	0x0801ff99
 801ff30:	08020057 	.word	0x08020057
 801ff34:	0801fee5 	.word	0x0801fee5
 801ff38:	0801fee5 	.word	0x0801fee5
 801ff3c:	08020097 	.word	0x08020097
 801ff40:	0801fee5 	.word	0x0801fee5
 801ff44:	0801ff99 	.word	0x0801ff99
 801ff48:	0801fee5 	.word	0x0801fee5
 801ff4c:	0801fee5 	.word	0x0801fee5
 801ff50:	0802005f 	.word	0x0802005f
 801ff54:	682b      	ldr	r3, [r5, #0]
 801ff56:	1d1a      	adds	r2, r3, #4
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	602a      	str	r2, [r5, #0]
 801ff5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ff60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ff64:	2301      	movs	r3, #1
 801ff66:	e0a3      	b.n	80200b0 <_printf_i+0x1f4>
 801ff68:	6820      	ldr	r0, [r4, #0]
 801ff6a:	6829      	ldr	r1, [r5, #0]
 801ff6c:	0606      	lsls	r6, r0, #24
 801ff6e:	f101 0304 	add.w	r3, r1, #4
 801ff72:	d50a      	bpl.n	801ff8a <_printf_i+0xce>
 801ff74:	680e      	ldr	r6, [r1, #0]
 801ff76:	602b      	str	r3, [r5, #0]
 801ff78:	2e00      	cmp	r6, #0
 801ff7a:	da03      	bge.n	801ff84 <_printf_i+0xc8>
 801ff7c:	232d      	movs	r3, #45	; 0x2d
 801ff7e:	4276      	negs	r6, r6
 801ff80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ff84:	485e      	ldr	r0, [pc, #376]	; (8020100 <_printf_i+0x244>)
 801ff86:	230a      	movs	r3, #10
 801ff88:	e019      	b.n	801ffbe <_printf_i+0x102>
 801ff8a:	680e      	ldr	r6, [r1, #0]
 801ff8c:	602b      	str	r3, [r5, #0]
 801ff8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ff92:	bf18      	it	ne
 801ff94:	b236      	sxthne	r6, r6
 801ff96:	e7ef      	b.n	801ff78 <_printf_i+0xbc>
 801ff98:	682b      	ldr	r3, [r5, #0]
 801ff9a:	6820      	ldr	r0, [r4, #0]
 801ff9c:	1d19      	adds	r1, r3, #4
 801ff9e:	6029      	str	r1, [r5, #0]
 801ffa0:	0601      	lsls	r1, r0, #24
 801ffa2:	d501      	bpl.n	801ffa8 <_printf_i+0xec>
 801ffa4:	681e      	ldr	r6, [r3, #0]
 801ffa6:	e002      	b.n	801ffae <_printf_i+0xf2>
 801ffa8:	0646      	lsls	r6, r0, #25
 801ffaa:	d5fb      	bpl.n	801ffa4 <_printf_i+0xe8>
 801ffac:	881e      	ldrh	r6, [r3, #0]
 801ffae:	4854      	ldr	r0, [pc, #336]	; (8020100 <_printf_i+0x244>)
 801ffb0:	2f6f      	cmp	r7, #111	; 0x6f
 801ffb2:	bf0c      	ite	eq
 801ffb4:	2308      	moveq	r3, #8
 801ffb6:	230a      	movne	r3, #10
 801ffb8:	2100      	movs	r1, #0
 801ffba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ffbe:	6865      	ldr	r5, [r4, #4]
 801ffc0:	60a5      	str	r5, [r4, #8]
 801ffc2:	2d00      	cmp	r5, #0
 801ffc4:	bfa2      	ittt	ge
 801ffc6:	6821      	ldrge	r1, [r4, #0]
 801ffc8:	f021 0104 	bicge.w	r1, r1, #4
 801ffcc:	6021      	strge	r1, [r4, #0]
 801ffce:	b90e      	cbnz	r6, 801ffd4 <_printf_i+0x118>
 801ffd0:	2d00      	cmp	r5, #0
 801ffd2:	d04d      	beq.n	8020070 <_printf_i+0x1b4>
 801ffd4:	4615      	mov	r5, r2
 801ffd6:	fbb6 f1f3 	udiv	r1, r6, r3
 801ffda:	fb03 6711 	mls	r7, r3, r1, r6
 801ffde:	5dc7      	ldrb	r7, [r0, r7]
 801ffe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ffe4:	4637      	mov	r7, r6
 801ffe6:	42bb      	cmp	r3, r7
 801ffe8:	460e      	mov	r6, r1
 801ffea:	d9f4      	bls.n	801ffd6 <_printf_i+0x11a>
 801ffec:	2b08      	cmp	r3, #8
 801ffee:	d10b      	bne.n	8020008 <_printf_i+0x14c>
 801fff0:	6823      	ldr	r3, [r4, #0]
 801fff2:	07de      	lsls	r6, r3, #31
 801fff4:	d508      	bpl.n	8020008 <_printf_i+0x14c>
 801fff6:	6923      	ldr	r3, [r4, #16]
 801fff8:	6861      	ldr	r1, [r4, #4]
 801fffa:	4299      	cmp	r1, r3
 801fffc:	bfde      	ittt	le
 801fffe:	2330      	movle	r3, #48	; 0x30
 8020000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020004:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020008:	1b52      	subs	r2, r2, r5
 802000a:	6122      	str	r2, [r4, #16]
 802000c:	f8cd a000 	str.w	sl, [sp]
 8020010:	464b      	mov	r3, r9
 8020012:	aa03      	add	r2, sp, #12
 8020014:	4621      	mov	r1, r4
 8020016:	4640      	mov	r0, r8
 8020018:	f7ff fee2 	bl	801fde0 <_printf_common>
 802001c:	3001      	adds	r0, #1
 802001e:	d14c      	bne.n	80200ba <_printf_i+0x1fe>
 8020020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020024:	b004      	add	sp, #16
 8020026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802002a:	4835      	ldr	r0, [pc, #212]	; (8020100 <_printf_i+0x244>)
 802002c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020030:	6829      	ldr	r1, [r5, #0]
 8020032:	6823      	ldr	r3, [r4, #0]
 8020034:	f851 6b04 	ldr.w	r6, [r1], #4
 8020038:	6029      	str	r1, [r5, #0]
 802003a:	061d      	lsls	r5, r3, #24
 802003c:	d514      	bpl.n	8020068 <_printf_i+0x1ac>
 802003e:	07df      	lsls	r7, r3, #31
 8020040:	bf44      	itt	mi
 8020042:	f043 0320 	orrmi.w	r3, r3, #32
 8020046:	6023      	strmi	r3, [r4, #0]
 8020048:	b91e      	cbnz	r6, 8020052 <_printf_i+0x196>
 802004a:	6823      	ldr	r3, [r4, #0]
 802004c:	f023 0320 	bic.w	r3, r3, #32
 8020050:	6023      	str	r3, [r4, #0]
 8020052:	2310      	movs	r3, #16
 8020054:	e7b0      	b.n	801ffb8 <_printf_i+0xfc>
 8020056:	6823      	ldr	r3, [r4, #0]
 8020058:	f043 0320 	orr.w	r3, r3, #32
 802005c:	6023      	str	r3, [r4, #0]
 802005e:	2378      	movs	r3, #120	; 0x78
 8020060:	4828      	ldr	r0, [pc, #160]	; (8020104 <_printf_i+0x248>)
 8020062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020066:	e7e3      	b.n	8020030 <_printf_i+0x174>
 8020068:	0659      	lsls	r1, r3, #25
 802006a:	bf48      	it	mi
 802006c:	b2b6      	uxthmi	r6, r6
 802006e:	e7e6      	b.n	802003e <_printf_i+0x182>
 8020070:	4615      	mov	r5, r2
 8020072:	e7bb      	b.n	801ffec <_printf_i+0x130>
 8020074:	682b      	ldr	r3, [r5, #0]
 8020076:	6826      	ldr	r6, [r4, #0]
 8020078:	6961      	ldr	r1, [r4, #20]
 802007a:	1d18      	adds	r0, r3, #4
 802007c:	6028      	str	r0, [r5, #0]
 802007e:	0635      	lsls	r5, r6, #24
 8020080:	681b      	ldr	r3, [r3, #0]
 8020082:	d501      	bpl.n	8020088 <_printf_i+0x1cc>
 8020084:	6019      	str	r1, [r3, #0]
 8020086:	e002      	b.n	802008e <_printf_i+0x1d2>
 8020088:	0670      	lsls	r0, r6, #25
 802008a:	d5fb      	bpl.n	8020084 <_printf_i+0x1c8>
 802008c:	8019      	strh	r1, [r3, #0]
 802008e:	2300      	movs	r3, #0
 8020090:	6123      	str	r3, [r4, #16]
 8020092:	4615      	mov	r5, r2
 8020094:	e7ba      	b.n	802000c <_printf_i+0x150>
 8020096:	682b      	ldr	r3, [r5, #0]
 8020098:	1d1a      	adds	r2, r3, #4
 802009a:	602a      	str	r2, [r5, #0]
 802009c:	681d      	ldr	r5, [r3, #0]
 802009e:	6862      	ldr	r2, [r4, #4]
 80200a0:	2100      	movs	r1, #0
 80200a2:	4628      	mov	r0, r5
 80200a4:	f7e0 f91c 	bl	80002e0 <memchr>
 80200a8:	b108      	cbz	r0, 80200ae <_printf_i+0x1f2>
 80200aa:	1b40      	subs	r0, r0, r5
 80200ac:	6060      	str	r0, [r4, #4]
 80200ae:	6863      	ldr	r3, [r4, #4]
 80200b0:	6123      	str	r3, [r4, #16]
 80200b2:	2300      	movs	r3, #0
 80200b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80200b8:	e7a8      	b.n	802000c <_printf_i+0x150>
 80200ba:	6923      	ldr	r3, [r4, #16]
 80200bc:	462a      	mov	r2, r5
 80200be:	4649      	mov	r1, r9
 80200c0:	4640      	mov	r0, r8
 80200c2:	47d0      	blx	sl
 80200c4:	3001      	adds	r0, #1
 80200c6:	d0ab      	beq.n	8020020 <_printf_i+0x164>
 80200c8:	6823      	ldr	r3, [r4, #0]
 80200ca:	079b      	lsls	r3, r3, #30
 80200cc:	d413      	bmi.n	80200f6 <_printf_i+0x23a>
 80200ce:	68e0      	ldr	r0, [r4, #12]
 80200d0:	9b03      	ldr	r3, [sp, #12]
 80200d2:	4298      	cmp	r0, r3
 80200d4:	bfb8      	it	lt
 80200d6:	4618      	movlt	r0, r3
 80200d8:	e7a4      	b.n	8020024 <_printf_i+0x168>
 80200da:	2301      	movs	r3, #1
 80200dc:	4632      	mov	r2, r6
 80200de:	4649      	mov	r1, r9
 80200e0:	4640      	mov	r0, r8
 80200e2:	47d0      	blx	sl
 80200e4:	3001      	adds	r0, #1
 80200e6:	d09b      	beq.n	8020020 <_printf_i+0x164>
 80200e8:	3501      	adds	r5, #1
 80200ea:	68e3      	ldr	r3, [r4, #12]
 80200ec:	9903      	ldr	r1, [sp, #12]
 80200ee:	1a5b      	subs	r3, r3, r1
 80200f0:	42ab      	cmp	r3, r5
 80200f2:	dcf2      	bgt.n	80200da <_printf_i+0x21e>
 80200f4:	e7eb      	b.n	80200ce <_printf_i+0x212>
 80200f6:	2500      	movs	r5, #0
 80200f8:	f104 0619 	add.w	r6, r4, #25
 80200fc:	e7f5      	b.n	80200ea <_printf_i+0x22e>
 80200fe:	bf00      	nop
 8020100:	08024ce5 	.word	0x08024ce5
 8020104:	08024cf6 	.word	0x08024cf6

08020108 <iprintf>:
 8020108:	b40f      	push	{r0, r1, r2, r3}
 802010a:	4b0a      	ldr	r3, [pc, #40]	; (8020134 <iprintf+0x2c>)
 802010c:	b513      	push	{r0, r1, r4, lr}
 802010e:	681c      	ldr	r4, [r3, #0]
 8020110:	b124      	cbz	r4, 802011c <iprintf+0x14>
 8020112:	69a3      	ldr	r3, [r4, #24]
 8020114:	b913      	cbnz	r3, 802011c <iprintf+0x14>
 8020116:	4620      	mov	r0, r4
 8020118:	f7ff fb00 	bl	801f71c <__sinit>
 802011c:	ab05      	add	r3, sp, #20
 802011e:	9a04      	ldr	r2, [sp, #16]
 8020120:	68a1      	ldr	r1, [r4, #8]
 8020122:	9301      	str	r3, [sp, #4]
 8020124:	4620      	mov	r0, r4
 8020126:	f7ff fd2b 	bl	801fb80 <_vfiprintf_r>
 802012a:	b002      	add	sp, #8
 802012c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020130:	b004      	add	sp, #16
 8020132:	4770      	bx	lr
 8020134:	24000034 	.word	0x24000034

08020138 <_puts_r>:
 8020138:	b570      	push	{r4, r5, r6, lr}
 802013a:	460e      	mov	r6, r1
 802013c:	4605      	mov	r5, r0
 802013e:	b118      	cbz	r0, 8020148 <_puts_r+0x10>
 8020140:	6983      	ldr	r3, [r0, #24]
 8020142:	b90b      	cbnz	r3, 8020148 <_puts_r+0x10>
 8020144:	f7ff faea 	bl	801f71c <__sinit>
 8020148:	69ab      	ldr	r3, [r5, #24]
 802014a:	68ac      	ldr	r4, [r5, #8]
 802014c:	b913      	cbnz	r3, 8020154 <_puts_r+0x1c>
 802014e:	4628      	mov	r0, r5
 8020150:	f7ff fae4 	bl	801f71c <__sinit>
 8020154:	4b2c      	ldr	r3, [pc, #176]	; (8020208 <_puts_r+0xd0>)
 8020156:	429c      	cmp	r4, r3
 8020158:	d120      	bne.n	802019c <_puts_r+0x64>
 802015a:	686c      	ldr	r4, [r5, #4]
 802015c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802015e:	07db      	lsls	r3, r3, #31
 8020160:	d405      	bmi.n	802016e <_puts_r+0x36>
 8020162:	89a3      	ldrh	r3, [r4, #12]
 8020164:	0598      	lsls	r0, r3, #22
 8020166:	d402      	bmi.n	802016e <_puts_r+0x36>
 8020168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802016a:	f7ff fbac 	bl	801f8c6 <__retarget_lock_acquire_recursive>
 802016e:	89a3      	ldrh	r3, [r4, #12]
 8020170:	0719      	lsls	r1, r3, #28
 8020172:	d51d      	bpl.n	80201b0 <_puts_r+0x78>
 8020174:	6923      	ldr	r3, [r4, #16]
 8020176:	b1db      	cbz	r3, 80201b0 <_puts_r+0x78>
 8020178:	3e01      	subs	r6, #1
 802017a:	68a3      	ldr	r3, [r4, #8]
 802017c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020180:	3b01      	subs	r3, #1
 8020182:	60a3      	str	r3, [r4, #8]
 8020184:	bb39      	cbnz	r1, 80201d6 <_puts_r+0x9e>
 8020186:	2b00      	cmp	r3, #0
 8020188:	da38      	bge.n	80201fc <_puts_r+0xc4>
 802018a:	4622      	mov	r2, r4
 802018c:	210a      	movs	r1, #10
 802018e:	4628      	mov	r0, r5
 8020190:	f000 f9c8 	bl	8020524 <__swbuf_r>
 8020194:	3001      	adds	r0, #1
 8020196:	d011      	beq.n	80201bc <_puts_r+0x84>
 8020198:	250a      	movs	r5, #10
 802019a:	e011      	b.n	80201c0 <_puts_r+0x88>
 802019c:	4b1b      	ldr	r3, [pc, #108]	; (802020c <_puts_r+0xd4>)
 802019e:	429c      	cmp	r4, r3
 80201a0:	d101      	bne.n	80201a6 <_puts_r+0x6e>
 80201a2:	68ac      	ldr	r4, [r5, #8]
 80201a4:	e7da      	b.n	802015c <_puts_r+0x24>
 80201a6:	4b1a      	ldr	r3, [pc, #104]	; (8020210 <_puts_r+0xd8>)
 80201a8:	429c      	cmp	r4, r3
 80201aa:	bf08      	it	eq
 80201ac:	68ec      	ldreq	r4, [r5, #12]
 80201ae:	e7d5      	b.n	802015c <_puts_r+0x24>
 80201b0:	4621      	mov	r1, r4
 80201b2:	4628      	mov	r0, r5
 80201b4:	f000 fa1a 	bl	80205ec <__swsetup_r>
 80201b8:	2800      	cmp	r0, #0
 80201ba:	d0dd      	beq.n	8020178 <_puts_r+0x40>
 80201bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80201c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80201c2:	07da      	lsls	r2, r3, #31
 80201c4:	d405      	bmi.n	80201d2 <_puts_r+0x9a>
 80201c6:	89a3      	ldrh	r3, [r4, #12]
 80201c8:	059b      	lsls	r3, r3, #22
 80201ca:	d402      	bmi.n	80201d2 <_puts_r+0x9a>
 80201cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80201ce:	f7ff fb7b 	bl	801f8c8 <__retarget_lock_release_recursive>
 80201d2:	4628      	mov	r0, r5
 80201d4:	bd70      	pop	{r4, r5, r6, pc}
 80201d6:	2b00      	cmp	r3, #0
 80201d8:	da04      	bge.n	80201e4 <_puts_r+0xac>
 80201da:	69a2      	ldr	r2, [r4, #24]
 80201dc:	429a      	cmp	r2, r3
 80201de:	dc06      	bgt.n	80201ee <_puts_r+0xb6>
 80201e0:	290a      	cmp	r1, #10
 80201e2:	d004      	beq.n	80201ee <_puts_r+0xb6>
 80201e4:	6823      	ldr	r3, [r4, #0]
 80201e6:	1c5a      	adds	r2, r3, #1
 80201e8:	6022      	str	r2, [r4, #0]
 80201ea:	7019      	strb	r1, [r3, #0]
 80201ec:	e7c5      	b.n	802017a <_puts_r+0x42>
 80201ee:	4622      	mov	r2, r4
 80201f0:	4628      	mov	r0, r5
 80201f2:	f000 f997 	bl	8020524 <__swbuf_r>
 80201f6:	3001      	adds	r0, #1
 80201f8:	d1bf      	bne.n	802017a <_puts_r+0x42>
 80201fa:	e7df      	b.n	80201bc <_puts_r+0x84>
 80201fc:	6823      	ldr	r3, [r4, #0]
 80201fe:	250a      	movs	r5, #10
 8020200:	1c5a      	adds	r2, r3, #1
 8020202:	6022      	str	r2, [r4, #0]
 8020204:	701d      	strb	r5, [r3, #0]
 8020206:	e7db      	b.n	80201c0 <_puts_r+0x88>
 8020208:	08024c90 	.word	0x08024c90
 802020c:	08024cb0 	.word	0x08024cb0
 8020210:	08024c70 	.word	0x08024c70

08020214 <puts>:
 8020214:	4b02      	ldr	r3, [pc, #8]	; (8020220 <puts+0xc>)
 8020216:	4601      	mov	r1, r0
 8020218:	6818      	ldr	r0, [r3, #0]
 802021a:	f7ff bf8d 	b.w	8020138 <_puts_r>
 802021e:	bf00      	nop
 8020220:	24000034 	.word	0x24000034

08020224 <rand>:
 8020224:	4b16      	ldr	r3, [pc, #88]	; (8020280 <rand+0x5c>)
 8020226:	b510      	push	{r4, lr}
 8020228:	681c      	ldr	r4, [r3, #0]
 802022a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802022c:	b9b3      	cbnz	r3, 802025c <rand+0x38>
 802022e:	2018      	movs	r0, #24
 8020230:	f7ff fb4c 	bl	801f8cc <malloc>
 8020234:	63a0      	str	r0, [r4, #56]	; 0x38
 8020236:	b928      	cbnz	r0, 8020244 <rand+0x20>
 8020238:	4602      	mov	r2, r0
 802023a:	4b12      	ldr	r3, [pc, #72]	; (8020284 <rand+0x60>)
 802023c:	4812      	ldr	r0, [pc, #72]	; (8020288 <rand+0x64>)
 802023e:	214e      	movs	r1, #78	; 0x4e
 8020240:	f7ff f9f6 	bl	801f630 <__assert_func>
 8020244:	4a11      	ldr	r2, [pc, #68]	; (802028c <rand+0x68>)
 8020246:	4b12      	ldr	r3, [pc, #72]	; (8020290 <rand+0x6c>)
 8020248:	e9c0 2300 	strd	r2, r3, [r0]
 802024c:	4b11      	ldr	r3, [pc, #68]	; (8020294 <rand+0x70>)
 802024e:	6083      	str	r3, [r0, #8]
 8020250:	230b      	movs	r3, #11
 8020252:	8183      	strh	r3, [r0, #12]
 8020254:	2201      	movs	r2, #1
 8020256:	2300      	movs	r3, #0
 8020258:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802025c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802025e:	4a0e      	ldr	r2, [pc, #56]	; (8020298 <rand+0x74>)
 8020260:	6920      	ldr	r0, [r4, #16]
 8020262:	6963      	ldr	r3, [r4, #20]
 8020264:	490d      	ldr	r1, [pc, #52]	; (802029c <rand+0x78>)
 8020266:	4342      	muls	r2, r0
 8020268:	fb01 2203 	mla	r2, r1, r3, r2
 802026c:	fba0 0101 	umull	r0, r1, r0, r1
 8020270:	1c43      	adds	r3, r0, #1
 8020272:	eb42 0001 	adc.w	r0, r2, r1
 8020276:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802027a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802027e:	bd10      	pop	{r4, pc}
 8020280:	24000034 	.word	0x24000034
 8020284:	08024d07 	.word	0x08024d07
 8020288:	08024d1e 	.word	0x08024d1e
 802028c:	abcd330e 	.word	0xabcd330e
 8020290:	e66d1234 	.word	0xe66d1234
 8020294:	0005deec 	.word	0x0005deec
 8020298:	5851f42d 	.word	0x5851f42d
 802029c:	4c957f2d 	.word	0x4c957f2d

080202a0 <cleanup_glue>:
 80202a0:	b538      	push	{r3, r4, r5, lr}
 80202a2:	460c      	mov	r4, r1
 80202a4:	6809      	ldr	r1, [r1, #0]
 80202a6:	4605      	mov	r5, r0
 80202a8:	b109      	cbz	r1, 80202ae <cleanup_glue+0xe>
 80202aa:	f7ff fff9 	bl	80202a0 <cleanup_glue>
 80202ae:	4621      	mov	r1, r4
 80202b0:	4628      	mov	r0, r5
 80202b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80202b6:	f7ff bb59 	b.w	801f96c <_free_r>
	...

080202bc <_reclaim_reent>:
 80202bc:	4b2c      	ldr	r3, [pc, #176]	; (8020370 <_reclaim_reent+0xb4>)
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	4283      	cmp	r3, r0
 80202c2:	b570      	push	{r4, r5, r6, lr}
 80202c4:	4604      	mov	r4, r0
 80202c6:	d051      	beq.n	802036c <_reclaim_reent+0xb0>
 80202c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80202ca:	b143      	cbz	r3, 80202de <_reclaim_reent+0x22>
 80202cc:	68db      	ldr	r3, [r3, #12]
 80202ce:	2b00      	cmp	r3, #0
 80202d0:	d14a      	bne.n	8020368 <_reclaim_reent+0xac>
 80202d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80202d4:	6819      	ldr	r1, [r3, #0]
 80202d6:	b111      	cbz	r1, 80202de <_reclaim_reent+0x22>
 80202d8:	4620      	mov	r0, r4
 80202da:	f7ff fb47 	bl	801f96c <_free_r>
 80202de:	6961      	ldr	r1, [r4, #20]
 80202e0:	b111      	cbz	r1, 80202e8 <_reclaim_reent+0x2c>
 80202e2:	4620      	mov	r0, r4
 80202e4:	f7ff fb42 	bl	801f96c <_free_r>
 80202e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80202ea:	b111      	cbz	r1, 80202f2 <_reclaim_reent+0x36>
 80202ec:	4620      	mov	r0, r4
 80202ee:	f7ff fb3d 	bl	801f96c <_free_r>
 80202f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80202f4:	b111      	cbz	r1, 80202fc <_reclaim_reent+0x40>
 80202f6:	4620      	mov	r0, r4
 80202f8:	f7ff fb38 	bl	801f96c <_free_r>
 80202fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80202fe:	b111      	cbz	r1, 8020306 <_reclaim_reent+0x4a>
 8020300:	4620      	mov	r0, r4
 8020302:	f7ff fb33 	bl	801f96c <_free_r>
 8020306:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020308:	b111      	cbz	r1, 8020310 <_reclaim_reent+0x54>
 802030a:	4620      	mov	r0, r4
 802030c:	f7ff fb2e 	bl	801f96c <_free_r>
 8020310:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8020312:	b111      	cbz	r1, 802031a <_reclaim_reent+0x5e>
 8020314:	4620      	mov	r0, r4
 8020316:	f7ff fb29 	bl	801f96c <_free_r>
 802031a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802031c:	b111      	cbz	r1, 8020324 <_reclaim_reent+0x68>
 802031e:	4620      	mov	r0, r4
 8020320:	f7ff fb24 	bl	801f96c <_free_r>
 8020324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020326:	b111      	cbz	r1, 802032e <_reclaim_reent+0x72>
 8020328:	4620      	mov	r0, r4
 802032a:	f7ff fb1f 	bl	801f96c <_free_r>
 802032e:	69a3      	ldr	r3, [r4, #24]
 8020330:	b1e3      	cbz	r3, 802036c <_reclaim_reent+0xb0>
 8020332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020334:	4620      	mov	r0, r4
 8020336:	4798      	blx	r3
 8020338:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802033a:	b1b9      	cbz	r1, 802036c <_reclaim_reent+0xb0>
 802033c:	4620      	mov	r0, r4
 802033e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020342:	f7ff bfad 	b.w	80202a0 <cleanup_glue>
 8020346:	5949      	ldr	r1, [r1, r5]
 8020348:	b941      	cbnz	r1, 802035c <_reclaim_reent+0xa0>
 802034a:	3504      	adds	r5, #4
 802034c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802034e:	2d80      	cmp	r5, #128	; 0x80
 8020350:	68d9      	ldr	r1, [r3, #12]
 8020352:	d1f8      	bne.n	8020346 <_reclaim_reent+0x8a>
 8020354:	4620      	mov	r0, r4
 8020356:	f7ff fb09 	bl	801f96c <_free_r>
 802035a:	e7ba      	b.n	80202d2 <_reclaim_reent+0x16>
 802035c:	680e      	ldr	r6, [r1, #0]
 802035e:	4620      	mov	r0, r4
 8020360:	f7ff fb04 	bl	801f96c <_free_r>
 8020364:	4631      	mov	r1, r6
 8020366:	e7ef      	b.n	8020348 <_reclaim_reent+0x8c>
 8020368:	2500      	movs	r5, #0
 802036a:	e7ef      	b.n	802034c <_reclaim_reent+0x90>
 802036c:	bd70      	pop	{r4, r5, r6, pc}
 802036e:	bf00      	nop
 8020370:	24000034 	.word	0x24000034

08020374 <_sbrk_r>:
 8020374:	b538      	push	{r3, r4, r5, lr}
 8020376:	4d06      	ldr	r5, [pc, #24]	; (8020390 <_sbrk_r+0x1c>)
 8020378:	2300      	movs	r3, #0
 802037a:	4604      	mov	r4, r0
 802037c:	4608      	mov	r0, r1
 802037e:	602b      	str	r3, [r5, #0]
 8020380:	f7e1 f9d4 	bl	800172c <_sbrk>
 8020384:	1c43      	adds	r3, r0, #1
 8020386:	d102      	bne.n	802038e <_sbrk_r+0x1a>
 8020388:	682b      	ldr	r3, [r5, #0]
 802038a:	b103      	cbz	r3, 802038e <_sbrk_r+0x1a>
 802038c:	6023      	str	r3, [r4, #0]
 802038e:	bd38      	pop	{r3, r4, r5, pc}
 8020390:	2401009c 	.word	0x2401009c

08020394 <_raise_r>:
 8020394:	291f      	cmp	r1, #31
 8020396:	b538      	push	{r3, r4, r5, lr}
 8020398:	4604      	mov	r4, r0
 802039a:	460d      	mov	r5, r1
 802039c:	d904      	bls.n	80203a8 <_raise_r+0x14>
 802039e:	2316      	movs	r3, #22
 80203a0:	6003      	str	r3, [r0, #0]
 80203a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80203a6:	bd38      	pop	{r3, r4, r5, pc}
 80203a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80203aa:	b112      	cbz	r2, 80203b2 <_raise_r+0x1e>
 80203ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80203b0:	b94b      	cbnz	r3, 80203c6 <_raise_r+0x32>
 80203b2:	4620      	mov	r0, r4
 80203b4:	f000 f830 	bl	8020418 <_getpid_r>
 80203b8:	462a      	mov	r2, r5
 80203ba:	4601      	mov	r1, r0
 80203bc:	4620      	mov	r0, r4
 80203be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80203c2:	f000 b817 	b.w	80203f4 <_kill_r>
 80203c6:	2b01      	cmp	r3, #1
 80203c8:	d00a      	beq.n	80203e0 <_raise_r+0x4c>
 80203ca:	1c59      	adds	r1, r3, #1
 80203cc:	d103      	bne.n	80203d6 <_raise_r+0x42>
 80203ce:	2316      	movs	r3, #22
 80203d0:	6003      	str	r3, [r0, #0]
 80203d2:	2001      	movs	r0, #1
 80203d4:	e7e7      	b.n	80203a6 <_raise_r+0x12>
 80203d6:	2400      	movs	r4, #0
 80203d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80203dc:	4628      	mov	r0, r5
 80203de:	4798      	blx	r3
 80203e0:	2000      	movs	r0, #0
 80203e2:	e7e0      	b.n	80203a6 <_raise_r+0x12>

080203e4 <raise>:
 80203e4:	4b02      	ldr	r3, [pc, #8]	; (80203f0 <raise+0xc>)
 80203e6:	4601      	mov	r1, r0
 80203e8:	6818      	ldr	r0, [r3, #0]
 80203ea:	f7ff bfd3 	b.w	8020394 <_raise_r>
 80203ee:	bf00      	nop
 80203f0:	24000034 	.word	0x24000034

080203f4 <_kill_r>:
 80203f4:	b538      	push	{r3, r4, r5, lr}
 80203f6:	4d07      	ldr	r5, [pc, #28]	; (8020414 <_kill_r+0x20>)
 80203f8:	2300      	movs	r3, #0
 80203fa:	4604      	mov	r4, r0
 80203fc:	4608      	mov	r0, r1
 80203fe:	4611      	mov	r1, r2
 8020400:	602b      	str	r3, [r5, #0]
 8020402:	f7e1 f925 	bl	8001650 <_kill>
 8020406:	1c43      	adds	r3, r0, #1
 8020408:	d102      	bne.n	8020410 <_kill_r+0x1c>
 802040a:	682b      	ldr	r3, [r5, #0]
 802040c:	b103      	cbz	r3, 8020410 <_kill_r+0x1c>
 802040e:	6023      	str	r3, [r4, #0]
 8020410:	bd38      	pop	{r3, r4, r5, pc}
 8020412:	bf00      	nop
 8020414:	2401009c 	.word	0x2401009c

08020418 <_getpid_r>:
 8020418:	f7e1 b912 	b.w	8001640 <_getpid>

0802041c <siprintf>:
 802041c:	b40e      	push	{r1, r2, r3}
 802041e:	b500      	push	{lr}
 8020420:	b09c      	sub	sp, #112	; 0x70
 8020422:	ab1d      	add	r3, sp, #116	; 0x74
 8020424:	9002      	str	r0, [sp, #8]
 8020426:	9006      	str	r0, [sp, #24]
 8020428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802042c:	4809      	ldr	r0, [pc, #36]	; (8020454 <siprintf+0x38>)
 802042e:	9107      	str	r1, [sp, #28]
 8020430:	9104      	str	r1, [sp, #16]
 8020432:	4909      	ldr	r1, [pc, #36]	; (8020458 <siprintf+0x3c>)
 8020434:	f853 2b04 	ldr.w	r2, [r3], #4
 8020438:	9105      	str	r1, [sp, #20]
 802043a:	6800      	ldr	r0, [r0, #0]
 802043c:	9301      	str	r3, [sp, #4]
 802043e:	a902      	add	r1, sp, #8
 8020440:	f000 fb22 	bl	8020a88 <_svfiprintf_r>
 8020444:	9b02      	ldr	r3, [sp, #8]
 8020446:	2200      	movs	r2, #0
 8020448:	701a      	strb	r2, [r3, #0]
 802044a:	b01c      	add	sp, #112	; 0x70
 802044c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020450:	b003      	add	sp, #12
 8020452:	4770      	bx	lr
 8020454:	24000034 	.word	0x24000034
 8020458:	ffff0208 	.word	0xffff0208

0802045c <__sread>:
 802045c:	b510      	push	{r4, lr}
 802045e:	460c      	mov	r4, r1
 8020460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020464:	f000 fc10 	bl	8020c88 <_read_r>
 8020468:	2800      	cmp	r0, #0
 802046a:	bfab      	itete	ge
 802046c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802046e:	89a3      	ldrhlt	r3, [r4, #12]
 8020470:	181b      	addge	r3, r3, r0
 8020472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020476:	bfac      	ite	ge
 8020478:	6563      	strge	r3, [r4, #84]	; 0x54
 802047a:	81a3      	strhlt	r3, [r4, #12]
 802047c:	bd10      	pop	{r4, pc}

0802047e <__swrite>:
 802047e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020482:	461f      	mov	r7, r3
 8020484:	898b      	ldrh	r3, [r1, #12]
 8020486:	05db      	lsls	r3, r3, #23
 8020488:	4605      	mov	r5, r0
 802048a:	460c      	mov	r4, r1
 802048c:	4616      	mov	r6, r2
 802048e:	d505      	bpl.n	802049c <__swrite+0x1e>
 8020490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020494:	2302      	movs	r3, #2
 8020496:	2200      	movs	r2, #0
 8020498:	f000 f9e8 	bl	802086c <_lseek_r>
 802049c:	89a3      	ldrh	r3, [r4, #12]
 802049e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80204a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80204a6:	81a3      	strh	r3, [r4, #12]
 80204a8:	4632      	mov	r2, r6
 80204aa:	463b      	mov	r3, r7
 80204ac:	4628      	mov	r0, r5
 80204ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80204b2:	f000 b889 	b.w	80205c8 <_write_r>

080204b6 <__sseek>:
 80204b6:	b510      	push	{r4, lr}
 80204b8:	460c      	mov	r4, r1
 80204ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204be:	f000 f9d5 	bl	802086c <_lseek_r>
 80204c2:	1c43      	adds	r3, r0, #1
 80204c4:	89a3      	ldrh	r3, [r4, #12]
 80204c6:	bf15      	itete	ne
 80204c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80204ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80204ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80204d2:	81a3      	strheq	r3, [r4, #12]
 80204d4:	bf18      	it	ne
 80204d6:	81a3      	strhne	r3, [r4, #12]
 80204d8:	bd10      	pop	{r4, pc}

080204da <__sclose>:
 80204da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80204de:	f000 b8f3 	b.w	80206c8 <_close_r>

080204e2 <strchr>:
 80204e2:	b2c9      	uxtb	r1, r1
 80204e4:	4603      	mov	r3, r0
 80204e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80204ea:	b11a      	cbz	r2, 80204f4 <strchr+0x12>
 80204ec:	428a      	cmp	r2, r1
 80204ee:	d1f9      	bne.n	80204e4 <strchr+0x2>
 80204f0:	4618      	mov	r0, r3
 80204f2:	4770      	bx	lr
 80204f4:	2900      	cmp	r1, #0
 80204f6:	bf18      	it	ne
 80204f8:	2300      	movne	r3, #0
 80204fa:	e7f9      	b.n	80204f0 <strchr+0xe>

080204fc <strncpy>:
 80204fc:	b510      	push	{r4, lr}
 80204fe:	3901      	subs	r1, #1
 8020500:	4603      	mov	r3, r0
 8020502:	b132      	cbz	r2, 8020512 <strncpy+0x16>
 8020504:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020508:	f803 4b01 	strb.w	r4, [r3], #1
 802050c:	3a01      	subs	r2, #1
 802050e:	2c00      	cmp	r4, #0
 8020510:	d1f7      	bne.n	8020502 <strncpy+0x6>
 8020512:	441a      	add	r2, r3
 8020514:	2100      	movs	r1, #0
 8020516:	4293      	cmp	r3, r2
 8020518:	d100      	bne.n	802051c <strncpy+0x20>
 802051a:	bd10      	pop	{r4, pc}
 802051c:	f803 1b01 	strb.w	r1, [r3], #1
 8020520:	e7f9      	b.n	8020516 <strncpy+0x1a>
	...

08020524 <__swbuf_r>:
 8020524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020526:	460e      	mov	r6, r1
 8020528:	4614      	mov	r4, r2
 802052a:	4605      	mov	r5, r0
 802052c:	b118      	cbz	r0, 8020536 <__swbuf_r+0x12>
 802052e:	6983      	ldr	r3, [r0, #24]
 8020530:	b90b      	cbnz	r3, 8020536 <__swbuf_r+0x12>
 8020532:	f7ff f8f3 	bl	801f71c <__sinit>
 8020536:	4b21      	ldr	r3, [pc, #132]	; (80205bc <__swbuf_r+0x98>)
 8020538:	429c      	cmp	r4, r3
 802053a:	d12b      	bne.n	8020594 <__swbuf_r+0x70>
 802053c:	686c      	ldr	r4, [r5, #4]
 802053e:	69a3      	ldr	r3, [r4, #24]
 8020540:	60a3      	str	r3, [r4, #8]
 8020542:	89a3      	ldrh	r3, [r4, #12]
 8020544:	071a      	lsls	r2, r3, #28
 8020546:	d52f      	bpl.n	80205a8 <__swbuf_r+0x84>
 8020548:	6923      	ldr	r3, [r4, #16]
 802054a:	b36b      	cbz	r3, 80205a8 <__swbuf_r+0x84>
 802054c:	6923      	ldr	r3, [r4, #16]
 802054e:	6820      	ldr	r0, [r4, #0]
 8020550:	1ac0      	subs	r0, r0, r3
 8020552:	6963      	ldr	r3, [r4, #20]
 8020554:	b2f6      	uxtb	r6, r6
 8020556:	4283      	cmp	r3, r0
 8020558:	4637      	mov	r7, r6
 802055a:	dc04      	bgt.n	8020566 <__swbuf_r+0x42>
 802055c:	4621      	mov	r1, r4
 802055e:	4628      	mov	r0, r5
 8020560:	f000 f948 	bl	80207f4 <_fflush_r>
 8020564:	bb30      	cbnz	r0, 80205b4 <__swbuf_r+0x90>
 8020566:	68a3      	ldr	r3, [r4, #8]
 8020568:	3b01      	subs	r3, #1
 802056a:	60a3      	str	r3, [r4, #8]
 802056c:	6823      	ldr	r3, [r4, #0]
 802056e:	1c5a      	adds	r2, r3, #1
 8020570:	6022      	str	r2, [r4, #0]
 8020572:	701e      	strb	r6, [r3, #0]
 8020574:	6963      	ldr	r3, [r4, #20]
 8020576:	3001      	adds	r0, #1
 8020578:	4283      	cmp	r3, r0
 802057a:	d004      	beq.n	8020586 <__swbuf_r+0x62>
 802057c:	89a3      	ldrh	r3, [r4, #12]
 802057e:	07db      	lsls	r3, r3, #31
 8020580:	d506      	bpl.n	8020590 <__swbuf_r+0x6c>
 8020582:	2e0a      	cmp	r6, #10
 8020584:	d104      	bne.n	8020590 <__swbuf_r+0x6c>
 8020586:	4621      	mov	r1, r4
 8020588:	4628      	mov	r0, r5
 802058a:	f000 f933 	bl	80207f4 <_fflush_r>
 802058e:	b988      	cbnz	r0, 80205b4 <__swbuf_r+0x90>
 8020590:	4638      	mov	r0, r7
 8020592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020594:	4b0a      	ldr	r3, [pc, #40]	; (80205c0 <__swbuf_r+0x9c>)
 8020596:	429c      	cmp	r4, r3
 8020598:	d101      	bne.n	802059e <__swbuf_r+0x7a>
 802059a:	68ac      	ldr	r4, [r5, #8]
 802059c:	e7cf      	b.n	802053e <__swbuf_r+0x1a>
 802059e:	4b09      	ldr	r3, [pc, #36]	; (80205c4 <__swbuf_r+0xa0>)
 80205a0:	429c      	cmp	r4, r3
 80205a2:	bf08      	it	eq
 80205a4:	68ec      	ldreq	r4, [r5, #12]
 80205a6:	e7ca      	b.n	802053e <__swbuf_r+0x1a>
 80205a8:	4621      	mov	r1, r4
 80205aa:	4628      	mov	r0, r5
 80205ac:	f000 f81e 	bl	80205ec <__swsetup_r>
 80205b0:	2800      	cmp	r0, #0
 80205b2:	d0cb      	beq.n	802054c <__swbuf_r+0x28>
 80205b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80205b8:	e7ea      	b.n	8020590 <__swbuf_r+0x6c>
 80205ba:	bf00      	nop
 80205bc:	08024c90 	.word	0x08024c90
 80205c0:	08024cb0 	.word	0x08024cb0
 80205c4:	08024c70 	.word	0x08024c70

080205c8 <_write_r>:
 80205c8:	b538      	push	{r3, r4, r5, lr}
 80205ca:	4d07      	ldr	r5, [pc, #28]	; (80205e8 <_write_r+0x20>)
 80205cc:	4604      	mov	r4, r0
 80205ce:	4608      	mov	r0, r1
 80205d0:	4611      	mov	r1, r2
 80205d2:	2200      	movs	r2, #0
 80205d4:	602a      	str	r2, [r5, #0]
 80205d6:	461a      	mov	r2, r3
 80205d8:	f7e0 fb3d 	bl	8000c56 <_write>
 80205dc:	1c43      	adds	r3, r0, #1
 80205de:	d102      	bne.n	80205e6 <_write_r+0x1e>
 80205e0:	682b      	ldr	r3, [r5, #0]
 80205e2:	b103      	cbz	r3, 80205e6 <_write_r+0x1e>
 80205e4:	6023      	str	r3, [r4, #0]
 80205e6:	bd38      	pop	{r3, r4, r5, pc}
 80205e8:	2401009c 	.word	0x2401009c

080205ec <__swsetup_r>:
 80205ec:	4b32      	ldr	r3, [pc, #200]	; (80206b8 <__swsetup_r+0xcc>)
 80205ee:	b570      	push	{r4, r5, r6, lr}
 80205f0:	681d      	ldr	r5, [r3, #0]
 80205f2:	4606      	mov	r6, r0
 80205f4:	460c      	mov	r4, r1
 80205f6:	b125      	cbz	r5, 8020602 <__swsetup_r+0x16>
 80205f8:	69ab      	ldr	r3, [r5, #24]
 80205fa:	b913      	cbnz	r3, 8020602 <__swsetup_r+0x16>
 80205fc:	4628      	mov	r0, r5
 80205fe:	f7ff f88d 	bl	801f71c <__sinit>
 8020602:	4b2e      	ldr	r3, [pc, #184]	; (80206bc <__swsetup_r+0xd0>)
 8020604:	429c      	cmp	r4, r3
 8020606:	d10f      	bne.n	8020628 <__swsetup_r+0x3c>
 8020608:	686c      	ldr	r4, [r5, #4]
 802060a:	89a3      	ldrh	r3, [r4, #12]
 802060c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020610:	0719      	lsls	r1, r3, #28
 8020612:	d42c      	bmi.n	802066e <__swsetup_r+0x82>
 8020614:	06dd      	lsls	r5, r3, #27
 8020616:	d411      	bmi.n	802063c <__swsetup_r+0x50>
 8020618:	2309      	movs	r3, #9
 802061a:	6033      	str	r3, [r6, #0]
 802061c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020620:	81a3      	strh	r3, [r4, #12]
 8020622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020626:	e03e      	b.n	80206a6 <__swsetup_r+0xba>
 8020628:	4b25      	ldr	r3, [pc, #148]	; (80206c0 <__swsetup_r+0xd4>)
 802062a:	429c      	cmp	r4, r3
 802062c:	d101      	bne.n	8020632 <__swsetup_r+0x46>
 802062e:	68ac      	ldr	r4, [r5, #8]
 8020630:	e7eb      	b.n	802060a <__swsetup_r+0x1e>
 8020632:	4b24      	ldr	r3, [pc, #144]	; (80206c4 <__swsetup_r+0xd8>)
 8020634:	429c      	cmp	r4, r3
 8020636:	bf08      	it	eq
 8020638:	68ec      	ldreq	r4, [r5, #12]
 802063a:	e7e6      	b.n	802060a <__swsetup_r+0x1e>
 802063c:	0758      	lsls	r0, r3, #29
 802063e:	d512      	bpl.n	8020666 <__swsetup_r+0x7a>
 8020640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020642:	b141      	cbz	r1, 8020656 <__swsetup_r+0x6a>
 8020644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020648:	4299      	cmp	r1, r3
 802064a:	d002      	beq.n	8020652 <__swsetup_r+0x66>
 802064c:	4630      	mov	r0, r6
 802064e:	f7ff f98d 	bl	801f96c <_free_r>
 8020652:	2300      	movs	r3, #0
 8020654:	6363      	str	r3, [r4, #52]	; 0x34
 8020656:	89a3      	ldrh	r3, [r4, #12]
 8020658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802065c:	81a3      	strh	r3, [r4, #12]
 802065e:	2300      	movs	r3, #0
 8020660:	6063      	str	r3, [r4, #4]
 8020662:	6923      	ldr	r3, [r4, #16]
 8020664:	6023      	str	r3, [r4, #0]
 8020666:	89a3      	ldrh	r3, [r4, #12]
 8020668:	f043 0308 	orr.w	r3, r3, #8
 802066c:	81a3      	strh	r3, [r4, #12]
 802066e:	6923      	ldr	r3, [r4, #16]
 8020670:	b94b      	cbnz	r3, 8020686 <__swsetup_r+0x9a>
 8020672:	89a3      	ldrh	r3, [r4, #12]
 8020674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802067c:	d003      	beq.n	8020686 <__swsetup_r+0x9a>
 802067e:	4621      	mov	r1, r4
 8020680:	4630      	mov	r0, r6
 8020682:	f000 f92b 	bl	80208dc <__smakebuf_r>
 8020686:	89a0      	ldrh	r0, [r4, #12]
 8020688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802068c:	f010 0301 	ands.w	r3, r0, #1
 8020690:	d00a      	beq.n	80206a8 <__swsetup_r+0xbc>
 8020692:	2300      	movs	r3, #0
 8020694:	60a3      	str	r3, [r4, #8]
 8020696:	6963      	ldr	r3, [r4, #20]
 8020698:	425b      	negs	r3, r3
 802069a:	61a3      	str	r3, [r4, #24]
 802069c:	6923      	ldr	r3, [r4, #16]
 802069e:	b943      	cbnz	r3, 80206b2 <__swsetup_r+0xc6>
 80206a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80206a4:	d1ba      	bne.n	802061c <__swsetup_r+0x30>
 80206a6:	bd70      	pop	{r4, r5, r6, pc}
 80206a8:	0781      	lsls	r1, r0, #30
 80206aa:	bf58      	it	pl
 80206ac:	6963      	ldrpl	r3, [r4, #20]
 80206ae:	60a3      	str	r3, [r4, #8]
 80206b0:	e7f4      	b.n	802069c <__swsetup_r+0xb0>
 80206b2:	2000      	movs	r0, #0
 80206b4:	e7f7      	b.n	80206a6 <__swsetup_r+0xba>
 80206b6:	bf00      	nop
 80206b8:	24000034 	.word	0x24000034
 80206bc:	08024c90 	.word	0x08024c90
 80206c0:	08024cb0 	.word	0x08024cb0
 80206c4:	08024c70 	.word	0x08024c70

080206c8 <_close_r>:
 80206c8:	b538      	push	{r3, r4, r5, lr}
 80206ca:	4d06      	ldr	r5, [pc, #24]	; (80206e4 <_close_r+0x1c>)
 80206cc:	2300      	movs	r3, #0
 80206ce:	4604      	mov	r4, r0
 80206d0:	4608      	mov	r0, r1
 80206d2:	602b      	str	r3, [r5, #0]
 80206d4:	f7e0 fff5 	bl	80016c2 <_close>
 80206d8:	1c43      	adds	r3, r0, #1
 80206da:	d102      	bne.n	80206e2 <_close_r+0x1a>
 80206dc:	682b      	ldr	r3, [r5, #0]
 80206de:	b103      	cbz	r3, 80206e2 <_close_r+0x1a>
 80206e0:	6023      	str	r3, [r4, #0]
 80206e2:	bd38      	pop	{r3, r4, r5, pc}
 80206e4:	2401009c 	.word	0x2401009c

080206e8 <__sflush_r>:
 80206e8:	898a      	ldrh	r2, [r1, #12]
 80206ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206ee:	4605      	mov	r5, r0
 80206f0:	0710      	lsls	r0, r2, #28
 80206f2:	460c      	mov	r4, r1
 80206f4:	d458      	bmi.n	80207a8 <__sflush_r+0xc0>
 80206f6:	684b      	ldr	r3, [r1, #4]
 80206f8:	2b00      	cmp	r3, #0
 80206fa:	dc05      	bgt.n	8020708 <__sflush_r+0x20>
 80206fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80206fe:	2b00      	cmp	r3, #0
 8020700:	dc02      	bgt.n	8020708 <__sflush_r+0x20>
 8020702:	2000      	movs	r0, #0
 8020704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802070a:	2e00      	cmp	r6, #0
 802070c:	d0f9      	beq.n	8020702 <__sflush_r+0x1a>
 802070e:	2300      	movs	r3, #0
 8020710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020714:	682f      	ldr	r7, [r5, #0]
 8020716:	602b      	str	r3, [r5, #0]
 8020718:	d032      	beq.n	8020780 <__sflush_r+0x98>
 802071a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802071c:	89a3      	ldrh	r3, [r4, #12]
 802071e:	075a      	lsls	r2, r3, #29
 8020720:	d505      	bpl.n	802072e <__sflush_r+0x46>
 8020722:	6863      	ldr	r3, [r4, #4]
 8020724:	1ac0      	subs	r0, r0, r3
 8020726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020728:	b10b      	cbz	r3, 802072e <__sflush_r+0x46>
 802072a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802072c:	1ac0      	subs	r0, r0, r3
 802072e:	2300      	movs	r3, #0
 8020730:	4602      	mov	r2, r0
 8020732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020734:	6a21      	ldr	r1, [r4, #32]
 8020736:	4628      	mov	r0, r5
 8020738:	47b0      	blx	r6
 802073a:	1c43      	adds	r3, r0, #1
 802073c:	89a3      	ldrh	r3, [r4, #12]
 802073e:	d106      	bne.n	802074e <__sflush_r+0x66>
 8020740:	6829      	ldr	r1, [r5, #0]
 8020742:	291d      	cmp	r1, #29
 8020744:	d82c      	bhi.n	80207a0 <__sflush_r+0xb8>
 8020746:	4a2a      	ldr	r2, [pc, #168]	; (80207f0 <__sflush_r+0x108>)
 8020748:	40ca      	lsrs	r2, r1
 802074a:	07d6      	lsls	r6, r2, #31
 802074c:	d528      	bpl.n	80207a0 <__sflush_r+0xb8>
 802074e:	2200      	movs	r2, #0
 8020750:	6062      	str	r2, [r4, #4]
 8020752:	04d9      	lsls	r1, r3, #19
 8020754:	6922      	ldr	r2, [r4, #16]
 8020756:	6022      	str	r2, [r4, #0]
 8020758:	d504      	bpl.n	8020764 <__sflush_r+0x7c>
 802075a:	1c42      	adds	r2, r0, #1
 802075c:	d101      	bne.n	8020762 <__sflush_r+0x7a>
 802075e:	682b      	ldr	r3, [r5, #0]
 8020760:	b903      	cbnz	r3, 8020764 <__sflush_r+0x7c>
 8020762:	6560      	str	r0, [r4, #84]	; 0x54
 8020764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020766:	602f      	str	r7, [r5, #0]
 8020768:	2900      	cmp	r1, #0
 802076a:	d0ca      	beq.n	8020702 <__sflush_r+0x1a>
 802076c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020770:	4299      	cmp	r1, r3
 8020772:	d002      	beq.n	802077a <__sflush_r+0x92>
 8020774:	4628      	mov	r0, r5
 8020776:	f7ff f8f9 	bl	801f96c <_free_r>
 802077a:	2000      	movs	r0, #0
 802077c:	6360      	str	r0, [r4, #52]	; 0x34
 802077e:	e7c1      	b.n	8020704 <__sflush_r+0x1c>
 8020780:	6a21      	ldr	r1, [r4, #32]
 8020782:	2301      	movs	r3, #1
 8020784:	4628      	mov	r0, r5
 8020786:	47b0      	blx	r6
 8020788:	1c41      	adds	r1, r0, #1
 802078a:	d1c7      	bne.n	802071c <__sflush_r+0x34>
 802078c:	682b      	ldr	r3, [r5, #0]
 802078e:	2b00      	cmp	r3, #0
 8020790:	d0c4      	beq.n	802071c <__sflush_r+0x34>
 8020792:	2b1d      	cmp	r3, #29
 8020794:	d001      	beq.n	802079a <__sflush_r+0xb2>
 8020796:	2b16      	cmp	r3, #22
 8020798:	d101      	bne.n	802079e <__sflush_r+0xb6>
 802079a:	602f      	str	r7, [r5, #0]
 802079c:	e7b1      	b.n	8020702 <__sflush_r+0x1a>
 802079e:	89a3      	ldrh	r3, [r4, #12]
 80207a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80207a4:	81a3      	strh	r3, [r4, #12]
 80207a6:	e7ad      	b.n	8020704 <__sflush_r+0x1c>
 80207a8:	690f      	ldr	r7, [r1, #16]
 80207aa:	2f00      	cmp	r7, #0
 80207ac:	d0a9      	beq.n	8020702 <__sflush_r+0x1a>
 80207ae:	0793      	lsls	r3, r2, #30
 80207b0:	680e      	ldr	r6, [r1, #0]
 80207b2:	bf08      	it	eq
 80207b4:	694b      	ldreq	r3, [r1, #20]
 80207b6:	600f      	str	r7, [r1, #0]
 80207b8:	bf18      	it	ne
 80207ba:	2300      	movne	r3, #0
 80207bc:	eba6 0807 	sub.w	r8, r6, r7
 80207c0:	608b      	str	r3, [r1, #8]
 80207c2:	f1b8 0f00 	cmp.w	r8, #0
 80207c6:	dd9c      	ble.n	8020702 <__sflush_r+0x1a>
 80207c8:	6a21      	ldr	r1, [r4, #32]
 80207ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80207cc:	4643      	mov	r3, r8
 80207ce:	463a      	mov	r2, r7
 80207d0:	4628      	mov	r0, r5
 80207d2:	47b0      	blx	r6
 80207d4:	2800      	cmp	r0, #0
 80207d6:	dc06      	bgt.n	80207e6 <__sflush_r+0xfe>
 80207d8:	89a3      	ldrh	r3, [r4, #12]
 80207da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80207de:	81a3      	strh	r3, [r4, #12]
 80207e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80207e4:	e78e      	b.n	8020704 <__sflush_r+0x1c>
 80207e6:	4407      	add	r7, r0
 80207e8:	eba8 0800 	sub.w	r8, r8, r0
 80207ec:	e7e9      	b.n	80207c2 <__sflush_r+0xda>
 80207ee:	bf00      	nop
 80207f0:	20400001 	.word	0x20400001

080207f4 <_fflush_r>:
 80207f4:	b538      	push	{r3, r4, r5, lr}
 80207f6:	690b      	ldr	r3, [r1, #16]
 80207f8:	4605      	mov	r5, r0
 80207fa:	460c      	mov	r4, r1
 80207fc:	b913      	cbnz	r3, 8020804 <_fflush_r+0x10>
 80207fe:	2500      	movs	r5, #0
 8020800:	4628      	mov	r0, r5
 8020802:	bd38      	pop	{r3, r4, r5, pc}
 8020804:	b118      	cbz	r0, 802080e <_fflush_r+0x1a>
 8020806:	6983      	ldr	r3, [r0, #24]
 8020808:	b90b      	cbnz	r3, 802080e <_fflush_r+0x1a>
 802080a:	f7fe ff87 	bl	801f71c <__sinit>
 802080e:	4b14      	ldr	r3, [pc, #80]	; (8020860 <_fflush_r+0x6c>)
 8020810:	429c      	cmp	r4, r3
 8020812:	d11b      	bne.n	802084c <_fflush_r+0x58>
 8020814:	686c      	ldr	r4, [r5, #4]
 8020816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802081a:	2b00      	cmp	r3, #0
 802081c:	d0ef      	beq.n	80207fe <_fflush_r+0xa>
 802081e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020820:	07d0      	lsls	r0, r2, #31
 8020822:	d404      	bmi.n	802082e <_fflush_r+0x3a>
 8020824:	0599      	lsls	r1, r3, #22
 8020826:	d402      	bmi.n	802082e <_fflush_r+0x3a>
 8020828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802082a:	f7ff f84c 	bl	801f8c6 <__retarget_lock_acquire_recursive>
 802082e:	4628      	mov	r0, r5
 8020830:	4621      	mov	r1, r4
 8020832:	f7ff ff59 	bl	80206e8 <__sflush_r>
 8020836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020838:	07da      	lsls	r2, r3, #31
 802083a:	4605      	mov	r5, r0
 802083c:	d4e0      	bmi.n	8020800 <_fflush_r+0xc>
 802083e:	89a3      	ldrh	r3, [r4, #12]
 8020840:	059b      	lsls	r3, r3, #22
 8020842:	d4dd      	bmi.n	8020800 <_fflush_r+0xc>
 8020844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020846:	f7ff f83f 	bl	801f8c8 <__retarget_lock_release_recursive>
 802084a:	e7d9      	b.n	8020800 <_fflush_r+0xc>
 802084c:	4b05      	ldr	r3, [pc, #20]	; (8020864 <_fflush_r+0x70>)
 802084e:	429c      	cmp	r4, r3
 8020850:	d101      	bne.n	8020856 <_fflush_r+0x62>
 8020852:	68ac      	ldr	r4, [r5, #8]
 8020854:	e7df      	b.n	8020816 <_fflush_r+0x22>
 8020856:	4b04      	ldr	r3, [pc, #16]	; (8020868 <_fflush_r+0x74>)
 8020858:	429c      	cmp	r4, r3
 802085a:	bf08      	it	eq
 802085c:	68ec      	ldreq	r4, [r5, #12]
 802085e:	e7da      	b.n	8020816 <_fflush_r+0x22>
 8020860:	08024c90 	.word	0x08024c90
 8020864:	08024cb0 	.word	0x08024cb0
 8020868:	08024c70 	.word	0x08024c70

0802086c <_lseek_r>:
 802086c:	b538      	push	{r3, r4, r5, lr}
 802086e:	4d07      	ldr	r5, [pc, #28]	; (802088c <_lseek_r+0x20>)
 8020870:	4604      	mov	r4, r0
 8020872:	4608      	mov	r0, r1
 8020874:	4611      	mov	r1, r2
 8020876:	2200      	movs	r2, #0
 8020878:	602a      	str	r2, [r5, #0]
 802087a:	461a      	mov	r2, r3
 802087c:	f7e0 ff48 	bl	8001710 <_lseek>
 8020880:	1c43      	adds	r3, r0, #1
 8020882:	d102      	bne.n	802088a <_lseek_r+0x1e>
 8020884:	682b      	ldr	r3, [r5, #0]
 8020886:	b103      	cbz	r3, 802088a <_lseek_r+0x1e>
 8020888:	6023      	str	r3, [r4, #0]
 802088a:	bd38      	pop	{r3, r4, r5, pc}
 802088c:	2401009c 	.word	0x2401009c

08020890 <__swhatbuf_r>:
 8020890:	b570      	push	{r4, r5, r6, lr}
 8020892:	460e      	mov	r6, r1
 8020894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020898:	2900      	cmp	r1, #0
 802089a:	b096      	sub	sp, #88	; 0x58
 802089c:	4614      	mov	r4, r2
 802089e:	461d      	mov	r5, r3
 80208a0:	da08      	bge.n	80208b4 <__swhatbuf_r+0x24>
 80208a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80208a6:	2200      	movs	r2, #0
 80208a8:	602a      	str	r2, [r5, #0]
 80208aa:	061a      	lsls	r2, r3, #24
 80208ac:	d410      	bmi.n	80208d0 <__swhatbuf_r+0x40>
 80208ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80208b2:	e00e      	b.n	80208d2 <__swhatbuf_r+0x42>
 80208b4:	466a      	mov	r2, sp
 80208b6:	f000 f9f9 	bl	8020cac <_fstat_r>
 80208ba:	2800      	cmp	r0, #0
 80208bc:	dbf1      	blt.n	80208a2 <__swhatbuf_r+0x12>
 80208be:	9a01      	ldr	r2, [sp, #4]
 80208c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80208c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80208c8:	425a      	negs	r2, r3
 80208ca:	415a      	adcs	r2, r3
 80208cc:	602a      	str	r2, [r5, #0]
 80208ce:	e7ee      	b.n	80208ae <__swhatbuf_r+0x1e>
 80208d0:	2340      	movs	r3, #64	; 0x40
 80208d2:	2000      	movs	r0, #0
 80208d4:	6023      	str	r3, [r4, #0]
 80208d6:	b016      	add	sp, #88	; 0x58
 80208d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080208dc <__smakebuf_r>:
 80208dc:	898b      	ldrh	r3, [r1, #12]
 80208de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80208e0:	079d      	lsls	r5, r3, #30
 80208e2:	4606      	mov	r6, r0
 80208e4:	460c      	mov	r4, r1
 80208e6:	d507      	bpl.n	80208f8 <__smakebuf_r+0x1c>
 80208e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80208ec:	6023      	str	r3, [r4, #0]
 80208ee:	6123      	str	r3, [r4, #16]
 80208f0:	2301      	movs	r3, #1
 80208f2:	6163      	str	r3, [r4, #20]
 80208f4:	b002      	add	sp, #8
 80208f6:	bd70      	pop	{r4, r5, r6, pc}
 80208f8:	ab01      	add	r3, sp, #4
 80208fa:	466a      	mov	r2, sp
 80208fc:	f7ff ffc8 	bl	8020890 <__swhatbuf_r>
 8020900:	9900      	ldr	r1, [sp, #0]
 8020902:	4605      	mov	r5, r0
 8020904:	4630      	mov	r0, r6
 8020906:	f7ff f89d 	bl	801fa44 <_malloc_r>
 802090a:	b948      	cbnz	r0, 8020920 <__smakebuf_r+0x44>
 802090c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020910:	059a      	lsls	r2, r3, #22
 8020912:	d4ef      	bmi.n	80208f4 <__smakebuf_r+0x18>
 8020914:	f023 0303 	bic.w	r3, r3, #3
 8020918:	f043 0302 	orr.w	r3, r3, #2
 802091c:	81a3      	strh	r3, [r4, #12]
 802091e:	e7e3      	b.n	80208e8 <__smakebuf_r+0xc>
 8020920:	4b0d      	ldr	r3, [pc, #52]	; (8020958 <__smakebuf_r+0x7c>)
 8020922:	62b3      	str	r3, [r6, #40]	; 0x28
 8020924:	89a3      	ldrh	r3, [r4, #12]
 8020926:	6020      	str	r0, [r4, #0]
 8020928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802092c:	81a3      	strh	r3, [r4, #12]
 802092e:	9b00      	ldr	r3, [sp, #0]
 8020930:	6163      	str	r3, [r4, #20]
 8020932:	9b01      	ldr	r3, [sp, #4]
 8020934:	6120      	str	r0, [r4, #16]
 8020936:	b15b      	cbz	r3, 8020950 <__smakebuf_r+0x74>
 8020938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802093c:	4630      	mov	r0, r6
 802093e:	f000 f9c7 	bl	8020cd0 <_isatty_r>
 8020942:	b128      	cbz	r0, 8020950 <__smakebuf_r+0x74>
 8020944:	89a3      	ldrh	r3, [r4, #12]
 8020946:	f023 0303 	bic.w	r3, r3, #3
 802094a:	f043 0301 	orr.w	r3, r3, #1
 802094e:	81a3      	strh	r3, [r4, #12]
 8020950:	89a0      	ldrh	r0, [r4, #12]
 8020952:	4305      	orrs	r5, r0
 8020954:	81a5      	strh	r5, [r4, #12]
 8020956:	e7cd      	b.n	80208f4 <__smakebuf_r+0x18>
 8020958:	0801f6b5 	.word	0x0801f6b5

0802095c <__malloc_lock>:
 802095c:	4801      	ldr	r0, [pc, #4]	; (8020964 <__malloc_lock+0x8>)
 802095e:	f7fe bfb2 	b.w	801f8c6 <__retarget_lock_acquire_recursive>
 8020962:	bf00      	nop
 8020964:	24010090 	.word	0x24010090

08020968 <__malloc_unlock>:
 8020968:	4801      	ldr	r0, [pc, #4]	; (8020970 <__malloc_unlock+0x8>)
 802096a:	f7fe bfad 	b.w	801f8c8 <__retarget_lock_release_recursive>
 802096e:	bf00      	nop
 8020970:	24010090 	.word	0x24010090

08020974 <_realloc_r>:
 8020974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020978:	4680      	mov	r8, r0
 802097a:	4614      	mov	r4, r2
 802097c:	460e      	mov	r6, r1
 802097e:	b921      	cbnz	r1, 802098a <_realloc_r+0x16>
 8020980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020984:	4611      	mov	r1, r2
 8020986:	f7ff b85d 	b.w	801fa44 <_malloc_r>
 802098a:	b92a      	cbnz	r2, 8020998 <_realloc_r+0x24>
 802098c:	f7fe ffee 	bl	801f96c <_free_r>
 8020990:	4625      	mov	r5, r4
 8020992:	4628      	mov	r0, r5
 8020994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020998:	f000 f9aa 	bl	8020cf0 <_malloc_usable_size_r>
 802099c:	4284      	cmp	r4, r0
 802099e:	4607      	mov	r7, r0
 80209a0:	d802      	bhi.n	80209a8 <_realloc_r+0x34>
 80209a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80209a6:	d812      	bhi.n	80209ce <_realloc_r+0x5a>
 80209a8:	4621      	mov	r1, r4
 80209aa:	4640      	mov	r0, r8
 80209ac:	f7ff f84a 	bl	801fa44 <_malloc_r>
 80209b0:	4605      	mov	r5, r0
 80209b2:	2800      	cmp	r0, #0
 80209b4:	d0ed      	beq.n	8020992 <_realloc_r+0x1e>
 80209b6:	42bc      	cmp	r4, r7
 80209b8:	4622      	mov	r2, r4
 80209ba:	4631      	mov	r1, r6
 80209bc:	bf28      	it	cs
 80209be:	463a      	movcs	r2, r7
 80209c0:	f7fe ffa4 	bl	801f90c <memcpy>
 80209c4:	4631      	mov	r1, r6
 80209c6:	4640      	mov	r0, r8
 80209c8:	f7fe ffd0 	bl	801f96c <_free_r>
 80209cc:	e7e1      	b.n	8020992 <_realloc_r+0x1e>
 80209ce:	4635      	mov	r5, r6
 80209d0:	e7df      	b.n	8020992 <_realloc_r+0x1e>

080209d2 <__ssputs_r>:
 80209d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209d6:	688e      	ldr	r6, [r1, #8]
 80209d8:	429e      	cmp	r6, r3
 80209da:	4682      	mov	sl, r0
 80209dc:	460c      	mov	r4, r1
 80209de:	4690      	mov	r8, r2
 80209e0:	461f      	mov	r7, r3
 80209e2:	d838      	bhi.n	8020a56 <__ssputs_r+0x84>
 80209e4:	898a      	ldrh	r2, [r1, #12]
 80209e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80209ea:	d032      	beq.n	8020a52 <__ssputs_r+0x80>
 80209ec:	6825      	ldr	r5, [r4, #0]
 80209ee:	6909      	ldr	r1, [r1, #16]
 80209f0:	eba5 0901 	sub.w	r9, r5, r1
 80209f4:	6965      	ldr	r5, [r4, #20]
 80209f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80209fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80209fe:	3301      	adds	r3, #1
 8020a00:	444b      	add	r3, r9
 8020a02:	106d      	asrs	r5, r5, #1
 8020a04:	429d      	cmp	r5, r3
 8020a06:	bf38      	it	cc
 8020a08:	461d      	movcc	r5, r3
 8020a0a:	0553      	lsls	r3, r2, #21
 8020a0c:	d531      	bpl.n	8020a72 <__ssputs_r+0xa0>
 8020a0e:	4629      	mov	r1, r5
 8020a10:	f7ff f818 	bl	801fa44 <_malloc_r>
 8020a14:	4606      	mov	r6, r0
 8020a16:	b950      	cbnz	r0, 8020a2e <__ssputs_r+0x5c>
 8020a18:	230c      	movs	r3, #12
 8020a1a:	f8ca 3000 	str.w	r3, [sl]
 8020a1e:	89a3      	ldrh	r3, [r4, #12]
 8020a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a24:	81a3      	strh	r3, [r4, #12]
 8020a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a2e:	6921      	ldr	r1, [r4, #16]
 8020a30:	464a      	mov	r2, r9
 8020a32:	f7fe ff6b 	bl	801f90c <memcpy>
 8020a36:	89a3      	ldrh	r3, [r4, #12]
 8020a38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020a40:	81a3      	strh	r3, [r4, #12]
 8020a42:	6126      	str	r6, [r4, #16]
 8020a44:	6165      	str	r5, [r4, #20]
 8020a46:	444e      	add	r6, r9
 8020a48:	eba5 0509 	sub.w	r5, r5, r9
 8020a4c:	6026      	str	r6, [r4, #0]
 8020a4e:	60a5      	str	r5, [r4, #8]
 8020a50:	463e      	mov	r6, r7
 8020a52:	42be      	cmp	r6, r7
 8020a54:	d900      	bls.n	8020a58 <__ssputs_r+0x86>
 8020a56:	463e      	mov	r6, r7
 8020a58:	6820      	ldr	r0, [r4, #0]
 8020a5a:	4632      	mov	r2, r6
 8020a5c:	4641      	mov	r1, r8
 8020a5e:	f7fe ff63 	bl	801f928 <memmove>
 8020a62:	68a3      	ldr	r3, [r4, #8]
 8020a64:	1b9b      	subs	r3, r3, r6
 8020a66:	60a3      	str	r3, [r4, #8]
 8020a68:	6823      	ldr	r3, [r4, #0]
 8020a6a:	4433      	add	r3, r6
 8020a6c:	6023      	str	r3, [r4, #0]
 8020a6e:	2000      	movs	r0, #0
 8020a70:	e7db      	b.n	8020a2a <__ssputs_r+0x58>
 8020a72:	462a      	mov	r2, r5
 8020a74:	f7ff ff7e 	bl	8020974 <_realloc_r>
 8020a78:	4606      	mov	r6, r0
 8020a7a:	2800      	cmp	r0, #0
 8020a7c:	d1e1      	bne.n	8020a42 <__ssputs_r+0x70>
 8020a7e:	6921      	ldr	r1, [r4, #16]
 8020a80:	4650      	mov	r0, sl
 8020a82:	f7fe ff73 	bl	801f96c <_free_r>
 8020a86:	e7c7      	b.n	8020a18 <__ssputs_r+0x46>

08020a88 <_svfiprintf_r>:
 8020a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a8c:	4698      	mov	r8, r3
 8020a8e:	898b      	ldrh	r3, [r1, #12]
 8020a90:	061b      	lsls	r3, r3, #24
 8020a92:	b09d      	sub	sp, #116	; 0x74
 8020a94:	4607      	mov	r7, r0
 8020a96:	460d      	mov	r5, r1
 8020a98:	4614      	mov	r4, r2
 8020a9a:	d50e      	bpl.n	8020aba <_svfiprintf_r+0x32>
 8020a9c:	690b      	ldr	r3, [r1, #16]
 8020a9e:	b963      	cbnz	r3, 8020aba <_svfiprintf_r+0x32>
 8020aa0:	2140      	movs	r1, #64	; 0x40
 8020aa2:	f7fe ffcf 	bl	801fa44 <_malloc_r>
 8020aa6:	6028      	str	r0, [r5, #0]
 8020aa8:	6128      	str	r0, [r5, #16]
 8020aaa:	b920      	cbnz	r0, 8020ab6 <_svfiprintf_r+0x2e>
 8020aac:	230c      	movs	r3, #12
 8020aae:	603b      	str	r3, [r7, #0]
 8020ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020ab4:	e0d1      	b.n	8020c5a <_svfiprintf_r+0x1d2>
 8020ab6:	2340      	movs	r3, #64	; 0x40
 8020ab8:	616b      	str	r3, [r5, #20]
 8020aba:	2300      	movs	r3, #0
 8020abc:	9309      	str	r3, [sp, #36]	; 0x24
 8020abe:	2320      	movs	r3, #32
 8020ac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8020ac8:	2330      	movs	r3, #48	; 0x30
 8020aca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020c74 <_svfiprintf_r+0x1ec>
 8020ace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020ad2:	f04f 0901 	mov.w	r9, #1
 8020ad6:	4623      	mov	r3, r4
 8020ad8:	469a      	mov	sl, r3
 8020ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ade:	b10a      	cbz	r2, 8020ae4 <_svfiprintf_r+0x5c>
 8020ae0:	2a25      	cmp	r2, #37	; 0x25
 8020ae2:	d1f9      	bne.n	8020ad8 <_svfiprintf_r+0x50>
 8020ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8020ae8:	d00b      	beq.n	8020b02 <_svfiprintf_r+0x7a>
 8020aea:	465b      	mov	r3, fp
 8020aec:	4622      	mov	r2, r4
 8020aee:	4629      	mov	r1, r5
 8020af0:	4638      	mov	r0, r7
 8020af2:	f7ff ff6e 	bl	80209d2 <__ssputs_r>
 8020af6:	3001      	adds	r0, #1
 8020af8:	f000 80aa 	beq.w	8020c50 <_svfiprintf_r+0x1c8>
 8020afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020afe:	445a      	add	r2, fp
 8020b00:	9209      	str	r2, [sp, #36]	; 0x24
 8020b02:	f89a 3000 	ldrb.w	r3, [sl]
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	f000 80a2 	beq.w	8020c50 <_svfiprintf_r+0x1c8>
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020b16:	f10a 0a01 	add.w	sl, sl, #1
 8020b1a:	9304      	str	r3, [sp, #16]
 8020b1c:	9307      	str	r3, [sp, #28]
 8020b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020b22:	931a      	str	r3, [sp, #104]	; 0x68
 8020b24:	4654      	mov	r4, sl
 8020b26:	2205      	movs	r2, #5
 8020b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b2c:	4851      	ldr	r0, [pc, #324]	; (8020c74 <_svfiprintf_r+0x1ec>)
 8020b2e:	f7df fbd7 	bl	80002e0 <memchr>
 8020b32:	9a04      	ldr	r2, [sp, #16]
 8020b34:	b9d8      	cbnz	r0, 8020b6e <_svfiprintf_r+0xe6>
 8020b36:	06d0      	lsls	r0, r2, #27
 8020b38:	bf44      	itt	mi
 8020b3a:	2320      	movmi	r3, #32
 8020b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b40:	0711      	lsls	r1, r2, #28
 8020b42:	bf44      	itt	mi
 8020b44:	232b      	movmi	r3, #43	; 0x2b
 8020b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8020b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8020b50:	d015      	beq.n	8020b7e <_svfiprintf_r+0xf6>
 8020b52:	9a07      	ldr	r2, [sp, #28]
 8020b54:	4654      	mov	r4, sl
 8020b56:	2000      	movs	r0, #0
 8020b58:	f04f 0c0a 	mov.w	ip, #10
 8020b5c:	4621      	mov	r1, r4
 8020b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020b62:	3b30      	subs	r3, #48	; 0x30
 8020b64:	2b09      	cmp	r3, #9
 8020b66:	d94e      	bls.n	8020c06 <_svfiprintf_r+0x17e>
 8020b68:	b1b0      	cbz	r0, 8020b98 <_svfiprintf_r+0x110>
 8020b6a:	9207      	str	r2, [sp, #28]
 8020b6c:	e014      	b.n	8020b98 <_svfiprintf_r+0x110>
 8020b6e:	eba0 0308 	sub.w	r3, r0, r8
 8020b72:	fa09 f303 	lsl.w	r3, r9, r3
 8020b76:	4313      	orrs	r3, r2
 8020b78:	9304      	str	r3, [sp, #16]
 8020b7a:	46a2      	mov	sl, r4
 8020b7c:	e7d2      	b.n	8020b24 <_svfiprintf_r+0x9c>
 8020b7e:	9b03      	ldr	r3, [sp, #12]
 8020b80:	1d19      	adds	r1, r3, #4
 8020b82:	681b      	ldr	r3, [r3, #0]
 8020b84:	9103      	str	r1, [sp, #12]
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	bfbb      	ittet	lt
 8020b8a:	425b      	neglt	r3, r3
 8020b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8020b90:	9307      	strge	r3, [sp, #28]
 8020b92:	9307      	strlt	r3, [sp, #28]
 8020b94:	bfb8      	it	lt
 8020b96:	9204      	strlt	r2, [sp, #16]
 8020b98:	7823      	ldrb	r3, [r4, #0]
 8020b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8020b9c:	d10c      	bne.n	8020bb8 <_svfiprintf_r+0x130>
 8020b9e:	7863      	ldrb	r3, [r4, #1]
 8020ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8020ba2:	d135      	bne.n	8020c10 <_svfiprintf_r+0x188>
 8020ba4:	9b03      	ldr	r3, [sp, #12]
 8020ba6:	1d1a      	adds	r2, r3, #4
 8020ba8:	681b      	ldr	r3, [r3, #0]
 8020baa:	9203      	str	r2, [sp, #12]
 8020bac:	2b00      	cmp	r3, #0
 8020bae:	bfb8      	it	lt
 8020bb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020bb4:	3402      	adds	r4, #2
 8020bb6:	9305      	str	r3, [sp, #20]
 8020bb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020c84 <_svfiprintf_r+0x1fc>
 8020bbc:	7821      	ldrb	r1, [r4, #0]
 8020bbe:	2203      	movs	r2, #3
 8020bc0:	4650      	mov	r0, sl
 8020bc2:	f7df fb8d 	bl	80002e0 <memchr>
 8020bc6:	b140      	cbz	r0, 8020bda <_svfiprintf_r+0x152>
 8020bc8:	2340      	movs	r3, #64	; 0x40
 8020bca:	eba0 000a 	sub.w	r0, r0, sl
 8020bce:	fa03 f000 	lsl.w	r0, r3, r0
 8020bd2:	9b04      	ldr	r3, [sp, #16]
 8020bd4:	4303      	orrs	r3, r0
 8020bd6:	3401      	adds	r4, #1
 8020bd8:	9304      	str	r3, [sp, #16]
 8020bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020bde:	4826      	ldr	r0, [pc, #152]	; (8020c78 <_svfiprintf_r+0x1f0>)
 8020be0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020be4:	2206      	movs	r2, #6
 8020be6:	f7df fb7b 	bl	80002e0 <memchr>
 8020bea:	2800      	cmp	r0, #0
 8020bec:	d038      	beq.n	8020c60 <_svfiprintf_r+0x1d8>
 8020bee:	4b23      	ldr	r3, [pc, #140]	; (8020c7c <_svfiprintf_r+0x1f4>)
 8020bf0:	bb1b      	cbnz	r3, 8020c3a <_svfiprintf_r+0x1b2>
 8020bf2:	9b03      	ldr	r3, [sp, #12]
 8020bf4:	3307      	adds	r3, #7
 8020bf6:	f023 0307 	bic.w	r3, r3, #7
 8020bfa:	3308      	adds	r3, #8
 8020bfc:	9303      	str	r3, [sp, #12]
 8020bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c00:	4433      	add	r3, r6
 8020c02:	9309      	str	r3, [sp, #36]	; 0x24
 8020c04:	e767      	b.n	8020ad6 <_svfiprintf_r+0x4e>
 8020c06:	fb0c 3202 	mla	r2, ip, r2, r3
 8020c0a:	460c      	mov	r4, r1
 8020c0c:	2001      	movs	r0, #1
 8020c0e:	e7a5      	b.n	8020b5c <_svfiprintf_r+0xd4>
 8020c10:	2300      	movs	r3, #0
 8020c12:	3401      	adds	r4, #1
 8020c14:	9305      	str	r3, [sp, #20]
 8020c16:	4619      	mov	r1, r3
 8020c18:	f04f 0c0a 	mov.w	ip, #10
 8020c1c:	4620      	mov	r0, r4
 8020c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020c22:	3a30      	subs	r2, #48	; 0x30
 8020c24:	2a09      	cmp	r2, #9
 8020c26:	d903      	bls.n	8020c30 <_svfiprintf_r+0x1a8>
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	d0c5      	beq.n	8020bb8 <_svfiprintf_r+0x130>
 8020c2c:	9105      	str	r1, [sp, #20]
 8020c2e:	e7c3      	b.n	8020bb8 <_svfiprintf_r+0x130>
 8020c30:	fb0c 2101 	mla	r1, ip, r1, r2
 8020c34:	4604      	mov	r4, r0
 8020c36:	2301      	movs	r3, #1
 8020c38:	e7f0      	b.n	8020c1c <_svfiprintf_r+0x194>
 8020c3a:	ab03      	add	r3, sp, #12
 8020c3c:	9300      	str	r3, [sp, #0]
 8020c3e:	462a      	mov	r2, r5
 8020c40:	4b0f      	ldr	r3, [pc, #60]	; (8020c80 <_svfiprintf_r+0x1f8>)
 8020c42:	a904      	add	r1, sp, #16
 8020c44:	4638      	mov	r0, r7
 8020c46:	f3af 8000 	nop.w
 8020c4a:	1c42      	adds	r2, r0, #1
 8020c4c:	4606      	mov	r6, r0
 8020c4e:	d1d6      	bne.n	8020bfe <_svfiprintf_r+0x176>
 8020c50:	89ab      	ldrh	r3, [r5, #12]
 8020c52:	065b      	lsls	r3, r3, #25
 8020c54:	f53f af2c 	bmi.w	8020ab0 <_svfiprintf_r+0x28>
 8020c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020c5a:	b01d      	add	sp, #116	; 0x74
 8020c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c60:	ab03      	add	r3, sp, #12
 8020c62:	9300      	str	r3, [sp, #0]
 8020c64:	462a      	mov	r2, r5
 8020c66:	4b06      	ldr	r3, [pc, #24]	; (8020c80 <_svfiprintf_r+0x1f8>)
 8020c68:	a904      	add	r1, sp, #16
 8020c6a:	4638      	mov	r0, r7
 8020c6c:	f7ff f926 	bl	801febc <_printf_i>
 8020c70:	e7eb      	b.n	8020c4a <_svfiprintf_r+0x1c2>
 8020c72:	bf00      	nop
 8020c74:	08024cd4 	.word	0x08024cd4
 8020c78:	08024cde 	.word	0x08024cde
 8020c7c:	00000000 	.word	0x00000000
 8020c80:	080209d3 	.word	0x080209d3
 8020c84:	08024cda 	.word	0x08024cda

08020c88 <_read_r>:
 8020c88:	b538      	push	{r3, r4, r5, lr}
 8020c8a:	4d07      	ldr	r5, [pc, #28]	; (8020ca8 <_read_r+0x20>)
 8020c8c:	4604      	mov	r4, r0
 8020c8e:	4608      	mov	r0, r1
 8020c90:	4611      	mov	r1, r2
 8020c92:	2200      	movs	r2, #0
 8020c94:	602a      	str	r2, [r5, #0]
 8020c96:	461a      	mov	r2, r3
 8020c98:	f7e0 fcf6 	bl	8001688 <_read>
 8020c9c:	1c43      	adds	r3, r0, #1
 8020c9e:	d102      	bne.n	8020ca6 <_read_r+0x1e>
 8020ca0:	682b      	ldr	r3, [r5, #0]
 8020ca2:	b103      	cbz	r3, 8020ca6 <_read_r+0x1e>
 8020ca4:	6023      	str	r3, [r4, #0]
 8020ca6:	bd38      	pop	{r3, r4, r5, pc}
 8020ca8:	2401009c 	.word	0x2401009c

08020cac <_fstat_r>:
 8020cac:	b538      	push	{r3, r4, r5, lr}
 8020cae:	4d07      	ldr	r5, [pc, #28]	; (8020ccc <_fstat_r+0x20>)
 8020cb0:	2300      	movs	r3, #0
 8020cb2:	4604      	mov	r4, r0
 8020cb4:	4608      	mov	r0, r1
 8020cb6:	4611      	mov	r1, r2
 8020cb8:	602b      	str	r3, [r5, #0]
 8020cba:	f7e0 fd0e 	bl	80016da <_fstat>
 8020cbe:	1c43      	adds	r3, r0, #1
 8020cc0:	d102      	bne.n	8020cc8 <_fstat_r+0x1c>
 8020cc2:	682b      	ldr	r3, [r5, #0]
 8020cc4:	b103      	cbz	r3, 8020cc8 <_fstat_r+0x1c>
 8020cc6:	6023      	str	r3, [r4, #0]
 8020cc8:	bd38      	pop	{r3, r4, r5, pc}
 8020cca:	bf00      	nop
 8020ccc:	2401009c 	.word	0x2401009c

08020cd0 <_isatty_r>:
 8020cd0:	b538      	push	{r3, r4, r5, lr}
 8020cd2:	4d06      	ldr	r5, [pc, #24]	; (8020cec <_isatty_r+0x1c>)
 8020cd4:	2300      	movs	r3, #0
 8020cd6:	4604      	mov	r4, r0
 8020cd8:	4608      	mov	r0, r1
 8020cda:	602b      	str	r3, [r5, #0]
 8020cdc:	f7e0 fd0d 	bl	80016fa <_isatty>
 8020ce0:	1c43      	adds	r3, r0, #1
 8020ce2:	d102      	bne.n	8020cea <_isatty_r+0x1a>
 8020ce4:	682b      	ldr	r3, [r5, #0]
 8020ce6:	b103      	cbz	r3, 8020cea <_isatty_r+0x1a>
 8020ce8:	6023      	str	r3, [r4, #0]
 8020cea:	bd38      	pop	{r3, r4, r5, pc}
 8020cec:	2401009c 	.word	0x2401009c

08020cf0 <_malloc_usable_size_r>:
 8020cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020cf4:	1f18      	subs	r0, r3, #4
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	bfbc      	itt	lt
 8020cfa:	580b      	ldrlt	r3, [r1, r0]
 8020cfc:	18c0      	addlt	r0, r0, r3
 8020cfe:	4770      	bx	lr

08020d00 <_init>:
 8020d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d02:	bf00      	nop
 8020d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020d06:	bc08      	pop	{r3}
 8020d08:	469e      	mov	lr, r3
 8020d0a:	4770      	bx	lr

08020d0c <_fini>:
 8020d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d0e:	bf00      	nop
 8020d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020d12:	bc08      	pop	{r3}
 8020d14:	469e      	mov	lr, r3
 8020d16:	4770      	bx	lr
